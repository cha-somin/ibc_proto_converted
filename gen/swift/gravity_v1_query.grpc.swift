//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: gravity/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Gravity_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Gravity_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Gravity_V1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Gravity_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryParamsRequest, Gravity_V1_QueryParamsResponse>

  func currentValset(
    _ request: Gravity_V1_QueryCurrentValsetRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryCurrentValsetRequest, Gravity_V1_QueryCurrentValsetResponse>

  func valsetRequest(
    _ request: Gravity_V1_QueryValsetRequestRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryValsetRequestRequest, Gravity_V1_QueryValsetRequestResponse>

  func valsetConfirm(
    _ request: Gravity_V1_QueryValsetConfirmRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryValsetConfirmRequest, Gravity_V1_QueryValsetConfirmResponse>

  func valsetConfirmsByNonce(
    _ request: Gravity_V1_QueryValsetConfirmsByNonceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryValsetConfirmsByNonceRequest, Gravity_V1_QueryValsetConfirmsByNonceResponse>

  func lastValsetRequests(
    _ request: Gravity_V1_QueryLastValsetRequestsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryLastValsetRequestsRequest, Gravity_V1_QueryLastValsetRequestsResponse>

  func lastPendingValsetRequestByAddr(
    _ request: Gravity_V1_QueryLastPendingValsetRequestByAddrRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryLastPendingValsetRequestByAddrRequest, Gravity_V1_QueryLastPendingValsetRequestByAddrResponse>

  func lastPendingBatchRequestByAddr(
    _ request: Gravity_V1_QueryLastPendingBatchRequestByAddrRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryLastPendingBatchRequestByAddrRequest, Gravity_V1_QueryLastPendingBatchRequestByAddrResponse>

  func lastPendingLogicCallByAddr(
    _ request: Gravity_V1_QueryLastPendingLogicCallByAddrRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryLastPendingLogicCallByAddrRequest, Gravity_V1_QueryLastPendingLogicCallByAddrResponse>

  func lastEventNonceByAddr(
    _ request: Gravity_V1_QueryLastEventNonceByAddrRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryLastEventNonceByAddrRequest, Gravity_V1_QueryLastEventNonceByAddrResponse>

  func batchFees(
    _ request: Gravity_V1_QueryBatchFeeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryBatchFeeRequest, Gravity_V1_QueryBatchFeeResponse>

  func outgoingTxBatches(
    _ request: Gravity_V1_QueryOutgoingTxBatchesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryOutgoingTxBatchesRequest, Gravity_V1_QueryOutgoingTxBatchesResponse>

  func outgoingLogicCalls(
    _ request: Gravity_V1_QueryOutgoingLogicCallsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryOutgoingLogicCallsRequest, Gravity_V1_QueryOutgoingLogicCallsResponse>

  func batchRequestByNonce(
    _ request: Gravity_V1_QueryBatchRequestByNonceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryBatchRequestByNonceRequest, Gravity_V1_QueryBatchRequestByNonceResponse>

  func batchConfirms(
    _ request: Gravity_V1_QueryBatchConfirmsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryBatchConfirmsRequest, Gravity_V1_QueryBatchConfirmsResponse>

  func logicConfirms(
    _ request: Gravity_V1_QueryLogicConfirmsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryLogicConfirmsRequest, Gravity_V1_QueryLogicConfirmsResponse>

  func eRC20ToDenom(
    _ request: Gravity_V1_QueryERC20ToDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryERC20ToDenomRequest, Gravity_V1_QueryERC20ToDenomResponse>

  func denomToERC20(
    _ request: Gravity_V1_QueryDenomToERC20Request,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryDenomToERC20Request, Gravity_V1_QueryDenomToERC20Response>

  func getLastObservedEthBlock(
    _ request: Gravity_V1_QueryLastObservedEthBlockRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryLastObservedEthBlockRequest, Gravity_V1_QueryLastObservedEthBlockResponse>

  func getLastObservedEthNonce(
    _ request: Gravity_V1_QueryLastObservedEthNonceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryLastObservedEthNonceRequest, Gravity_V1_QueryLastObservedEthNonceResponse>

  func getAttestations(
    _ request: Gravity_V1_QueryAttestationsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryAttestationsRequest, Gravity_V1_QueryAttestationsResponse>

  func getDelegateKeyByValidator(
    _ request: Gravity_V1_QueryDelegateKeysByValidatorAddress,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryDelegateKeysByValidatorAddress, Gravity_V1_QueryDelegateKeysByValidatorAddressResponse>

  func getDelegateKeyByEth(
    _ request: Gravity_V1_QueryDelegateKeysByEthAddress,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryDelegateKeysByEthAddress, Gravity_V1_QueryDelegateKeysByEthAddressResponse>

  func getDelegateKeyByOrchestrator(
    _ request: Gravity_V1_QueryDelegateKeysByOrchestratorAddress,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryDelegateKeysByOrchestratorAddress, Gravity_V1_QueryDelegateKeysByOrchestratorAddressResponse>

  func getPendingSendToEth(
    _ request: Gravity_V1_QueryPendingSendToEth,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryPendingSendToEth, Gravity_V1_QueryPendingSendToEthResponse>

  func getPendingIbcAutoForwards(
    _ request: Gravity_V1_QueryPendingIbcAutoForwards,
    callOptions: CallOptions?
  ) -> UnaryCall<Gravity_V1_QueryPendingIbcAutoForwards, Gravity_V1_QueryPendingIbcAutoForwardsResponse>
}

extension Gravity_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "gravity.v1.Query"
  }

  /// Deployments queries deployments
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Gravity_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryParamsRequest, Gravity_V1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Unary call to CurrentValset
  ///
  /// - Parameters:
  ///   - request: Request to send to CurrentValset.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func currentValset(
    _ request: Gravity_V1_QueryCurrentValsetRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryCurrentValsetRequest, Gravity_V1_QueryCurrentValsetResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.currentValset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentValsetInterceptors() ?? []
    )
  }

  /// Unary call to ValsetRequest
  ///
  /// - Parameters:
  ///   - request: Request to send to ValsetRequest.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func valsetRequest(
    _ request: Gravity_V1_QueryValsetRequestRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryValsetRequestRequest, Gravity_V1_QueryValsetRequestResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.valsetRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetRequestInterceptors() ?? []
    )
  }

  /// Unary call to ValsetConfirm
  ///
  /// - Parameters:
  ///   - request: Request to send to ValsetConfirm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func valsetConfirm(
    _ request: Gravity_V1_QueryValsetConfirmRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryValsetConfirmRequest, Gravity_V1_QueryValsetConfirmResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.valsetConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? []
    )
  }

  /// Unary call to ValsetConfirmsByNonce
  ///
  /// - Parameters:
  ///   - request: Request to send to ValsetConfirmsByNonce.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func valsetConfirmsByNonce(
    _ request: Gravity_V1_QueryValsetConfirmsByNonceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryValsetConfirmsByNonceRequest, Gravity_V1_QueryValsetConfirmsByNonceResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.valsetConfirmsByNonce.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmsByNonceInterceptors() ?? []
    )
  }

  /// Unary call to LastValsetRequests
  ///
  /// - Parameters:
  ///   - request: Request to send to LastValsetRequests.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lastValsetRequests(
    _ request: Gravity_V1_QueryLastValsetRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryLastValsetRequestsRequest, Gravity_V1_QueryLastValsetRequestsResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastValsetRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastValsetRequestsInterceptors() ?? []
    )
  }

  /// Unary call to LastPendingValsetRequestByAddr
  ///
  /// - Parameters:
  ///   - request: Request to send to LastPendingValsetRequestByAddr.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lastPendingValsetRequestByAddr(
    _ request: Gravity_V1_QueryLastPendingValsetRequestByAddrRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryLastPendingValsetRequestByAddrRequest, Gravity_V1_QueryLastPendingValsetRequestByAddrResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastPendingValsetRequestByAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastPendingValsetRequestByAddrInterceptors() ?? []
    )
  }

  /// Unary call to LastPendingBatchRequestByAddr
  ///
  /// - Parameters:
  ///   - request: Request to send to LastPendingBatchRequestByAddr.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lastPendingBatchRequestByAddr(
    _ request: Gravity_V1_QueryLastPendingBatchRequestByAddrRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryLastPendingBatchRequestByAddrRequest, Gravity_V1_QueryLastPendingBatchRequestByAddrResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastPendingBatchRequestByAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastPendingBatchRequestByAddrInterceptors() ?? []
    )
  }

  /// Unary call to LastPendingLogicCallByAddr
  ///
  /// - Parameters:
  ///   - request: Request to send to LastPendingLogicCallByAddr.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lastPendingLogicCallByAddr(
    _ request: Gravity_V1_QueryLastPendingLogicCallByAddrRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryLastPendingLogicCallByAddrRequest, Gravity_V1_QueryLastPendingLogicCallByAddrResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastPendingLogicCallByAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastPendingLogicCallByAddrInterceptors() ?? []
    )
  }

  /// Unary call to LastEventNonceByAddr
  ///
  /// - Parameters:
  ///   - request: Request to send to LastEventNonceByAddr.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lastEventNonceByAddr(
    _ request: Gravity_V1_QueryLastEventNonceByAddrRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryLastEventNonceByAddrRequest, Gravity_V1_QueryLastEventNonceByAddrResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastEventNonceByAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastEventNonceByAddrInterceptors() ?? []
    )
  }

  /// Unary call to BatchFees
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchFees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchFees(
    _ request: Gravity_V1_QueryBatchFeeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryBatchFeeRequest, Gravity_V1_QueryBatchFeeResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.batchFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchFeesInterceptors() ?? []
    )
  }

  /// Unary call to OutgoingTxBatches
  ///
  /// - Parameters:
  ///   - request: Request to send to OutgoingTxBatches.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func outgoingTxBatches(
    _ request: Gravity_V1_QueryOutgoingTxBatchesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryOutgoingTxBatchesRequest, Gravity_V1_QueryOutgoingTxBatchesResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.outgoingTxBatches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOutgoingTxBatchesInterceptors() ?? []
    )
  }

  /// Unary call to OutgoingLogicCalls
  ///
  /// - Parameters:
  ///   - request: Request to send to OutgoingLogicCalls.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func outgoingLogicCalls(
    _ request: Gravity_V1_QueryOutgoingLogicCallsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryOutgoingLogicCallsRequest, Gravity_V1_QueryOutgoingLogicCallsResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.outgoingLogicCalls.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOutgoingLogicCallsInterceptors() ?? []
    )
  }

  /// Unary call to BatchRequestByNonce
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchRequestByNonce.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchRequestByNonce(
    _ request: Gravity_V1_QueryBatchRequestByNonceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryBatchRequestByNonceRequest, Gravity_V1_QueryBatchRequestByNonceResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.batchRequestByNonce.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchRequestByNonceInterceptors() ?? []
    )
  }

  /// Unary call to BatchConfirms
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchConfirms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func batchConfirms(
    _ request: Gravity_V1_QueryBatchConfirmsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryBatchConfirmsRequest, Gravity_V1_QueryBatchConfirmsResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.batchConfirms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchConfirmsInterceptors() ?? []
    )
  }

  /// Unary call to LogicConfirms
  ///
  /// - Parameters:
  ///   - request: Request to send to LogicConfirms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func logicConfirms(
    _ request: Gravity_V1_QueryLogicConfirmsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryLogicConfirmsRequest, Gravity_V1_QueryLogicConfirmsResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.logicConfirms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogicConfirmsInterceptors() ?? []
    )
  }

  /// Unary call to ERC20ToDenom
  ///
  /// - Parameters:
  ///   - request: Request to send to ERC20ToDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func eRC20ToDenom(
    _ request: Gravity_V1_QueryERC20ToDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryERC20ToDenomRequest, Gravity_V1_QueryERC20ToDenomResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.eRC20ToDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20ToDenomInterceptors() ?? []
    )
  }

  /// Unary call to DenomToERC20
  ///
  /// - Parameters:
  ///   - request: Request to send to DenomToERC20.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denomToERC20(
    _ request: Gravity_V1_QueryDenomToERC20Request,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryDenomToERC20Request, Gravity_V1_QueryDenomToERC20Response> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.denomToERC20.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomToERC20Interceptors() ?? []
    )
  }

  /// Unary call to GetLastObservedEthBlock
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLastObservedEthBlock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLastObservedEthBlock(
    _ request: Gravity_V1_QueryLastObservedEthBlockRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryLastObservedEthBlockRequest, Gravity_V1_QueryLastObservedEthBlockResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getLastObservedEthBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastObservedEthBlockInterceptors() ?? []
    )
  }

  /// Unary call to GetLastObservedEthNonce
  ///
  /// - Parameters:
  ///   - request: Request to send to GetLastObservedEthNonce.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getLastObservedEthNonce(
    _ request: Gravity_V1_QueryLastObservedEthNonceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryLastObservedEthNonceRequest, Gravity_V1_QueryLastObservedEthNonceResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getLastObservedEthNonce.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastObservedEthNonceInterceptors() ?? []
    )
  }

  /// Unary call to GetAttestations
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAttestations.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAttestations(
    _ request: Gravity_V1_QueryAttestationsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryAttestationsRequest, Gravity_V1_QueryAttestationsResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getAttestations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAttestationsInterceptors() ?? []
    )
  }

  /// Unary call to GetDelegateKeyByValidator
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDelegateKeyByValidator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDelegateKeyByValidator(
    _ request: Gravity_V1_QueryDelegateKeysByValidatorAddress,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryDelegateKeysByValidatorAddress, Gravity_V1_QueryDelegateKeysByValidatorAddressResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getDelegateKeyByValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegateKeyByValidatorInterceptors() ?? []
    )
  }

  /// Unary call to GetDelegateKeyByEth
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDelegateKeyByEth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDelegateKeyByEth(
    _ request: Gravity_V1_QueryDelegateKeysByEthAddress,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryDelegateKeysByEthAddress, Gravity_V1_QueryDelegateKeysByEthAddressResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getDelegateKeyByEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegateKeyByEthInterceptors() ?? []
    )
  }

  /// Unary call to GetDelegateKeyByOrchestrator
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDelegateKeyByOrchestrator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getDelegateKeyByOrchestrator(
    _ request: Gravity_V1_QueryDelegateKeysByOrchestratorAddress,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryDelegateKeysByOrchestratorAddress, Gravity_V1_QueryDelegateKeysByOrchestratorAddressResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getDelegateKeyByOrchestrator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegateKeyByOrchestratorInterceptors() ?? []
    )
  }

  /// Unary call to GetPendingSendToEth
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPendingSendToEth.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPendingSendToEth(
    _ request: Gravity_V1_QueryPendingSendToEth,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryPendingSendToEth, Gravity_V1_QueryPendingSendToEthResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getPendingSendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPendingSendToEthInterceptors() ?? []
    )
  }

  /// Unary call to GetPendingIbcAutoForwards
  ///
  /// - Parameters:
  ///   - request: Request to send to GetPendingIbcAutoForwards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getPendingIbcAutoForwards(
    _ request: Gravity_V1_QueryPendingIbcAutoForwards,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Gravity_V1_QueryPendingIbcAutoForwards, Gravity_V1_QueryPendingIbcAutoForwardsResponse> {
    return self.makeUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getPendingIbcAutoForwards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPendingIbcAutoForwardsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Gravity_V1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Gravity_V1_QueryNIOClient")
internal final class Gravity_V1_QueryClient: Gravity_V1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Gravity_V1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Gravity_V1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the gravity.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gravity_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Gravity_V1_QueryNIOClient: Gravity_V1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Gravity_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the gravity.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gravity_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Gravity_V1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Gravity_V1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Gravity_V1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryParamsRequest, Gravity_V1_QueryParamsResponse>

  func makeCurrentValsetCall(
    _ request: Gravity_V1_QueryCurrentValsetRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryCurrentValsetRequest, Gravity_V1_QueryCurrentValsetResponse>

  func makeValsetRequestCall(
    _ request: Gravity_V1_QueryValsetRequestRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryValsetRequestRequest, Gravity_V1_QueryValsetRequestResponse>

  func makeValsetConfirmCall(
    _ request: Gravity_V1_QueryValsetConfirmRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryValsetConfirmRequest, Gravity_V1_QueryValsetConfirmResponse>

  func makeValsetConfirmsByNonceCall(
    _ request: Gravity_V1_QueryValsetConfirmsByNonceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryValsetConfirmsByNonceRequest, Gravity_V1_QueryValsetConfirmsByNonceResponse>

  func makeLastValsetRequestsCall(
    _ request: Gravity_V1_QueryLastValsetRequestsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLastValsetRequestsRequest, Gravity_V1_QueryLastValsetRequestsResponse>

  func makeLastPendingValsetRequestByAddrCall(
    _ request: Gravity_V1_QueryLastPendingValsetRequestByAddrRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLastPendingValsetRequestByAddrRequest, Gravity_V1_QueryLastPendingValsetRequestByAddrResponse>

  func makeLastPendingBatchRequestByAddrCall(
    _ request: Gravity_V1_QueryLastPendingBatchRequestByAddrRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLastPendingBatchRequestByAddrRequest, Gravity_V1_QueryLastPendingBatchRequestByAddrResponse>

  func makeLastPendingLogicCallByAddrCall(
    _ request: Gravity_V1_QueryLastPendingLogicCallByAddrRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLastPendingLogicCallByAddrRequest, Gravity_V1_QueryLastPendingLogicCallByAddrResponse>

  func makeLastEventNonceByAddrCall(
    _ request: Gravity_V1_QueryLastEventNonceByAddrRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLastEventNonceByAddrRequest, Gravity_V1_QueryLastEventNonceByAddrResponse>

  func makeBatchFeesCall(
    _ request: Gravity_V1_QueryBatchFeeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryBatchFeeRequest, Gravity_V1_QueryBatchFeeResponse>

  func makeOutgoingTxBatchesCall(
    _ request: Gravity_V1_QueryOutgoingTxBatchesRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryOutgoingTxBatchesRequest, Gravity_V1_QueryOutgoingTxBatchesResponse>

  func makeOutgoingLogicCallsCall(
    _ request: Gravity_V1_QueryOutgoingLogicCallsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryOutgoingLogicCallsRequest, Gravity_V1_QueryOutgoingLogicCallsResponse>

  func makeBatchRequestByNonceCall(
    _ request: Gravity_V1_QueryBatchRequestByNonceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryBatchRequestByNonceRequest, Gravity_V1_QueryBatchRequestByNonceResponse>

  func makeBatchConfirmsCall(
    _ request: Gravity_V1_QueryBatchConfirmsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryBatchConfirmsRequest, Gravity_V1_QueryBatchConfirmsResponse>

  func makeLogicConfirmsCall(
    _ request: Gravity_V1_QueryLogicConfirmsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLogicConfirmsRequest, Gravity_V1_QueryLogicConfirmsResponse>

  func makeErc20ToDenomCall(
    _ request: Gravity_V1_QueryERC20ToDenomRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryERC20ToDenomRequest, Gravity_V1_QueryERC20ToDenomResponse>

  func makeDenomToErc20Call(
    _ request: Gravity_V1_QueryDenomToERC20Request,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryDenomToERC20Request, Gravity_V1_QueryDenomToERC20Response>

  func makeGetLastObservedEthBlockCall(
    _ request: Gravity_V1_QueryLastObservedEthBlockRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLastObservedEthBlockRequest, Gravity_V1_QueryLastObservedEthBlockResponse>

  func makeGetLastObservedEthNonceCall(
    _ request: Gravity_V1_QueryLastObservedEthNonceRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLastObservedEthNonceRequest, Gravity_V1_QueryLastObservedEthNonceResponse>

  func makeGetAttestationsCall(
    _ request: Gravity_V1_QueryAttestationsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryAttestationsRequest, Gravity_V1_QueryAttestationsResponse>

  func makeGetDelegateKeyByValidatorCall(
    _ request: Gravity_V1_QueryDelegateKeysByValidatorAddress,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryDelegateKeysByValidatorAddress, Gravity_V1_QueryDelegateKeysByValidatorAddressResponse>

  func makeGetDelegateKeyByEthCall(
    _ request: Gravity_V1_QueryDelegateKeysByEthAddress,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryDelegateKeysByEthAddress, Gravity_V1_QueryDelegateKeysByEthAddressResponse>

  func makeGetDelegateKeyByOrchestratorCall(
    _ request: Gravity_V1_QueryDelegateKeysByOrchestratorAddress,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryDelegateKeysByOrchestratorAddress, Gravity_V1_QueryDelegateKeysByOrchestratorAddressResponse>

  func makeGetPendingSendToEthCall(
    _ request: Gravity_V1_QueryPendingSendToEth,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryPendingSendToEth, Gravity_V1_QueryPendingSendToEthResponse>

  func makeGetPendingIbcAutoForwardsCall(
    _ request: Gravity_V1_QueryPendingIbcAutoForwards,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryPendingIbcAutoForwards, Gravity_V1_QueryPendingIbcAutoForwardsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Gravity_V1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Gravity_V1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Gravity_V1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Gravity_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryParamsRequest, Gravity_V1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeCurrentValsetCall(
    _ request: Gravity_V1_QueryCurrentValsetRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryCurrentValsetRequest, Gravity_V1_QueryCurrentValsetResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.currentValset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentValsetInterceptors() ?? []
    )
  }

  internal func makeValsetRequestCall(
    _ request: Gravity_V1_QueryValsetRequestRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryValsetRequestRequest, Gravity_V1_QueryValsetRequestResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.valsetRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetRequestInterceptors() ?? []
    )
  }

  internal func makeValsetConfirmCall(
    _ request: Gravity_V1_QueryValsetConfirmRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryValsetConfirmRequest, Gravity_V1_QueryValsetConfirmResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.valsetConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? []
    )
  }

  internal func makeValsetConfirmsByNonceCall(
    _ request: Gravity_V1_QueryValsetConfirmsByNonceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryValsetConfirmsByNonceRequest, Gravity_V1_QueryValsetConfirmsByNonceResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.valsetConfirmsByNonce.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmsByNonceInterceptors() ?? []
    )
  }

  internal func makeLastValsetRequestsCall(
    _ request: Gravity_V1_QueryLastValsetRequestsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLastValsetRequestsRequest, Gravity_V1_QueryLastValsetRequestsResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastValsetRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastValsetRequestsInterceptors() ?? []
    )
  }

  internal func makeLastPendingValsetRequestByAddrCall(
    _ request: Gravity_V1_QueryLastPendingValsetRequestByAddrRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLastPendingValsetRequestByAddrRequest, Gravity_V1_QueryLastPendingValsetRequestByAddrResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastPendingValsetRequestByAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastPendingValsetRequestByAddrInterceptors() ?? []
    )
  }

  internal func makeLastPendingBatchRequestByAddrCall(
    _ request: Gravity_V1_QueryLastPendingBatchRequestByAddrRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLastPendingBatchRequestByAddrRequest, Gravity_V1_QueryLastPendingBatchRequestByAddrResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastPendingBatchRequestByAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastPendingBatchRequestByAddrInterceptors() ?? []
    )
  }

  internal func makeLastPendingLogicCallByAddrCall(
    _ request: Gravity_V1_QueryLastPendingLogicCallByAddrRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLastPendingLogicCallByAddrRequest, Gravity_V1_QueryLastPendingLogicCallByAddrResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastPendingLogicCallByAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastPendingLogicCallByAddrInterceptors() ?? []
    )
  }

  internal func makeLastEventNonceByAddrCall(
    _ request: Gravity_V1_QueryLastEventNonceByAddrRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLastEventNonceByAddrRequest, Gravity_V1_QueryLastEventNonceByAddrResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastEventNonceByAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastEventNonceByAddrInterceptors() ?? []
    )
  }

  internal func makeBatchFeesCall(
    _ request: Gravity_V1_QueryBatchFeeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryBatchFeeRequest, Gravity_V1_QueryBatchFeeResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.batchFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchFeesInterceptors() ?? []
    )
  }

  internal func makeOutgoingTxBatchesCall(
    _ request: Gravity_V1_QueryOutgoingTxBatchesRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryOutgoingTxBatchesRequest, Gravity_V1_QueryOutgoingTxBatchesResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.outgoingTxBatches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOutgoingTxBatchesInterceptors() ?? []
    )
  }

  internal func makeOutgoingLogicCallsCall(
    _ request: Gravity_V1_QueryOutgoingLogicCallsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryOutgoingLogicCallsRequest, Gravity_V1_QueryOutgoingLogicCallsResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.outgoingLogicCalls.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOutgoingLogicCallsInterceptors() ?? []
    )
  }

  internal func makeBatchRequestByNonceCall(
    _ request: Gravity_V1_QueryBatchRequestByNonceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryBatchRequestByNonceRequest, Gravity_V1_QueryBatchRequestByNonceResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.batchRequestByNonce.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchRequestByNonceInterceptors() ?? []
    )
  }

  internal func makeBatchConfirmsCall(
    _ request: Gravity_V1_QueryBatchConfirmsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryBatchConfirmsRequest, Gravity_V1_QueryBatchConfirmsResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.batchConfirms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchConfirmsInterceptors() ?? []
    )
  }

  internal func makeLogicConfirmsCall(
    _ request: Gravity_V1_QueryLogicConfirmsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLogicConfirmsRequest, Gravity_V1_QueryLogicConfirmsResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.logicConfirms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogicConfirmsInterceptors() ?? []
    )
  }

  internal func makeErc20ToDenomCall(
    _ request: Gravity_V1_QueryERC20ToDenomRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryERC20ToDenomRequest, Gravity_V1_QueryERC20ToDenomResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.eRC20ToDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20ToDenomInterceptors() ?? []
    )
  }

  internal func makeDenomToErc20Call(
    _ request: Gravity_V1_QueryDenomToERC20Request,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryDenomToERC20Request, Gravity_V1_QueryDenomToERC20Response> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.denomToERC20.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomToERC20Interceptors() ?? []
    )
  }

  internal func makeGetLastObservedEthBlockCall(
    _ request: Gravity_V1_QueryLastObservedEthBlockRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLastObservedEthBlockRequest, Gravity_V1_QueryLastObservedEthBlockResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getLastObservedEthBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastObservedEthBlockInterceptors() ?? []
    )
  }

  internal func makeGetLastObservedEthNonceCall(
    _ request: Gravity_V1_QueryLastObservedEthNonceRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryLastObservedEthNonceRequest, Gravity_V1_QueryLastObservedEthNonceResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getLastObservedEthNonce.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastObservedEthNonceInterceptors() ?? []
    )
  }

  internal func makeGetAttestationsCall(
    _ request: Gravity_V1_QueryAttestationsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryAttestationsRequest, Gravity_V1_QueryAttestationsResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getAttestations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAttestationsInterceptors() ?? []
    )
  }

  internal func makeGetDelegateKeyByValidatorCall(
    _ request: Gravity_V1_QueryDelegateKeysByValidatorAddress,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryDelegateKeysByValidatorAddress, Gravity_V1_QueryDelegateKeysByValidatorAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getDelegateKeyByValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegateKeyByValidatorInterceptors() ?? []
    )
  }

  internal func makeGetDelegateKeyByEthCall(
    _ request: Gravity_V1_QueryDelegateKeysByEthAddress,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryDelegateKeysByEthAddress, Gravity_V1_QueryDelegateKeysByEthAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getDelegateKeyByEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegateKeyByEthInterceptors() ?? []
    )
  }

  internal func makeGetDelegateKeyByOrchestratorCall(
    _ request: Gravity_V1_QueryDelegateKeysByOrchestratorAddress,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryDelegateKeysByOrchestratorAddress, Gravity_V1_QueryDelegateKeysByOrchestratorAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getDelegateKeyByOrchestrator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegateKeyByOrchestratorInterceptors() ?? []
    )
  }

  internal func makeGetPendingSendToEthCall(
    _ request: Gravity_V1_QueryPendingSendToEth,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryPendingSendToEth, Gravity_V1_QueryPendingSendToEthResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getPendingSendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPendingSendToEthInterceptors() ?? []
    )
  }

  internal func makeGetPendingIbcAutoForwardsCall(
    _ request: Gravity_V1_QueryPendingIbcAutoForwards,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Gravity_V1_QueryPendingIbcAutoForwards, Gravity_V1_QueryPendingIbcAutoForwardsResponse> {
    return self.makeAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getPendingIbcAutoForwards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPendingIbcAutoForwardsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Gravity_V1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Gravity_V1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func currentValset(
    _ request: Gravity_V1_QueryCurrentValsetRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryCurrentValsetResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.currentValset.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCurrentValsetInterceptors() ?? []
    )
  }

  internal func valsetRequest(
    _ request: Gravity_V1_QueryValsetRequestRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryValsetRequestResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.valsetRequest.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetRequestInterceptors() ?? []
    )
  }

  internal func valsetConfirm(
    _ request: Gravity_V1_QueryValsetConfirmRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryValsetConfirmResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.valsetConfirm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? []
    )
  }

  internal func valsetConfirmsByNonce(
    _ request: Gravity_V1_QueryValsetConfirmsByNonceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryValsetConfirmsByNonceResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.valsetConfirmsByNonce.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeValsetConfirmsByNonceInterceptors() ?? []
    )
  }

  internal func lastValsetRequests(
    _ request: Gravity_V1_QueryLastValsetRequestsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryLastValsetRequestsResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastValsetRequests.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastValsetRequestsInterceptors() ?? []
    )
  }

  internal func lastPendingValsetRequestByAddr(
    _ request: Gravity_V1_QueryLastPendingValsetRequestByAddrRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryLastPendingValsetRequestByAddrResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastPendingValsetRequestByAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastPendingValsetRequestByAddrInterceptors() ?? []
    )
  }

  internal func lastPendingBatchRequestByAddr(
    _ request: Gravity_V1_QueryLastPendingBatchRequestByAddrRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryLastPendingBatchRequestByAddrResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastPendingBatchRequestByAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastPendingBatchRequestByAddrInterceptors() ?? []
    )
  }

  internal func lastPendingLogicCallByAddr(
    _ request: Gravity_V1_QueryLastPendingLogicCallByAddrRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryLastPendingLogicCallByAddrResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastPendingLogicCallByAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastPendingLogicCallByAddrInterceptors() ?? []
    )
  }

  internal func lastEventNonceByAddr(
    _ request: Gravity_V1_QueryLastEventNonceByAddrRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryLastEventNonceByAddrResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.lastEventNonceByAddr.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLastEventNonceByAddrInterceptors() ?? []
    )
  }

  internal func batchFees(
    _ request: Gravity_V1_QueryBatchFeeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryBatchFeeResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.batchFees.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchFeesInterceptors() ?? []
    )
  }

  internal func outgoingTxBatches(
    _ request: Gravity_V1_QueryOutgoingTxBatchesRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryOutgoingTxBatchesResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.outgoingTxBatches.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOutgoingTxBatchesInterceptors() ?? []
    )
  }

  internal func outgoingLogicCalls(
    _ request: Gravity_V1_QueryOutgoingLogicCallsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryOutgoingLogicCallsResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.outgoingLogicCalls.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOutgoingLogicCallsInterceptors() ?? []
    )
  }

  internal func batchRequestByNonce(
    _ request: Gravity_V1_QueryBatchRequestByNonceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryBatchRequestByNonceResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.batchRequestByNonce.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchRequestByNonceInterceptors() ?? []
    )
  }

  internal func batchConfirms(
    _ request: Gravity_V1_QueryBatchConfirmsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryBatchConfirmsResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.batchConfirms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBatchConfirmsInterceptors() ?? []
    )
  }

  internal func logicConfirms(
    _ request: Gravity_V1_QueryLogicConfirmsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryLogicConfirmsResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.logicConfirms.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogicConfirmsInterceptors() ?? []
    )
  }

  internal func eRC20ToDenom(
    _ request: Gravity_V1_QueryERC20ToDenomRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryERC20ToDenomResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.eRC20ToDenom.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeERC20ToDenomInterceptors() ?? []
    )
  }

  internal func denomToERC20(
    _ request: Gravity_V1_QueryDenomToERC20Request,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryDenomToERC20Response {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.denomToERC20.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDenomToERC20Interceptors() ?? []
    )
  }

  internal func getLastObservedEthBlock(
    _ request: Gravity_V1_QueryLastObservedEthBlockRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryLastObservedEthBlockResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getLastObservedEthBlock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastObservedEthBlockInterceptors() ?? []
    )
  }

  internal func getLastObservedEthNonce(
    _ request: Gravity_V1_QueryLastObservedEthNonceRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryLastObservedEthNonceResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getLastObservedEthNonce.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetLastObservedEthNonceInterceptors() ?? []
    )
  }

  internal func getAttestations(
    _ request: Gravity_V1_QueryAttestationsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryAttestationsResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getAttestations.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAttestationsInterceptors() ?? []
    )
  }

  internal func getDelegateKeyByValidator(
    _ request: Gravity_V1_QueryDelegateKeysByValidatorAddress,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryDelegateKeysByValidatorAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getDelegateKeyByValidator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegateKeyByValidatorInterceptors() ?? []
    )
  }

  internal func getDelegateKeyByEth(
    _ request: Gravity_V1_QueryDelegateKeysByEthAddress,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryDelegateKeysByEthAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getDelegateKeyByEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegateKeyByEthInterceptors() ?? []
    )
  }

  internal func getDelegateKeyByOrchestrator(
    _ request: Gravity_V1_QueryDelegateKeysByOrchestratorAddress,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryDelegateKeysByOrchestratorAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getDelegateKeyByOrchestrator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetDelegateKeyByOrchestratorInterceptors() ?? []
    )
  }

  internal func getPendingSendToEth(
    _ request: Gravity_V1_QueryPendingSendToEth,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryPendingSendToEthResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getPendingSendToEth.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPendingSendToEthInterceptors() ?? []
    )
  }

  internal func getPendingIbcAutoForwards(
    _ request: Gravity_V1_QueryPendingIbcAutoForwards,
    callOptions: CallOptions? = nil
  ) async throws -> Gravity_V1_QueryPendingIbcAutoForwardsResponse {
    return try await self.performAsyncUnaryCall(
      path: Gravity_V1_QueryClientMetadata.Methods.getPendingIbcAutoForwards.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetPendingIbcAutoForwardsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Gravity_V1_QueryAsyncClient: Gravity_V1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Gravity_V1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Gravity_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Gravity_V1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Gravity_V1_QueryParamsRequest, Gravity_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'currentValset'.
  func makeCurrentValsetInterceptors() -> [ClientInterceptor<Gravity_V1_QueryCurrentValsetRequest, Gravity_V1_QueryCurrentValsetResponse>]

  /// - Returns: Interceptors to use when invoking 'valsetRequest'.
  func makeValsetRequestInterceptors() -> [ClientInterceptor<Gravity_V1_QueryValsetRequestRequest, Gravity_V1_QueryValsetRequestResponse>]

  /// - Returns: Interceptors to use when invoking 'valsetConfirm'.
  func makeValsetConfirmInterceptors() -> [ClientInterceptor<Gravity_V1_QueryValsetConfirmRequest, Gravity_V1_QueryValsetConfirmResponse>]

  /// - Returns: Interceptors to use when invoking 'valsetConfirmsByNonce'.
  func makeValsetConfirmsByNonceInterceptors() -> [ClientInterceptor<Gravity_V1_QueryValsetConfirmsByNonceRequest, Gravity_V1_QueryValsetConfirmsByNonceResponse>]

  /// - Returns: Interceptors to use when invoking 'lastValsetRequests'.
  func makeLastValsetRequestsInterceptors() -> [ClientInterceptor<Gravity_V1_QueryLastValsetRequestsRequest, Gravity_V1_QueryLastValsetRequestsResponse>]

  /// - Returns: Interceptors to use when invoking 'lastPendingValsetRequestByAddr'.
  func makeLastPendingValsetRequestByAddrInterceptors() -> [ClientInterceptor<Gravity_V1_QueryLastPendingValsetRequestByAddrRequest, Gravity_V1_QueryLastPendingValsetRequestByAddrResponse>]

  /// - Returns: Interceptors to use when invoking 'lastPendingBatchRequestByAddr'.
  func makeLastPendingBatchRequestByAddrInterceptors() -> [ClientInterceptor<Gravity_V1_QueryLastPendingBatchRequestByAddrRequest, Gravity_V1_QueryLastPendingBatchRequestByAddrResponse>]

  /// - Returns: Interceptors to use when invoking 'lastPendingLogicCallByAddr'.
  func makeLastPendingLogicCallByAddrInterceptors() -> [ClientInterceptor<Gravity_V1_QueryLastPendingLogicCallByAddrRequest, Gravity_V1_QueryLastPendingLogicCallByAddrResponse>]

  /// - Returns: Interceptors to use when invoking 'lastEventNonceByAddr'.
  func makeLastEventNonceByAddrInterceptors() -> [ClientInterceptor<Gravity_V1_QueryLastEventNonceByAddrRequest, Gravity_V1_QueryLastEventNonceByAddrResponse>]

  /// - Returns: Interceptors to use when invoking 'batchFees'.
  func makeBatchFeesInterceptors() -> [ClientInterceptor<Gravity_V1_QueryBatchFeeRequest, Gravity_V1_QueryBatchFeeResponse>]

  /// - Returns: Interceptors to use when invoking 'outgoingTxBatches'.
  func makeOutgoingTxBatchesInterceptors() -> [ClientInterceptor<Gravity_V1_QueryOutgoingTxBatchesRequest, Gravity_V1_QueryOutgoingTxBatchesResponse>]

  /// - Returns: Interceptors to use when invoking 'outgoingLogicCalls'.
  func makeOutgoingLogicCallsInterceptors() -> [ClientInterceptor<Gravity_V1_QueryOutgoingLogicCallsRequest, Gravity_V1_QueryOutgoingLogicCallsResponse>]

  /// - Returns: Interceptors to use when invoking 'batchRequestByNonce'.
  func makeBatchRequestByNonceInterceptors() -> [ClientInterceptor<Gravity_V1_QueryBatchRequestByNonceRequest, Gravity_V1_QueryBatchRequestByNonceResponse>]

  /// - Returns: Interceptors to use when invoking 'batchConfirms'.
  func makeBatchConfirmsInterceptors() -> [ClientInterceptor<Gravity_V1_QueryBatchConfirmsRequest, Gravity_V1_QueryBatchConfirmsResponse>]

  /// - Returns: Interceptors to use when invoking 'logicConfirms'.
  func makeLogicConfirmsInterceptors() -> [ClientInterceptor<Gravity_V1_QueryLogicConfirmsRequest, Gravity_V1_QueryLogicConfirmsResponse>]

  /// - Returns: Interceptors to use when invoking 'eRC20ToDenom'.
  func makeERC20ToDenomInterceptors() -> [ClientInterceptor<Gravity_V1_QueryERC20ToDenomRequest, Gravity_V1_QueryERC20ToDenomResponse>]

  /// - Returns: Interceptors to use when invoking 'denomToERC20'.
  func makeDenomToERC20Interceptors() -> [ClientInterceptor<Gravity_V1_QueryDenomToERC20Request, Gravity_V1_QueryDenomToERC20Response>]

  /// - Returns: Interceptors to use when invoking 'getLastObservedEthBlock'.
  func makeGetLastObservedEthBlockInterceptors() -> [ClientInterceptor<Gravity_V1_QueryLastObservedEthBlockRequest, Gravity_V1_QueryLastObservedEthBlockResponse>]

  /// - Returns: Interceptors to use when invoking 'getLastObservedEthNonce'.
  func makeGetLastObservedEthNonceInterceptors() -> [ClientInterceptor<Gravity_V1_QueryLastObservedEthNonceRequest, Gravity_V1_QueryLastObservedEthNonceResponse>]

  /// - Returns: Interceptors to use when invoking 'getAttestations'.
  func makeGetAttestationsInterceptors() -> [ClientInterceptor<Gravity_V1_QueryAttestationsRequest, Gravity_V1_QueryAttestationsResponse>]

  /// - Returns: Interceptors to use when invoking 'getDelegateKeyByValidator'.
  func makeGetDelegateKeyByValidatorInterceptors() -> [ClientInterceptor<Gravity_V1_QueryDelegateKeysByValidatorAddress, Gravity_V1_QueryDelegateKeysByValidatorAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'getDelegateKeyByEth'.
  func makeGetDelegateKeyByEthInterceptors() -> [ClientInterceptor<Gravity_V1_QueryDelegateKeysByEthAddress, Gravity_V1_QueryDelegateKeysByEthAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'getDelegateKeyByOrchestrator'.
  func makeGetDelegateKeyByOrchestratorInterceptors() -> [ClientInterceptor<Gravity_V1_QueryDelegateKeysByOrchestratorAddress, Gravity_V1_QueryDelegateKeysByOrchestratorAddressResponse>]

  /// - Returns: Interceptors to use when invoking 'getPendingSendToEth'.
  func makeGetPendingSendToEthInterceptors() -> [ClientInterceptor<Gravity_V1_QueryPendingSendToEth, Gravity_V1_QueryPendingSendToEthResponse>]

  /// - Returns: Interceptors to use when invoking 'getPendingIbcAutoForwards'.
  func makeGetPendingIbcAutoForwardsInterceptors() -> [ClientInterceptor<Gravity_V1_QueryPendingIbcAutoForwards, Gravity_V1_QueryPendingIbcAutoForwardsResponse>]
}

internal enum Gravity_V1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "gravity.v1.Query",
    methods: [
      Gravity_V1_QueryClientMetadata.Methods.params,
      Gravity_V1_QueryClientMetadata.Methods.currentValset,
      Gravity_V1_QueryClientMetadata.Methods.valsetRequest,
      Gravity_V1_QueryClientMetadata.Methods.valsetConfirm,
      Gravity_V1_QueryClientMetadata.Methods.valsetConfirmsByNonce,
      Gravity_V1_QueryClientMetadata.Methods.lastValsetRequests,
      Gravity_V1_QueryClientMetadata.Methods.lastPendingValsetRequestByAddr,
      Gravity_V1_QueryClientMetadata.Methods.lastPendingBatchRequestByAddr,
      Gravity_V1_QueryClientMetadata.Methods.lastPendingLogicCallByAddr,
      Gravity_V1_QueryClientMetadata.Methods.lastEventNonceByAddr,
      Gravity_V1_QueryClientMetadata.Methods.batchFees,
      Gravity_V1_QueryClientMetadata.Methods.outgoingTxBatches,
      Gravity_V1_QueryClientMetadata.Methods.outgoingLogicCalls,
      Gravity_V1_QueryClientMetadata.Methods.batchRequestByNonce,
      Gravity_V1_QueryClientMetadata.Methods.batchConfirms,
      Gravity_V1_QueryClientMetadata.Methods.logicConfirms,
      Gravity_V1_QueryClientMetadata.Methods.eRC20ToDenom,
      Gravity_V1_QueryClientMetadata.Methods.denomToERC20,
      Gravity_V1_QueryClientMetadata.Methods.getLastObservedEthBlock,
      Gravity_V1_QueryClientMetadata.Methods.getLastObservedEthNonce,
      Gravity_V1_QueryClientMetadata.Methods.getAttestations,
      Gravity_V1_QueryClientMetadata.Methods.getDelegateKeyByValidator,
      Gravity_V1_QueryClientMetadata.Methods.getDelegateKeyByEth,
      Gravity_V1_QueryClientMetadata.Methods.getDelegateKeyByOrchestrator,
      Gravity_V1_QueryClientMetadata.Methods.getPendingSendToEth,
      Gravity_V1_QueryClientMetadata.Methods.getPendingIbcAutoForwards,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/gravity.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let currentValset = GRPCMethodDescriptor(
      name: "CurrentValset",
      path: "/gravity.v1.Query/CurrentValset",
      type: GRPCCallType.unary
    )

    internal static let valsetRequest = GRPCMethodDescriptor(
      name: "ValsetRequest",
      path: "/gravity.v1.Query/ValsetRequest",
      type: GRPCCallType.unary
    )

    internal static let valsetConfirm = GRPCMethodDescriptor(
      name: "ValsetConfirm",
      path: "/gravity.v1.Query/ValsetConfirm",
      type: GRPCCallType.unary
    )

    internal static let valsetConfirmsByNonce = GRPCMethodDescriptor(
      name: "ValsetConfirmsByNonce",
      path: "/gravity.v1.Query/ValsetConfirmsByNonce",
      type: GRPCCallType.unary
    )

    internal static let lastValsetRequests = GRPCMethodDescriptor(
      name: "LastValsetRequests",
      path: "/gravity.v1.Query/LastValsetRequests",
      type: GRPCCallType.unary
    )

    internal static let lastPendingValsetRequestByAddr = GRPCMethodDescriptor(
      name: "LastPendingValsetRequestByAddr",
      path: "/gravity.v1.Query/LastPendingValsetRequestByAddr",
      type: GRPCCallType.unary
    )

    internal static let lastPendingBatchRequestByAddr = GRPCMethodDescriptor(
      name: "LastPendingBatchRequestByAddr",
      path: "/gravity.v1.Query/LastPendingBatchRequestByAddr",
      type: GRPCCallType.unary
    )

    internal static let lastPendingLogicCallByAddr = GRPCMethodDescriptor(
      name: "LastPendingLogicCallByAddr",
      path: "/gravity.v1.Query/LastPendingLogicCallByAddr",
      type: GRPCCallType.unary
    )

    internal static let lastEventNonceByAddr = GRPCMethodDescriptor(
      name: "LastEventNonceByAddr",
      path: "/gravity.v1.Query/LastEventNonceByAddr",
      type: GRPCCallType.unary
    )

    internal static let batchFees = GRPCMethodDescriptor(
      name: "BatchFees",
      path: "/gravity.v1.Query/BatchFees",
      type: GRPCCallType.unary
    )

    internal static let outgoingTxBatches = GRPCMethodDescriptor(
      name: "OutgoingTxBatches",
      path: "/gravity.v1.Query/OutgoingTxBatches",
      type: GRPCCallType.unary
    )

    internal static let outgoingLogicCalls = GRPCMethodDescriptor(
      name: "OutgoingLogicCalls",
      path: "/gravity.v1.Query/OutgoingLogicCalls",
      type: GRPCCallType.unary
    )

    internal static let batchRequestByNonce = GRPCMethodDescriptor(
      name: "BatchRequestByNonce",
      path: "/gravity.v1.Query/BatchRequestByNonce",
      type: GRPCCallType.unary
    )

    internal static let batchConfirms = GRPCMethodDescriptor(
      name: "BatchConfirms",
      path: "/gravity.v1.Query/BatchConfirms",
      type: GRPCCallType.unary
    )

    internal static let logicConfirms = GRPCMethodDescriptor(
      name: "LogicConfirms",
      path: "/gravity.v1.Query/LogicConfirms",
      type: GRPCCallType.unary
    )

    internal static let eRC20ToDenom = GRPCMethodDescriptor(
      name: "ERC20ToDenom",
      path: "/gravity.v1.Query/ERC20ToDenom",
      type: GRPCCallType.unary
    )

    internal static let denomToERC20 = GRPCMethodDescriptor(
      name: "DenomToERC20",
      path: "/gravity.v1.Query/DenomToERC20",
      type: GRPCCallType.unary
    )

    internal static let getLastObservedEthBlock = GRPCMethodDescriptor(
      name: "GetLastObservedEthBlock",
      path: "/gravity.v1.Query/GetLastObservedEthBlock",
      type: GRPCCallType.unary
    )

    internal static let getLastObservedEthNonce = GRPCMethodDescriptor(
      name: "GetLastObservedEthNonce",
      path: "/gravity.v1.Query/GetLastObservedEthNonce",
      type: GRPCCallType.unary
    )

    internal static let getAttestations = GRPCMethodDescriptor(
      name: "GetAttestations",
      path: "/gravity.v1.Query/GetAttestations",
      type: GRPCCallType.unary
    )

    internal static let getDelegateKeyByValidator = GRPCMethodDescriptor(
      name: "GetDelegateKeyByValidator",
      path: "/gravity.v1.Query/GetDelegateKeyByValidator",
      type: GRPCCallType.unary
    )

    internal static let getDelegateKeyByEth = GRPCMethodDescriptor(
      name: "GetDelegateKeyByEth",
      path: "/gravity.v1.Query/GetDelegateKeyByEth",
      type: GRPCCallType.unary
    )

    internal static let getDelegateKeyByOrchestrator = GRPCMethodDescriptor(
      name: "GetDelegateKeyByOrchestrator",
      path: "/gravity.v1.Query/GetDelegateKeyByOrchestrator",
      type: GRPCCallType.unary
    )

    internal static let getPendingSendToEth = GRPCMethodDescriptor(
      name: "GetPendingSendToEth",
      path: "/gravity.v1.Query/GetPendingSendToEth",
      type: GRPCCallType.unary
    )

    internal static let getPendingIbcAutoForwards = GRPCMethodDescriptor(
      name: "GetPendingIbcAutoForwards",
      path: "/gravity.v1.Query/GetPendingIbcAutoForwards",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Gravity_V1_QueryProvider: CallHandlerProvider {
  var interceptors: Gravity_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Deployments queries deployments
  func params(request: Gravity_V1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryParamsResponse>

  func currentValset(request: Gravity_V1_QueryCurrentValsetRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryCurrentValsetResponse>

  func valsetRequest(request: Gravity_V1_QueryValsetRequestRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryValsetRequestResponse>

  func valsetConfirm(request: Gravity_V1_QueryValsetConfirmRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryValsetConfirmResponse>

  func valsetConfirmsByNonce(request: Gravity_V1_QueryValsetConfirmsByNonceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryValsetConfirmsByNonceResponse>

  func lastValsetRequests(request: Gravity_V1_QueryLastValsetRequestsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryLastValsetRequestsResponse>

  func lastPendingValsetRequestByAddr(request: Gravity_V1_QueryLastPendingValsetRequestByAddrRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryLastPendingValsetRequestByAddrResponse>

  func lastPendingBatchRequestByAddr(request: Gravity_V1_QueryLastPendingBatchRequestByAddrRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryLastPendingBatchRequestByAddrResponse>

  func lastPendingLogicCallByAddr(request: Gravity_V1_QueryLastPendingLogicCallByAddrRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryLastPendingLogicCallByAddrResponse>

  func lastEventNonceByAddr(request: Gravity_V1_QueryLastEventNonceByAddrRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryLastEventNonceByAddrResponse>

  func batchFees(request: Gravity_V1_QueryBatchFeeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryBatchFeeResponse>

  func outgoingTxBatches(request: Gravity_V1_QueryOutgoingTxBatchesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryOutgoingTxBatchesResponse>

  func outgoingLogicCalls(request: Gravity_V1_QueryOutgoingLogicCallsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryOutgoingLogicCallsResponse>

  func batchRequestByNonce(request: Gravity_V1_QueryBatchRequestByNonceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryBatchRequestByNonceResponse>

  func batchConfirms(request: Gravity_V1_QueryBatchConfirmsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryBatchConfirmsResponse>

  func logicConfirms(request: Gravity_V1_QueryLogicConfirmsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryLogicConfirmsResponse>

  func eRC20ToDenom(request: Gravity_V1_QueryERC20ToDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryERC20ToDenomResponse>

  func denomToERC20(request: Gravity_V1_QueryDenomToERC20Request, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryDenomToERC20Response>

  func getLastObservedEthBlock(request: Gravity_V1_QueryLastObservedEthBlockRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryLastObservedEthBlockResponse>

  func getLastObservedEthNonce(request: Gravity_V1_QueryLastObservedEthNonceRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryLastObservedEthNonceResponse>

  func getAttestations(request: Gravity_V1_QueryAttestationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryAttestationsResponse>

  func getDelegateKeyByValidator(request: Gravity_V1_QueryDelegateKeysByValidatorAddress, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryDelegateKeysByValidatorAddressResponse>

  func getDelegateKeyByEth(request: Gravity_V1_QueryDelegateKeysByEthAddress, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryDelegateKeysByEthAddressResponse>

  func getDelegateKeyByOrchestrator(request: Gravity_V1_QueryDelegateKeysByOrchestratorAddress, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryDelegateKeysByOrchestratorAddressResponse>

  func getPendingSendToEth(request: Gravity_V1_QueryPendingSendToEth, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryPendingSendToEthResponse>

  func getPendingIbcAutoForwards(request: Gravity_V1_QueryPendingIbcAutoForwards, context: StatusOnlyCallContext) -> EventLoopFuture<Gravity_V1_QueryPendingIbcAutoForwardsResponse>
}

extension Gravity_V1_QueryProvider {
  internal var serviceName: Substring {
    return Gravity_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "CurrentValset":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryCurrentValsetRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryCurrentValsetResponse>(),
        interceptors: self.interceptors?.makeCurrentValsetInterceptors() ?? [],
        userFunction: self.currentValset(request:context:)
      )

    case "ValsetRequest":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryValsetRequestRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryValsetRequestResponse>(),
        interceptors: self.interceptors?.makeValsetRequestInterceptors() ?? [],
        userFunction: self.valsetRequest(request:context:)
      )

    case "ValsetConfirm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryValsetConfirmRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryValsetConfirmResponse>(),
        interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? [],
        userFunction: self.valsetConfirm(request:context:)
      )

    case "ValsetConfirmsByNonce":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryValsetConfirmsByNonceRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryValsetConfirmsByNonceResponse>(),
        interceptors: self.interceptors?.makeValsetConfirmsByNonceInterceptors() ?? [],
        userFunction: self.valsetConfirmsByNonce(request:context:)
      )

    case "LastValsetRequests":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLastValsetRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLastValsetRequestsResponse>(),
        interceptors: self.interceptors?.makeLastValsetRequestsInterceptors() ?? [],
        userFunction: self.lastValsetRequests(request:context:)
      )

    case "LastPendingValsetRequestByAddr":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLastPendingValsetRequestByAddrRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLastPendingValsetRequestByAddrResponse>(),
        interceptors: self.interceptors?.makeLastPendingValsetRequestByAddrInterceptors() ?? [],
        userFunction: self.lastPendingValsetRequestByAddr(request:context:)
      )

    case "LastPendingBatchRequestByAddr":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLastPendingBatchRequestByAddrRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLastPendingBatchRequestByAddrResponse>(),
        interceptors: self.interceptors?.makeLastPendingBatchRequestByAddrInterceptors() ?? [],
        userFunction: self.lastPendingBatchRequestByAddr(request:context:)
      )

    case "LastPendingLogicCallByAddr":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLastPendingLogicCallByAddrRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLastPendingLogicCallByAddrResponse>(),
        interceptors: self.interceptors?.makeLastPendingLogicCallByAddrInterceptors() ?? [],
        userFunction: self.lastPendingLogicCallByAddr(request:context:)
      )

    case "LastEventNonceByAddr":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLastEventNonceByAddrRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLastEventNonceByAddrResponse>(),
        interceptors: self.interceptors?.makeLastEventNonceByAddrInterceptors() ?? [],
        userFunction: self.lastEventNonceByAddr(request:context:)
      )

    case "BatchFees":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryBatchFeeRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryBatchFeeResponse>(),
        interceptors: self.interceptors?.makeBatchFeesInterceptors() ?? [],
        userFunction: self.batchFees(request:context:)
      )

    case "OutgoingTxBatches":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryOutgoingTxBatchesRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryOutgoingTxBatchesResponse>(),
        interceptors: self.interceptors?.makeOutgoingTxBatchesInterceptors() ?? [],
        userFunction: self.outgoingTxBatches(request:context:)
      )

    case "OutgoingLogicCalls":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryOutgoingLogicCallsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryOutgoingLogicCallsResponse>(),
        interceptors: self.interceptors?.makeOutgoingLogicCallsInterceptors() ?? [],
        userFunction: self.outgoingLogicCalls(request:context:)
      )

    case "BatchRequestByNonce":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryBatchRequestByNonceRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryBatchRequestByNonceResponse>(),
        interceptors: self.interceptors?.makeBatchRequestByNonceInterceptors() ?? [],
        userFunction: self.batchRequestByNonce(request:context:)
      )

    case "BatchConfirms":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryBatchConfirmsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryBatchConfirmsResponse>(),
        interceptors: self.interceptors?.makeBatchConfirmsInterceptors() ?? [],
        userFunction: self.batchConfirms(request:context:)
      )

    case "LogicConfirms":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLogicConfirmsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLogicConfirmsResponse>(),
        interceptors: self.interceptors?.makeLogicConfirmsInterceptors() ?? [],
        userFunction: self.logicConfirms(request:context:)
      )

    case "ERC20ToDenom":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryERC20ToDenomRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryERC20ToDenomResponse>(),
        interceptors: self.interceptors?.makeERC20ToDenomInterceptors() ?? [],
        userFunction: self.eRC20ToDenom(request:context:)
      )

    case "DenomToERC20":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryDenomToERC20Request>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryDenomToERC20Response>(),
        interceptors: self.interceptors?.makeDenomToERC20Interceptors() ?? [],
        userFunction: self.denomToERC20(request:context:)
      )

    case "GetLastObservedEthBlock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLastObservedEthBlockRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLastObservedEthBlockResponse>(),
        interceptors: self.interceptors?.makeGetLastObservedEthBlockInterceptors() ?? [],
        userFunction: self.getLastObservedEthBlock(request:context:)
      )

    case "GetLastObservedEthNonce":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLastObservedEthNonceRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLastObservedEthNonceResponse>(),
        interceptors: self.interceptors?.makeGetLastObservedEthNonceInterceptors() ?? [],
        userFunction: self.getLastObservedEthNonce(request:context:)
      )

    case "GetAttestations":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryAttestationsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryAttestationsResponse>(),
        interceptors: self.interceptors?.makeGetAttestationsInterceptors() ?? [],
        userFunction: self.getAttestations(request:context:)
      )

    case "GetDelegateKeyByValidator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryDelegateKeysByValidatorAddress>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryDelegateKeysByValidatorAddressResponse>(),
        interceptors: self.interceptors?.makeGetDelegateKeyByValidatorInterceptors() ?? [],
        userFunction: self.getDelegateKeyByValidator(request:context:)
      )

    case "GetDelegateKeyByEth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryDelegateKeysByEthAddress>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryDelegateKeysByEthAddressResponse>(),
        interceptors: self.interceptors?.makeGetDelegateKeyByEthInterceptors() ?? [],
        userFunction: self.getDelegateKeyByEth(request:context:)
      )

    case "GetDelegateKeyByOrchestrator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryDelegateKeysByOrchestratorAddress>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryDelegateKeysByOrchestratorAddressResponse>(),
        interceptors: self.interceptors?.makeGetDelegateKeyByOrchestratorInterceptors() ?? [],
        userFunction: self.getDelegateKeyByOrchestrator(request:context:)
      )

    case "GetPendingSendToEth":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryPendingSendToEth>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryPendingSendToEthResponse>(),
        interceptors: self.interceptors?.makeGetPendingSendToEthInterceptors() ?? [],
        userFunction: self.getPendingSendToEth(request:context:)
      )

    case "GetPendingIbcAutoForwards":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryPendingIbcAutoForwards>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryPendingIbcAutoForwardsResponse>(),
        interceptors: self.interceptors?.makeGetPendingIbcAutoForwardsInterceptors() ?? [],
        userFunction: self.getPendingIbcAutoForwards(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Gravity_V1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Gravity_V1_QueryServerInterceptorFactoryProtocol? { get }

  /// Deployments queries deployments
  @Sendable func params(
    request: Gravity_V1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryParamsResponse

  @Sendable func currentValset(
    request: Gravity_V1_QueryCurrentValsetRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryCurrentValsetResponse

  @Sendable func valsetRequest(
    request: Gravity_V1_QueryValsetRequestRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryValsetRequestResponse

  @Sendable func valsetConfirm(
    request: Gravity_V1_QueryValsetConfirmRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryValsetConfirmResponse

  @Sendable func valsetConfirmsByNonce(
    request: Gravity_V1_QueryValsetConfirmsByNonceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryValsetConfirmsByNonceResponse

  @Sendable func lastValsetRequests(
    request: Gravity_V1_QueryLastValsetRequestsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryLastValsetRequestsResponse

  @Sendable func lastPendingValsetRequestByAddr(
    request: Gravity_V1_QueryLastPendingValsetRequestByAddrRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryLastPendingValsetRequestByAddrResponse

  @Sendable func lastPendingBatchRequestByAddr(
    request: Gravity_V1_QueryLastPendingBatchRequestByAddrRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryLastPendingBatchRequestByAddrResponse

  @Sendable func lastPendingLogicCallByAddr(
    request: Gravity_V1_QueryLastPendingLogicCallByAddrRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryLastPendingLogicCallByAddrResponse

  @Sendable func lastEventNonceByAddr(
    request: Gravity_V1_QueryLastEventNonceByAddrRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryLastEventNonceByAddrResponse

  @Sendable func batchFees(
    request: Gravity_V1_QueryBatchFeeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryBatchFeeResponse

  @Sendable func outgoingTxBatches(
    request: Gravity_V1_QueryOutgoingTxBatchesRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryOutgoingTxBatchesResponse

  @Sendable func outgoingLogicCalls(
    request: Gravity_V1_QueryOutgoingLogicCallsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryOutgoingLogicCallsResponse

  @Sendable func batchRequestByNonce(
    request: Gravity_V1_QueryBatchRequestByNonceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryBatchRequestByNonceResponse

  @Sendable func batchConfirms(
    request: Gravity_V1_QueryBatchConfirmsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryBatchConfirmsResponse

  @Sendable func logicConfirms(
    request: Gravity_V1_QueryLogicConfirmsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryLogicConfirmsResponse

  @Sendable func eRC20ToDenom(
    request: Gravity_V1_QueryERC20ToDenomRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryERC20ToDenomResponse

  @Sendable func denomToERC20(
    request: Gravity_V1_QueryDenomToERC20Request,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryDenomToERC20Response

  @Sendable func getLastObservedEthBlock(
    request: Gravity_V1_QueryLastObservedEthBlockRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryLastObservedEthBlockResponse

  @Sendable func getLastObservedEthNonce(
    request: Gravity_V1_QueryLastObservedEthNonceRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryLastObservedEthNonceResponse

  @Sendable func getAttestations(
    request: Gravity_V1_QueryAttestationsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryAttestationsResponse

  @Sendable func getDelegateKeyByValidator(
    request: Gravity_V1_QueryDelegateKeysByValidatorAddress,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryDelegateKeysByValidatorAddressResponse

  @Sendable func getDelegateKeyByEth(
    request: Gravity_V1_QueryDelegateKeysByEthAddress,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryDelegateKeysByEthAddressResponse

  @Sendable func getDelegateKeyByOrchestrator(
    request: Gravity_V1_QueryDelegateKeysByOrchestratorAddress,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryDelegateKeysByOrchestratorAddressResponse

  @Sendable func getPendingSendToEth(
    request: Gravity_V1_QueryPendingSendToEth,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryPendingSendToEthResponse

  @Sendable func getPendingIbcAutoForwards(
    request: Gravity_V1_QueryPendingIbcAutoForwards,
    context: GRPCAsyncServerCallContext
  ) async throws -> Gravity_V1_QueryPendingIbcAutoForwardsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Gravity_V1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Gravity_V1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Gravity_V1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Gravity_V1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "CurrentValset":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryCurrentValsetRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryCurrentValsetResponse>(),
        interceptors: self.interceptors?.makeCurrentValsetInterceptors() ?? [],
        wrapping: self.currentValset(request:context:)
      )

    case "ValsetRequest":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryValsetRequestRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryValsetRequestResponse>(),
        interceptors: self.interceptors?.makeValsetRequestInterceptors() ?? [],
        wrapping: self.valsetRequest(request:context:)
      )

    case "ValsetConfirm":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryValsetConfirmRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryValsetConfirmResponse>(),
        interceptors: self.interceptors?.makeValsetConfirmInterceptors() ?? [],
        wrapping: self.valsetConfirm(request:context:)
      )

    case "ValsetConfirmsByNonce":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryValsetConfirmsByNonceRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryValsetConfirmsByNonceResponse>(),
        interceptors: self.interceptors?.makeValsetConfirmsByNonceInterceptors() ?? [],
        wrapping: self.valsetConfirmsByNonce(request:context:)
      )

    case "LastValsetRequests":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLastValsetRequestsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLastValsetRequestsResponse>(),
        interceptors: self.interceptors?.makeLastValsetRequestsInterceptors() ?? [],
        wrapping: self.lastValsetRequests(request:context:)
      )

    case "LastPendingValsetRequestByAddr":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLastPendingValsetRequestByAddrRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLastPendingValsetRequestByAddrResponse>(),
        interceptors: self.interceptors?.makeLastPendingValsetRequestByAddrInterceptors() ?? [],
        wrapping: self.lastPendingValsetRequestByAddr(request:context:)
      )

    case "LastPendingBatchRequestByAddr":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLastPendingBatchRequestByAddrRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLastPendingBatchRequestByAddrResponse>(),
        interceptors: self.interceptors?.makeLastPendingBatchRequestByAddrInterceptors() ?? [],
        wrapping: self.lastPendingBatchRequestByAddr(request:context:)
      )

    case "LastPendingLogicCallByAddr":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLastPendingLogicCallByAddrRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLastPendingLogicCallByAddrResponse>(),
        interceptors: self.interceptors?.makeLastPendingLogicCallByAddrInterceptors() ?? [],
        wrapping: self.lastPendingLogicCallByAddr(request:context:)
      )

    case "LastEventNonceByAddr":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLastEventNonceByAddrRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLastEventNonceByAddrResponse>(),
        interceptors: self.interceptors?.makeLastEventNonceByAddrInterceptors() ?? [],
        wrapping: self.lastEventNonceByAddr(request:context:)
      )

    case "BatchFees":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryBatchFeeRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryBatchFeeResponse>(),
        interceptors: self.interceptors?.makeBatchFeesInterceptors() ?? [],
        wrapping: self.batchFees(request:context:)
      )

    case "OutgoingTxBatches":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryOutgoingTxBatchesRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryOutgoingTxBatchesResponse>(),
        interceptors: self.interceptors?.makeOutgoingTxBatchesInterceptors() ?? [],
        wrapping: self.outgoingTxBatches(request:context:)
      )

    case "OutgoingLogicCalls":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryOutgoingLogicCallsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryOutgoingLogicCallsResponse>(),
        interceptors: self.interceptors?.makeOutgoingLogicCallsInterceptors() ?? [],
        wrapping: self.outgoingLogicCalls(request:context:)
      )

    case "BatchRequestByNonce":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryBatchRequestByNonceRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryBatchRequestByNonceResponse>(),
        interceptors: self.interceptors?.makeBatchRequestByNonceInterceptors() ?? [],
        wrapping: self.batchRequestByNonce(request:context:)
      )

    case "BatchConfirms":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryBatchConfirmsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryBatchConfirmsResponse>(),
        interceptors: self.interceptors?.makeBatchConfirmsInterceptors() ?? [],
        wrapping: self.batchConfirms(request:context:)
      )

    case "LogicConfirms":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLogicConfirmsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLogicConfirmsResponse>(),
        interceptors: self.interceptors?.makeLogicConfirmsInterceptors() ?? [],
        wrapping: self.logicConfirms(request:context:)
      )

    case "ERC20ToDenom":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryERC20ToDenomRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryERC20ToDenomResponse>(),
        interceptors: self.interceptors?.makeERC20ToDenomInterceptors() ?? [],
        wrapping: self.eRC20ToDenom(request:context:)
      )

    case "DenomToERC20":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryDenomToERC20Request>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryDenomToERC20Response>(),
        interceptors: self.interceptors?.makeDenomToERC20Interceptors() ?? [],
        wrapping: self.denomToERC20(request:context:)
      )

    case "GetLastObservedEthBlock":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLastObservedEthBlockRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLastObservedEthBlockResponse>(),
        interceptors: self.interceptors?.makeGetLastObservedEthBlockInterceptors() ?? [],
        wrapping: self.getLastObservedEthBlock(request:context:)
      )

    case "GetLastObservedEthNonce":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryLastObservedEthNonceRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryLastObservedEthNonceResponse>(),
        interceptors: self.interceptors?.makeGetLastObservedEthNonceInterceptors() ?? [],
        wrapping: self.getLastObservedEthNonce(request:context:)
      )

    case "GetAttestations":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryAttestationsRequest>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryAttestationsResponse>(),
        interceptors: self.interceptors?.makeGetAttestationsInterceptors() ?? [],
        wrapping: self.getAttestations(request:context:)
      )

    case "GetDelegateKeyByValidator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryDelegateKeysByValidatorAddress>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryDelegateKeysByValidatorAddressResponse>(),
        interceptors: self.interceptors?.makeGetDelegateKeyByValidatorInterceptors() ?? [],
        wrapping: self.getDelegateKeyByValidator(request:context:)
      )

    case "GetDelegateKeyByEth":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryDelegateKeysByEthAddress>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryDelegateKeysByEthAddressResponse>(),
        interceptors: self.interceptors?.makeGetDelegateKeyByEthInterceptors() ?? [],
        wrapping: self.getDelegateKeyByEth(request:context:)
      )

    case "GetDelegateKeyByOrchestrator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryDelegateKeysByOrchestratorAddress>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryDelegateKeysByOrchestratorAddressResponse>(),
        interceptors: self.interceptors?.makeGetDelegateKeyByOrchestratorInterceptors() ?? [],
        wrapping: self.getDelegateKeyByOrchestrator(request:context:)
      )

    case "GetPendingSendToEth":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryPendingSendToEth>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryPendingSendToEthResponse>(),
        interceptors: self.interceptors?.makeGetPendingSendToEthInterceptors() ?? [],
        wrapping: self.getPendingSendToEth(request:context:)
      )

    case "GetPendingIbcAutoForwards":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Gravity_V1_QueryPendingIbcAutoForwards>(),
        responseSerializer: ProtobufSerializer<Gravity_V1_QueryPendingIbcAutoForwardsResponse>(),
        interceptors: self.interceptors?.makeGetPendingIbcAutoForwardsInterceptors() ?? [],
        wrapping: self.getPendingIbcAutoForwards(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Gravity_V1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Gravity_V1_QueryParamsRequest, Gravity_V1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'currentValset'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCurrentValsetInterceptors() -> [ServerInterceptor<Gravity_V1_QueryCurrentValsetRequest, Gravity_V1_QueryCurrentValsetResponse>]

  /// - Returns: Interceptors to use when handling 'valsetRequest'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValsetRequestInterceptors() -> [ServerInterceptor<Gravity_V1_QueryValsetRequestRequest, Gravity_V1_QueryValsetRequestResponse>]

  /// - Returns: Interceptors to use when handling 'valsetConfirm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValsetConfirmInterceptors() -> [ServerInterceptor<Gravity_V1_QueryValsetConfirmRequest, Gravity_V1_QueryValsetConfirmResponse>]

  /// - Returns: Interceptors to use when handling 'valsetConfirmsByNonce'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeValsetConfirmsByNonceInterceptors() -> [ServerInterceptor<Gravity_V1_QueryValsetConfirmsByNonceRequest, Gravity_V1_QueryValsetConfirmsByNonceResponse>]

  /// - Returns: Interceptors to use when handling 'lastValsetRequests'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLastValsetRequestsInterceptors() -> [ServerInterceptor<Gravity_V1_QueryLastValsetRequestsRequest, Gravity_V1_QueryLastValsetRequestsResponse>]

  /// - Returns: Interceptors to use when handling 'lastPendingValsetRequestByAddr'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLastPendingValsetRequestByAddrInterceptors() -> [ServerInterceptor<Gravity_V1_QueryLastPendingValsetRequestByAddrRequest, Gravity_V1_QueryLastPendingValsetRequestByAddrResponse>]

  /// - Returns: Interceptors to use when handling 'lastPendingBatchRequestByAddr'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLastPendingBatchRequestByAddrInterceptors() -> [ServerInterceptor<Gravity_V1_QueryLastPendingBatchRequestByAddrRequest, Gravity_V1_QueryLastPendingBatchRequestByAddrResponse>]

  /// - Returns: Interceptors to use when handling 'lastPendingLogicCallByAddr'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLastPendingLogicCallByAddrInterceptors() -> [ServerInterceptor<Gravity_V1_QueryLastPendingLogicCallByAddrRequest, Gravity_V1_QueryLastPendingLogicCallByAddrResponse>]

  /// - Returns: Interceptors to use when handling 'lastEventNonceByAddr'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLastEventNonceByAddrInterceptors() -> [ServerInterceptor<Gravity_V1_QueryLastEventNonceByAddrRequest, Gravity_V1_QueryLastEventNonceByAddrResponse>]

  /// - Returns: Interceptors to use when handling 'batchFees'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchFeesInterceptors() -> [ServerInterceptor<Gravity_V1_QueryBatchFeeRequest, Gravity_V1_QueryBatchFeeResponse>]

  /// - Returns: Interceptors to use when handling 'outgoingTxBatches'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOutgoingTxBatchesInterceptors() -> [ServerInterceptor<Gravity_V1_QueryOutgoingTxBatchesRequest, Gravity_V1_QueryOutgoingTxBatchesResponse>]

  /// - Returns: Interceptors to use when handling 'outgoingLogicCalls'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeOutgoingLogicCallsInterceptors() -> [ServerInterceptor<Gravity_V1_QueryOutgoingLogicCallsRequest, Gravity_V1_QueryOutgoingLogicCallsResponse>]

  /// - Returns: Interceptors to use when handling 'batchRequestByNonce'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchRequestByNonceInterceptors() -> [ServerInterceptor<Gravity_V1_QueryBatchRequestByNonceRequest, Gravity_V1_QueryBatchRequestByNonceResponse>]

  /// - Returns: Interceptors to use when handling 'batchConfirms'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBatchConfirmsInterceptors() -> [ServerInterceptor<Gravity_V1_QueryBatchConfirmsRequest, Gravity_V1_QueryBatchConfirmsResponse>]

  /// - Returns: Interceptors to use when handling 'logicConfirms'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLogicConfirmsInterceptors() -> [ServerInterceptor<Gravity_V1_QueryLogicConfirmsRequest, Gravity_V1_QueryLogicConfirmsResponse>]

  /// - Returns: Interceptors to use when handling 'eRC20ToDenom'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeERC20ToDenomInterceptors() -> [ServerInterceptor<Gravity_V1_QueryERC20ToDenomRequest, Gravity_V1_QueryERC20ToDenomResponse>]

  /// - Returns: Interceptors to use when handling 'denomToERC20'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDenomToERC20Interceptors() -> [ServerInterceptor<Gravity_V1_QueryDenomToERC20Request, Gravity_V1_QueryDenomToERC20Response>]

  /// - Returns: Interceptors to use when handling 'getLastObservedEthBlock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLastObservedEthBlockInterceptors() -> [ServerInterceptor<Gravity_V1_QueryLastObservedEthBlockRequest, Gravity_V1_QueryLastObservedEthBlockResponse>]

  /// - Returns: Interceptors to use when handling 'getLastObservedEthNonce'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetLastObservedEthNonceInterceptors() -> [ServerInterceptor<Gravity_V1_QueryLastObservedEthNonceRequest, Gravity_V1_QueryLastObservedEthNonceResponse>]

  /// - Returns: Interceptors to use when handling 'getAttestations'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAttestationsInterceptors() -> [ServerInterceptor<Gravity_V1_QueryAttestationsRequest, Gravity_V1_QueryAttestationsResponse>]

  /// - Returns: Interceptors to use when handling 'getDelegateKeyByValidator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDelegateKeyByValidatorInterceptors() -> [ServerInterceptor<Gravity_V1_QueryDelegateKeysByValidatorAddress, Gravity_V1_QueryDelegateKeysByValidatorAddressResponse>]

  /// - Returns: Interceptors to use when handling 'getDelegateKeyByEth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDelegateKeyByEthInterceptors() -> [ServerInterceptor<Gravity_V1_QueryDelegateKeysByEthAddress, Gravity_V1_QueryDelegateKeysByEthAddressResponse>]

  /// - Returns: Interceptors to use when handling 'getDelegateKeyByOrchestrator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetDelegateKeyByOrchestratorInterceptors() -> [ServerInterceptor<Gravity_V1_QueryDelegateKeysByOrchestratorAddress, Gravity_V1_QueryDelegateKeysByOrchestratorAddressResponse>]

  /// - Returns: Interceptors to use when handling 'getPendingSendToEth'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPendingSendToEthInterceptors() -> [ServerInterceptor<Gravity_V1_QueryPendingSendToEth, Gravity_V1_QueryPendingSendToEthResponse>]

  /// - Returns: Interceptors to use when handling 'getPendingIbcAutoForwards'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetPendingIbcAutoForwardsInterceptors() -> [ServerInterceptor<Gravity_V1_QueryPendingIbcAutoForwards, Gravity_V1_QueryPendingIbcAutoForwardsResponse>]
}

internal enum Gravity_V1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "gravity.v1.Query",
    methods: [
      Gravity_V1_QueryServerMetadata.Methods.params,
      Gravity_V1_QueryServerMetadata.Methods.currentValset,
      Gravity_V1_QueryServerMetadata.Methods.valsetRequest,
      Gravity_V1_QueryServerMetadata.Methods.valsetConfirm,
      Gravity_V1_QueryServerMetadata.Methods.valsetConfirmsByNonce,
      Gravity_V1_QueryServerMetadata.Methods.lastValsetRequests,
      Gravity_V1_QueryServerMetadata.Methods.lastPendingValsetRequestByAddr,
      Gravity_V1_QueryServerMetadata.Methods.lastPendingBatchRequestByAddr,
      Gravity_V1_QueryServerMetadata.Methods.lastPendingLogicCallByAddr,
      Gravity_V1_QueryServerMetadata.Methods.lastEventNonceByAddr,
      Gravity_V1_QueryServerMetadata.Methods.batchFees,
      Gravity_V1_QueryServerMetadata.Methods.outgoingTxBatches,
      Gravity_V1_QueryServerMetadata.Methods.outgoingLogicCalls,
      Gravity_V1_QueryServerMetadata.Methods.batchRequestByNonce,
      Gravity_V1_QueryServerMetadata.Methods.batchConfirms,
      Gravity_V1_QueryServerMetadata.Methods.logicConfirms,
      Gravity_V1_QueryServerMetadata.Methods.eRC20ToDenom,
      Gravity_V1_QueryServerMetadata.Methods.denomToERC20,
      Gravity_V1_QueryServerMetadata.Methods.getLastObservedEthBlock,
      Gravity_V1_QueryServerMetadata.Methods.getLastObservedEthNonce,
      Gravity_V1_QueryServerMetadata.Methods.getAttestations,
      Gravity_V1_QueryServerMetadata.Methods.getDelegateKeyByValidator,
      Gravity_V1_QueryServerMetadata.Methods.getDelegateKeyByEth,
      Gravity_V1_QueryServerMetadata.Methods.getDelegateKeyByOrchestrator,
      Gravity_V1_QueryServerMetadata.Methods.getPendingSendToEth,
      Gravity_V1_QueryServerMetadata.Methods.getPendingIbcAutoForwards,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/gravity.v1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let currentValset = GRPCMethodDescriptor(
      name: "CurrentValset",
      path: "/gravity.v1.Query/CurrentValset",
      type: GRPCCallType.unary
    )

    internal static let valsetRequest = GRPCMethodDescriptor(
      name: "ValsetRequest",
      path: "/gravity.v1.Query/ValsetRequest",
      type: GRPCCallType.unary
    )

    internal static let valsetConfirm = GRPCMethodDescriptor(
      name: "ValsetConfirm",
      path: "/gravity.v1.Query/ValsetConfirm",
      type: GRPCCallType.unary
    )

    internal static let valsetConfirmsByNonce = GRPCMethodDescriptor(
      name: "ValsetConfirmsByNonce",
      path: "/gravity.v1.Query/ValsetConfirmsByNonce",
      type: GRPCCallType.unary
    )

    internal static let lastValsetRequests = GRPCMethodDescriptor(
      name: "LastValsetRequests",
      path: "/gravity.v1.Query/LastValsetRequests",
      type: GRPCCallType.unary
    )

    internal static let lastPendingValsetRequestByAddr = GRPCMethodDescriptor(
      name: "LastPendingValsetRequestByAddr",
      path: "/gravity.v1.Query/LastPendingValsetRequestByAddr",
      type: GRPCCallType.unary
    )

    internal static let lastPendingBatchRequestByAddr = GRPCMethodDescriptor(
      name: "LastPendingBatchRequestByAddr",
      path: "/gravity.v1.Query/LastPendingBatchRequestByAddr",
      type: GRPCCallType.unary
    )

    internal static let lastPendingLogicCallByAddr = GRPCMethodDescriptor(
      name: "LastPendingLogicCallByAddr",
      path: "/gravity.v1.Query/LastPendingLogicCallByAddr",
      type: GRPCCallType.unary
    )

    internal static let lastEventNonceByAddr = GRPCMethodDescriptor(
      name: "LastEventNonceByAddr",
      path: "/gravity.v1.Query/LastEventNonceByAddr",
      type: GRPCCallType.unary
    )

    internal static let batchFees = GRPCMethodDescriptor(
      name: "BatchFees",
      path: "/gravity.v1.Query/BatchFees",
      type: GRPCCallType.unary
    )

    internal static let outgoingTxBatches = GRPCMethodDescriptor(
      name: "OutgoingTxBatches",
      path: "/gravity.v1.Query/OutgoingTxBatches",
      type: GRPCCallType.unary
    )

    internal static let outgoingLogicCalls = GRPCMethodDescriptor(
      name: "OutgoingLogicCalls",
      path: "/gravity.v1.Query/OutgoingLogicCalls",
      type: GRPCCallType.unary
    )

    internal static let batchRequestByNonce = GRPCMethodDescriptor(
      name: "BatchRequestByNonce",
      path: "/gravity.v1.Query/BatchRequestByNonce",
      type: GRPCCallType.unary
    )

    internal static let batchConfirms = GRPCMethodDescriptor(
      name: "BatchConfirms",
      path: "/gravity.v1.Query/BatchConfirms",
      type: GRPCCallType.unary
    )

    internal static let logicConfirms = GRPCMethodDescriptor(
      name: "LogicConfirms",
      path: "/gravity.v1.Query/LogicConfirms",
      type: GRPCCallType.unary
    )

    internal static let eRC20ToDenom = GRPCMethodDescriptor(
      name: "ERC20ToDenom",
      path: "/gravity.v1.Query/ERC20ToDenom",
      type: GRPCCallType.unary
    )

    internal static let denomToERC20 = GRPCMethodDescriptor(
      name: "DenomToERC20",
      path: "/gravity.v1.Query/DenomToERC20",
      type: GRPCCallType.unary
    )

    internal static let getLastObservedEthBlock = GRPCMethodDescriptor(
      name: "GetLastObservedEthBlock",
      path: "/gravity.v1.Query/GetLastObservedEthBlock",
      type: GRPCCallType.unary
    )

    internal static let getLastObservedEthNonce = GRPCMethodDescriptor(
      name: "GetLastObservedEthNonce",
      path: "/gravity.v1.Query/GetLastObservedEthNonce",
      type: GRPCCallType.unary
    )

    internal static let getAttestations = GRPCMethodDescriptor(
      name: "GetAttestations",
      path: "/gravity.v1.Query/GetAttestations",
      type: GRPCCallType.unary
    )

    internal static let getDelegateKeyByValidator = GRPCMethodDescriptor(
      name: "GetDelegateKeyByValidator",
      path: "/gravity.v1.Query/GetDelegateKeyByValidator",
      type: GRPCCallType.unary
    )

    internal static let getDelegateKeyByEth = GRPCMethodDescriptor(
      name: "GetDelegateKeyByEth",
      path: "/gravity.v1.Query/GetDelegateKeyByEth",
      type: GRPCCallType.unary
    )

    internal static let getDelegateKeyByOrchestrator = GRPCMethodDescriptor(
      name: "GetDelegateKeyByOrchestrator",
      path: "/gravity.v1.Query/GetDelegateKeyByOrchestrator",
      type: GRPCCallType.unary
    )

    internal static let getPendingSendToEth = GRPCMethodDescriptor(
      name: "GetPendingSendToEth",
      path: "/gravity.v1.Query/GetPendingSendToEth",
      type: GRPCCallType.unary
    )

    internal static let getPendingIbcAutoForwards = GRPCMethodDescriptor(
      name: "GetPendingIbcAutoForwards",
      path: "/gravity.v1.Query/GetPendingIbcAutoForwards",
      type: GRPCCallType.unary
    )
  }
}
