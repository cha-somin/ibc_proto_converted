// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: panacea/oracle/v2alpha2/oracle.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// OracleStatus enumerates the status of oracle.
enum Panacea_Oracle_V2alpha2_OracleStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// ORACLE_STATUS_UNSPECIFIED
  case unspecified // = 0

  /// ACTIVE defines the oracle status that is active
  case active // = 1

  /// JAILED defines the oracle status that has been jailed
  case jailed // = 2

  /// UPGRADING defines the oracle status that is being upgraded to new version of oracle
  case upgrading // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .active
    case 2: self = .jailed
    case 3: self = .upgrading
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .active: return 1
    case .jailed: return 2
    case .upgrading: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Panacea_Oracle_V2alpha2_OracleStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Panacea_Oracle_V2alpha2_OracleStatus] = [
    .unspecified,
    .active,
    .jailed,
    .upgrading,
  ]
}

#endif  // swift(>=4.2)

/// OracleRegistrationStatus enumerates the status of OracleRegistration.
enum Panacea_Oracle_V2alpha2_OracleRegistrationStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// ORACLE_REGISTRATION_STATUS_UNSPECIFIED
  case unspecified // = 0

  /// VOTING_PERIOD defines the status of OracleRegistration in voting period.
  case votingPeriod // = 1

  /// PASSED defines the status of OracleRegistration passed.
  case passed // = 2

  /// PASSED defines the status of OracleRegistration rejected.
  case rejected // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .votingPeriod
    case 2: self = .passed
    case 3: self = .rejected
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .votingPeriod: return 1
    case .passed: return 2
    case .rejected: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Panacea_Oracle_V2alpha2_OracleRegistrationStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Panacea_Oracle_V2alpha2_OracleRegistrationStatus] = [
    .unspecified,
    .votingPeriod,
    .passed,
    .rejected,
  ]
}

#endif  // swift(>=4.2)

/// VoteOption enumerates the vote option.
enum Panacea_Oracle_V2alpha2_VoteOption: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// VOTE_OPTION_UNSPECIFIED
  case unspecified // = 0

  /// VOTE_OPTION_VALID
  case yes // = 1

  /// VOTE_OPTION_INVALID
  case no // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .yes
    case 2: self = .no
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .yes: return 1
    case .no: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Panacea_Oracle_V2alpha2_VoteOption: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Panacea_Oracle_V2alpha2_VoteOption] = [
    .unspecified,
    .yes,
    .no,
  ]
}

#endif  // swift(>=4.2)

/// OracleRegistrationType defines of oracle registration type.
enum Panacea_Oracle_V2alpha2_OracleRegistrationType: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// UNSPECIFIED type
  case unspecified // = 0

  /// For oracles newly added
  case new // = 1

  /// For oracles to be upgraded
  case upgrade // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .new
    case 2: self = .upgrade
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .new: return 1
    case .upgrade: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Panacea_Oracle_V2alpha2_OracleRegistrationType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Panacea_Oracle_V2alpha2_OracleRegistrationType] = [
    .unspecified,
    .new,
    .upgrade,
  ]
}

#endif  // swift(>=4.2)

/// Oracle defines a detail of oracle.
struct Panacea_Oracle_V2alpha2_Oracle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var status: Panacea_Oracle_V2alpha2_OracleStatus = .unspecified

  /// in block
  var uptime: UInt64 = 0

  var jailedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _jailedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_jailedAt = newValue}
  }
  /// Returns true if `jailedAt` has been explicitly set.
  var hasJailedAt: Bool {return self._jailedAt != nil}
  /// Clears the value of `jailedAt`. Subsequent reads from it will return its default value.
  mutating func clearJailedAt() {self._jailedAt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _jailedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// OracleRegistration defines the detailed states of the registration of oracle.
struct Panacea_Oracle_V2alpha2_OracleRegistration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uniqueID: String {
    get {return _storage._uniqueID}
    set {_uniqueStorage()._uniqueID = newValue}
  }

  var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  /// Node public key is a pair with a node private key which is generated in SGX by each oracle.
  /// This key is used to share the oracle private key from other oracles.
  var nodePubKey: Data {
    get {return _storage._nodePubKey}
    set {_uniqueStorage()._nodePubKey = newValue}
  }

  /// Anyone can validate that the node key pair is generated in SGX using this node key remote report.
  var nodePubKeyRemoteReport: Data {
    get {return _storage._nodePubKeyRemoteReport}
    set {_uniqueStorage()._nodePubKeyRemoteReport = newValue}
  }

  /// The trusted block info is required for light client.
  /// Other oracle can validate whether the oracle set correct trusted block info.
  var trustedBlockHeight: Int64 {
    get {return _storage._trustedBlockHeight}
    set {_uniqueStorage()._trustedBlockHeight = newValue}
  }

  var trustedBlockHash: Data {
    get {return _storage._trustedBlockHash}
    set {_uniqueStorage()._trustedBlockHash = newValue}
  }

  /// Encrypted oracle private key by node public key, which can only be decrypted in SGX securely.
  var encryptedOraclePrivKey: Data {
    get {return _storage._encryptedOraclePrivKey}
    set {_uniqueStorage()._encryptedOraclePrivKey = newValue}
  }

  /// The status of OracleRegistration.
  var status: Panacea_Oracle_V2alpha2_OracleRegistrationStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  var votingPeriod: Panacea_Oracle_V2alpha2_VotingPeriod {
    get {return _storage._votingPeriod ?? Panacea_Oracle_V2alpha2_VotingPeriod()}
    set {_uniqueStorage()._votingPeriod = newValue}
  }
  /// Returns true if `votingPeriod` has been explicitly set.
  var hasVotingPeriod: Bool {return _storage._votingPeriod != nil}
  /// Clears the value of `votingPeriod`. Subsequent reads from it will return its default value.
  mutating func clearVotingPeriod() {_uniqueStorage()._votingPeriod = nil}

  var tallyResult: Panacea_Oracle_V2alpha2_TallyResult {
    get {return _storage._tallyResult ?? Panacea_Oracle_V2alpha2_TallyResult()}
    set {_uniqueStorage()._tallyResult = newValue}
  }
  /// Returns true if `tallyResult` has been explicitly set.
  var hasTallyResult: Bool {return _storage._tallyResult != nil}
  /// Clears the value of `tallyResult`. Subsequent reads from it will return its default value.
  mutating func clearTallyResult() {_uniqueStorage()._tallyResult = nil}

  /// Nonce required for AES256-GCM encryption
  var nonce: Data {
    get {return _storage._nonce}
    set {_uniqueStorage()._nonce = newValue}
  }

  /// Type of registration through which path
  var registrationType: Panacea_Oracle_V2alpha2_OracleRegistrationType {
    get {return _storage._registrationType}
    set {_uniqueStorage()._registrationType = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// TallyResult defines the tally result of the votes.
struct Panacea_Oracle_V2alpha2_TallyResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var yes: String = String()

  var no: String = String()

  /// Votes yes, but the value is different with the consensus value
  var invalidYes: [Panacea_Oracle_V2alpha2_ConsensusTally] = []

  var total: String = String()

  /// The consensus value between oracles
  var consensusValue: Data = Data()

  var validVoters: [Panacea_Oracle_V2alpha2_VoterInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// VoterInfo defines the voter info
struct Panacea_Oracle_V2alpha2_VoterInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var voterAddress: String = String()

  var votingPower: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ConsensusTally defines the consensus value and the vote amount.
struct Panacea_Oracle_V2alpha2_ConsensusTally {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var consensusValue: Data = Data()

  var votingAmount: String = String()

  var voterInfo: [Panacea_Oracle_V2alpha2_VoterInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// VotingPeriod defines the voting period of transactions governed by oracles.
struct Panacea_Oracle_V2alpha2_VotingPeriod {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var votingStartTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _votingStartTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_votingStartTime = newValue}
  }
  /// Returns true if `votingStartTime` has been explicitly set.
  var hasVotingStartTime: Bool {return self._votingStartTime != nil}
  /// Clears the value of `votingStartTime`. Subsequent reads from it will return its default value.
  mutating func clearVotingStartTime() {self._votingStartTime = nil}

  var votingEndTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _votingEndTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_votingEndTime = newValue}
  }
  /// Returns true if `votingEndTime` has been explicitly set.
  var hasVotingEndTime: Bool {return self._votingEndTime != nil}
  /// Clears the value of `votingEndTime`. Subsequent reads from it will return its default value.
  mutating func clearVotingEndTime() {self._votingEndTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _votingStartTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _votingEndTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// OracleRegistrationVote defines the vote for oracle registration
struct Panacea_Oracle_V2alpha2_OracleRegistrationVote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uniqueID: String = String()

  var voterUniqueID: String = String()

  var voterAddress: String = String()

  var votingTargetAddress: String = String()

  var voteOption: Panacea_Oracle_V2alpha2_VoteOption = .unspecified

  var encryptedOraclePrivKey: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// UpgradeOracleInfo defines the info of oracle upgrade, which includes the target height of upgrade and unique ID of the new version of oracle
struct Panacea_Oracle_V2alpha2_OracleUpgradeInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uniqueID: String = String()

  var height: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Panacea_Oracle_V2alpha2_OracleStatus: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_OracleRegistrationStatus: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_VoteOption: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_OracleRegistrationType: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_Oracle: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_OracleRegistration: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_TallyResult: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_VoterInfo: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_ConsensusTally: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_VotingPeriod: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_OracleRegistrationVote: @unchecked Sendable {}
extension Panacea_Oracle_V2alpha2_OracleUpgradeInfo: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "panacea.oracle.v2alpha2"

extension Panacea_Oracle_V2alpha2_OracleStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ORACLE_STATUS_UNSPECIFIED"),
    1: .same(proto: "ORACLE_STATUS_ACTIVE"),
    2: .same(proto: "ORACLE_STATUS_JAILED"),
    3: .same(proto: "ORACLE_STATUS_UPGRADING"),
  ]
}

extension Panacea_Oracle_V2alpha2_OracleRegistrationStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ORACLE_REGISTRATION_STATUS_UNSPECIFIED"),
    1: .same(proto: "ORACLE_REGISTRATION_STATUS_VOTING_PERIOD"),
    2: .same(proto: "ORACLE_REGISTRATION_STATUS_PASSED"),
    3: .same(proto: "ORACLE_REGISTRATION_STATUS_REJECTED"),
  ]
}

extension Panacea_Oracle_V2alpha2_VoteOption: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VOTE_OPTION_UNSPECIFIED"),
    1: .same(proto: "VOTE_OPTION_YES"),
    2: .same(proto: "VOTE_OPTION_NO"),
  ]
}

extension Panacea_Oracle_V2alpha2_OracleRegistrationType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ORACLE_REGISTRATION_TYPE_UNSPECIFIED"),
    1: .same(proto: "ORACLE_REGISTRATION_TYPE_NEW"),
    2: .same(proto: "ORACLE_REGISTRATION_TYPE_UPGRADE"),
  ]
}

extension Panacea_Oracle_V2alpha2_Oracle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Oracle"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "status"),
    3: .same(proto: "uptime"),
    4: .standard(proto: "jailed_at"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.uptime) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._jailedAt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if self.status != .unspecified {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.uptime != 0 {
      try visitor.visitSingularUInt64Field(value: self.uptime, fieldNumber: 3)
    }
    try { if let v = self._jailedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Oracle_V2alpha2_Oracle, rhs: Panacea_Oracle_V2alpha2_Oracle) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.status != rhs.status {return false}
    if lhs.uptime != rhs.uptime {return false}
    if lhs._jailedAt != rhs._jailedAt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Oracle_V2alpha2_OracleRegistration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OracleRegistration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unique_id"),
    2: .same(proto: "address"),
    3: .standard(proto: "node_pub_key"),
    4: .standard(proto: "node_pub_key_remote_report"),
    5: .standard(proto: "trusted_block_height"),
    6: .standard(proto: "trusted_block_hash"),
    7: .standard(proto: "encrypted_oracle_priv_key"),
    8: .same(proto: "status"),
    9: .standard(proto: "voting_period"),
    10: .standard(proto: "tally_result"),
    11: .same(proto: "nonce"),
    12: .standard(proto: "registration_type"),
  ]

  fileprivate class _StorageClass {
    var _uniqueID: String = String()
    var _address: String = String()
    var _nodePubKey: Data = Data()
    var _nodePubKeyRemoteReport: Data = Data()
    var _trustedBlockHeight: Int64 = 0
    var _trustedBlockHash: Data = Data()
    var _encryptedOraclePrivKey: Data = Data()
    var _status: Panacea_Oracle_V2alpha2_OracleRegistrationStatus = .unspecified
    var _votingPeriod: Panacea_Oracle_V2alpha2_VotingPeriod? = nil
    var _tallyResult: Panacea_Oracle_V2alpha2_TallyResult? = nil
    var _nonce: Data = Data()
    var _registrationType: Panacea_Oracle_V2alpha2_OracleRegistrationType = .unspecified

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uniqueID = source._uniqueID
      _address = source._address
      _nodePubKey = source._nodePubKey
      _nodePubKeyRemoteReport = source._nodePubKeyRemoteReport
      _trustedBlockHeight = source._trustedBlockHeight
      _trustedBlockHash = source._trustedBlockHash
      _encryptedOraclePrivKey = source._encryptedOraclePrivKey
      _status = source._status
      _votingPeriod = source._votingPeriod
      _tallyResult = source._tallyResult
      _nonce = source._nonce
      _registrationType = source._registrationType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._uniqueID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._address) }()
        case 3: try { try decoder.decodeSingularBytesField(value: &_storage._nodePubKey) }()
        case 4: try { try decoder.decodeSingularBytesField(value: &_storage._nodePubKeyRemoteReport) }()
        case 5: try { try decoder.decodeSingularInt64Field(value: &_storage._trustedBlockHeight) }()
        case 6: try { try decoder.decodeSingularBytesField(value: &_storage._trustedBlockHash) }()
        case 7: try { try decoder.decodeSingularBytesField(value: &_storage._encryptedOraclePrivKey) }()
        case 8: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._votingPeriod) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._tallyResult) }()
        case 11: try { try decoder.decodeSingularBytesField(value: &_storage._nonce) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._registrationType) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._uniqueID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uniqueID, fieldNumber: 1)
      }
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 2)
      }
      if !_storage._nodePubKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._nodePubKey, fieldNumber: 3)
      }
      if !_storage._nodePubKeyRemoteReport.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._nodePubKeyRemoteReport, fieldNumber: 4)
      }
      if _storage._trustedBlockHeight != 0 {
        try visitor.visitSingularInt64Field(value: _storage._trustedBlockHeight, fieldNumber: 5)
      }
      if !_storage._trustedBlockHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._trustedBlockHash, fieldNumber: 6)
      }
      if !_storage._encryptedOraclePrivKey.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._encryptedOraclePrivKey, fieldNumber: 7)
      }
      if _storage._status != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 8)
      }
      try { if let v = _storage._votingPeriod {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._tallyResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if !_storage._nonce.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._nonce, fieldNumber: 11)
      }
      if _storage._registrationType != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._registrationType, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Oracle_V2alpha2_OracleRegistration, rhs: Panacea_Oracle_V2alpha2_OracleRegistration) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uniqueID != rhs_storage._uniqueID {return false}
        if _storage._address != rhs_storage._address {return false}
        if _storage._nodePubKey != rhs_storage._nodePubKey {return false}
        if _storage._nodePubKeyRemoteReport != rhs_storage._nodePubKeyRemoteReport {return false}
        if _storage._trustedBlockHeight != rhs_storage._trustedBlockHeight {return false}
        if _storage._trustedBlockHash != rhs_storage._trustedBlockHash {return false}
        if _storage._encryptedOraclePrivKey != rhs_storage._encryptedOraclePrivKey {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._votingPeriod != rhs_storage._votingPeriod {return false}
        if _storage._tallyResult != rhs_storage._tallyResult {return false}
        if _storage._nonce != rhs_storage._nonce {return false}
        if _storage._registrationType != rhs_storage._registrationType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Oracle_V2alpha2_TallyResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TallyResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "yes"),
    2: .same(proto: "no"),
    3: .standard(proto: "invalid_yes"),
    4: .same(proto: "total"),
    5: .standard(proto: "consensus_value"),
    6: .standard(proto: "valid_voters"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.yes) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.no) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.invalidYes) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.total) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.consensusValue) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.validVoters) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.yes.isEmpty {
      try visitor.visitSingularStringField(value: self.yes, fieldNumber: 1)
    }
    if !self.no.isEmpty {
      try visitor.visitSingularStringField(value: self.no, fieldNumber: 2)
    }
    if !self.invalidYes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.invalidYes, fieldNumber: 3)
    }
    if !self.total.isEmpty {
      try visitor.visitSingularStringField(value: self.total, fieldNumber: 4)
    }
    if !self.consensusValue.isEmpty {
      try visitor.visitSingularBytesField(value: self.consensusValue, fieldNumber: 5)
    }
    if !self.validVoters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.validVoters, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Oracle_V2alpha2_TallyResult, rhs: Panacea_Oracle_V2alpha2_TallyResult) -> Bool {
    if lhs.yes != rhs.yes {return false}
    if lhs.no != rhs.no {return false}
    if lhs.invalidYes != rhs.invalidYes {return false}
    if lhs.total != rhs.total {return false}
    if lhs.consensusValue != rhs.consensusValue {return false}
    if lhs.validVoters != rhs.validVoters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Oracle_V2alpha2_VoterInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VoterInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "voter_address"),
    2: .standard(proto: "voting_power"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.voterAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.votingPower) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.voterAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.voterAddress, fieldNumber: 1)
    }
    if !self.votingPower.isEmpty {
      try visitor.visitSingularStringField(value: self.votingPower, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Oracle_V2alpha2_VoterInfo, rhs: Panacea_Oracle_V2alpha2_VoterInfo) -> Bool {
    if lhs.voterAddress != rhs.voterAddress {return false}
    if lhs.votingPower != rhs.votingPower {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Oracle_V2alpha2_ConsensusTally: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConsensusTally"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consensus_value"),
    2: .standard(proto: "voting_amount"),
    3: .standard(proto: "voter_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.consensusValue) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.votingAmount) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.voterInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.consensusValue.isEmpty {
      try visitor.visitSingularBytesField(value: self.consensusValue, fieldNumber: 1)
    }
    if !self.votingAmount.isEmpty {
      try visitor.visitSingularStringField(value: self.votingAmount, fieldNumber: 2)
    }
    if !self.voterInfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.voterInfo, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Oracle_V2alpha2_ConsensusTally, rhs: Panacea_Oracle_V2alpha2_ConsensusTally) -> Bool {
    if lhs.consensusValue != rhs.consensusValue {return false}
    if lhs.votingAmount != rhs.votingAmount {return false}
    if lhs.voterInfo != rhs.voterInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Oracle_V2alpha2_VotingPeriod: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VotingPeriod"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "voting_start_time"),
    2: .standard(proto: "voting_end_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._votingStartTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._votingEndTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._votingStartTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._votingEndTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Oracle_V2alpha2_VotingPeriod, rhs: Panacea_Oracle_V2alpha2_VotingPeriod) -> Bool {
    if lhs._votingStartTime != rhs._votingStartTime {return false}
    if lhs._votingEndTime != rhs._votingEndTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Oracle_V2alpha2_OracleRegistrationVote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OracleRegistrationVote"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unique_id"),
    2: .standard(proto: "voter_unique_id"),
    3: .standard(proto: "voter_address"),
    4: .standard(proto: "voting_target_address"),
    5: .standard(proto: "vote_option"),
    6: .standard(proto: "encrypted_oracle_priv_key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uniqueID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.voterUniqueID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.voterAddress) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.votingTargetAddress) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.voteOption) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.encryptedOraclePrivKey) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uniqueID.isEmpty {
      try visitor.visitSingularStringField(value: self.uniqueID, fieldNumber: 1)
    }
    if !self.voterUniqueID.isEmpty {
      try visitor.visitSingularStringField(value: self.voterUniqueID, fieldNumber: 2)
    }
    if !self.voterAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.voterAddress, fieldNumber: 3)
    }
    if !self.votingTargetAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.votingTargetAddress, fieldNumber: 4)
    }
    if self.voteOption != .unspecified {
      try visitor.visitSingularEnumField(value: self.voteOption, fieldNumber: 5)
    }
    if !self.encryptedOraclePrivKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.encryptedOraclePrivKey, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Oracle_V2alpha2_OracleRegistrationVote, rhs: Panacea_Oracle_V2alpha2_OracleRegistrationVote) -> Bool {
    if lhs.uniqueID != rhs.uniqueID {return false}
    if lhs.voterUniqueID != rhs.voterUniqueID {return false}
    if lhs.voterAddress != rhs.voterAddress {return false}
    if lhs.votingTargetAddress != rhs.votingTargetAddress {return false}
    if lhs.voteOption != rhs.voteOption {return false}
    if lhs.encryptedOraclePrivKey != rhs.encryptedOraclePrivKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Oracle_V2alpha2_OracleUpgradeInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OracleUpgradeInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unique_id"),
    2: .same(proto: "height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uniqueID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.height) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uniqueID.isEmpty {
      try visitor.visitSingularStringField(value: self.uniqueID, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Oracle_V2alpha2_OracleUpgradeInfo, rhs: Panacea_Oracle_V2alpha2_OracleUpgradeInfo) -> Bool {
    if lhs.uniqueID != rhs.uniqueID {return false}
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
