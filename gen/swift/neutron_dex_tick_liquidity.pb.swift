// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: neutron/dex/tick_liquidity.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Neutron_Dex_TickLiquidity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var liquidity: Neutron_Dex_TickLiquidity.OneOf_Liquidity? = nil

  var poolReserves: Neutron_Dex_PoolReserves {
    get {
      if case .poolReserves(let v)? = liquidity {return v}
      return Neutron_Dex_PoolReserves()
    }
    set {liquidity = .poolReserves(newValue)}
  }

  var limitOrderTranche: Neutron_Dex_LimitOrderTranche {
    get {
      if case .limitOrderTranche(let v)? = liquidity {return v}
      return Neutron_Dex_LimitOrderTranche()
    }
    set {liquidity = .limitOrderTranche(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Liquidity: Equatable {
    case poolReserves(Neutron_Dex_PoolReserves)
    case limitOrderTranche(Neutron_Dex_LimitOrderTranche)

  #if !swift(>=4.1)
    static func ==(lhs: Neutron_Dex_TickLiquidity.OneOf_Liquidity, rhs: Neutron_Dex_TickLiquidity.OneOf_Liquidity) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.poolReserves, .poolReserves): return {
        guard case .poolReserves(let l) = lhs, case .poolReserves(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.limitOrderTranche, .limitOrderTranche): return {
        guard case .limitOrderTranche(let l) = lhs, case .limitOrderTranche(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Neutron_Dex_TickLiquidity: @unchecked Sendable {}
extension Neutron_Dex_TickLiquidity.OneOf_Liquidity: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "neutron.dex"

extension Neutron_Dex_TickLiquidity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TickLiquidity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pool_reserves"),
    2: .standard(proto: "limit_order_tranche"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Neutron_Dex_PoolReserves?
        var hadOneofValue = false
        if let current = self.liquidity {
          hadOneofValue = true
          if case .poolReserves(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.liquidity = .poolReserves(v)
        }
      }()
      case 2: try {
        var v: Neutron_Dex_LimitOrderTranche?
        var hadOneofValue = false
        if let current = self.liquidity {
          hadOneofValue = true
          if case .limitOrderTranche(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.liquidity = .limitOrderTranche(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.liquidity {
    case .poolReserves?: try {
      guard case .poolReserves(let v)? = self.liquidity else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .limitOrderTranche?: try {
      guard case .limitOrderTranche(let v)? = self.liquidity else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Dex_TickLiquidity, rhs: Neutron_Dex_TickLiquidity) -> Bool {
    if lhs.liquidity != rhs.liquidity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
