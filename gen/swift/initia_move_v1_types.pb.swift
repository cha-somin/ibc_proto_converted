// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: initia/move/v1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// UpgradePolicy is the policy for upgrading a move module.
enum Initia_Move_V1_UpgradePolicy: SwiftProtobuf.Enum {
  typealias RawValue = Int

  /// UNSPECIFIED: a placeholder for an unspecified upgrade policy.
  case unspecified // = 0

  /// COMPATBILE: Whether a compatibility check should be performed for upgrades. The check only passes if
  /// a new module has (a) the same public functions (b) for existing resources, no layout change.
  case compatible // = 1

  /// IMMUTABLE: Whether the modules in the package are immutable and cannot be upgraded.
  case immutable // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .compatible
    case 2: self = .immutable
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .compatible: return 1
    case .immutable: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Initia_Move_V1_UpgradePolicy: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Initia_Move_V1_UpgradePolicy] = [
    .unspecified,
    .compatible,
    .immutable,
  ]
}

#endif  // swift(>=4.2)

/// Params defines the set of move parameters.
struct Initia_Move_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseDenom: String = String()

  var baseMinGasPrice: String = String()

  /// CSR: Percentage of fees distributed to developers
  var contractSharedRevenueRatio: String = String()

  /// flag whether to enable script execution
  var scriptEnabled: Bool = false

  /// It is a list of addresses with permission to distribute contracts,
  /// and an empty list is interpreted as allowing anyone to distribute.
  var allowedPublishers: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// RawParams defines the raw params to store.
struct Initia_Move_V1_RawParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseDenom: String = String()

  var baseMinGasPrice: String = String()

  /// CSR: Percentage of fees distributed to developers
  var contractSharedRevenueRatio: String = String()

  /// flag whether to enable script execution
  var scriptEnabled: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Module is data for the uploaded contract move code
struct Initia_Move_V1_Module {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var moduleName: String = String()

  var abi: String = String()

  var rawBytes: Data = Data()

  var upgradePolicy: Initia_Move_V1_UpgradePolicy = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Checksum is checksum of the uploaded contract move code
struct Initia_Move_V1_Checksum {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var moduleName: String = String()

  var checksum: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Resource is data for the stored move resource
struct Initia_Move_V1_Resource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var structTag: String = String()

  var moveResource: String = String()

  var rawBytes: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TableInfo is data stored under Table address
struct Initia_Move_V1_TableInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var keyType: String = String()

  var valueType: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TableEntry is data stored under Table address and the key bytes
struct Initia_Move_V1_TableEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String = String()

  var key: String = String()

  var value: String = String()

  var keyBytes: Data = Data()

  var valueBytes: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// proto wrapper to store the value
struct Initia_Move_V1_UpgradePolicyProto {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var policy: Initia_Move_V1_UpgradePolicy = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// DexPair contains coin metdata address
/// std::dex::Pool and std::dex::Config resources.
struct Initia_Move_V1_DexPair {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadataQuote: String = String()

  var metadataLp: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ExecuteAuthorizationItem is the information for granting module execution
struct Initia_Move_V1_ExecuteAuthorizationItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ModuleAddr is the address of the module deployer
  var moduleAddress: String = String()

  /// ModuleName is the names of module to execute
  var moduleName: String = String()

  /// FunctionName is the name of function to execute with wildcard '*' support
  var functionNames: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Initia_Move_V1_UpgradePolicy: @unchecked Sendable {}
extension Initia_Move_V1_Params: @unchecked Sendable {}
extension Initia_Move_V1_RawParams: @unchecked Sendable {}
extension Initia_Move_V1_Module: @unchecked Sendable {}
extension Initia_Move_V1_Checksum: @unchecked Sendable {}
extension Initia_Move_V1_Resource: @unchecked Sendable {}
extension Initia_Move_V1_TableInfo: @unchecked Sendable {}
extension Initia_Move_V1_TableEntry: @unchecked Sendable {}
extension Initia_Move_V1_UpgradePolicyProto: @unchecked Sendable {}
extension Initia_Move_V1_DexPair: @unchecked Sendable {}
extension Initia_Move_V1_ExecuteAuthorizationItem: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "initia.move.v1"

extension Initia_Move_V1_UpgradePolicy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "COMPATIBLE"),
    2: .same(proto: "IMMUTABLE"),
  ]
}

extension Initia_Move_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_denom"),
    2: .standard(proto: "base_min_gas_price"),
    3: .standard(proto: "contract_shared_revenue_ratio"),
    4: .standard(proto: "script_enabled"),
    5: .standard(proto: "allowed_publishers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.baseDenom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.baseMinGasPrice) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.contractSharedRevenueRatio) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.scriptEnabled) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.allowedPublishers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.baseDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.baseDenom, fieldNumber: 1)
    }
    if !self.baseMinGasPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.baseMinGasPrice, fieldNumber: 2)
    }
    if !self.contractSharedRevenueRatio.isEmpty {
      try visitor.visitSingularStringField(value: self.contractSharedRevenueRatio, fieldNumber: 3)
    }
    if self.scriptEnabled != false {
      try visitor.visitSingularBoolField(value: self.scriptEnabled, fieldNumber: 4)
    }
    if !self.allowedPublishers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.allowedPublishers, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Move_V1_Params, rhs: Initia_Move_V1_Params) -> Bool {
    if lhs.baseDenom != rhs.baseDenom {return false}
    if lhs.baseMinGasPrice != rhs.baseMinGasPrice {return false}
    if lhs.contractSharedRevenueRatio != rhs.contractSharedRevenueRatio {return false}
    if lhs.scriptEnabled != rhs.scriptEnabled {return false}
    if lhs.allowedPublishers != rhs.allowedPublishers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Initia_Move_V1_RawParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RawParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_denom"),
    2: .standard(proto: "base_min_gas_price"),
    3: .standard(proto: "contract_shared_revenue_ratio"),
    4: .standard(proto: "script_enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.baseDenom) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.baseMinGasPrice) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.contractSharedRevenueRatio) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.scriptEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.baseDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.baseDenom, fieldNumber: 1)
    }
    if !self.baseMinGasPrice.isEmpty {
      try visitor.visitSingularStringField(value: self.baseMinGasPrice, fieldNumber: 2)
    }
    if !self.contractSharedRevenueRatio.isEmpty {
      try visitor.visitSingularStringField(value: self.contractSharedRevenueRatio, fieldNumber: 3)
    }
    if self.scriptEnabled != false {
      try visitor.visitSingularBoolField(value: self.scriptEnabled, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Move_V1_RawParams, rhs: Initia_Move_V1_RawParams) -> Bool {
    if lhs.baseDenom != rhs.baseDenom {return false}
    if lhs.baseMinGasPrice != rhs.baseMinGasPrice {return false}
    if lhs.contractSharedRevenueRatio != rhs.contractSharedRevenueRatio {return false}
    if lhs.scriptEnabled != rhs.scriptEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Initia_Move_V1_Module: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Module"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "module_name"),
    3: .same(proto: "abi"),
    4: .standard(proto: "raw_bytes"),
    5: .standard(proto: "upgrade_policy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.moduleName) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.abi) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.rawBytes) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.upgradePolicy) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.moduleName.isEmpty {
      try visitor.visitSingularStringField(value: self.moduleName, fieldNumber: 2)
    }
    if !self.abi.isEmpty {
      try visitor.visitSingularStringField(value: self.abi, fieldNumber: 3)
    }
    if !self.rawBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.rawBytes, fieldNumber: 4)
    }
    if self.upgradePolicy != .unspecified {
      try visitor.visitSingularEnumField(value: self.upgradePolicy, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Move_V1_Module, rhs: Initia_Move_V1_Module) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.moduleName != rhs.moduleName {return false}
    if lhs.abi != rhs.abi {return false}
    if lhs.rawBytes != rhs.rawBytes {return false}
    if lhs.upgradePolicy != rhs.upgradePolicy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Initia_Move_V1_Checksum: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Checksum"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "module_name"),
    3: .same(proto: "checksum"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.moduleName) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.checksum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.moduleName.isEmpty {
      try visitor.visitSingularStringField(value: self.moduleName, fieldNumber: 2)
    }
    if !self.checksum.isEmpty {
      try visitor.visitSingularBytesField(value: self.checksum, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Move_V1_Checksum, rhs: Initia_Move_V1_Checksum) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.moduleName != rhs.moduleName {return false}
    if lhs.checksum != rhs.checksum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Initia_Move_V1_Resource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Resource"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "struct_tag"),
    3: .standard(proto: "move_resource"),
    4: .standard(proto: "raw_bytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.structTag) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.moveResource) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.rawBytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.structTag.isEmpty {
      try visitor.visitSingularStringField(value: self.structTag, fieldNumber: 2)
    }
    if !self.moveResource.isEmpty {
      try visitor.visitSingularStringField(value: self.moveResource, fieldNumber: 3)
    }
    if !self.rawBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.rawBytes, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Move_V1_Resource, rhs: Initia_Move_V1_Resource) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.structTag != rhs.structTag {return false}
    if lhs.moveResource != rhs.moveResource {return false}
    if lhs.rawBytes != rhs.rawBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Initia_Move_V1_TableInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TableInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "key_type"),
    3: .standard(proto: "value_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.keyType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.valueType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.keyType.isEmpty {
      try visitor.visitSingularStringField(value: self.keyType, fieldNumber: 2)
    }
    if !self.valueType.isEmpty {
      try visitor.visitSingularStringField(value: self.valueType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Move_V1_TableInfo, rhs: Initia_Move_V1_TableInfo) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.keyType != rhs.keyType {return false}
    if lhs.valueType != rhs.valueType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Initia_Move_V1_TableEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TableEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "key"),
    3: .same(proto: "value"),
    4: .standard(proto: "key_bytes"),
    5: .standard(proto: "value_bytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.value) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.keyBytes) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.valueBytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 1)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 2)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 3)
    }
    if !self.keyBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.keyBytes, fieldNumber: 4)
    }
    if !self.valueBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.valueBytes, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Move_V1_TableEntry, rhs: Initia_Move_V1_TableEntry) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.keyBytes != rhs.keyBytes {return false}
    if lhs.valueBytes != rhs.valueBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Initia_Move_V1_UpgradePolicyProto: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpgradePolicyProto"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "policy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.policy) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.policy != .unspecified {
      try visitor.visitSingularEnumField(value: self.policy, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Move_V1_UpgradePolicyProto, rhs: Initia_Move_V1_UpgradePolicyProto) -> Bool {
    if lhs.policy != rhs.policy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Initia_Move_V1_DexPair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DexPair"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "metadata_quote"),
    2: .standard(proto: "metadata_lp"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.metadataQuote) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.metadataLp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.metadataQuote.isEmpty {
      try visitor.visitSingularStringField(value: self.metadataQuote, fieldNumber: 1)
    }
    if !self.metadataLp.isEmpty {
      try visitor.visitSingularStringField(value: self.metadataLp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Move_V1_DexPair, rhs: Initia_Move_V1_DexPair) -> Bool {
    if lhs.metadataQuote != rhs.metadataQuote {return false}
    if lhs.metadataLp != rhs.metadataLp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Initia_Move_V1_ExecuteAuthorizationItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ExecuteAuthorizationItem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "module_address"),
    2: .standard(proto: "module_name"),
    3: .standard(proto: "function_names"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.moduleAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.moduleName) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.functionNames) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.moduleAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.moduleAddress, fieldNumber: 1)
    }
    if !self.moduleName.isEmpty {
      try visitor.visitSingularStringField(value: self.moduleName, fieldNumber: 2)
    }
    if !self.functionNames.isEmpty {
      try visitor.visitRepeatedStringField(value: self.functionNames, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Move_V1_ExecuteAuthorizationItem, rhs: Initia_Move_V1_ExecuteAuthorizationItem) -> Bool {
    if lhs.moduleAddress != rhs.moduleAddress {return false}
    if lhs.moduleName != rhs.moduleName {return false}
    if lhs.functionNames != rhs.functionNames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
