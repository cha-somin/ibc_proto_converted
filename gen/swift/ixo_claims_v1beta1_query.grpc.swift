//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ixo/claims/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Ixo_Claims_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Ixo_Claims_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ixo_Claims_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Ixo_Claims_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ixo_Claims_V1beta1_QueryParamsRequest, Ixo_Claims_V1beta1_QueryParamsResponse>

  func collection(
    _ request: Ixo_Claims_V1beta1_QueryCollectionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ixo_Claims_V1beta1_QueryCollectionRequest, Ixo_Claims_V1beta1_QueryCollectionResponse>

  func collectionList(
    _ request: Ixo_Claims_V1beta1_QueryCollectionListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ixo_Claims_V1beta1_QueryCollectionListRequest, Ixo_Claims_V1beta1_QueryCollectionListResponse>

  func claim(
    _ request: Ixo_Claims_V1beta1_QueryClaimRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ixo_Claims_V1beta1_QueryClaimRequest, Ixo_Claims_V1beta1_QueryClaimResponse>

  func claimList(
    _ request: Ixo_Claims_V1beta1_QueryClaimListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ixo_Claims_V1beta1_QueryClaimListRequest, Ixo_Claims_V1beta1_QueryClaimListResponse>

  func dispute(
    _ request: Ixo_Claims_V1beta1_QueryDisputeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ixo_Claims_V1beta1_QueryDisputeRequest, Ixo_Claims_V1beta1_QueryDisputeResponse>

  func disputeList(
    _ request: Ixo_Claims_V1beta1_QueryDisputeListRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ixo_Claims_V1beta1_QueryDisputeListRequest, Ixo_Claims_V1beta1_QueryDisputeListResponse>
}

extension Ixo_Claims_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "ixo.claims.v1beta1.Query"
  }

  /// Parameters queries the parameters of the module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Ixo_Claims_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ixo_Claims_V1beta1_QueryParamsRequest, Ixo_Claims_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Unary call to Collection
  ///
  /// - Parameters:
  ///   - request: Request to send to Collection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func collection(
    _ request: Ixo_Claims_V1beta1_QueryCollectionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ixo_Claims_V1beta1_QueryCollectionRequest, Ixo_Claims_V1beta1_QueryCollectionResponse> {
    return self.makeUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.collection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionInterceptors() ?? []
    )
  }

  /// Unary call to CollectionList
  ///
  /// - Parameters:
  ///   - request: Request to send to CollectionList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func collectionList(
    _ request: Ixo_Claims_V1beta1_QueryCollectionListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ixo_Claims_V1beta1_QueryCollectionListRequest, Ixo_Claims_V1beta1_QueryCollectionListResponse> {
    return self.makeUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.collectionList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionListInterceptors() ?? []
    )
  }

  /// Unary call to Claim
  ///
  /// - Parameters:
  ///   - request: Request to send to Claim.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claim(
    _ request: Ixo_Claims_V1beta1_QueryClaimRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ixo_Claims_V1beta1_QueryClaimRequest, Ixo_Claims_V1beta1_QueryClaimResponse> {
    return self.makeUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.claim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimInterceptors() ?? []
    )
  }

  /// Unary call to ClaimList
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimList(
    _ request: Ixo_Claims_V1beta1_QueryClaimListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ixo_Claims_V1beta1_QueryClaimListRequest, Ixo_Claims_V1beta1_QueryClaimListResponse> {
    return self.makeUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.claimList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimListInterceptors() ?? []
    )
  }

  /// Unary call to Dispute
  ///
  /// - Parameters:
  ///   - request: Request to send to Dispute.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func dispute(
    _ request: Ixo_Claims_V1beta1_QueryDisputeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ixo_Claims_V1beta1_QueryDisputeRequest, Ixo_Claims_V1beta1_QueryDisputeResponse> {
    return self.makeUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.dispute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisputeInterceptors() ?? []
    )
  }

  /// Unary call to DisputeList
  ///
  /// - Parameters:
  ///   - request: Request to send to DisputeList.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disputeList(
    _ request: Ixo_Claims_V1beta1_QueryDisputeListRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ixo_Claims_V1beta1_QueryDisputeListRequest, Ixo_Claims_V1beta1_QueryDisputeListResponse> {
    return self.makeUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.disputeList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisputeListInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Ixo_Claims_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Ixo_Claims_V1beta1_QueryNIOClient")
internal final class Ixo_Claims_V1beta1_QueryClient: Ixo_Claims_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ixo_Claims_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Ixo_Claims_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ixo.claims.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ixo_Claims_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Ixo_Claims_V1beta1_QueryNIOClient: Ixo_Claims_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ixo_Claims_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the ixo.claims.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ixo_Claims_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ixo_Claims_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ixo_Claims_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Ixo_Claims_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ixo_Claims_V1beta1_QueryParamsRequest, Ixo_Claims_V1beta1_QueryParamsResponse>

  func makeCollectionCall(
    _ request: Ixo_Claims_V1beta1_QueryCollectionRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ixo_Claims_V1beta1_QueryCollectionRequest, Ixo_Claims_V1beta1_QueryCollectionResponse>

  func makeCollectionListCall(
    _ request: Ixo_Claims_V1beta1_QueryCollectionListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ixo_Claims_V1beta1_QueryCollectionListRequest, Ixo_Claims_V1beta1_QueryCollectionListResponse>

  func makeClaimCall(
    _ request: Ixo_Claims_V1beta1_QueryClaimRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ixo_Claims_V1beta1_QueryClaimRequest, Ixo_Claims_V1beta1_QueryClaimResponse>

  func makeClaimListCall(
    _ request: Ixo_Claims_V1beta1_QueryClaimListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ixo_Claims_V1beta1_QueryClaimListRequest, Ixo_Claims_V1beta1_QueryClaimListResponse>

  func makeDisputeCall(
    _ request: Ixo_Claims_V1beta1_QueryDisputeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ixo_Claims_V1beta1_QueryDisputeRequest, Ixo_Claims_V1beta1_QueryDisputeResponse>

  func makeDisputeListCall(
    _ request: Ixo_Claims_V1beta1_QueryDisputeListRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ixo_Claims_V1beta1_QueryDisputeListRequest, Ixo_Claims_V1beta1_QueryDisputeListResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ixo_Claims_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ixo_Claims_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Ixo_Claims_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Ixo_Claims_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ixo_Claims_V1beta1_QueryParamsRequest, Ixo_Claims_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeCollectionCall(
    _ request: Ixo_Claims_V1beta1_QueryCollectionRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ixo_Claims_V1beta1_QueryCollectionRequest, Ixo_Claims_V1beta1_QueryCollectionResponse> {
    return self.makeAsyncUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.collection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionInterceptors() ?? []
    )
  }

  internal func makeCollectionListCall(
    _ request: Ixo_Claims_V1beta1_QueryCollectionListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ixo_Claims_V1beta1_QueryCollectionListRequest, Ixo_Claims_V1beta1_QueryCollectionListResponse> {
    return self.makeAsyncUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.collectionList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionListInterceptors() ?? []
    )
  }

  internal func makeClaimCall(
    _ request: Ixo_Claims_V1beta1_QueryClaimRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ixo_Claims_V1beta1_QueryClaimRequest, Ixo_Claims_V1beta1_QueryClaimResponse> {
    return self.makeAsyncUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.claim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimInterceptors() ?? []
    )
  }

  internal func makeClaimListCall(
    _ request: Ixo_Claims_V1beta1_QueryClaimListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ixo_Claims_V1beta1_QueryClaimListRequest, Ixo_Claims_V1beta1_QueryClaimListResponse> {
    return self.makeAsyncUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.claimList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimListInterceptors() ?? []
    )
  }

  internal func makeDisputeCall(
    _ request: Ixo_Claims_V1beta1_QueryDisputeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ixo_Claims_V1beta1_QueryDisputeRequest, Ixo_Claims_V1beta1_QueryDisputeResponse> {
    return self.makeAsyncUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.dispute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisputeInterceptors() ?? []
    )
  }

  internal func makeDisputeListCall(
    _ request: Ixo_Claims_V1beta1_QueryDisputeListRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ixo_Claims_V1beta1_QueryDisputeListRequest, Ixo_Claims_V1beta1_QueryDisputeListResponse> {
    return self.makeAsyncUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.disputeList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisputeListInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ixo_Claims_V1beta1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Ixo_Claims_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ixo_Claims_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func collection(
    _ request: Ixo_Claims_V1beta1_QueryCollectionRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ixo_Claims_V1beta1_QueryCollectionResponse {
    return try await self.performAsyncUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.collection.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionInterceptors() ?? []
    )
  }

  internal func collectionList(
    _ request: Ixo_Claims_V1beta1_QueryCollectionListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ixo_Claims_V1beta1_QueryCollectionListResponse {
    return try await self.performAsyncUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.collectionList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCollectionListInterceptors() ?? []
    )
  }

  internal func claim(
    _ request: Ixo_Claims_V1beta1_QueryClaimRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ixo_Claims_V1beta1_QueryClaimResponse {
    return try await self.performAsyncUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.claim.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimInterceptors() ?? []
    )
  }

  internal func claimList(
    _ request: Ixo_Claims_V1beta1_QueryClaimListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ixo_Claims_V1beta1_QueryClaimListResponse {
    return try await self.performAsyncUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.claimList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimListInterceptors() ?? []
    )
  }

  internal func dispute(
    _ request: Ixo_Claims_V1beta1_QueryDisputeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ixo_Claims_V1beta1_QueryDisputeResponse {
    return try await self.performAsyncUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.dispute.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisputeInterceptors() ?? []
    )
  }

  internal func disputeList(
    _ request: Ixo_Claims_V1beta1_QueryDisputeListRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ixo_Claims_V1beta1_QueryDisputeListResponse {
    return try await self.performAsyncUnaryCall(
      path: Ixo_Claims_V1beta1_QueryClientMetadata.Methods.disputeList.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisputeListInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Ixo_Claims_V1beta1_QueryAsyncClient: Ixo_Claims_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ixo_Claims_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ixo_Claims_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Ixo_Claims_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Ixo_Claims_V1beta1_QueryParamsRequest, Ixo_Claims_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'collection'.
  func makeCollectionInterceptors() -> [ClientInterceptor<Ixo_Claims_V1beta1_QueryCollectionRequest, Ixo_Claims_V1beta1_QueryCollectionResponse>]

  /// - Returns: Interceptors to use when invoking 'collectionList'.
  func makeCollectionListInterceptors() -> [ClientInterceptor<Ixo_Claims_V1beta1_QueryCollectionListRequest, Ixo_Claims_V1beta1_QueryCollectionListResponse>]

  /// - Returns: Interceptors to use when invoking 'claim'.
  func makeClaimInterceptors() -> [ClientInterceptor<Ixo_Claims_V1beta1_QueryClaimRequest, Ixo_Claims_V1beta1_QueryClaimResponse>]

  /// - Returns: Interceptors to use when invoking 'claimList'.
  func makeClaimListInterceptors() -> [ClientInterceptor<Ixo_Claims_V1beta1_QueryClaimListRequest, Ixo_Claims_V1beta1_QueryClaimListResponse>]

  /// - Returns: Interceptors to use when invoking 'dispute'.
  func makeDisputeInterceptors() -> [ClientInterceptor<Ixo_Claims_V1beta1_QueryDisputeRequest, Ixo_Claims_V1beta1_QueryDisputeResponse>]

  /// - Returns: Interceptors to use when invoking 'disputeList'.
  func makeDisputeListInterceptors() -> [ClientInterceptor<Ixo_Claims_V1beta1_QueryDisputeListRequest, Ixo_Claims_V1beta1_QueryDisputeListResponse>]
}

internal enum Ixo_Claims_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "ixo.claims.v1beta1.Query",
    methods: [
      Ixo_Claims_V1beta1_QueryClientMetadata.Methods.params,
      Ixo_Claims_V1beta1_QueryClientMetadata.Methods.collection,
      Ixo_Claims_V1beta1_QueryClientMetadata.Methods.collectionList,
      Ixo_Claims_V1beta1_QueryClientMetadata.Methods.claim,
      Ixo_Claims_V1beta1_QueryClientMetadata.Methods.claimList,
      Ixo_Claims_V1beta1_QueryClientMetadata.Methods.dispute,
      Ixo_Claims_V1beta1_QueryClientMetadata.Methods.disputeList,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/ixo.claims.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let collection = GRPCMethodDescriptor(
      name: "Collection",
      path: "/ixo.claims.v1beta1.Query/Collection",
      type: GRPCCallType.unary
    )

    internal static let collectionList = GRPCMethodDescriptor(
      name: "CollectionList",
      path: "/ixo.claims.v1beta1.Query/CollectionList",
      type: GRPCCallType.unary
    )

    internal static let claim = GRPCMethodDescriptor(
      name: "Claim",
      path: "/ixo.claims.v1beta1.Query/Claim",
      type: GRPCCallType.unary
    )

    internal static let claimList = GRPCMethodDescriptor(
      name: "ClaimList",
      path: "/ixo.claims.v1beta1.Query/ClaimList",
      type: GRPCCallType.unary
    )

    internal static let dispute = GRPCMethodDescriptor(
      name: "Dispute",
      path: "/ixo.claims.v1beta1.Query/Dispute",
      type: GRPCCallType.unary
    )

    internal static let disputeList = GRPCMethodDescriptor(
      name: "DisputeList",
      path: "/ixo.claims.v1beta1.Query/DisputeList",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Ixo_Claims_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Ixo_Claims_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  func params(request: Ixo_Claims_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ixo_Claims_V1beta1_QueryParamsResponse>

  func collection(request: Ixo_Claims_V1beta1_QueryCollectionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ixo_Claims_V1beta1_QueryCollectionResponse>

  func collectionList(request: Ixo_Claims_V1beta1_QueryCollectionListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ixo_Claims_V1beta1_QueryCollectionListResponse>

  func claim(request: Ixo_Claims_V1beta1_QueryClaimRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ixo_Claims_V1beta1_QueryClaimResponse>

  func claimList(request: Ixo_Claims_V1beta1_QueryClaimListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ixo_Claims_V1beta1_QueryClaimListResponse>

  func dispute(request: Ixo_Claims_V1beta1_QueryDisputeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ixo_Claims_V1beta1_QueryDisputeResponse>

  func disputeList(request: Ixo_Claims_V1beta1_QueryDisputeListRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ixo_Claims_V1beta1_QueryDisputeListResponse>
}

extension Ixo_Claims_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Ixo_Claims_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ixo_Claims_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Ixo_Claims_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Collection":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ixo_Claims_V1beta1_QueryCollectionRequest>(),
        responseSerializer: ProtobufSerializer<Ixo_Claims_V1beta1_QueryCollectionResponse>(),
        interceptors: self.interceptors?.makeCollectionInterceptors() ?? [],
        userFunction: self.collection(request:context:)
      )

    case "CollectionList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ixo_Claims_V1beta1_QueryCollectionListRequest>(),
        responseSerializer: ProtobufSerializer<Ixo_Claims_V1beta1_QueryCollectionListResponse>(),
        interceptors: self.interceptors?.makeCollectionListInterceptors() ?? [],
        userFunction: self.collectionList(request:context:)
      )

    case "Claim":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ixo_Claims_V1beta1_QueryClaimRequest>(),
        responseSerializer: ProtobufSerializer<Ixo_Claims_V1beta1_QueryClaimResponse>(),
        interceptors: self.interceptors?.makeClaimInterceptors() ?? [],
        userFunction: self.claim(request:context:)
      )

    case "ClaimList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ixo_Claims_V1beta1_QueryClaimListRequest>(),
        responseSerializer: ProtobufSerializer<Ixo_Claims_V1beta1_QueryClaimListResponse>(),
        interceptors: self.interceptors?.makeClaimListInterceptors() ?? [],
        userFunction: self.claimList(request:context:)
      )

    case "Dispute":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ixo_Claims_V1beta1_QueryDisputeRequest>(),
        responseSerializer: ProtobufSerializer<Ixo_Claims_V1beta1_QueryDisputeResponse>(),
        interceptors: self.interceptors?.makeDisputeInterceptors() ?? [],
        userFunction: self.dispute(request:context:)
      )

    case "DisputeList":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ixo_Claims_V1beta1_QueryDisputeListRequest>(),
        responseSerializer: ProtobufSerializer<Ixo_Claims_V1beta1_QueryDisputeListResponse>(),
        interceptors: self.interceptors?.makeDisputeListInterceptors() ?? [],
        userFunction: self.disputeList(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ixo_Claims_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ixo_Claims_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Parameters queries the parameters of the module.
  @Sendable func params(
    request: Ixo_Claims_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ixo_Claims_V1beta1_QueryParamsResponse

  @Sendable func collection(
    request: Ixo_Claims_V1beta1_QueryCollectionRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ixo_Claims_V1beta1_QueryCollectionResponse

  @Sendable func collectionList(
    request: Ixo_Claims_V1beta1_QueryCollectionListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ixo_Claims_V1beta1_QueryCollectionListResponse

  @Sendable func claim(
    request: Ixo_Claims_V1beta1_QueryClaimRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ixo_Claims_V1beta1_QueryClaimResponse

  @Sendable func claimList(
    request: Ixo_Claims_V1beta1_QueryClaimListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ixo_Claims_V1beta1_QueryClaimListResponse

  @Sendable func dispute(
    request: Ixo_Claims_V1beta1_QueryDisputeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ixo_Claims_V1beta1_QueryDisputeResponse

  @Sendable func disputeList(
    request: Ixo_Claims_V1beta1_QueryDisputeListRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ixo_Claims_V1beta1_QueryDisputeListResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ixo_Claims_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ixo_Claims_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Ixo_Claims_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Ixo_Claims_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ixo_Claims_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Ixo_Claims_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Collection":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ixo_Claims_V1beta1_QueryCollectionRequest>(),
        responseSerializer: ProtobufSerializer<Ixo_Claims_V1beta1_QueryCollectionResponse>(),
        interceptors: self.interceptors?.makeCollectionInterceptors() ?? [],
        wrapping: self.collection(request:context:)
      )

    case "CollectionList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ixo_Claims_V1beta1_QueryCollectionListRequest>(),
        responseSerializer: ProtobufSerializer<Ixo_Claims_V1beta1_QueryCollectionListResponse>(),
        interceptors: self.interceptors?.makeCollectionListInterceptors() ?? [],
        wrapping: self.collectionList(request:context:)
      )

    case "Claim":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ixo_Claims_V1beta1_QueryClaimRequest>(),
        responseSerializer: ProtobufSerializer<Ixo_Claims_V1beta1_QueryClaimResponse>(),
        interceptors: self.interceptors?.makeClaimInterceptors() ?? [],
        wrapping: self.claim(request:context:)
      )

    case "ClaimList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ixo_Claims_V1beta1_QueryClaimListRequest>(),
        responseSerializer: ProtobufSerializer<Ixo_Claims_V1beta1_QueryClaimListResponse>(),
        interceptors: self.interceptors?.makeClaimListInterceptors() ?? [],
        wrapping: self.claimList(request:context:)
      )

    case "Dispute":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ixo_Claims_V1beta1_QueryDisputeRequest>(),
        responseSerializer: ProtobufSerializer<Ixo_Claims_V1beta1_QueryDisputeResponse>(),
        interceptors: self.interceptors?.makeDisputeInterceptors() ?? [],
        wrapping: self.dispute(request:context:)
      )

    case "DisputeList":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ixo_Claims_V1beta1_QueryDisputeListRequest>(),
        responseSerializer: ProtobufSerializer<Ixo_Claims_V1beta1_QueryDisputeListResponse>(),
        interceptors: self.interceptors?.makeDisputeListInterceptors() ?? [],
        wrapping: self.disputeList(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Ixo_Claims_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Ixo_Claims_V1beta1_QueryParamsRequest, Ixo_Claims_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'collection'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCollectionInterceptors() -> [ServerInterceptor<Ixo_Claims_V1beta1_QueryCollectionRequest, Ixo_Claims_V1beta1_QueryCollectionResponse>]

  /// - Returns: Interceptors to use when handling 'collectionList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCollectionListInterceptors() -> [ServerInterceptor<Ixo_Claims_V1beta1_QueryCollectionListRequest, Ixo_Claims_V1beta1_QueryCollectionListResponse>]

  /// - Returns: Interceptors to use when handling 'claim'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimInterceptors() -> [ServerInterceptor<Ixo_Claims_V1beta1_QueryClaimRequest, Ixo_Claims_V1beta1_QueryClaimResponse>]

  /// - Returns: Interceptors to use when handling 'claimList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeClaimListInterceptors() -> [ServerInterceptor<Ixo_Claims_V1beta1_QueryClaimListRequest, Ixo_Claims_V1beta1_QueryClaimListResponse>]

  /// - Returns: Interceptors to use when handling 'dispute'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDisputeInterceptors() -> [ServerInterceptor<Ixo_Claims_V1beta1_QueryDisputeRequest, Ixo_Claims_V1beta1_QueryDisputeResponse>]

  /// - Returns: Interceptors to use when handling 'disputeList'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDisputeListInterceptors() -> [ServerInterceptor<Ixo_Claims_V1beta1_QueryDisputeListRequest, Ixo_Claims_V1beta1_QueryDisputeListResponse>]
}

internal enum Ixo_Claims_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "ixo.claims.v1beta1.Query",
    methods: [
      Ixo_Claims_V1beta1_QueryServerMetadata.Methods.params,
      Ixo_Claims_V1beta1_QueryServerMetadata.Methods.collection,
      Ixo_Claims_V1beta1_QueryServerMetadata.Methods.collectionList,
      Ixo_Claims_V1beta1_QueryServerMetadata.Methods.claim,
      Ixo_Claims_V1beta1_QueryServerMetadata.Methods.claimList,
      Ixo_Claims_V1beta1_QueryServerMetadata.Methods.dispute,
      Ixo_Claims_V1beta1_QueryServerMetadata.Methods.disputeList,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/ixo.claims.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let collection = GRPCMethodDescriptor(
      name: "Collection",
      path: "/ixo.claims.v1beta1.Query/Collection",
      type: GRPCCallType.unary
    )

    internal static let collectionList = GRPCMethodDescriptor(
      name: "CollectionList",
      path: "/ixo.claims.v1beta1.Query/CollectionList",
      type: GRPCCallType.unary
    )

    internal static let claim = GRPCMethodDescriptor(
      name: "Claim",
      path: "/ixo.claims.v1beta1.Query/Claim",
      type: GRPCCallType.unary
    )

    internal static let claimList = GRPCMethodDescriptor(
      name: "ClaimList",
      path: "/ixo.claims.v1beta1.Query/ClaimList",
      type: GRPCCallType.unary
    )

    internal static let dispute = GRPCMethodDescriptor(
      name: "Dispute",
      path: "/ixo.claims.v1beta1.Query/Dispute",
      type: GRPCCallType.unary
    )

    internal static let disputeList = GRPCMethodDescriptor(
      name: "DisputeList",
      path: "/ixo.claims.v1beta1.Query/DisputeList",
      type: GRPCCallType.unary
    )
  }
}
