// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: thorchain/v1/x/thorchain/types/type_node_account.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Types_NodeStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case whitelisted // = 1
  case standby // = 2
  case ready // = 3
  case active // = 4
  case disabled // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .whitelisted
    case 2: self = .standby
    case 3: self = .ready
    case 4: self = .active
    case 5: self = .disabled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .whitelisted: return 1
    case .standby: return 2
    case .ready: return 3
    case .active: return 4
    case .disabled: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Types_NodeStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Types_NodeStatus] = [
    .unknown,
    .whitelisted,
    .standby,
    .ready,
    .active,
    .disabled,
  ]
}

#endif  // swift(>=4.2)

enum Types_NodeType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case typeValidator // = 0
  case typeVault // = 1
  case typeUnknown // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .typeValidator
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .typeValidator
    case 1: self = .typeVault
    case 2: self = .typeUnknown
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .typeValidator: return 0
    case .typeVault: return 1
    case .typeUnknown: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Types_NodeType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Types_NodeType] = [
    .typeValidator,
    .typeVault,
    .typeUnknown,
  ]
}

#endif  // swift(>=4.2)

struct Types_NodeAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nodeAddress: Data = Data()

  var status: Types_NodeStatus = .unknown

  var pubKeySet: Common_PubKeySet {
    get {return _pubKeySet ?? Common_PubKeySet()}
    set {_pubKeySet = newValue}
  }
  /// Returns true if `pubKeySet` has been explicitly set.
  var hasPubKeySet: Bool {return self._pubKeySet != nil}
  /// Clears the value of `pubKeySet`. Subsequent reads from it will return its default value.
  mutating func clearPubKeySet() {self._pubKeySet = nil}

  var validatorConsPubKey: String = String()

  var bond: String = String()

  var activeBlockHeight: Int64 = 0

  var bondAddress: String = String()

  var statusSince: Int64 = 0

  var signerMembership: [String] = []

  var requestedToLeave: Bool = false

  var forcedToLeave: Bool = false

  var leaveScore: UInt64 = 0

  var ipAddress: String = String()

  var version: String = String()

  var type: Types_NodeType = .typeValidator

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _pubKeySet: Common_PubKeySet? = nil
}

struct Types_BondProvider {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bondAddress: Data = Data()

  var bond: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Types_BondProviders {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var nodeAddress: Data = Data()

  var nodeOperatorFee: String = String()

  var providers: [Types_BondProvider] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Types_MinJoinLast {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lastChangedHeight: Int64 = 0

  var version: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Types_NodeStatus: @unchecked Sendable {}
extension Types_NodeType: @unchecked Sendable {}
extension Types_NodeAccount: @unchecked Sendable {}
extension Types_BondProvider: @unchecked Sendable {}
extension Types_BondProviders: @unchecked Sendable {}
extension Types_MinJoinLast: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_NodeStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Unknown"),
    1: .same(proto: "Whitelisted"),
    2: .same(proto: "Standby"),
    3: .same(proto: "Ready"),
    4: .same(proto: "Active"),
    5: .same(proto: "Disabled"),
  ]
}

extension Types_NodeType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TypeValidator"),
    1: .same(proto: "TypeVault"),
    2: .same(proto: "TypeUnknown"),
  ]
}

extension Types_NodeAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NodeAccount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_address"),
    2: .same(proto: "status"),
    3: .standard(proto: "pub_key_set"),
    4: .standard(proto: "validator_cons_pub_key"),
    5: .same(proto: "bond"),
    6: .standard(proto: "active_block_height"),
    7: .standard(proto: "bond_address"),
    8: .standard(proto: "status_since"),
    9: .standard(proto: "signer_membership"),
    10: .standard(proto: "requested_to_leave"),
    11: .standard(proto: "forced_to_leave"),
    12: .standard(proto: "leave_score"),
    13: .standard(proto: "ip_address"),
    14: .same(proto: "version"),
    15: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.nodeAddress) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._pubKeySet) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.validatorConsPubKey) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.bond) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.activeBlockHeight) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.bondAddress) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.statusSince) }()
      case 9: try { try decoder.decodeRepeatedStringField(value: &self.signerMembership) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.requestedToLeave) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.forcedToLeave) }()
      case 12: try { try decoder.decodeSingularUInt64Field(value: &self.leaveScore) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.ipAddress) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self.version) }()
      case 15: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.nodeAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.nodeAddress, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    try { if let v = self._pubKeySet {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.validatorConsPubKey.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorConsPubKey, fieldNumber: 4)
    }
    if !self.bond.isEmpty {
      try visitor.visitSingularStringField(value: self.bond, fieldNumber: 5)
    }
    if self.activeBlockHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.activeBlockHeight, fieldNumber: 6)
    }
    if !self.bondAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.bondAddress, fieldNumber: 7)
    }
    if self.statusSince != 0 {
      try visitor.visitSingularInt64Field(value: self.statusSince, fieldNumber: 8)
    }
    if !self.signerMembership.isEmpty {
      try visitor.visitRepeatedStringField(value: self.signerMembership, fieldNumber: 9)
    }
    if self.requestedToLeave != false {
      try visitor.visitSingularBoolField(value: self.requestedToLeave, fieldNumber: 10)
    }
    if self.forcedToLeave != false {
      try visitor.visitSingularBoolField(value: self.forcedToLeave, fieldNumber: 11)
    }
    if self.leaveScore != 0 {
      try visitor.visitSingularUInt64Field(value: self.leaveScore, fieldNumber: 12)
    }
    if !self.ipAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.ipAddress, fieldNumber: 13)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 14)
    }
    if self.type != .typeValidator {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_NodeAccount, rhs: Types_NodeAccount) -> Bool {
    if lhs.nodeAddress != rhs.nodeAddress {return false}
    if lhs.status != rhs.status {return false}
    if lhs._pubKeySet != rhs._pubKeySet {return false}
    if lhs.validatorConsPubKey != rhs.validatorConsPubKey {return false}
    if lhs.bond != rhs.bond {return false}
    if lhs.activeBlockHeight != rhs.activeBlockHeight {return false}
    if lhs.bondAddress != rhs.bondAddress {return false}
    if lhs.statusSince != rhs.statusSince {return false}
    if lhs.signerMembership != rhs.signerMembership {return false}
    if lhs.requestedToLeave != rhs.requestedToLeave {return false}
    if lhs.forcedToLeave != rhs.forcedToLeave {return false}
    if lhs.leaveScore != rhs.leaveScore {return false}
    if lhs.ipAddress != rhs.ipAddress {return false}
    if lhs.version != rhs.version {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Types_BondProvider: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BondProvider"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bond_address"),
    2: .same(proto: "bond"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.bondAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.bond) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bondAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.bondAddress, fieldNumber: 1)
    }
    if !self.bond.isEmpty {
      try visitor.visitSingularStringField(value: self.bond, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_BondProvider, rhs: Types_BondProvider) -> Bool {
    if lhs.bondAddress != rhs.bondAddress {return false}
    if lhs.bond != rhs.bond {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Types_BondProviders: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BondProviders"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "node_address"),
    2: .standard(proto: "node_operator_fee"),
    3: .same(proto: "providers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.nodeAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.nodeOperatorFee) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.providers) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nodeAddress.isEmpty {
      try visitor.visitSingularBytesField(value: self.nodeAddress, fieldNumber: 1)
    }
    if !self.nodeOperatorFee.isEmpty {
      try visitor.visitSingularStringField(value: self.nodeOperatorFee, fieldNumber: 2)
    }
    if !self.providers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.providers, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_BondProviders, rhs: Types_BondProviders) -> Bool {
    if lhs.nodeAddress != rhs.nodeAddress {return false}
    if lhs.nodeOperatorFee != rhs.nodeOperatorFee {return false}
    if lhs.providers != rhs.providers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Types_MinJoinLast: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MinJoinLast"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_changed_height"),
    2: .same(proto: "version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.lastChangedHeight) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.version) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lastChangedHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.lastChangedHeight, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Types_MinJoinLast, rhs: Types_MinJoinLast) -> Bool {
    if lhs.lastChangedHeight != rhs.lastChangedHeight {return false}
    if lhs.version != rhs.version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
