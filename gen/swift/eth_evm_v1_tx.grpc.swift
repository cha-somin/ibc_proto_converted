//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: eth/evm/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the evm Msg service.
///
/// Usage: instantiate `Eth_Evm_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Eth_Evm_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Eth_Evm_V1_MsgClientInterceptorFactoryProtocol? { get }

  func ethereumTx(
    _ request: Eth_Evm_V1_MsgEthereumTx,
    callOptions: CallOptions?
  ) -> UnaryCall<Eth_Evm_V1_MsgEthereumTx, Eth_Evm_V1_MsgEthereumTxResponse>

  func updateParams(
    _ request: Eth_Evm_V1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Eth_Evm_V1_MsgUpdateParams, Eth_Evm_V1_MsgUpdateParamsResponse>

  func createFunToken(
    _ request: Eth_Evm_V1_MsgCreateFunToken,
    callOptions: CallOptions?
  ) -> UnaryCall<Eth_Evm_V1_MsgCreateFunToken, Eth_Evm_V1_MsgCreateFunTokenResponse>

  func convertCoinToEvm(
    _ request: Eth_Evm_V1_MsgConvertCoinToEvm,
    callOptions: CallOptions?
  ) -> UnaryCall<Eth_Evm_V1_MsgConvertCoinToEvm, Eth_Evm_V1_MsgConvertCoinToEvmResponse>
}

extension Eth_Evm_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "eth.evm.v1.Msg"
  }

  /// EthereumTx defines a method submitting Ethereum transactions.
  ///
  /// - Parameters:
  ///   - request: Request to send to EthereumTx.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func ethereumTx(
    _ request: Eth_Evm_V1_MsgEthereumTx,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Eth_Evm_V1_MsgEthereumTx, Eth_Evm_V1_MsgEthereumTxResponse> {
    return self.makeUnaryCall(
      path: Eth_Evm_V1_MsgClientMetadata.Methods.ethereumTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEthereumTxInterceptors() ?? []
    )
  }

  /// UpdateParams defined a governance operation for updating the x/evm module
  /// parameters. The authority is hard-coded to the x/gov module account
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: Eth_Evm_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Eth_Evm_V1_MsgUpdateParams, Eth_Evm_V1_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Eth_Evm_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  /// CreateFunToken: Create a "FunToken" mapping. Either the ERC20 contract
  /// address can be given to create the mapping to a Bank Coin, or the
  /// denomination for a Bank Coin can be given to create the mapping to an
  /// ERC20.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFunToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createFunToken(
    _ request: Eth_Evm_V1_MsgCreateFunToken,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Eth_Evm_V1_MsgCreateFunToken, Eth_Evm_V1_MsgCreateFunTokenResponse> {
    return self.makeUnaryCall(
      path: Eth_Evm_V1_MsgClientMetadata.Methods.createFunToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFunTokenInterceptors() ?? []
    )
  }

  /// ConvertCoinToEvm: Sends a coin with a valid "FunToken" mapping to the
  /// given recipient address ("to_eth_addr") in the corresponding ERC20
  /// representation.
  ///
  /// - Parameters:
  ///   - request: Request to send to ConvertCoinToEvm.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func convertCoinToEvm(
    _ request: Eth_Evm_V1_MsgConvertCoinToEvm,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Eth_Evm_V1_MsgConvertCoinToEvm, Eth_Evm_V1_MsgConvertCoinToEvmResponse> {
    return self.makeUnaryCall(
      path: Eth_Evm_V1_MsgClientMetadata.Methods.convertCoinToEvm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertCoinToEvmInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Eth_Evm_V1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Eth_Evm_V1_MsgNIOClient")
internal final class Eth_Evm_V1_MsgClient: Eth_Evm_V1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Eth_Evm_V1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Eth_Evm_V1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the eth.evm.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Eth_Evm_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Eth_Evm_V1_MsgNIOClient: Eth_Evm_V1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Eth_Evm_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the eth.evm.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Eth_Evm_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the evm Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Eth_Evm_V1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Eth_Evm_V1_MsgClientInterceptorFactoryProtocol? { get }

  func makeEthereumTxCall(
    _ request: Eth_Evm_V1_MsgEthereumTx,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Eth_Evm_V1_MsgEthereumTx, Eth_Evm_V1_MsgEthereumTxResponse>

  func makeUpdateParamsCall(
    _ request: Eth_Evm_V1_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Eth_Evm_V1_MsgUpdateParams, Eth_Evm_V1_MsgUpdateParamsResponse>

  func makeCreateFunTokenCall(
    _ request: Eth_Evm_V1_MsgCreateFunToken,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Eth_Evm_V1_MsgCreateFunToken, Eth_Evm_V1_MsgCreateFunTokenResponse>

  func makeConvertCoinToEvmCall(
    _ request: Eth_Evm_V1_MsgConvertCoinToEvm,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Eth_Evm_V1_MsgConvertCoinToEvm, Eth_Evm_V1_MsgConvertCoinToEvmResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Eth_Evm_V1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Eth_Evm_V1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Eth_Evm_V1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeEthereumTxCall(
    _ request: Eth_Evm_V1_MsgEthereumTx,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Eth_Evm_V1_MsgEthereumTx, Eth_Evm_V1_MsgEthereumTxResponse> {
    return self.makeAsyncUnaryCall(
      path: Eth_Evm_V1_MsgClientMetadata.Methods.ethereumTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEthereumTxInterceptors() ?? []
    )
  }

  internal func makeUpdateParamsCall(
    _ request: Eth_Evm_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Eth_Evm_V1_MsgUpdateParams, Eth_Evm_V1_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Eth_Evm_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  internal func makeCreateFunTokenCall(
    _ request: Eth_Evm_V1_MsgCreateFunToken,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Eth_Evm_V1_MsgCreateFunToken, Eth_Evm_V1_MsgCreateFunTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: Eth_Evm_V1_MsgClientMetadata.Methods.createFunToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFunTokenInterceptors() ?? []
    )
  }

  internal func makeConvertCoinToEvmCall(
    _ request: Eth_Evm_V1_MsgConvertCoinToEvm,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Eth_Evm_V1_MsgConvertCoinToEvm, Eth_Evm_V1_MsgConvertCoinToEvmResponse> {
    return self.makeAsyncUnaryCall(
      path: Eth_Evm_V1_MsgClientMetadata.Methods.convertCoinToEvm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertCoinToEvmInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Eth_Evm_V1_MsgAsyncClientProtocol {
  internal func ethereumTx(
    _ request: Eth_Evm_V1_MsgEthereumTx,
    callOptions: CallOptions? = nil
  ) async throws -> Eth_Evm_V1_MsgEthereumTxResponse {
    return try await self.performAsyncUnaryCall(
      path: Eth_Evm_V1_MsgClientMetadata.Methods.ethereumTx.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEthereumTxInterceptors() ?? []
    )
  }

  internal func updateParams(
    _ request: Eth_Evm_V1_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Eth_Evm_V1_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Eth_Evm_V1_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  internal func createFunToken(
    _ request: Eth_Evm_V1_MsgCreateFunToken,
    callOptions: CallOptions? = nil
  ) async throws -> Eth_Evm_V1_MsgCreateFunTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: Eth_Evm_V1_MsgClientMetadata.Methods.createFunToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFunTokenInterceptors() ?? []
    )
  }

  internal func convertCoinToEvm(
    _ request: Eth_Evm_V1_MsgConvertCoinToEvm,
    callOptions: CallOptions? = nil
  ) async throws -> Eth_Evm_V1_MsgConvertCoinToEvmResponse {
    return try await self.performAsyncUnaryCall(
      path: Eth_Evm_V1_MsgClientMetadata.Methods.convertCoinToEvm.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeConvertCoinToEvmInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Eth_Evm_V1_MsgAsyncClient: Eth_Evm_V1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Eth_Evm_V1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Eth_Evm_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Eth_Evm_V1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'ethereumTx'.
  func makeEthereumTxInterceptors() -> [ClientInterceptor<Eth_Evm_V1_MsgEthereumTx, Eth_Evm_V1_MsgEthereumTxResponse>]

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Eth_Evm_V1_MsgUpdateParams, Eth_Evm_V1_MsgUpdateParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'createFunToken'.
  func makeCreateFunTokenInterceptors() -> [ClientInterceptor<Eth_Evm_V1_MsgCreateFunToken, Eth_Evm_V1_MsgCreateFunTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'convertCoinToEvm'.
  func makeConvertCoinToEvmInterceptors() -> [ClientInterceptor<Eth_Evm_V1_MsgConvertCoinToEvm, Eth_Evm_V1_MsgConvertCoinToEvmResponse>]
}

internal enum Eth_Evm_V1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "eth.evm.v1.Msg",
    methods: [
      Eth_Evm_V1_MsgClientMetadata.Methods.ethereumTx,
      Eth_Evm_V1_MsgClientMetadata.Methods.updateParams,
      Eth_Evm_V1_MsgClientMetadata.Methods.createFunToken,
      Eth_Evm_V1_MsgClientMetadata.Methods.convertCoinToEvm,
    ]
  )

  internal enum Methods {
    internal static let ethereumTx = GRPCMethodDescriptor(
      name: "EthereumTx",
      path: "/eth.evm.v1.Msg/EthereumTx",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/eth.evm.v1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )

    internal static let createFunToken = GRPCMethodDescriptor(
      name: "CreateFunToken",
      path: "/eth.evm.v1.Msg/CreateFunToken",
      type: GRPCCallType.unary
    )

    internal static let convertCoinToEvm = GRPCMethodDescriptor(
      name: "ConvertCoinToEvm",
      path: "/eth.evm.v1.Msg/ConvertCoinToEvm",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the evm Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Eth_Evm_V1_MsgProvider: CallHandlerProvider {
  var interceptors: Eth_Evm_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// EthereumTx defines a method submitting Ethereum transactions.
  func ethereumTx(request: Eth_Evm_V1_MsgEthereumTx, context: StatusOnlyCallContext) -> EventLoopFuture<Eth_Evm_V1_MsgEthereumTxResponse>

  /// UpdateParams defined a governance operation for updating the x/evm module
  /// parameters. The authority is hard-coded to the x/gov module account
  func updateParams(request: Eth_Evm_V1_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<Eth_Evm_V1_MsgUpdateParamsResponse>

  /// CreateFunToken: Create a "FunToken" mapping. Either the ERC20 contract
  /// address can be given to create the mapping to a Bank Coin, or the
  /// denomination for a Bank Coin can be given to create the mapping to an
  /// ERC20.
  func createFunToken(request: Eth_Evm_V1_MsgCreateFunToken, context: StatusOnlyCallContext) -> EventLoopFuture<Eth_Evm_V1_MsgCreateFunTokenResponse>

  /// ConvertCoinToEvm: Sends a coin with a valid "FunToken" mapping to the
  /// given recipient address ("to_eth_addr") in the corresponding ERC20
  /// representation.
  func convertCoinToEvm(request: Eth_Evm_V1_MsgConvertCoinToEvm, context: StatusOnlyCallContext) -> EventLoopFuture<Eth_Evm_V1_MsgConvertCoinToEvmResponse>
}

extension Eth_Evm_V1_MsgProvider {
  internal var serviceName: Substring {
    return Eth_Evm_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "EthereumTx":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Eth_Evm_V1_MsgEthereumTx>(),
        responseSerializer: ProtobufSerializer<Eth_Evm_V1_MsgEthereumTxResponse>(),
        interceptors: self.interceptors?.makeEthereumTxInterceptors() ?? [],
        userFunction: self.ethereumTx(request:context:)
      )

    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Eth_Evm_V1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Eth_Evm_V1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    case "CreateFunToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Eth_Evm_V1_MsgCreateFunToken>(),
        responseSerializer: ProtobufSerializer<Eth_Evm_V1_MsgCreateFunTokenResponse>(),
        interceptors: self.interceptors?.makeCreateFunTokenInterceptors() ?? [],
        userFunction: self.createFunToken(request:context:)
      )

    case "ConvertCoinToEvm":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Eth_Evm_V1_MsgConvertCoinToEvm>(),
        responseSerializer: ProtobufSerializer<Eth_Evm_V1_MsgConvertCoinToEvmResponse>(),
        interceptors: self.interceptors?.makeConvertCoinToEvmInterceptors() ?? [],
        userFunction: self.convertCoinToEvm(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the evm Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Eth_Evm_V1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Eth_Evm_V1_MsgServerInterceptorFactoryProtocol? { get }

  /// EthereumTx defines a method submitting Ethereum transactions.
  @Sendable func ethereumTx(
    request: Eth_Evm_V1_MsgEthereumTx,
    context: GRPCAsyncServerCallContext
  ) async throws -> Eth_Evm_V1_MsgEthereumTxResponse

  /// UpdateParams defined a governance operation for updating the x/evm module
  /// parameters. The authority is hard-coded to the x/gov module account
  @Sendable func updateParams(
    request: Eth_Evm_V1_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Eth_Evm_V1_MsgUpdateParamsResponse

  /// CreateFunToken: Create a "FunToken" mapping. Either the ERC20 contract
  /// address can be given to create the mapping to a Bank Coin, or the
  /// denomination for a Bank Coin can be given to create the mapping to an
  /// ERC20.
  @Sendable func createFunToken(
    request: Eth_Evm_V1_MsgCreateFunToken,
    context: GRPCAsyncServerCallContext
  ) async throws -> Eth_Evm_V1_MsgCreateFunTokenResponse

  /// ConvertCoinToEvm: Sends a coin with a valid "FunToken" mapping to the
  /// given recipient address ("to_eth_addr") in the corresponding ERC20
  /// representation.
  @Sendable func convertCoinToEvm(
    request: Eth_Evm_V1_MsgConvertCoinToEvm,
    context: GRPCAsyncServerCallContext
  ) async throws -> Eth_Evm_V1_MsgConvertCoinToEvmResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Eth_Evm_V1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Eth_Evm_V1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Eth_Evm_V1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Eth_Evm_V1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "EthereumTx":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Eth_Evm_V1_MsgEthereumTx>(),
        responseSerializer: ProtobufSerializer<Eth_Evm_V1_MsgEthereumTxResponse>(),
        interceptors: self.interceptors?.makeEthereumTxInterceptors() ?? [],
        wrapping: self.ethereumTx(request:context:)
      )

    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Eth_Evm_V1_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Eth_Evm_V1_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    case "CreateFunToken":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Eth_Evm_V1_MsgCreateFunToken>(),
        responseSerializer: ProtobufSerializer<Eth_Evm_V1_MsgCreateFunTokenResponse>(),
        interceptors: self.interceptors?.makeCreateFunTokenInterceptors() ?? [],
        wrapping: self.createFunToken(request:context:)
      )

    case "ConvertCoinToEvm":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Eth_Evm_V1_MsgConvertCoinToEvm>(),
        responseSerializer: ProtobufSerializer<Eth_Evm_V1_MsgConvertCoinToEvmResponse>(),
        interceptors: self.interceptors?.makeConvertCoinToEvmInterceptors() ?? [],
        wrapping: self.convertCoinToEvm(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Eth_Evm_V1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'ethereumTx'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeEthereumTxInterceptors() -> [ServerInterceptor<Eth_Evm_V1_MsgEthereumTx, Eth_Evm_V1_MsgEthereumTxResponse>]

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<Eth_Evm_V1_MsgUpdateParams, Eth_Evm_V1_MsgUpdateParamsResponse>]

  /// - Returns: Interceptors to use when handling 'createFunToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateFunTokenInterceptors() -> [ServerInterceptor<Eth_Evm_V1_MsgCreateFunToken, Eth_Evm_V1_MsgCreateFunTokenResponse>]

  /// - Returns: Interceptors to use when handling 'convertCoinToEvm'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeConvertCoinToEvmInterceptors() -> [ServerInterceptor<Eth_Evm_V1_MsgConvertCoinToEvm, Eth_Evm_V1_MsgConvertCoinToEvmResponse>]
}

internal enum Eth_Evm_V1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "eth.evm.v1.Msg",
    methods: [
      Eth_Evm_V1_MsgServerMetadata.Methods.ethereumTx,
      Eth_Evm_V1_MsgServerMetadata.Methods.updateParams,
      Eth_Evm_V1_MsgServerMetadata.Methods.createFunToken,
      Eth_Evm_V1_MsgServerMetadata.Methods.convertCoinToEvm,
    ]
  )

  internal enum Methods {
    internal static let ethereumTx = GRPCMethodDescriptor(
      name: "EthereumTx",
      path: "/eth.evm.v1.Msg/EthereumTx",
      type: GRPCCallType.unary
    )

    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/eth.evm.v1.Msg/UpdateParams",
      type: GRPCCallType.unary
    )

    internal static let createFunToken = GRPCMethodDescriptor(
      name: "CreateFunToken",
      path: "/eth.evm.v1.Msg/CreateFunToken",
      type: GRPCCallType.unary
    )

    internal static let convertCoinToEvm = GRPCMethodDescriptor(
      name: "ConvertCoinToEvm",
      path: "/eth.evm.v1.Msg/ConvertCoinToEvm",
      type: GRPCCallType.unary
    )
  }
}
