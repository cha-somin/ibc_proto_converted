//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kava/cdp/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service for cdp module
///
/// Usage: instantiate `Kava_Cdp_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Kava_Cdp_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Kava_Cdp_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func params(
    _ request: Kava_Cdp_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Cdp_V1beta1_QueryParamsRequest, Kava_Cdp_V1beta1_QueryParamsResponse>

  func accounts(
    _ request: Kava_Cdp_V1beta1_QueryAccountsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Cdp_V1beta1_QueryAccountsRequest, Kava_Cdp_V1beta1_QueryAccountsResponse>

  func totalPrincipal(
    _ request: Kava_Cdp_V1beta1_QueryTotalPrincipalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Cdp_V1beta1_QueryTotalPrincipalRequest, Kava_Cdp_V1beta1_QueryTotalPrincipalResponse>

  func totalCollateral(
    _ request: Kava_Cdp_V1beta1_QueryTotalCollateralRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Cdp_V1beta1_QueryTotalCollateralRequest, Kava_Cdp_V1beta1_QueryTotalCollateralResponse>

  func cdps(
    _ request: Kava_Cdp_V1beta1_QueryCdpsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Cdp_V1beta1_QueryCdpsRequest, Kava_Cdp_V1beta1_QueryCdpsResponse>

  func cdp(
    _ request: Kava_Cdp_V1beta1_QueryCdpRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Cdp_V1beta1_QueryCdpRequest, Kava_Cdp_V1beta1_QueryCdpResponse>

  func deposits(
    _ request: Kava_Cdp_V1beta1_QueryDepositsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kava_Cdp_V1beta1_QueryDepositsRequest, Kava_Cdp_V1beta1_QueryDepositsResponse>
}

extension Kava_Cdp_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "kava.cdp.v1beta1.Query"
  }

  /// Params queries all parameters of the cdp module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Kava_Cdp_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Cdp_V1beta1_QueryParamsRequest, Kava_Cdp_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  /// Accounts queries the CDP module accounts.
  ///
  /// - Parameters:
  ///   - request: Request to send to Accounts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func accounts(
    _ request: Kava_Cdp_V1beta1_QueryAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Cdp_V1beta1_QueryAccountsRequest, Kava_Cdp_V1beta1_QueryAccountsResponse> {
    return self.makeUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.accounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountsInterceptors() ?? []
    )
  }

  /// TotalPrincipal queries the total principal of a given collateral type.
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalPrincipal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalPrincipal(
    _ request: Kava_Cdp_V1beta1_QueryTotalPrincipalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Cdp_V1beta1_QueryTotalPrincipalRequest, Kava_Cdp_V1beta1_QueryTotalPrincipalResponse> {
    return self.makeUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.totalPrincipal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalPrincipalInterceptors() ?? []
    )
  }

  /// TotalCollateral queries the total collateral of a given collateral type.
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalCollateral.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalCollateral(
    _ request: Kava_Cdp_V1beta1_QueryTotalCollateralRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Cdp_V1beta1_QueryTotalCollateralRequest, Kava_Cdp_V1beta1_QueryTotalCollateralResponse> {
    return self.makeUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.totalCollateral.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalCollateralInterceptors() ?? []
    )
  }

  /// Cdps queries all active CDPs.
  ///
  /// - Parameters:
  ///   - request: Request to send to Cdps.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cdps(
    _ request: Kava_Cdp_V1beta1_QueryCdpsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Cdp_V1beta1_QueryCdpsRequest, Kava_Cdp_V1beta1_QueryCdpsResponse> {
    return self.makeUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.cdps.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCdpsInterceptors() ?? []
    )
  }

  /// Cdp queries a CDP with the input owner address and collateral type.
  ///
  /// - Parameters:
  ///   - request: Request to send to Cdp.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cdp(
    _ request: Kava_Cdp_V1beta1_QueryCdpRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Cdp_V1beta1_QueryCdpRequest, Kava_Cdp_V1beta1_QueryCdpResponse> {
    return self.makeUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.cdp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCdpInterceptors() ?? []
    )
  }

  /// Deposits queries deposits associated with the CDP owned by an address for a collateral type.
  ///
  /// - Parameters:
  ///   - request: Request to send to Deposits.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deposits(
    _ request: Kava_Cdp_V1beta1_QueryDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kava_Cdp_V1beta1_QueryDepositsRequest, Kava_Cdp_V1beta1_QueryDepositsResponse> {
    return self.makeUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.deposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Kava_Cdp_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Kava_Cdp_V1beta1_QueryNIOClient")
internal final class Kava_Cdp_V1beta1_QueryClient: Kava_Cdp_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Kava_Cdp_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Kava_Cdp_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the kava.cdp.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kava_Cdp_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Kava_Cdp_V1beta1_QueryNIOClient: Kava_Cdp_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kava_Cdp_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the kava.cdp.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kava_Cdp_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service for cdp module
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kava_Cdp_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kava_Cdp_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeParamsCall(
    _ request: Kava_Cdp_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kava_Cdp_V1beta1_QueryParamsRequest, Kava_Cdp_V1beta1_QueryParamsResponse>

  func makeAccountsCall(
    _ request: Kava_Cdp_V1beta1_QueryAccountsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kava_Cdp_V1beta1_QueryAccountsRequest, Kava_Cdp_V1beta1_QueryAccountsResponse>

  func makeTotalPrincipalCall(
    _ request: Kava_Cdp_V1beta1_QueryTotalPrincipalRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kava_Cdp_V1beta1_QueryTotalPrincipalRequest, Kava_Cdp_V1beta1_QueryTotalPrincipalResponse>

  func makeTotalCollateralCall(
    _ request: Kava_Cdp_V1beta1_QueryTotalCollateralRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kava_Cdp_V1beta1_QueryTotalCollateralRequest, Kava_Cdp_V1beta1_QueryTotalCollateralResponse>

  func makeCdpsCall(
    _ request: Kava_Cdp_V1beta1_QueryCdpsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kava_Cdp_V1beta1_QueryCdpsRequest, Kava_Cdp_V1beta1_QueryCdpsResponse>

  func makeCdpCall(
    _ request: Kava_Cdp_V1beta1_QueryCdpRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kava_Cdp_V1beta1_QueryCdpRequest, Kava_Cdp_V1beta1_QueryCdpResponse>

  func makeDepositsCall(
    _ request: Kava_Cdp_V1beta1_QueryDepositsRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kava_Cdp_V1beta1_QueryDepositsRequest, Kava_Cdp_V1beta1_QueryDepositsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kava_Cdp_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kava_Cdp_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Kava_Cdp_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeParamsCall(
    _ request: Kava_Cdp_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kava_Cdp_V1beta1_QueryParamsRequest, Kava_Cdp_V1beta1_QueryParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func makeAccountsCall(
    _ request: Kava_Cdp_V1beta1_QueryAccountsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kava_Cdp_V1beta1_QueryAccountsRequest, Kava_Cdp_V1beta1_QueryAccountsResponse> {
    return self.makeAsyncUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.accounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountsInterceptors() ?? []
    )
  }

  internal func makeTotalPrincipalCall(
    _ request: Kava_Cdp_V1beta1_QueryTotalPrincipalRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kava_Cdp_V1beta1_QueryTotalPrincipalRequest, Kava_Cdp_V1beta1_QueryTotalPrincipalResponse> {
    return self.makeAsyncUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.totalPrincipal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalPrincipalInterceptors() ?? []
    )
  }

  internal func makeTotalCollateralCall(
    _ request: Kava_Cdp_V1beta1_QueryTotalCollateralRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kava_Cdp_V1beta1_QueryTotalCollateralRequest, Kava_Cdp_V1beta1_QueryTotalCollateralResponse> {
    return self.makeAsyncUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.totalCollateral.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalCollateralInterceptors() ?? []
    )
  }

  internal func makeCdpsCall(
    _ request: Kava_Cdp_V1beta1_QueryCdpsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kava_Cdp_V1beta1_QueryCdpsRequest, Kava_Cdp_V1beta1_QueryCdpsResponse> {
    return self.makeAsyncUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.cdps.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCdpsInterceptors() ?? []
    )
  }

  internal func makeCdpCall(
    _ request: Kava_Cdp_V1beta1_QueryCdpRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kava_Cdp_V1beta1_QueryCdpRequest, Kava_Cdp_V1beta1_QueryCdpResponse> {
    return self.makeAsyncUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.cdp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCdpInterceptors() ?? []
    )
  }

  internal func makeDepositsCall(
    _ request: Kava_Cdp_V1beta1_QueryDepositsRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kava_Cdp_V1beta1_QueryDepositsRequest, Kava_Cdp_V1beta1_QueryDepositsResponse> {
    return self.makeAsyncUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.deposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kava_Cdp_V1beta1_QueryAsyncClientProtocol {
  internal func params(
    _ request: Kava_Cdp_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kava_Cdp_V1beta1_QueryParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.params.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeParamsInterceptors() ?? []
    )
  }

  internal func accounts(
    _ request: Kava_Cdp_V1beta1_QueryAccountsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kava_Cdp_V1beta1_QueryAccountsResponse {
    return try await self.performAsyncUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.accounts.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAccountsInterceptors() ?? []
    )
  }

  internal func totalPrincipal(
    _ request: Kava_Cdp_V1beta1_QueryTotalPrincipalRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kava_Cdp_V1beta1_QueryTotalPrincipalResponse {
    return try await self.performAsyncUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.totalPrincipal.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalPrincipalInterceptors() ?? []
    )
  }

  internal func totalCollateral(
    _ request: Kava_Cdp_V1beta1_QueryTotalCollateralRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kava_Cdp_V1beta1_QueryTotalCollateralResponse {
    return try await self.performAsyncUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.totalCollateral.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalCollateralInterceptors() ?? []
    )
  }

  internal func cdps(
    _ request: Kava_Cdp_V1beta1_QueryCdpsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kava_Cdp_V1beta1_QueryCdpsResponse {
    return try await self.performAsyncUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.cdps.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCdpsInterceptors() ?? []
    )
  }

  internal func cdp(
    _ request: Kava_Cdp_V1beta1_QueryCdpRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kava_Cdp_V1beta1_QueryCdpResponse {
    return try await self.performAsyncUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.cdp.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCdpInterceptors() ?? []
    )
  }

  internal func deposits(
    _ request: Kava_Cdp_V1beta1_QueryDepositsRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kava_Cdp_V1beta1_QueryDepositsResponse {
    return try await self.performAsyncUnaryCall(
      path: Kava_Cdp_V1beta1_QueryClientMetadata.Methods.deposits.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDepositsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Kava_Cdp_V1beta1_QueryAsyncClient: Kava_Cdp_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kava_Cdp_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kava_Cdp_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Kava_Cdp_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'params'.
  func makeParamsInterceptors() -> [ClientInterceptor<Kava_Cdp_V1beta1_QueryParamsRequest, Kava_Cdp_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'accounts'.
  func makeAccountsInterceptors() -> [ClientInterceptor<Kava_Cdp_V1beta1_QueryAccountsRequest, Kava_Cdp_V1beta1_QueryAccountsResponse>]

  /// - Returns: Interceptors to use when invoking 'totalPrincipal'.
  func makeTotalPrincipalInterceptors() -> [ClientInterceptor<Kava_Cdp_V1beta1_QueryTotalPrincipalRequest, Kava_Cdp_V1beta1_QueryTotalPrincipalResponse>]

  /// - Returns: Interceptors to use when invoking 'totalCollateral'.
  func makeTotalCollateralInterceptors() -> [ClientInterceptor<Kava_Cdp_V1beta1_QueryTotalCollateralRequest, Kava_Cdp_V1beta1_QueryTotalCollateralResponse>]

  /// - Returns: Interceptors to use when invoking 'cdps'.
  func makeCdpsInterceptors() -> [ClientInterceptor<Kava_Cdp_V1beta1_QueryCdpsRequest, Kava_Cdp_V1beta1_QueryCdpsResponse>]

  /// - Returns: Interceptors to use when invoking 'cdp'.
  func makeCdpInterceptors() -> [ClientInterceptor<Kava_Cdp_V1beta1_QueryCdpRequest, Kava_Cdp_V1beta1_QueryCdpResponse>]

  /// - Returns: Interceptors to use when invoking 'deposits'.
  func makeDepositsInterceptors() -> [ClientInterceptor<Kava_Cdp_V1beta1_QueryDepositsRequest, Kava_Cdp_V1beta1_QueryDepositsResponse>]
}

internal enum Kava_Cdp_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "kava.cdp.v1beta1.Query",
    methods: [
      Kava_Cdp_V1beta1_QueryClientMetadata.Methods.params,
      Kava_Cdp_V1beta1_QueryClientMetadata.Methods.accounts,
      Kava_Cdp_V1beta1_QueryClientMetadata.Methods.totalPrincipal,
      Kava_Cdp_V1beta1_QueryClientMetadata.Methods.totalCollateral,
      Kava_Cdp_V1beta1_QueryClientMetadata.Methods.cdps,
      Kava_Cdp_V1beta1_QueryClientMetadata.Methods.cdp,
      Kava_Cdp_V1beta1_QueryClientMetadata.Methods.deposits,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/kava.cdp.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let accounts = GRPCMethodDescriptor(
      name: "Accounts",
      path: "/kava.cdp.v1beta1.Query/Accounts",
      type: GRPCCallType.unary
    )

    internal static let totalPrincipal = GRPCMethodDescriptor(
      name: "TotalPrincipal",
      path: "/kava.cdp.v1beta1.Query/TotalPrincipal",
      type: GRPCCallType.unary
    )

    internal static let totalCollateral = GRPCMethodDescriptor(
      name: "TotalCollateral",
      path: "/kava.cdp.v1beta1.Query/TotalCollateral",
      type: GRPCCallType.unary
    )

    internal static let cdps = GRPCMethodDescriptor(
      name: "Cdps",
      path: "/kava.cdp.v1beta1.Query/Cdps",
      type: GRPCCallType.unary
    )

    internal static let cdp = GRPCMethodDescriptor(
      name: "Cdp",
      path: "/kava.cdp.v1beta1.Query/Cdp",
      type: GRPCCallType.unary
    )

    internal static let deposits = GRPCMethodDescriptor(
      name: "Deposits",
      path: "/kava.cdp.v1beta1.Query/Deposits",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service for cdp module
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Kava_Cdp_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Kava_Cdp_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries all parameters of the cdp module.
  func params(request: Kava_Cdp_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Cdp_V1beta1_QueryParamsResponse>

  /// Accounts queries the CDP module accounts.
  func accounts(request: Kava_Cdp_V1beta1_QueryAccountsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Cdp_V1beta1_QueryAccountsResponse>

  /// TotalPrincipal queries the total principal of a given collateral type.
  func totalPrincipal(request: Kava_Cdp_V1beta1_QueryTotalPrincipalRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Cdp_V1beta1_QueryTotalPrincipalResponse>

  /// TotalCollateral queries the total collateral of a given collateral type.
  func totalCollateral(request: Kava_Cdp_V1beta1_QueryTotalCollateralRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Cdp_V1beta1_QueryTotalCollateralResponse>

  /// Cdps queries all active CDPs.
  func cdps(request: Kava_Cdp_V1beta1_QueryCdpsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Cdp_V1beta1_QueryCdpsResponse>

  /// Cdp queries a CDP with the input owner address and collateral type.
  func cdp(request: Kava_Cdp_V1beta1_QueryCdpRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Cdp_V1beta1_QueryCdpResponse>

  /// Deposits queries deposits associated with the CDP owned by an address for a collateral type.
  func deposits(request: Kava_Cdp_V1beta1_QueryDepositsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kava_Cdp_V1beta1_QueryDepositsResponse>
}

extension Kava_Cdp_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Kava_Cdp_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Cdp_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Cdp_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        userFunction: self.params(request:context:)
      )

    case "Accounts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Cdp_V1beta1_QueryAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Cdp_V1beta1_QueryAccountsResponse>(),
        interceptors: self.interceptors?.makeAccountsInterceptors() ?? [],
        userFunction: self.accounts(request:context:)
      )

    case "TotalPrincipal":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Cdp_V1beta1_QueryTotalPrincipalRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Cdp_V1beta1_QueryTotalPrincipalResponse>(),
        interceptors: self.interceptors?.makeTotalPrincipalInterceptors() ?? [],
        userFunction: self.totalPrincipal(request:context:)
      )

    case "TotalCollateral":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Cdp_V1beta1_QueryTotalCollateralRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Cdp_V1beta1_QueryTotalCollateralResponse>(),
        interceptors: self.interceptors?.makeTotalCollateralInterceptors() ?? [],
        userFunction: self.totalCollateral(request:context:)
      )

    case "Cdps":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Cdp_V1beta1_QueryCdpsRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Cdp_V1beta1_QueryCdpsResponse>(),
        interceptors: self.interceptors?.makeCdpsInterceptors() ?? [],
        userFunction: self.cdps(request:context:)
      )

    case "Cdp":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Cdp_V1beta1_QueryCdpRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Cdp_V1beta1_QueryCdpResponse>(),
        interceptors: self.interceptors?.makeCdpInterceptors() ?? [],
        userFunction: self.cdp(request:context:)
      )

    case "Deposits":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Cdp_V1beta1_QueryDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Cdp_V1beta1_QueryDepositsResponse>(),
        interceptors: self.interceptors?.makeDepositsInterceptors() ?? [],
        userFunction: self.deposits(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service for cdp module
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kava_Cdp_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kava_Cdp_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Params queries all parameters of the cdp module.
  @Sendable func params(
    request: Kava_Cdp_V1beta1_QueryParamsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kava_Cdp_V1beta1_QueryParamsResponse

  /// Accounts queries the CDP module accounts.
  @Sendable func accounts(
    request: Kava_Cdp_V1beta1_QueryAccountsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kava_Cdp_V1beta1_QueryAccountsResponse

  /// TotalPrincipal queries the total principal of a given collateral type.
  @Sendable func totalPrincipal(
    request: Kava_Cdp_V1beta1_QueryTotalPrincipalRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kava_Cdp_V1beta1_QueryTotalPrincipalResponse

  /// TotalCollateral queries the total collateral of a given collateral type.
  @Sendable func totalCollateral(
    request: Kava_Cdp_V1beta1_QueryTotalCollateralRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kava_Cdp_V1beta1_QueryTotalCollateralResponse

  /// Cdps queries all active CDPs.
  @Sendable func cdps(
    request: Kava_Cdp_V1beta1_QueryCdpsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kava_Cdp_V1beta1_QueryCdpsResponse

  /// Cdp queries a CDP with the input owner address and collateral type.
  @Sendable func cdp(
    request: Kava_Cdp_V1beta1_QueryCdpRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kava_Cdp_V1beta1_QueryCdpResponse

  /// Deposits queries deposits associated with the CDP owned by an address for a collateral type.
  @Sendable func deposits(
    request: Kava_Cdp_V1beta1_QueryDepositsRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kava_Cdp_V1beta1_QueryDepositsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kava_Cdp_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kava_Cdp_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Kava_Cdp_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Kava_Cdp_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Params":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Cdp_V1beta1_QueryParamsRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Cdp_V1beta1_QueryParamsResponse>(),
        interceptors: self.interceptors?.makeParamsInterceptors() ?? [],
        wrapping: self.params(request:context:)
      )

    case "Accounts":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Cdp_V1beta1_QueryAccountsRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Cdp_V1beta1_QueryAccountsResponse>(),
        interceptors: self.interceptors?.makeAccountsInterceptors() ?? [],
        wrapping: self.accounts(request:context:)
      )

    case "TotalPrincipal":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Cdp_V1beta1_QueryTotalPrincipalRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Cdp_V1beta1_QueryTotalPrincipalResponse>(),
        interceptors: self.interceptors?.makeTotalPrincipalInterceptors() ?? [],
        wrapping: self.totalPrincipal(request:context:)
      )

    case "TotalCollateral":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Cdp_V1beta1_QueryTotalCollateralRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Cdp_V1beta1_QueryTotalCollateralResponse>(),
        interceptors: self.interceptors?.makeTotalCollateralInterceptors() ?? [],
        wrapping: self.totalCollateral(request:context:)
      )

    case "Cdps":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Cdp_V1beta1_QueryCdpsRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Cdp_V1beta1_QueryCdpsResponse>(),
        interceptors: self.interceptors?.makeCdpsInterceptors() ?? [],
        wrapping: self.cdps(request:context:)
      )

    case "Cdp":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Cdp_V1beta1_QueryCdpRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Cdp_V1beta1_QueryCdpResponse>(),
        interceptors: self.interceptors?.makeCdpInterceptors() ?? [],
        wrapping: self.cdp(request:context:)
      )

    case "Deposits":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kava_Cdp_V1beta1_QueryDepositsRequest>(),
        responseSerializer: ProtobufSerializer<Kava_Cdp_V1beta1_QueryDepositsResponse>(),
        interceptors: self.interceptors?.makeDepositsInterceptors() ?? [],
        wrapping: self.deposits(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Kava_Cdp_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'params'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeParamsInterceptors() -> [ServerInterceptor<Kava_Cdp_V1beta1_QueryParamsRequest, Kava_Cdp_V1beta1_QueryParamsResponse>]

  /// - Returns: Interceptors to use when handling 'accounts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAccountsInterceptors() -> [ServerInterceptor<Kava_Cdp_V1beta1_QueryAccountsRequest, Kava_Cdp_V1beta1_QueryAccountsResponse>]

  /// - Returns: Interceptors to use when handling 'totalPrincipal'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalPrincipalInterceptors() -> [ServerInterceptor<Kava_Cdp_V1beta1_QueryTotalPrincipalRequest, Kava_Cdp_V1beta1_QueryTotalPrincipalResponse>]

  /// - Returns: Interceptors to use when handling 'totalCollateral'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTotalCollateralInterceptors() -> [ServerInterceptor<Kava_Cdp_V1beta1_QueryTotalCollateralRequest, Kava_Cdp_V1beta1_QueryTotalCollateralResponse>]

  /// - Returns: Interceptors to use when handling 'cdps'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCdpsInterceptors() -> [ServerInterceptor<Kava_Cdp_V1beta1_QueryCdpsRequest, Kava_Cdp_V1beta1_QueryCdpsResponse>]

  /// - Returns: Interceptors to use when handling 'cdp'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCdpInterceptors() -> [ServerInterceptor<Kava_Cdp_V1beta1_QueryCdpRequest, Kava_Cdp_V1beta1_QueryCdpResponse>]

  /// - Returns: Interceptors to use when handling 'deposits'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDepositsInterceptors() -> [ServerInterceptor<Kava_Cdp_V1beta1_QueryDepositsRequest, Kava_Cdp_V1beta1_QueryDepositsResponse>]
}

internal enum Kava_Cdp_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "kava.cdp.v1beta1.Query",
    methods: [
      Kava_Cdp_V1beta1_QueryServerMetadata.Methods.params,
      Kava_Cdp_V1beta1_QueryServerMetadata.Methods.accounts,
      Kava_Cdp_V1beta1_QueryServerMetadata.Methods.totalPrincipal,
      Kava_Cdp_V1beta1_QueryServerMetadata.Methods.totalCollateral,
      Kava_Cdp_V1beta1_QueryServerMetadata.Methods.cdps,
      Kava_Cdp_V1beta1_QueryServerMetadata.Methods.cdp,
      Kava_Cdp_V1beta1_QueryServerMetadata.Methods.deposits,
    ]
  )

  internal enum Methods {
    internal static let params = GRPCMethodDescriptor(
      name: "Params",
      path: "/kava.cdp.v1beta1.Query/Params",
      type: GRPCCallType.unary
    )

    internal static let accounts = GRPCMethodDescriptor(
      name: "Accounts",
      path: "/kava.cdp.v1beta1.Query/Accounts",
      type: GRPCCallType.unary
    )

    internal static let totalPrincipal = GRPCMethodDescriptor(
      name: "TotalPrincipal",
      path: "/kava.cdp.v1beta1.Query/TotalPrincipal",
      type: GRPCCallType.unary
    )

    internal static let totalCollateral = GRPCMethodDescriptor(
      name: "TotalCollateral",
      path: "/kava.cdp.v1beta1.Query/TotalCollateral",
      type: GRPCCallType.unary
    )

    internal static let cdps = GRPCMethodDescriptor(
      name: "Cdps",
      path: "/kava.cdp.v1beta1.Query/Cdps",
      type: GRPCCallType.unary
    )

    internal static let cdp = GRPCMethodDescriptor(
      name: "Cdp",
      path: "/kava.cdp.v1beta1.Query/Cdp",
      type: GRPCCallType.unary
    )

    internal static let deposits = GRPCMethodDescriptor(
      name: "Deposits",
      path: "/kava.cdp.v1beta1.Query/Deposits",
      type: GRPCCallType.unary
    )
  }
}
