//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: shentu/oracle/v1alpha1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the shield Msg service.
///
/// Usage: instantiate `Shentu_Oracle_V1alpha1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Shentu_Oracle_V1alpha1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Shentu_Oracle_V1alpha1_MsgClientInterceptorFactoryProtocol? { get }

  func createOperator(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateOperator,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgCreateOperator, Shentu_Oracle_V1alpha1_MsgCreateOperatorResponse>

  func removeOperator(
    _ request: Shentu_Oracle_V1alpha1_MsgRemoveOperator,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgRemoveOperator, Shentu_Oracle_V1alpha1_MsgRemoveOperatorResponse>

  func addCollateral(
    _ request: Shentu_Oracle_V1alpha1_MsgAddCollateral,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgAddCollateral, Shentu_Oracle_V1alpha1_MsgAddCollateralResponse>

  func reduceCollateral(
    _ request: Shentu_Oracle_V1alpha1_MsgReduceCollateral,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgReduceCollateral, Shentu_Oracle_V1alpha1_MsgReduceCollateralResponse>

  func withdrawReward(
    _ request: Shentu_Oracle_V1alpha1_MsgWithdrawReward,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgWithdrawReward, Shentu_Oracle_V1alpha1_MsgWithdrawRewardResponse>

  func createTask(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateTask,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgCreateTask, Shentu_Oracle_V1alpha1_MsgCreateTaskResponse>

  func taskResponse(
    _ request: Shentu_Oracle_V1alpha1_MsgTaskResponse,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgTaskResponse, Shentu_Oracle_V1alpha1_MsgTaskResponseResponse>

  func deleteTask(
    _ request: Shentu_Oracle_V1alpha1_MsgDeleteTask,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgDeleteTask, Shentu_Oracle_V1alpha1_MsgDeleteTaskResponse>

  func createTxTask(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateTxTask,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgCreateTxTask, Shentu_Oracle_V1alpha1_MsgCreateTxTaskResponse>

  func txTaskResponse(
    _ request: Shentu_Oracle_V1alpha1_MsgTxTaskResponse,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgTxTaskResponse, Shentu_Oracle_V1alpha1_MsgTxTaskResponseResponse>

  func deleteTxTask(
    _ request: Shentu_Oracle_V1alpha1_MsgDeleteTxTask,
    callOptions: CallOptions?
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgDeleteTxTask, Shentu_Oracle_V1alpha1_MsgDeleteTxTaskResponse>
}

extension Shentu_Oracle_V1alpha1_MsgClientProtocol {
  internal var serviceName: String {
    return "shentu.oracle.v1alpha1.Msg"
  }

  /// Unary call to CreateOperator
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateOperator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createOperator(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateOperator,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgCreateOperator, Shentu_Oracle_V1alpha1_MsgCreateOperatorResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.createOperator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOperatorInterceptors() ?? []
    )
  }

  /// Unary call to RemoveOperator
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveOperator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeOperator(
    _ request: Shentu_Oracle_V1alpha1_MsgRemoveOperator,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgRemoveOperator, Shentu_Oracle_V1alpha1_MsgRemoveOperatorResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.removeOperator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveOperatorInterceptors() ?? []
    )
  }

  /// Unary call to AddCollateral
  ///
  /// - Parameters:
  ///   - request: Request to send to AddCollateral.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addCollateral(
    _ request: Shentu_Oracle_V1alpha1_MsgAddCollateral,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgAddCollateral, Shentu_Oracle_V1alpha1_MsgAddCollateralResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.addCollateral.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCollateralInterceptors() ?? []
    )
  }

  /// Unary call to ReduceCollateral
  ///
  /// - Parameters:
  ///   - request: Request to send to ReduceCollateral.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func reduceCollateral(
    _ request: Shentu_Oracle_V1alpha1_MsgReduceCollateral,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgReduceCollateral, Shentu_Oracle_V1alpha1_MsgReduceCollateralResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.reduceCollateral.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReduceCollateralInterceptors() ?? []
    )
  }

  /// Unary call to WithdrawReward
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawReward.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawReward(
    _ request: Shentu_Oracle_V1alpha1_MsgWithdrawReward,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgWithdrawReward, Shentu_Oracle_V1alpha1_MsgWithdrawRewardResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.withdrawReward.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawRewardInterceptors() ?? []
    )
  }

  /// Unary call to CreateTask
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createTask(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateTask,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgCreateTask, Shentu_Oracle_V1alpha1_MsgCreateTaskResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.createTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTaskInterceptors() ?? []
    )
  }

  /// Unary call to TaskResponse
  ///
  /// - Parameters:
  ///   - request: Request to send to TaskResponse.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func taskResponse(
    _ request: Shentu_Oracle_V1alpha1_MsgTaskResponse,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgTaskResponse, Shentu_Oracle_V1alpha1_MsgTaskResponseResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.taskResponse.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTaskResponseInterceptors() ?? []
    )
  }

  /// Unary call to DeleteTask
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteTask(
    _ request: Shentu_Oracle_V1alpha1_MsgDeleteTask,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgDeleteTask, Shentu_Oracle_V1alpha1_MsgDeleteTaskResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.deleteTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTaskInterceptors() ?? []
    )
  }

  /// Unary call to CreateTxTask
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTxTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createTxTask(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateTxTask,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgCreateTxTask, Shentu_Oracle_V1alpha1_MsgCreateTxTaskResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.createTxTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTxTaskInterceptors() ?? []
    )
  }

  /// Unary call to TxTaskResponse
  ///
  /// - Parameters:
  ///   - request: Request to send to TxTaskResponse.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func txTaskResponse(
    _ request: Shentu_Oracle_V1alpha1_MsgTxTaskResponse,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgTxTaskResponse, Shentu_Oracle_V1alpha1_MsgTxTaskResponseResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.txTaskResponse.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxTaskResponseInterceptors() ?? []
    )
  }

  /// Unary call to DeleteTxTask
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteTxTask.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteTxTask(
    _ request: Shentu_Oracle_V1alpha1_MsgDeleteTxTask,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Shentu_Oracle_V1alpha1_MsgDeleteTxTask, Shentu_Oracle_V1alpha1_MsgDeleteTxTaskResponse> {
    return self.makeUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.deleteTxTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTxTaskInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Shentu_Oracle_V1alpha1_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Shentu_Oracle_V1alpha1_MsgNIOClient")
internal final class Shentu_Oracle_V1alpha1_MsgClient: Shentu_Oracle_V1alpha1_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Shentu_Oracle_V1alpha1_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Shentu_Oracle_V1alpha1_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the shentu.oracle.v1alpha1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Oracle_V1alpha1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Shentu_Oracle_V1alpha1_MsgNIOClient: Shentu_Oracle_V1alpha1_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Shentu_Oracle_V1alpha1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the shentu.oracle.v1alpha1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Oracle_V1alpha1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the shield Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Shentu_Oracle_V1alpha1_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Shentu_Oracle_V1alpha1_MsgClientInterceptorFactoryProtocol? { get }

  func makeCreateOperatorCall(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateOperator,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgCreateOperator, Shentu_Oracle_V1alpha1_MsgCreateOperatorResponse>

  func makeRemoveOperatorCall(
    _ request: Shentu_Oracle_V1alpha1_MsgRemoveOperator,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgRemoveOperator, Shentu_Oracle_V1alpha1_MsgRemoveOperatorResponse>

  func makeAddCollateralCall(
    _ request: Shentu_Oracle_V1alpha1_MsgAddCollateral,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgAddCollateral, Shentu_Oracle_V1alpha1_MsgAddCollateralResponse>

  func makeReduceCollateralCall(
    _ request: Shentu_Oracle_V1alpha1_MsgReduceCollateral,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgReduceCollateral, Shentu_Oracle_V1alpha1_MsgReduceCollateralResponse>

  func makeWithdrawRewardCall(
    _ request: Shentu_Oracle_V1alpha1_MsgWithdrawReward,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgWithdrawReward, Shentu_Oracle_V1alpha1_MsgWithdrawRewardResponse>

  func makeCreateTaskCall(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateTask,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgCreateTask, Shentu_Oracle_V1alpha1_MsgCreateTaskResponse>

  func makeTaskResponseCall(
    _ request: Shentu_Oracle_V1alpha1_MsgTaskResponse,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgTaskResponse, Shentu_Oracle_V1alpha1_MsgTaskResponseResponse>

  func makeDeleteTaskCall(
    _ request: Shentu_Oracle_V1alpha1_MsgDeleteTask,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgDeleteTask, Shentu_Oracle_V1alpha1_MsgDeleteTaskResponse>

  func makeCreateTxTaskCall(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateTxTask,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgCreateTxTask, Shentu_Oracle_V1alpha1_MsgCreateTxTaskResponse>

  func makeTxTaskResponseCall(
    _ request: Shentu_Oracle_V1alpha1_MsgTxTaskResponse,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgTxTaskResponse, Shentu_Oracle_V1alpha1_MsgTxTaskResponseResponse>

  func makeDeleteTxTaskCall(
    _ request: Shentu_Oracle_V1alpha1_MsgDeleteTxTask,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgDeleteTxTask, Shentu_Oracle_V1alpha1_MsgDeleteTxTaskResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Shentu_Oracle_V1alpha1_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Shentu_Oracle_V1alpha1_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Shentu_Oracle_V1alpha1_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateOperatorCall(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateOperator,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgCreateOperator, Shentu_Oracle_V1alpha1_MsgCreateOperatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.createOperator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOperatorInterceptors() ?? []
    )
  }

  internal func makeRemoveOperatorCall(
    _ request: Shentu_Oracle_V1alpha1_MsgRemoveOperator,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgRemoveOperator, Shentu_Oracle_V1alpha1_MsgRemoveOperatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.removeOperator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveOperatorInterceptors() ?? []
    )
  }

  internal func makeAddCollateralCall(
    _ request: Shentu_Oracle_V1alpha1_MsgAddCollateral,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgAddCollateral, Shentu_Oracle_V1alpha1_MsgAddCollateralResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.addCollateral.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCollateralInterceptors() ?? []
    )
  }

  internal func makeReduceCollateralCall(
    _ request: Shentu_Oracle_V1alpha1_MsgReduceCollateral,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgReduceCollateral, Shentu_Oracle_V1alpha1_MsgReduceCollateralResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.reduceCollateral.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReduceCollateralInterceptors() ?? []
    )
  }

  internal func makeWithdrawRewardCall(
    _ request: Shentu_Oracle_V1alpha1_MsgWithdrawReward,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgWithdrawReward, Shentu_Oracle_V1alpha1_MsgWithdrawRewardResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.withdrawReward.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawRewardInterceptors() ?? []
    )
  }

  internal func makeCreateTaskCall(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateTask,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgCreateTask, Shentu_Oracle_V1alpha1_MsgCreateTaskResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.createTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTaskInterceptors() ?? []
    )
  }

  internal func makeTaskResponseCall(
    _ request: Shentu_Oracle_V1alpha1_MsgTaskResponse,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgTaskResponse, Shentu_Oracle_V1alpha1_MsgTaskResponseResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.taskResponse.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTaskResponseInterceptors() ?? []
    )
  }

  internal func makeDeleteTaskCall(
    _ request: Shentu_Oracle_V1alpha1_MsgDeleteTask,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgDeleteTask, Shentu_Oracle_V1alpha1_MsgDeleteTaskResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.deleteTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTaskInterceptors() ?? []
    )
  }

  internal func makeCreateTxTaskCall(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateTxTask,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgCreateTxTask, Shentu_Oracle_V1alpha1_MsgCreateTxTaskResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.createTxTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTxTaskInterceptors() ?? []
    )
  }

  internal func makeTxTaskResponseCall(
    _ request: Shentu_Oracle_V1alpha1_MsgTxTaskResponse,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgTxTaskResponse, Shentu_Oracle_V1alpha1_MsgTxTaskResponseResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.txTaskResponse.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxTaskResponseInterceptors() ?? []
    )
  }

  internal func makeDeleteTxTaskCall(
    _ request: Shentu_Oracle_V1alpha1_MsgDeleteTxTask,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Shentu_Oracle_V1alpha1_MsgDeleteTxTask, Shentu_Oracle_V1alpha1_MsgDeleteTxTaskResponse> {
    return self.makeAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.deleteTxTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTxTaskInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Shentu_Oracle_V1alpha1_MsgAsyncClientProtocol {
  internal func createOperator(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateOperator,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_MsgCreateOperatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.createOperator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOperatorInterceptors() ?? []
    )
  }

  internal func removeOperator(
    _ request: Shentu_Oracle_V1alpha1_MsgRemoveOperator,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_MsgRemoveOperatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.removeOperator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveOperatorInterceptors() ?? []
    )
  }

  internal func addCollateral(
    _ request: Shentu_Oracle_V1alpha1_MsgAddCollateral,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_MsgAddCollateralResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.addCollateral.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCollateralInterceptors() ?? []
    )
  }

  internal func reduceCollateral(
    _ request: Shentu_Oracle_V1alpha1_MsgReduceCollateral,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_MsgReduceCollateralResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.reduceCollateral.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeReduceCollateralInterceptors() ?? []
    )
  }

  internal func withdrawReward(
    _ request: Shentu_Oracle_V1alpha1_MsgWithdrawReward,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_MsgWithdrawRewardResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.withdrawReward.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawRewardInterceptors() ?? []
    )
  }

  internal func createTask(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateTask,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_MsgCreateTaskResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.createTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTaskInterceptors() ?? []
    )
  }

  internal func taskResponse(
    _ request: Shentu_Oracle_V1alpha1_MsgTaskResponse,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_MsgTaskResponseResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.taskResponse.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTaskResponseInterceptors() ?? []
    )
  }

  internal func deleteTask(
    _ request: Shentu_Oracle_V1alpha1_MsgDeleteTask,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_MsgDeleteTaskResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.deleteTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTaskInterceptors() ?? []
    )
  }

  internal func createTxTask(
    _ request: Shentu_Oracle_V1alpha1_MsgCreateTxTask,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_MsgCreateTxTaskResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.createTxTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTxTaskInterceptors() ?? []
    )
  }

  internal func txTaskResponse(
    _ request: Shentu_Oracle_V1alpha1_MsgTxTaskResponse,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_MsgTxTaskResponseResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.txTaskResponse.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTxTaskResponseInterceptors() ?? []
    )
  }

  internal func deleteTxTask(
    _ request: Shentu_Oracle_V1alpha1_MsgDeleteTxTask,
    callOptions: CallOptions? = nil
  ) async throws -> Shentu_Oracle_V1alpha1_MsgDeleteTxTaskResponse {
    return try await self.performAsyncUnaryCall(
      path: Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.deleteTxTask.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTxTaskInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Shentu_Oracle_V1alpha1_MsgAsyncClient: Shentu_Oracle_V1alpha1_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Shentu_Oracle_V1alpha1_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Shentu_Oracle_V1alpha1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Shentu_Oracle_V1alpha1_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createOperator'.
  func makeCreateOperatorInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_MsgCreateOperator, Shentu_Oracle_V1alpha1_MsgCreateOperatorResponse>]

  /// - Returns: Interceptors to use when invoking 'removeOperator'.
  func makeRemoveOperatorInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_MsgRemoveOperator, Shentu_Oracle_V1alpha1_MsgRemoveOperatorResponse>]

  /// - Returns: Interceptors to use when invoking 'addCollateral'.
  func makeAddCollateralInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_MsgAddCollateral, Shentu_Oracle_V1alpha1_MsgAddCollateralResponse>]

  /// - Returns: Interceptors to use when invoking 'reduceCollateral'.
  func makeReduceCollateralInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_MsgReduceCollateral, Shentu_Oracle_V1alpha1_MsgReduceCollateralResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawReward'.
  func makeWithdrawRewardInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_MsgWithdrawReward, Shentu_Oracle_V1alpha1_MsgWithdrawRewardResponse>]

  /// - Returns: Interceptors to use when invoking 'createTask'.
  func makeCreateTaskInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_MsgCreateTask, Shentu_Oracle_V1alpha1_MsgCreateTaskResponse>]

  /// - Returns: Interceptors to use when invoking 'taskResponse'.
  func makeTaskResponseInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_MsgTaskResponse, Shentu_Oracle_V1alpha1_MsgTaskResponseResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteTask'.
  func makeDeleteTaskInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_MsgDeleteTask, Shentu_Oracle_V1alpha1_MsgDeleteTaskResponse>]

  /// - Returns: Interceptors to use when invoking 'createTxTask'.
  func makeCreateTxTaskInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_MsgCreateTxTask, Shentu_Oracle_V1alpha1_MsgCreateTxTaskResponse>]

  /// - Returns: Interceptors to use when invoking 'txTaskResponse'.
  func makeTxTaskResponseInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_MsgTxTaskResponse, Shentu_Oracle_V1alpha1_MsgTxTaskResponseResponse>]

  /// - Returns: Interceptors to use when invoking 'deleteTxTask'.
  func makeDeleteTxTaskInterceptors() -> [ClientInterceptor<Shentu_Oracle_V1alpha1_MsgDeleteTxTask, Shentu_Oracle_V1alpha1_MsgDeleteTxTaskResponse>]
}

internal enum Shentu_Oracle_V1alpha1_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "shentu.oracle.v1alpha1.Msg",
    methods: [
      Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.createOperator,
      Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.removeOperator,
      Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.addCollateral,
      Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.reduceCollateral,
      Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.withdrawReward,
      Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.createTask,
      Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.taskResponse,
      Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.deleteTask,
      Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.createTxTask,
      Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.txTaskResponse,
      Shentu_Oracle_V1alpha1_MsgClientMetadata.Methods.deleteTxTask,
    ]
  )

  internal enum Methods {
    internal static let createOperator = GRPCMethodDescriptor(
      name: "CreateOperator",
      path: "/shentu.oracle.v1alpha1.Msg/CreateOperator",
      type: GRPCCallType.unary
    )

    internal static let removeOperator = GRPCMethodDescriptor(
      name: "RemoveOperator",
      path: "/shentu.oracle.v1alpha1.Msg/RemoveOperator",
      type: GRPCCallType.unary
    )

    internal static let addCollateral = GRPCMethodDescriptor(
      name: "AddCollateral",
      path: "/shentu.oracle.v1alpha1.Msg/AddCollateral",
      type: GRPCCallType.unary
    )

    internal static let reduceCollateral = GRPCMethodDescriptor(
      name: "ReduceCollateral",
      path: "/shentu.oracle.v1alpha1.Msg/ReduceCollateral",
      type: GRPCCallType.unary
    )

    internal static let withdrawReward = GRPCMethodDescriptor(
      name: "WithdrawReward",
      path: "/shentu.oracle.v1alpha1.Msg/WithdrawReward",
      type: GRPCCallType.unary
    )

    internal static let createTask = GRPCMethodDescriptor(
      name: "CreateTask",
      path: "/shentu.oracle.v1alpha1.Msg/CreateTask",
      type: GRPCCallType.unary
    )

    internal static let taskResponse = GRPCMethodDescriptor(
      name: "TaskResponse",
      path: "/shentu.oracle.v1alpha1.Msg/TaskResponse",
      type: GRPCCallType.unary
    )

    internal static let deleteTask = GRPCMethodDescriptor(
      name: "DeleteTask",
      path: "/shentu.oracle.v1alpha1.Msg/DeleteTask",
      type: GRPCCallType.unary
    )

    internal static let createTxTask = GRPCMethodDescriptor(
      name: "CreateTxTask",
      path: "/shentu.oracle.v1alpha1.Msg/CreateTxTask",
      type: GRPCCallType.unary
    )

    internal static let txTaskResponse = GRPCMethodDescriptor(
      name: "TxTaskResponse",
      path: "/shentu.oracle.v1alpha1.Msg/TxTaskResponse",
      type: GRPCCallType.unary
    )

    internal static let deleteTxTask = GRPCMethodDescriptor(
      name: "DeleteTxTask",
      path: "/shentu.oracle.v1alpha1.Msg/DeleteTxTask",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the shield Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Shentu_Oracle_V1alpha1_MsgProvider: CallHandlerProvider {
  var interceptors: Shentu_Oracle_V1alpha1_MsgServerInterceptorFactoryProtocol? { get }

  func createOperator(request: Shentu_Oracle_V1alpha1_MsgCreateOperator, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_MsgCreateOperatorResponse>

  func removeOperator(request: Shentu_Oracle_V1alpha1_MsgRemoveOperator, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_MsgRemoveOperatorResponse>

  func addCollateral(request: Shentu_Oracle_V1alpha1_MsgAddCollateral, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_MsgAddCollateralResponse>

  func reduceCollateral(request: Shentu_Oracle_V1alpha1_MsgReduceCollateral, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_MsgReduceCollateralResponse>

  func withdrawReward(request: Shentu_Oracle_V1alpha1_MsgWithdrawReward, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_MsgWithdrawRewardResponse>

  func createTask(request: Shentu_Oracle_V1alpha1_MsgCreateTask, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_MsgCreateTaskResponse>

  func taskResponse(request: Shentu_Oracle_V1alpha1_MsgTaskResponse, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_MsgTaskResponseResponse>

  func deleteTask(request: Shentu_Oracle_V1alpha1_MsgDeleteTask, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_MsgDeleteTaskResponse>

  func createTxTask(request: Shentu_Oracle_V1alpha1_MsgCreateTxTask, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_MsgCreateTxTaskResponse>

  func txTaskResponse(request: Shentu_Oracle_V1alpha1_MsgTxTaskResponse, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_MsgTxTaskResponseResponse>

  func deleteTxTask(request: Shentu_Oracle_V1alpha1_MsgDeleteTxTask, context: StatusOnlyCallContext) -> EventLoopFuture<Shentu_Oracle_V1alpha1_MsgDeleteTxTaskResponse>
}

extension Shentu_Oracle_V1alpha1_MsgProvider {
  internal var serviceName: Substring {
    return Shentu_Oracle_V1alpha1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateOperator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgCreateOperator>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgCreateOperatorResponse>(),
        interceptors: self.interceptors?.makeCreateOperatorInterceptors() ?? [],
        userFunction: self.createOperator(request:context:)
      )

    case "RemoveOperator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgRemoveOperator>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgRemoveOperatorResponse>(),
        interceptors: self.interceptors?.makeRemoveOperatorInterceptors() ?? [],
        userFunction: self.removeOperator(request:context:)
      )

    case "AddCollateral":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgAddCollateral>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgAddCollateralResponse>(),
        interceptors: self.interceptors?.makeAddCollateralInterceptors() ?? [],
        userFunction: self.addCollateral(request:context:)
      )

    case "ReduceCollateral":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgReduceCollateral>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgReduceCollateralResponse>(),
        interceptors: self.interceptors?.makeReduceCollateralInterceptors() ?? [],
        userFunction: self.reduceCollateral(request:context:)
      )

    case "WithdrawReward":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgWithdrawReward>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgWithdrawRewardResponse>(),
        interceptors: self.interceptors?.makeWithdrawRewardInterceptors() ?? [],
        userFunction: self.withdrawReward(request:context:)
      )

    case "CreateTask":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgCreateTask>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgCreateTaskResponse>(),
        interceptors: self.interceptors?.makeCreateTaskInterceptors() ?? [],
        userFunction: self.createTask(request:context:)
      )

    case "TaskResponse":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgTaskResponse>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgTaskResponseResponse>(),
        interceptors: self.interceptors?.makeTaskResponseInterceptors() ?? [],
        userFunction: self.taskResponse(request:context:)
      )

    case "DeleteTask":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgDeleteTask>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgDeleteTaskResponse>(),
        interceptors: self.interceptors?.makeDeleteTaskInterceptors() ?? [],
        userFunction: self.deleteTask(request:context:)
      )

    case "CreateTxTask":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgCreateTxTask>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgCreateTxTaskResponse>(),
        interceptors: self.interceptors?.makeCreateTxTaskInterceptors() ?? [],
        userFunction: self.createTxTask(request:context:)
      )

    case "TxTaskResponse":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgTxTaskResponse>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgTxTaskResponseResponse>(),
        interceptors: self.interceptors?.makeTxTaskResponseInterceptors() ?? [],
        userFunction: self.txTaskResponse(request:context:)
      )

    case "DeleteTxTask":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgDeleteTxTask>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgDeleteTxTaskResponse>(),
        interceptors: self.interceptors?.makeDeleteTxTaskInterceptors() ?? [],
        userFunction: self.deleteTxTask(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the shield Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Shentu_Oracle_V1alpha1_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Shentu_Oracle_V1alpha1_MsgServerInterceptorFactoryProtocol? { get }

  @Sendable func createOperator(
    request: Shentu_Oracle_V1alpha1_MsgCreateOperator,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_MsgCreateOperatorResponse

  @Sendable func removeOperator(
    request: Shentu_Oracle_V1alpha1_MsgRemoveOperator,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_MsgRemoveOperatorResponse

  @Sendable func addCollateral(
    request: Shentu_Oracle_V1alpha1_MsgAddCollateral,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_MsgAddCollateralResponse

  @Sendable func reduceCollateral(
    request: Shentu_Oracle_V1alpha1_MsgReduceCollateral,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_MsgReduceCollateralResponse

  @Sendable func withdrawReward(
    request: Shentu_Oracle_V1alpha1_MsgWithdrawReward,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_MsgWithdrawRewardResponse

  @Sendable func createTask(
    request: Shentu_Oracle_V1alpha1_MsgCreateTask,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_MsgCreateTaskResponse

  @Sendable func taskResponse(
    request: Shentu_Oracle_V1alpha1_MsgTaskResponse,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_MsgTaskResponseResponse

  @Sendable func deleteTask(
    request: Shentu_Oracle_V1alpha1_MsgDeleteTask,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_MsgDeleteTaskResponse

  @Sendable func createTxTask(
    request: Shentu_Oracle_V1alpha1_MsgCreateTxTask,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_MsgCreateTxTaskResponse

  @Sendable func txTaskResponse(
    request: Shentu_Oracle_V1alpha1_MsgTxTaskResponse,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_MsgTxTaskResponseResponse

  @Sendable func deleteTxTask(
    request: Shentu_Oracle_V1alpha1_MsgDeleteTxTask,
    context: GRPCAsyncServerCallContext
  ) async throws -> Shentu_Oracle_V1alpha1_MsgDeleteTxTaskResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Shentu_Oracle_V1alpha1_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Shentu_Oracle_V1alpha1_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Shentu_Oracle_V1alpha1_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Shentu_Oracle_V1alpha1_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateOperator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgCreateOperator>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgCreateOperatorResponse>(),
        interceptors: self.interceptors?.makeCreateOperatorInterceptors() ?? [],
        wrapping: self.createOperator(request:context:)
      )

    case "RemoveOperator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgRemoveOperator>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgRemoveOperatorResponse>(),
        interceptors: self.interceptors?.makeRemoveOperatorInterceptors() ?? [],
        wrapping: self.removeOperator(request:context:)
      )

    case "AddCollateral":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgAddCollateral>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgAddCollateralResponse>(),
        interceptors: self.interceptors?.makeAddCollateralInterceptors() ?? [],
        wrapping: self.addCollateral(request:context:)
      )

    case "ReduceCollateral":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgReduceCollateral>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgReduceCollateralResponse>(),
        interceptors: self.interceptors?.makeReduceCollateralInterceptors() ?? [],
        wrapping: self.reduceCollateral(request:context:)
      )

    case "WithdrawReward":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgWithdrawReward>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgWithdrawRewardResponse>(),
        interceptors: self.interceptors?.makeWithdrawRewardInterceptors() ?? [],
        wrapping: self.withdrawReward(request:context:)
      )

    case "CreateTask":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgCreateTask>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgCreateTaskResponse>(),
        interceptors: self.interceptors?.makeCreateTaskInterceptors() ?? [],
        wrapping: self.createTask(request:context:)
      )

    case "TaskResponse":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgTaskResponse>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgTaskResponseResponse>(),
        interceptors: self.interceptors?.makeTaskResponseInterceptors() ?? [],
        wrapping: self.taskResponse(request:context:)
      )

    case "DeleteTask":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgDeleteTask>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgDeleteTaskResponse>(),
        interceptors: self.interceptors?.makeDeleteTaskInterceptors() ?? [],
        wrapping: self.deleteTask(request:context:)
      )

    case "CreateTxTask":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgCreateTxTask>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgCreateTxTaskResponse>(),
        interceptors: self.interceptors?.makeCreateTxTaskInterceptors() ?? [],
        wrapping: self.createTxTask(request:context:)
      )

    case "TxTaskResponse":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgTxTaskResponse>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgTxTaskResponseResponse>(),
        interceptors: self.interceptors?.makeTxTaskResponseInterceptors() ?? [],
        wrapping: self.txTaskResponse(request:context:)
      )

    case "DeleteTxTask":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Shentu_Oracle_V1alpha1_MsgDeleteTxTask>(),
        responseSerializer: ProtobufSerializer<Shentu_Oracle_V1alpha1_MsgDeleteTxTaskResponse>(),
        interceptors: self.interceptors?.makeDeleteTxTaskInterceptors() ?? [],
        wrapping: self.deleteTxTask(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Shentu_Oracle_V1alpha1_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createOperator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateOperatorInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_MsgCreateOperator, Shentu_Oracle_V1alpha1_MsgCreateOperatorResponse>]

  /// - Returns: Interceptors to use when handling 'removeOperator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveOperatorInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_MsgRemoveOperator, Shentu_Oracle_V1alpha1_MsgRemoveOperatorResponse>]

  /// - Returns: Interceptors to use when handling 'addCollateral'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddCollateralInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_MsgAddCollateral, Shentu_Oracle_V1alpha1_MsgAddCollateralResponse>]

  /// - Returns: Interceptors to use when handling 'reduceCollateral'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeReduceCollateralInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_MsgReduceCollateral, Shentu_Oracle_V1alpha1_MsgReduceCollateralResponse>]

  /// - Returns: Interceptors to use when handling 'withdrawReward'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeWithdrawRewardInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_MsgWithdrawReward, Shentu_Oracle_V1alpha1_MsgWithdrawRewardResponse>]

  /// - Returns: Interceptors to use when handling 'createTask'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateTaskInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_MsgCreateTask, Shentu_Oracle_V1alpha1_MsgCreateTaskResponse>]

  /// - Returns: Interceptors to use when handling 'taskResponse'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTaskResponseInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_MsgTaskResponse, Shentu_Oracle_V1alpha1_MsgTaskResponseResponse>]

  /// - Returns: Interceptors to use when handling 'deleteTask'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteTaskInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_MsgDeleteTask, Shentu_Oracle_V1alpha1_MsgDeleteTaskResponse>]

  /// - Returns: Interceptors to use when handling 'createTxTask'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateTxTaskInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_MsgCreateTxTask, Shentu_Oracle_V1alpha1_MsgCreateTxTaskResponse>]

  /// - Returns: Interceptors to use when handling 'txTaskResponse'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTxTaskResponseInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_MsgTxTaskResponse, Shentu_Oracle_V1alpha1_MsgTxTaskResponseResponse>]

  /// - Returns: Interceptors to use when handling 'deleteTxTask'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteTxTaskInterceptors() -> [ServerInterceptor<Shentu_Oracle_V1alpha1_MsgDeleteTxTask, Shentu_Oracle_V1alpha1_MsgDeleteTxTaskResponse>]
}

internal enum Shentu_Oracle_V1alpha1_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "shentu.oracle.v1alpha1.Msg",
    methods: [
      Shentu_Oracle_V1alpha1_MsgServerMetadata.Methods.createOperator,
      Shentu_Oracle_V1alpha1_MsgServerMetadata.Methods.removeOperator,
      Shentu_Oracle_V1alpha1_MsgServerMetadata.Methods.addCollateral,
      Shentu_Oracle_V1alpha1_MsgServerMetadata.Methods.reduceCollateral,
      Shentu_Oracle_V1alpha1_MsgServerMetadata.Methods.withdrawReward,
      Shentu_Oracle_V1alpha1_MsgServerMetadata.Methods.createTask,
      Shentu_Oracle_V1alpha1_MsgServerMetadata.Methods.taskResponse,
      Shentu_Oracle_V1alpha1_MsgServerMetadata.Methods.deleteTask,
      Shentu_Oracle_V1alpha1_MsgServerMetadata.Methods.createTxTask,
      Shentu_Oracle_V1alpha1_MsgServerMetadata.Methods.txTaskResponse,
      Shentu_Oracle_V1alpha1_MsgServerMetadata.Methods.deleteTxTask,
    ]
  )

  internal enum Methods {
    internal static let createOperator = GRPCMethodDescriptor(
      name: "CreateOperator",
      path: "/shentu.oracle.v1alpha1.Msg/CreateOperator",
      type: GRPCCallType.unary
    )

    internal static let removeOperator = GRPCMethodDescriptor(
      name: "RemoveOperator",
      path: "/shentu.oracle.v1alpha1.Msg/RemoveOperator",
      type: GRPCCallType.unary
    )

    internal static let addCollateral = GRPCMethodDescriptor(
      name: "AddCollateral",
      path: "/shentu.oracle.v1alpha1.Msg/AddCollateral",
      type: GRPCCallType.unary
    )

    internal static let reduceCollateral = GRPCMethodDescriptor(
      name: "ReduceCollateral",
      path: "/shentu.oracle.v1alpha1.Msg/ReduceCollateral",
      type: GRPCCallType.unary
    )

    internal static let withdrawReward = GRPCMethodDescriptor(
      name: "WithdrawReward",
      path: "/shentu.oracle.v1alpha1.Msg/WithdrawReward",
      type: GRPCCallType.unary
    )

    internal static let createTask = GRPCMethodDescriptor(
      name: "CreateTask",
      path: "/shentu.oracle.v1alpha1.Msg/CreateTask",
      type: GRPCCallType.unary
    )

    internal static let taskResponse = GRPCMethodDescriptor(
      name: "TaskResponse",
      path: "/shentu.oracle.v1alpha1.Msg/TaskResponse",
      type: GRPCCallType.unary
    )

    internal static let deleteTask = GRPCMethodDescriptor(
      name: "DeleteTask",
      path: "/shentu.oracle.v1alpha1.Msg/DeleteTask",
      type: GRPCCallType.unary
    )

    internal static let createTxTask = GRPCMethodDescriptor(
      name: "CreateTxTask",
      path: "/shentu.oracle.v1alpha1.Msg/CreateTxTask",
      type: GRPCCallType.unary
    )

    internal static let txTaskResponse = GRPCMethodDescriptor(
      name: "TxTaskResponse",
      path: "/shentu.oracle.v1alpha1.Msg/TxTaskResponse",
      type: GRPCCallType.unary
    )

    internal static let deleteTxTask = GRPCMethodDescriptor(
      name: "DeleteTxTask",
      path: "/shentu.oracle.v1alpha1.Msg/DeleteTxTask",
      type: GRPCCallType.unary
    )
  }
}
