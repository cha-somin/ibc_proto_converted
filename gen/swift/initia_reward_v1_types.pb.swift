// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: initia/reward/v1/types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Params defines the set of mint parameters.
struct Initia_Reward_V1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rewardDenom: String = String()

  var dilutionPeriod: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _dilutionPeriod ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_dilutionPeriod = newValue}
  }
  /// Returns true if `dilutionPeriod` has been explicitly set.
  var hasDilutionPeriod: Bool {return self._dilutionPeriod != nil}
  /// Clears the value of `dilutionPeriod`. Subsequent reads from it will return its default value.
  mutating func clearDilutionPeriod() {self._dilutionPeriod = nil}

  var releaseRate: String = String()

  /// The dilution rate of release rate.
  /// if `(block.timestamp - last_dilute_timestamp) < dilution_period`:
  ///    `release_rate -= (release_rate * dilution_rate)`
  ///    `last_dilution_timestamp = block.timestamp`
  var dilutionRate: String = String()

  var releaseEnabled: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dilutionPeriod: SwiftProtobuf.Google_Protobuf_Duration? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Initia_Reward_V1_Params: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "initia.reward.v1"

extension Initia_Reward_V1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reward_denom"),
    2: .standard(proto: "dilution_period"),
    3: .standard(proto: "release_rate"),
    4: .standard(proto: "dilution_rate"),
    5: .standard(proto: "release_enabled"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.rewardDenom) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._dilutionPeriod) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.releaseRate) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.dilutionRate) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.releaseEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.rewardDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.rewardDenom, fieldNumber: 1)
    }
    try { if let v = self._dilutionPeriod {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.releaseRate.isEmpty {
      try visitor.visitSingularStringField(value: self.releaseRate, fieldNumber: 3)
    }
    if !self.dilutionRate.isEmpty {
      try visitor.visitSingularStringField(value: self.dilutionRate, fieldNumber: 4)
    }
    if self.releaseEnabled != false {
      try visitor.visitSingularBoolField(value: self.releaseEnabled, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Initia_Reward_V1_Params, rhs: Initia_Reward_V1_Params) -> Bool {
    if lhs.rewardDenom != rhs.rewardDenom {return false}
    if lhs._dilutionPeriod != rhs._dilutionPeriod {return false}
    if lhs.releaseRate != rhs.releaseRate {return false}
    if lhs.dilutionRate != rhs.dilutionRate {return false}
    if lhs.releaseEnabled != rhs.releaseEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
