// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: neutron/dex/limit_order_tranche_user.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Neutron_Dex_LimitOrderTrancheUser {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tradePairID: Neutron_Dex_TradePairID {
    get {return _tradePairID ?? Neutron_Dex_TradePairID()}
    set {_tradePairID = newValue}
  }
  /// Returns true if `tradePairID` has been explicitly set.
  var hasTradePairID: Bool {return self._tradePairID != nil}
  /// Clears the value of `tradePairID`. Subsequent reads from it will return its default value.
  mutating func clearTradePairID() {self._tradePairID = nil}

  var tickIndexTakerToMaker: Int64 = 0

  var trancheKey: String = String()

  var address: String = String()

  var sharesOwned: String = String()

  var sharesWithdrawn: String = String()

  /// TODO: remove this in next release. It is no longer used
  var sharesCancelled: String = String()

  var orderType: Neutron_Dex_LimitOrderType = .goodTilCancelled

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tradePairID: Neutron_Dex_TradePairID? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Neutron_Dex_LimitOrderTrancheUser: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "neutron.dex"

extension Neutron_Dex_LimitOrderTrancheUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LimitOrderTrancheUser"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trade_pair_id"),
    2: .standard(proto: "tick_index_taker_to_maker"),
    3: .standard(proto: "tranche_key"),
    4: .same(proto: "address"),
    5: .standard(proto: "shares_owned"),
    6: .standard(proto: "shares_withdrawn"),
    7: .standard(proto: "shares_cancelled"),
    8: .standard(proto: "order_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._tradePairID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.tickIndexTakerToMaker) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.trancheKey) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.address) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.sharesOwned) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.sharesWithdrawn) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.sharesCancelled) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self.orderType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._tradePairID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if self.tickIndexTakerToMaker != 0 {
      try visitor.visitSingularInt64Field(value: self.tickIndexTakerToMaker, fieldNumber: 2)
    }
    if !self.trancheKey.isEmpty {
      try visitor.visitSingularStringField(value: self.trancheKey, fieldNumber: 3)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularStringField(value: self.address, fieldNumber: 4)
    }
    if !self.sharesOwned.isEmpty {
      try visitor.visitSingularStringField(value: self.sharesOwned, fieldNumber: 5)
    }
    if !self.sharesWithdrawn.isEmpty {
      try visitor.visitSingularStringField(value: self.sharesWithdrawn, fieldNumber: 6)
    }
    if !self.sharesCancelled.isEmpty {
      try visitor.visitSingularStringField(value: self.sharesCancelled, fieldNumber: 7)
    }
    if self.orderType != .goodTilCancelled {
      try visitor.visitSingularEnumField(value: self.orderType, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Neutron_Dex_LimitOrderTrancheUser, rhs: Neutron_Dex_LimitOrderTrancheUser) -> Bool {
    if lhs._tradePairID != rhs._tradePairID {return false}
    if lhs.tickIndexTakerToMaker != rhs.tickIndexTakerToMaker {return false}
    if lhs.trancheKey != rhs.trancheKey {return false}
    if lhs.address != rhs.address {return false}
    if lhs.sharesOwned != rhs.sharesOwned {return false}
    if lhs.sharesWithdrawn != rhs.sharesWithdrawn {return false}
    if lhs.sharesCancelled != rhs.sharesCancelled {return false}
    if lhs.orderType != rhs.orderType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
