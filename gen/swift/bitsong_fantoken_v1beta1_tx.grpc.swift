//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: bitsong/fantoken/v1beta1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the oracle Msg service
///
/// Usage: instantiate `Bitsong_Fantoken_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Bitsong_Fantoken_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol? { get }

  func issue(
    _ request: Bitsong_Fantoken_MsgIssue,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitsong_Fantoken_MsgIssue, Bitsong_Fantoken_MsgIssueResponse>

  func mint(
    _ request: Bitsong_Fantoken_MsgMint,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitsong_Fantoken_MsgMint, Bitsong_Fantoken_MsgMintResponse>

  func burn(
    _ request: Bitsong_Fantoken_MsgBurn,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitsong_Fantoken_MsgBurn, Bitsong_Fantoken_MsgBurnResponse>

  func disableMint(
    _ request: Bitsong_Fantoken_MsgDisableMint,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitsong_Fantoken_MsgDisableMint, Bitsong_Fantoken_MsgDisableMintResponse>

  func setMinter(
    _ request: Bitsong_Fantoken_MsgSetMinter,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitsong_Fantoken_MsgSetMinter, Bitsong_Fantoken_MsgSetMinterResponse>

  func setAuthority(
    _ request: Bitsong_Fantoken_MsgSetAuthority,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitsong_Fantoken_MsgSetAuthority, Bitsong_Fantoken_MsgSetAuthorityResponse>

  func setUri(
    _ request: Bitsong_Fantoken_MsgSetUri,
    callOptions: CallOptions?
  ) -> UnaryCall<Bitsong_Fantoken_MsgSetUri, Bitsong_Fantoken_MsgSetUriResponse>
}

extension Bitsong_Fantoken_MsgClientProtocol {
  internal var serviceName: String {
    return "bitsong.fantoken.Msg"
  }

  /// Issue defines a method for issuing a new fan token
  ///
  /// - Parameters:
  ///   - request: Request to send to Issue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func issue(
    _ request: Bitsong_Fantoken_MsgIssue,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitsong_Fantoken_MsgIssue, Bitsong_Fantoken_MsgIssueResponse> {
    return self.makeUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.issue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueInterceptors() ?? []
    )
  }

  /// Mint defines a method for minting some fan tokens
  ///
  /// - Parameters:
  ///   - request: Request to send to Mint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mint(
    _ request: Bitsong_Fantoken_MsgMint,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitsong_Fantoken_MsgMint, Bitsong_Fantoken_MsgMintResponse> {
    return self.makeUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  /// Burn defines a method for burning some fan tokens
  ///
  /// - Parameters:
  ///   - request: Request to send to Burn.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func burn(
    _ request: Bitsong_Fantoken_MsgBurn,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitsong_Fantoken_MsgBurn, Bitsong_Fantoken_MsgBurnResponse> {
    return self.makeUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  /// DisableMint defines a method for disable the mint function
  ///
  /// - Parameters:
  ///   - request: Request to send to DisableMint.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func disableMint(
    _ request: Bitsong_Fantoken_MsgDisableMint,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitsong_Fantoken_MsgDisableMint, Bitsong_Fantoken_MsgDisableMintResponse> {
    return self.makeUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.disableMint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisableMintInterceptors() ?? []
    )
  }

  /// Unary call to SetMinter
  ///
  /// - Parameters:
  ///   - request: Request to send to SetMinter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setMinter(
    _ request: Bitsong_Fantoken_MsgSetMinter,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitsong_Fantoken_MsgSetMinter, Bitsong_Fantoken_MsgSetMinterResponse> {
    return self.makeUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.setMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMinterInterceptors() ?? []
    )
  }

  /// Unary call to SetAuthority
  ///
  /// - Parameters:
  ///   - request: Request to send to SetAuthority.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setAuthority(
    _ request: Bitsong_Fantoken_MsgSetAuthority,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitsong_Fantoken_MsgSetAuthority, Bitsong_Fantoken_MsgSetAuthorityResponse> {
    return self.makeUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.setAuthority.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAuthorityInterceptors() ?? []
    )
  }

  /// Unary call to SetUri
  ///
  /// - Parameters:
  ///   - request: Request to send to SetUri.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setUri(
    _ request: Bitsong_Fantoken_MsgSetUri,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Bitsong_Fantoken_MsgSetUri, Bitsong_Fantoken_MsgSetUriResponse> {
    return self.makeUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.setUri.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUriInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Bitsong_Fantoken_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Bitsong_Fantoken_MsgNIOClient")
internal final class Bitsong_Fantoken_MsgClient: Bitsong_Fantoken_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the bitsong.fantoken.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Bitsong_Fantoken_MsgNIOClient: Bitsong_Fantoken_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the bitsong.fantoken.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the oracle Msg service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Bitsong_Fantoken_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol? { get }

  func makeIssueCall(
    _ request: Bitsong_Fantoken_MsgIssue,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bitsong_Fantoken_MsgIssue, Bitsong_Fantoken_MsgIssueResponse>

  func makeMintCall(
    _ request: Bitsong_Fantoken_MsgMint,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bitsong_Fantoken_MsgMint, Bitsong_Fantoken_MsgMintResponse>

  func makeBurnCall(
    _ request: Bitsong_Fantoken_MsgBurn,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bitsong_Fantoken_MsgBurn, Bitsong_Fantoken_MsgBurnResponse>

  func makeDisableMintCall(
    _ request: Bitsong_Fantoken_MsgDisableMint,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bitsong_Fantoken_MsgDisableMint, Bitsong_Fantoken_MsgDisableMintResponse>

  func makeSetMinterCall(
    _ request: Bitsong_Fantoken_MsgSetMinter,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bitsong_Fantoken_MsgSetMinter, Bitsong_Fantoken_MsgSetMinterResponse>

  func makeSetAuthorityCall(
    _ request: Bitsong_Fantoken_MsgSetAuthority,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bitsong_Fantoken_MsgSetAuthority, Bitsong_Fantoken_MsgSetAuthorityResponse>

  func makeSetUriCall(
    _ request: Bitsong_Fantoken_MsgSetUri,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Bitsong_Fantoken_MsgSetUri, Bitsong_Fantoken_MsgSetUriResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bitsong_Fantoken_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Bitsong_Fantoken_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeIssueCall(
    _ request: Bitsong_Fantoken_MsgIssue,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bitsong_Fantoken_MsgIssue, Bitsong_Fantoken_MsgIssueResponse> {
    return self.makeAsyncUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.issue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueInterceptors() ?? []
    )
  }

  internal func makeMintCall(
    _ request: Bitsong_Fantoken_MsgMint,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bitsong_Fantoken_MsgMint, Bitsong_Fantoken_MsgMintResponse> {
    return self.makeAsyncUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  internal func makeBurnCall(
    _ request: Bitsong_Fantoken_MsgBurn,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bitsong_Fantoken_MsgBurn, Bitsong_Fantoken_MsgBurnResponse> {
    return self.makeAsyncUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  internal func makeDisableMintCall(
    _ request: Bitsong_Fantoken_MsgDisableMint,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bitsong_Fantoken_MsgDisableMint, Bitsong_Fantoken_MsgDisableMintResponse> {
    return self.makeAsyncUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.disableMint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisableMintInterceptors() ?? []
    )
  }

  internal func makeSetMinterCall(
    _ request: Bitsong_Fantoken_MsgSetMinter,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bitsong_Fantoken_MsgSetMinter, Bitsong_Fantoken_MsgSetMinterResponse> {
    return self.makeAsyncUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.setMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMinterInterceptors() ?? []
    )
  }

  internal func makeSetAuthorityCall(
    _ request: Bitsong_Fantoken_MsgSetAuthority,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bitsong_Fantoken_MsgSetAuthority, Bitsong_Fantoken_MsgSetAuthorityResponse> {
    return self.makeAsyncUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.setAuthority.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAuthorityInterceptors() ?? []
    )
  }

  internal func makeSetUriCall(
    _ request: Bitsong_Fantoken_MsgSetUri,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Bitsong_Fantoken_MsgSetUri, Bitsong_Fantoken_MsgSetUriResponse> {
    return self.makeAsyncUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.setUri.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUriInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bitsong_Fantoken_MsgAsyncClientProtocol {
  internal func issue(
    _ request: Bitsong_Fantoken_MsgIssue,
    callOptions: CallOptions? = nil
  ) async throws -> Bitsong_Fantoken_MsgIssueResponse {
    return try await self.performAsyncUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.issue.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIssueInterceptors() ?? []
    )
  }

  internal func mint(
    _ request: Bitsong_Fantoken_MsgMint,
    callOptions: CallOptions? = nil
  ) async throws -> Bitsong_Fantoken_MsgMintResponse {
    return try await self.performAsyncUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.mint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMintInterceptors() ?? []
    )
  }

  internal func burn(
    _ request: Bitsong_Fantoken_MsgBurn,
    callOptions: CallOptions? = nil
  ) async throws -> Bitsong_Fantoken_MsgBurnResponse {
    return try await self.performAsyncUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.burn.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBurnInterceptors() ?? []
    )
  }

  internal func disableMint(
    _ request: Bitsong_Fantoken_MsgDisableMint,
    callOptions: CallOptions? = nil
  ) async throws -> Bitsong_Fantoken_MsgDisableMintResponse {
    return try await self.performAsyncUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.disableMint.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDisableMintInterceptors() ?? []
    )
  }

  internal func setMinter(
    _ request: Bitsong_Fantoken_MsgSetMinter,
    callOptions: CallOptions? = nil
  ) async throws -> Bitsong_Fantoken_MsgSetMinterResponse {
    return try await self.performAsyncUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.setMinter.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetMinterInterceptors() ?? []
    )
  }

  internal func setAuthority(
    _ request: Bitsong_Fantoken_MsgSetAuthority,
    callOptions: CallOptions? = nil
  ) async throws -> Bitsong_Fantoken_MsgSetAuthorityResponse {
    return try await self.performAsyncUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.setAuthority.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetAuthorityInterceptors() ?? []
    )
  }

  internal func setUri(
    _ request: Bitsong_Fantoken_MsgSetUri,
    callOptions: CallOptions? = nil
  ) async throws -> Bitsong_Fantoken_MsgSetUriResponse {
    return try await self.performAsyncUnaryCall(
      path: Bitsong_Fantoken_MsgClientMetadata.Methods.setUri.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetUriInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Bitsong_Fantoken_MsgAsyncClient: Bitsong_Fantoken_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Bitsong_Fantoken_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'issue'.
  func makeIssueInterceptors() -> [ClientInterceptor<Bitsong_Fantoken_MsgIssue, Bitsong_Fantoken_MsgIssueResponse>]

  /// - Returns: Interceptors to use when invoking 'mint'.
  func makeMintInterceptors() -> [ClientInterceptor<Bitsong_Fantoken_MsgMint, Bitsong_Fantoken_MsgMintResponse>]

  /// - Returns: Interceptors to use when invoking 'burn'.
  func makeBurnInterceptors() -> [ClientInterceptor<Bitsong_Fantoken_MsgBurn, Bitsong_Fantoken_MsgBurnResponse>]

  /// - Returns: Interceptors to use when invoking 'disableMint'.
  func makeDisableMintInterceptors() -> [ClientInterceptor<Bitsong_Fantoken_MsgDisableMint, Bitsong_Fantoken_MsgDisableMintResponse>]

  /// - Returns: Interceptors to use when invoking 'setMinter'.
  func makeSetMinterInterceptors() -> [ClientInterceptor<Bitsong_Fantoken_MsgSetMinter, Bitsong_Fantoken_MsgSetMinterResponse>]

  /// - Returns: Interceptors to use when invoking 'setAuthority'.
  func makeSetAuthorityInterceptors() -> [ClientInterceptor<Bitsong_Fantoken_MsgSetAuthority, Bitsong_Fantoken_MsgSetAuthorityResponse>]

  /// - Returns: Interceptors to use when invoking 'setUri'.
  func makeSetUriInterceptors() -> [ClientInterceptor<Bitsong_Fantoken_MsgSetUri, Bitsong_Fantoken_MsgSetUriResponse>]
}

internal enum Bitsong_Fantoken_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "bitsong.fantoken.Msg",
    methods: [
      Bitsong_Fantoken_MsgClientMetadata.Methods.issue,
      Bitsong_Fantoken_MsgClientMetadata.Methods.mint,
      Bitsong_Fantoken_MsgClientMetadata.Methods.burn,
      Bitsong_Fantoken_MsgClientMetadata.Methods.disableMint,
      Bitsong_Fantoken_MsgClientMetadata.Methods.setMinter,
      Bitsong_Fantoken_MsgClientMetadata.Methods.setAuthority,
      Bitsong_Fantoken_MsgClientMetadata.Methods.setUri,
    ]
  )

  internal enum Methods {
    internal static let issue = GRPCMethodDescriptor(
      name: "Issue",
      path: "/bitsong.fantoken.Msg/Issue",
      type: GRPCCallType.unary
    )

    internal static let mint = GRPCMethodDescriptor(
      name: "Mint",
      path: "/bitsong.fantoken.Msg/Mint",
      type: GRPCCallType.unary
    )

    internal static let burn = GRPCMethodDescriptor(
      name: "Burn",
      path: "/bitsong.fantoken.Msg/Burn",
      type: GRPCCallType.unary
    )

    internal static let disableMint = GRPCMethodDescriptor(
      name: "DisableMint",
      path: "/bitsong.fantoken.Msg/DisableMint",
      type: GRPCCallType.unary
    )

    internal static let setMinter = GRPCMethodDescriptor(
      name: "SetMinter",
      path: "/bitsong.fantoken.Msg/SetMinter",
      type: GRPCCallType.unary
    )

    internal static let setAuthority = GRPCMethodDescriptor(
      name: "SetAuthority",
      path: "/bitsong.fantoken.Msg/SetAuthority",
      type: GRPCCallType.unary
    )

    internal static let setUri = GRPCMethodDescriptor(
      name: "SetUri",
      path: "/bitsong.fantoken.Msg/SetUri",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the oracle Msg service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Bitsong_Fantoken_MsgProvider: CallHandlerProvider {
  var interceptors: Bitsong_Fantoken_MsgServerInterceptorFactoryProtocol? { get }

  /// Issue defines a method for issuing a new fan token
  func issue(request: Bitsong_Fantoken_MsgIssue, context: StatusOnlyCallContext) -> EventLoopFuture<Bitsong_Fantoken_MsgIssueResponse>

  /// Mint defines a method for minting some fan tokens
  func mint(request: Bitsong_Fantoken_MsgMint, context: StatusOnlyCallContext) -> EventLoopFuture<Bitsong_Fantoken_MsgMintResponse>

  /// Burn defines a method for burning some fan tokens
  func burn(request: Bitsong_Fantoken_MsgBurn, context: StatusOnlyCallContext) -> EventLoopFuture<Bitsong_Fantoken_MsgBurnResponse>

  /// DisableMint defines a method for disable the mint function
  func disableMint(request: Bitsong_Fantoken_MsgDisableMint, context: StatusOnlyCallContext) -> EventLoopFuture<Bitsong_Fantoken_MsgDisableMintResponse>

  func setMinter(request: Bitsong_Fantoken_MsgSetMinter, context: StatusOnlyCallContext) -> EventLoopFuture<Bitsong_Fantoken_MsgSetMinterResponse>

  func setAuthority(request: Bitsong_Fantoken_MsgSetAuthority, context: StatusOnlyCallContext) -> EventLoopFuture<Bitsong_Fantoken_MsgSetAuthorityResponse>

  func setUri(request: Bitsong_Fantoken_MsgSetUri, context: StatusOnlyCallContext) -> EventLoopFuture<Bitsong_Fantoken_MsgSetUriResponse>
}

extension Bitsong_Fantoken_MsgProvider {
  internal var serviceName: Substring {
    return Bitsong_Fantoken_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Issue":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgIssue>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgIssueResponse>(),
        interceptors: self.interceptors?.makeIssueInterceptors() ?? [],
        userFunction: self.issue(request:context:)
      )

    case "Mint":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgMint>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgMintResponse>(),
        interceptors: self.interceptors?.makeMintInterceptors() ?? [],
        userFunction: self.mint(request:context:)
      )

    case "Burn":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgBurn>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgBurnResponse>(),
        interceptors: self.interceptors?.makeBurnInterceptors() ?? [],
        userFunction: self.burn(request:context:)
      )

    case "DisableMint":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgDisableMint>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgDisableMintResponse>(),
        interceptors: self.interceptors?.makeDisableMintInterceptors() ?? [],
        userFunction: self.disableMint(request:context:)
      )

    case "SetMinter":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgSetMinter>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgSetMinterResponse>(),
        interceptors: self.interceptors?.makeSetMinterInterceptors() ?? [],
        userFunction: self.setMinter(request:context:)
      )

    case "SetAuthority":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgSetAuthority>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgSetAuthorityResponse>(),
        interceptors: self.interceptors?.makeSetAuthorityInterceptors() ?? [],
        userFunction: self.setAuthority(request:context:)
      )

    case "SetUri":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgSetUri>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgSetUriResponse>(),
        interceptors: self.interceptors?.makeSetUriInterceptors() ?? [],
        userFunction: self.setUri(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the oracle Msg service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Bitsong_Fantoken_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Bitsong_Fantoken_MsgServerInterceptorFactoryProtocol? { get }

  /// Issue defines a method for issuing a new fan token
  @Sendable func issue(
    request: Bitsong_Fantoken_MsgIssue,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bitsong_Fantoken_MsgIssueResponse

  /// Mint defines a method for minting some fan tokens
  @Sendable func mint(
    request: Bitsong_Fantoken_MsgMint,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bitsong_Fantoken_MsgMintResponse

  /// Burn defines a method for burning some fan tokens
  @Sendable func burn(
    request: Bitsong_Fantoken_MsgBurn,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bitsong_Fantoken_MsgBurnResponse

  /// DisableMint defines a method for disable the mint function
  @Sendable func disableMint(
    request: Bitsong_Fantoken_MsgDisableMint,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bitsong_Fantoken_MsgDisableMintResponse

  @Sendable func setMinter(
    request: Bitsong_Fantoken_MsgSetMinter,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bitsong_Fantoken_MsgSetMinterResponse

  @Sendable func setAuthority(
    request: Bitsong_Fantoken_MsgSetAuthority,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bitsong_Fantoken_MsgSetAuthorityResponse

  @Sendable func setUri(
    request: Bitsong_Fantoken_MsgSetUri,
    context: GRPCAsyncServerCallContext
  ) async throws -> Bitsong_Fantoken_MsgSetUriResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Bitsong_Fantoken_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Bitsong_Fantoken_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Bitsong_Fantoken_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Bitsong_Fantoken_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Issue":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgIssue>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgIssueResponse>(),
        interceptors: self.interceptors?.makeIssueInterceptors() ?? [],
        wrapping: self.issue(request:context:)
      )

    case "Mint":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgMint>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgMintResponse>(),
        interceptors: self.interceptors?.makeMintInterceptors() ?? [],
        wrapping: self.mint(request:context:)
      )

    case "Burn":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgBurn>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgBurnResponse>(),
        interceptors: self.interceptors?.makeBurnInterceptors() ?? [],
        wrapping: self.burn(request:context:)
      )

    case "DisableMint":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgDisableMint>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgDisableMintResponse>(),
        interceptors: self.interceptors?.makeDisableMintInterceptors() ?? [],
        wrapping: self.disableMint(request:context:)
      )

    case "SetMinter":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgSetMinter>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgSetMinterResponse>(),
        interceptors: self.interceptors?.makeSetMinterInterceptors() ?? [],
        wrapping: self.setMinter(request:context:)
      )

    case "SetAuthority":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgSetAuthority>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgSetAuthorityResponse>(),
        interceptors: self.interceptors?.makeSetAuthorityInterceptors() ?? [],
        wrapping: self.setAuthority(request:context:)
      )

    case "SetUri":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Bitsong_Fantoken_MsgSetUri>(),
        responseSerializer: ProtobufSerializer<Bitsong_Fantoken_MsgSetUriResponse>(),
        interceptors: self.interceptors?.makeSetUriInterceptors() ?? [],
        wrapping: self.setUri(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Bitsong_Fantoken_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'issue'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeIssueInterceptors() -> [ServerInterceptor<Bitsong_Fantoken_MsgIssue, Bitsong_Fantoken_MsgIssueResponse>]

  /// - Returns: Interceptors to use when handling 'mint'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMintInterceptors() -> [ServerInterceptor<Bitsong_Fantoken_MsgMint, Bitsong_Fantoken_MsgMintResponse>]

  /// - Returns: Interceptors to use when handling 'burn'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBurnInterceptors() -> [ServerInterceptor<Bitsong_Fantoken_MsgBurn, Bitsong_Fantoken_MsgBurnResponse>]

  /// - Returns: Interceptors to use when handling 'disableMint'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDisableMintInterceptors() -> [ServerInterceptor<Bitsong_Fantoken_MsgDisableMint, Bitsong_Fantoken_MsgDisableMintResponse>]

  /// - Returns: Interceptors to use when handling 'setMinter'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetMinterInterceptors() -> [ServerInterceptor<Bitsong_Fantoken_MsgSetMinter, Bitsong_Fantoken_MsgSetMinterResponse>]

  /// - Returns: Interceptors to use when handling 'setAuthority'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetAuthorityInterceptors() -> [ServerInterceptor<Bitsong_Fantoken_MsgSetAuthority, Bitsong_Fantoken_MsgSetAuthorityResponse>]

  /// - Returns: Interceptors to use when handling 'setUri'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetUriInterceptors() -> [ServerInterceptor<Bitsong_Fantoken_MsgSetUri, Bitsong_Fantoken_MsgSetUriResponse>]
}

internal enum Bitsong_Fantoken_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "bitsong.fantoken.Msg",
    methods: [
      Bitsong_Fantoken_MsgServerMetadata.Methods.issue,
      Bitsong_Fantoken_MsgServerMetadata.Methods.mint,
      Bitsong_Fantoken_MsgServerMetadata.Methods.burn,
      Bitsong_Fantoken_MsgServerMetadata.Methods.disableMint,
      Bitsong_Fantoken_MsgServerMetadata.Methods.setMinter,
      Bitsong_Fantoken_MsgServerMetadata.Methods.setAuthority,
      Bitsong_Fantoken_MsgServerMetadata.Methods.setUri,
    ]
  )

  internal enum Methods {
    internal static let issue = GRPCMethodDescriptor(
      name: "Issue",
      path: "/bitsong.fantoken.Msg/Issue",
      type: GRPCCallType.unary
    )

    internal static let mint = GRPCMethodDescriptor(
      name: "Mint",
      path: "/bitsong.fantoken.Msg/Mint",
      type: GRPCCallType.unary
    )

    internal static let burn = GRPCMethodDescriptor(
      name: "Burn",
      path: "/bitsong.fantoken.Msg/Burn",
      type: GRPCCallType.unary
    )

    internal static let disableMint = GRPCMethodDescriptor(
      name: "DisableMint",
      path: "/bitsong.fantoken.Msg/DisableMint",
      type: GRPCCallType.unary
    )

    internal static let setMinter = GRPCMethodDescriptor(
      name: "SetMinter",
      path: "/bitsong.fantoken.Msg/SetMinter",
      type: GRPCCallType.unary
    )

    internal static let setAuthority = GRPCMethodDescriptor(
      name: "SetAuthority",
      path: "/bitsong.fantoken.Msg/SetAuthority",
      type: GRPCCallType.unary
    )

    internal static let setUri = GRPCMethodDescriptor(
      name: "SetUri",
      path: "/bitsong.fantoken.Msg/SetUri",
      type: GRPCCallType.unary
    )
  }
}
