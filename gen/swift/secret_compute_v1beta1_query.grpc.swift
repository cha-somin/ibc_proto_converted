//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: secret/compute/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Query defines the gRPC querier service
///
/// Usage: instantiate `Secret_Compute_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Secret_Compute_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func contractInfo(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryContractInfoResponse>

  func contractsByCodeId(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryContractsByCodeIdResponse>

  func querySecretContract(
    _ request: Secret_Compute_V1beta1_QuerySecretContractRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Secret_Compute_V1beta1_QuerySecretContractRequest, Secret_Compute_V1beta1_QuerySecretContractResponse>

  func code(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryCodeResponse>

  func codes(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Secret_Compute_V1beta1_QueryCodesResponse>

  func codeHashByContractAddress(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryCodeHashResponse>

  func codeHashByCodeId(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryCodeHashResponse>

  func labelByAddress(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryContractLabelResponse>

  func addressByLabel(
    _ request: Secret_Compute_V1beta1_QueryByLabelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryByLabelRequest, Secret_Compute_V1beta1_QueryContractAddressResponse>
}

extension Secret_Compute_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "secret.compute.v1beta1.Query"
  }

  /// Query contract info by address
  ///
  /// - Parameters:
  ///   - request: Request to send to ContractInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractInfo(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryContractInfoResponse> {
    return self.makeUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.contractInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractInfoInterceptors() ?? []
    )
  }

  /// Query code info by id
  ///
  /// - Parameters:
  ///   - request: Request to send to ContractsByCodeId.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func contractsByCodeId(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryContractsByCodeIdResponse> {
    return self.makeUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.contractsByCodeId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractsByCodeIdInterceptors() ?? []
    )
  }

  /// Query secret contract
  ///
  /// - Parameters:
  ///   - request: Request to send to QuerySecretContract.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func querySecretContract(
    _ request: Secret_Compute_V1beta1_QuerySecretContractRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Secret_Compute_V1beta1_QuerySecretContractRequest, Secret_Compute_V1beta1_QuerySecretContractResponse> {
    return self.makeUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.querySecretContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySecretContractInterceptors() ?? []
    )
  }

  /// Query a specific contract code by id
  ///
  /// - Parameters:
  ///   - request: Request to send to Code.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func code(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryCodeResponse> {
    return self.makeUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.code.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeInterceptors() ?? []
    )
  }

  /// Query all contract codes on-chain
  ///
  /// - Parameters:
  ///   - request: Request to send to Codes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func codes(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Secret_Compute_V1beta1_QueryCodesResponse> {
    return self.makeUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.codes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodesInterceptors() ?? []
    )
  }

  /// Query code hash by contract address
  ///
  /// - Parameters:
  ///   - request: Request to send to CodeHashByContractAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func codeHashByContractAddress(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryCodeHashResponse> {
    return self.makeUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.codeHashByContractAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeHashByContractAddressInterceptors() ?? []
    )
  }

  /// Query code hash by code id
  ///
  /// - Parameters:
  ///   - request: Request to send to CodeHashByCodeId.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func codeHashByCodeId(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryCodeHashResponse> {
    return self.makeUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.codeHashByCodeId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeHashByCodeIdInterceptors() ?? []
    )
  }

  /// Query contract label by address
  ///
  /// - Parameters:
  ///   - request: Request to send to LabelByAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func labelByAddress(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryContractLabelResponse> {
    return self.makeUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.labelByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLabelByAddressInterceptors() ?? []
    )
  }

  /// Query contract address by label
  ///
  /// - Parameters:
  ///   - request: Request to send to AddressByLabel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addressByLabel(
    _ request: Secret_Compute_V1beta1_QueryByLabelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Secret_Compute_V1beta1_QueryByLabelRequest, Secret_Compute_V1beta1_QueryContractAddressResponse> {
    return self.makeUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.addressByLabel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressByLabelInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Secret_Compute_V1beta1_QueryClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Secret_Compute_V1beta1_QueryNIOClient")
internal final class Secret_Compute_V1beta1_QueryClient: Secret_Compute_V1beta1_QueryClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the secret.compute.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Secret_Compute_V1beta1_QueryNIOClient: Secret_Compute_V1beta1_QueryClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the secret.compute.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Query defines the gRPC querier service
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Secret_Compute_V1beta1_QueryAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func makeContractInfoCall(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryContractInfoResponse>

  func makeContractsByCodeIDCall(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryContractsByCodeIdResponse>

  func makeQuerySecretContractCall(
    _ request: Secret_Compute_V1beta1_QuerySecretContractRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QuerySecretContractRequest, Secret_Compute_V1beta1_QuerySecretContractResponse>

  func makeCodeCall(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryCodeResponse>

  func makeCodesCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Secret_Compute_V1beta1_QueryCodesResponse>

  func makeCodeHashByContractAddressCall(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryCodeHashResponse>

  func makeCodeHashByCodeIDCall(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryCodeHashResponse>

  func makeLabelByAddressCall(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryContractLabelResponse>

  func makeAddressByLabelCall(
    _ request: Secret_Compute_V1beta1_QueryByLabelRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QueryByLabelRequest, Secret_Compute_V1beta1_QueryContractAddressResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Secret_Compute_V1beta1_QueryAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Secret_Compute_V1beta1_QueryClientMetadata.serviceDescriptor
  }

  internal var interceptors: Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeContractInfoCall(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryContractInfoResponse> {
    return self.makeAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.contractInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractInfoInterceptors() ?? []
    )
  }

  internal func makeContractsByCodeIDCall(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryContractsByCodeIdResponse> {
    return self.makeAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.contractsByCodeId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractsByCodeIdInterceptors() ?? []
    )
  }

  internal func makeQuerySecretContractCall(
    _ request: Secret_Compute_V1beta1_QuerySecretContractRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QuerySecretContractRequest, Secret_Compute_V1beta1_QuerySecretContractResponse> {
    return self.makeAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.querySecretContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySecretContractInterceptors() ?? []
    )
  }

  internal func makeCodeCall(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryCodeResponse> {
    return self.makeAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.code.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeInterceptors() ?? []
    )
  }

  internal func makeCodesCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Secret_Compute_V1beta1_QueryCodesResponse> {
    return self.makeAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.codes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodesInterceptors() ?? []
    )
  }

  internal func makeCodeHashByContractAddressCall(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryCodeHashResponse> {
    return self.makeAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.codeHashByContractAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeHashByContractAddressInterceptors() ?? []
    )
  }

  internal func makeCodeHashByCodeIDCall(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryCodeHashResponse> {
    return self.makeAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.codeHashByCodeId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeHashByCodeIdInterceptors() ?? []
    )
  }

  internal func makeLabelByAddressCall(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryContractLabelResponse> {
    return self.makeAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.labelByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLabelByAddressInterceptors() ?? []
    )
  }

  internal func makeAddressByLabelCall(
    _ request: Secret_Compute_V1beta1_QueryByLabelRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Secret_Compute_V1beta1_QueryByLabelRequest, Secret_Compute_V1beta1_QueryContractAddressResponse> {
    return self.makeAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.addressByLabel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressByLabelInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Secret_Compute_V1beta1_QueryAsyncClientProtocol {
  internal func contractInfo(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Secret_Compute_V1beta1_QueryContractInfoResponse {
    return try await self.performAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.contractInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractInfoInterceptors() ?? []
    )
  }

  internal func contractsByCodeId(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Secret_Compute_V1beta1_QueryContractsByCodeIdResponse {
    return try await self.performAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.contractsByCodeId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeContractsByCodeIdInterceptors() ?? []
    )
  }

  internal func querySecretContract(
    _ request: Secret_Compute_V1beta1_QuerySecretContractRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Secret_Compute_V1beta1_QuerySecretContractResponse {
    return try await self.performAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.querySecretContract.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeQuerySecretContractInterceptors() ?? []
    )
  }

  internal func code(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Secret_Compute_V1beta1_QueryCodeResponse {
    return try await self.performAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.code.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeInterceptors() ?? []
    )
  }

  internal func codes(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Secret_Compute_V1beta1_QueryCodesResponse {
    return try await self.performAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.codes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodesInterceptors() ?? []
    )
  }

  internal func codeHashByContractAddress(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Secret_Compute_V1beta1_QueryCodeHashResponse {
    return try await self.performAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.codeHashByContractAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeHashByContractAddressInterceptors() ?? []
    )
  }

  internal func codeHashByCodeId(
    _ request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Secret_Compute_V1beta1_QueryCodeHashResponse {
    return try await self.performAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.codeHashByCodeId.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCodeHashByCodeIdInterceptors() ?? []
    )
  }

  internal func labelByAddress(
    _ request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Secret_Compute_V1beta1_QueryContractLabelResponse {
    return try await self.performAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.labelByAddress.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLabelByAddressInterceptors() ?? []
    )
  }

  internal func addressByLabel(
    _ request: Secret_Compute_V1beta1_QueryByLabelRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Secret_Compute_V1beta1_QueryContractAddressResponse {
    return try await self.performAsyncUnaryCall(
      path: Secret_Compute_V1beta1_QueryClientMetadata.Methods.addressByLabel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddressByLabelInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Secret_Compute_V1beta1_QueryAsyncClient: Secret_Compute_V1beta1_QueryAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Secret_Compute_V1beta1_QueryClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'contractInfo'.
  func makeContractInfoInterceptors() -> [ClientInterceptor<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryContractInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'contractsByCodeId'.
  func makeContractsByCodeIdInterceptors() -> [ClientInterceptor<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryContractsByCodeIdResponse>]

  /// - Returns: Interceptors to use when invoking 'querySecretContract'.
  func makeQuerySecretContractInterceptors() -> [ClientInterceptor<Secret_Compute_V1beta1_QuerySecretContractRequest, Secret_Compute_V1beta1_QuerySecretContractResponse>]

  /// - Returns: Interceptors to use when invoking 'code'.
  func makeCodeInterceptors() -> [ClientInterceptor<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryCodeResponse>]

  /// - Returns: Interceptors to use when invoking 'codes'.
  func makeCodesInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Secret_Compute_V1beta1_QueryCodesResponse>]

  /// - Returns: Interceptors to use when invoking 'codeHashByContractAddress'.
  func makeCodeHashByContractAddressInterceptors() -> [ClientInterceptor<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryCodeHashResponse>]

  /// - Returns: Interceptors to use when invoking 'codeHashByCodeId'.
  func makeCodeHashByCodeIdInterceptors() -> [ClientInterceptor<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryCodeHashResponse>]

  /// - Returns: Interceptors to use when invoking 'labelByAddress'.
  func makeLabelByAddressInterceptors() -> [ClientInterceptor<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryContractLabelResponse>]

  /// - Returns: Interceptors to use when invoking 'addressByLabel'.
  func makeAddressByLabelInterceptors() -> [ClientInterceptor<Secret_Compute_V1beta1_QueryByLabelRequest, Secret_Compute_V1beta1_QueryContractAddressResponse>]
}

internal enum Secret_Compute_V1beta1_QueryClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "secret.compute.v1beta1.Query",
    methods: [
      Secret_Compute_V1beta1_QueryClientMetadata.Methods.contractInfo,
      Secret_Compute_V1beta1_QueryClientMetadata.Methods.contractsByCodeId,
      Secret_Compute_V1beta1_QueryClientMetadata.Methods.querySecretContract,
      Secret_Compute_V1beta1_QueryClientMetadata.Methods.code,
      Secret_Compute_V1beta1_QueryClientMetadata.Methods.codes,
      Secret_Compute_V1beta1_QueryClientMetadata.Methods.codeHashByContractAddress,
      Secret_Compute_V1beta1_QueryClientMetadata.Methods.codeHashByCodeId,
      Secret_Compute_V1beta1_QueryClientMetadata.Methods.labelByAddress,
      Secret_Compute_V1beta1_QueryClientMetadata.Methods.addressByLabel,
    ]
  )

  internal enum Methods {
    internal static let contractInfo = GRPCMethodDescriptor(
      name: "ContractInfo",
      path: "/secret.compute.v1beta1.Query/ContractInfo",
      type: GRPCCallType.unary
    )

    internal static let contractsByCodeId = GRPCMethodDescriptor(
      name: "ContractsByCodeId",
      path: "/secret.compute.v1beta1.Query/ContractsByCodeId",
      type: GRPCCallType.unary
    )

    internal static let querySecretContract = GRPCMethodDescriptor(
      name: "QuerySecretContract",
      path: "/secret.compute.v1beta1.Query/QuerySecretContract",
      type: GRPCCallType.unary
    )

    internal static let code = GRPCMethodDescriptor(
      name: "Code",
      path: "/secret.compute.v1beta1.Query/Code",
      type: GRPCCallType.unary
    )

    internal static let codes = GRPCMethodDescriptor(
      name: "Codes",
      path: "/secret.compute.v1beta1.Query/Codes",
      type: GRPCCallType.unary
    )

    internal static let codeHashByContractAddress = GRPCMethodDescriptor(
      name: "CodeHashByContractAddress",
      path: "/secret.compute.v1beta1.Query/CodeHashByContractAddress",
      type: GRPCCallType.unary
    )

    internal static let codeHashByCodeId = GRPCMethodDescriptor(
      name: "CodeHashByCodeId",
      path: "/secret.compute.v1beta1.Query/CodeHashByCodeId",
      type: GRPCCallType.unary
    )

    internal static let labelByAddress = GRPCMethodDescriptor(
      name: "LabelByAddress",
      path: "/secret.compute.v1beta1.Query/LabelByAddress",
      type: GRPCCallType.unary
    )

    internal static let addressByLabel = GRPCMethodDescriptor(
      name: "AddressByLabel",
      path: "/secret.compute.v1beta1.Query/AddressByLabel",
      type: GRPCCallType.unary
    )
  }
}

/// Query defines the gRPC querier service
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Secret_Compute_V1beta1_QueryProvider: CallHandlerProvider {
  var interceptors: Secret_Compute_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Query contract info by address
  func contractInfo(request: Secret_Compute_V1beta1_QueryByContractAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Secret_Compute_V1beta1_QueryContractInfoResponse>

  /// Query code info by id
  func contractsByCodeId(request: Secret_Compute_V1beta1_QueryByCodeIdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Secret_Compute_V1beta1_QueryContractsByCodeIdResponse>

  /// Query secret contract
  func querySecretContract(request: Secret_Compute_V1beta1_QuerySecretContractRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Secret_Compute_V1beta1_QuerySecretContractResponse>

  /// Query a specific contract code by id
  func code(request: Secret_Compute_V1beta1_QueryByCodeIdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Secret_Compute_V1beta1_QueryCodeResponse>

  /// Query all contract codes on-chain
  func codes(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Secret_Compute_V1beta1_QueryCodesResponse>

  /// Query code hash by contract address
  func codeHashByContractAddress(request: Secret_Compute_V1beta1_QueryByContractAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Secret_Compute_V1beta1_QueryCodeHashResponse>

  /// Query code hash by code id
  func codeHashByCodeId(request: Secret_Compute_V1beta1_QueryByCodeIdRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Secret_Compute_V1beta1_QueryCodeHashResponse>

  /// Query contract label by address
  func labelByAddress(request: Secret_Compute_V1beta1_QueryByContractAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Secret_Compute_V1beta1_QueryContractLabelResponse>

  /// Query contract address by label
  func addressByLabel(request: Secret_Compute_V1beta1_QueryByLabelRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Secret_Compute_V1beta1_QueryContractAddressResponse>
}

extension Secret_Compute_V1beta1_QueryProvider {
  internal var serviceName: Substring {
    return Secret_Compute_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ContractInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryByContractAddressRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryContractInfoResponse>(),
        interceptors: self.interceptors?.makeContractInfoInterceptors() ?? [],
        userFunction: self.contractInfo(request:context:)
      )

    case "ContractsByCodeId":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryByCodeIdRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryContractsByCodeIdResponse>(),
        interceptors: self.interceptors?.makeContractsByCodeIdInterceptors() ?? [],
        userFunction: self.contractsByCodeId(request:context:)
      )

    case "QuerySecretContract":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QuerySecretContractRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QuerySecretContractResponse>(),
        interceptors: self.interceptors?.makeQuerySecretContractInterceptors() ?? [],
        userFunction: self.querySecretContract(request:context:)
      )

    case "Code":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryByCodeIdRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryCodeResponse>(),
        interceptors: self.interceptors?.makeCodeInterceptors() ?? [],
        userFunction: self.code(request:context:)
      )

    case "Codes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryCodesResponse>(),
        interceptors: self.interceptors?.makeCodesInterceptors() ?? [],
        userFunction: self.codes(request:context:)
      )

    case "CodeHashByContractAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryByContractAddressRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryCodeHashResponse>(),
        interceptors: self.interceptors?.makeCodeHashByContractAddressInterceptors() ?? [],
        userFunction: self.codeHashByContractAddress(request:context:)
      )

    case "CodeHashByCodeId":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryByCodeIdRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryCodeHashResponse>(),
        interceptors: self.interceptors?.makeCodeHashByCodeIdInterceptors() ?? [],
        userFunction: self.codeHashByCodeId(request:context:)
      )

    case "LabelByAddress":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryByContractAddressRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryContractLabelResponse>(),
        interceptors: self.interceptors?.makeLabelByAddressInterceptors() ?? [],
        userFunction: self.labelByAddress(request:context:)
      )

    case "AddressByLabel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryByLabelRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryContractAddressResponse>(),
        interceptors: self.interceptors?.makeAddressByLabelInterceptors() ?? [],
        userFunction: self.addressByLabel(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Query defines the gRPC querier service
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Secret_Compute_V1beta1_QueryAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Secret_Compute_V1beta1_QueryServerInterceptorFactoryProtocol? { get }

  /// Query contract info by address
  @Sendable func contractInfo(
    request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Secret_Compute_V1beta1_QueryContractInfoResponse

  /// Query code info by id
  @Sendable func contractsByCodeId(
    request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Secret_Compute_V1beta1_QueryContractsByCodeIdResponse

  /// Query secret contract
  @Sendable func querySecretContract(
    request: Secret_Compute_V1beta1_QuerySecretContractRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Secret_Compute_V1beta1_QuerySecretContractResponse

  /// Query a specific contract code by id
  @Sendable func code(
    request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Secret_Compute_V1beta1_QueryCodeResponse

  /// Query all contract codes on-chain
  @Sendable func codes(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Secret_Compute_V1beta1_QueryCodesResponse

  /// Query code hash by contract address
  @Sendable func codeHashByContractAddress(
    request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Secret_Compute_V1beta1_QueryCodeHashResponse

  /// Query code hash by code id
  @Sendable func codeHashByCodeId(
    request: Secret_Compute_V1beta1_QueryByCodeIdRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Secret_Compute_V1beta1_QueryCodeHashResponse

  /// Query contract label by address
  @Sendable func labelByAddress(
    request: Secret_Compute_V1beta1_QueryByContractAddressRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Secret_Compute_V1beta1_QueryContractLabelResponse

  /// Query contract address by label
  @Sendable func addressByLabel(
    request: Secret_Compute_V1beta1_QueryByLabelRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Secret_Compute_V1beta1_QueryContractAddressResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Secret_Compute_V1beta1_QueryAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Secret_Compute_V1beta1_QueryServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Secret_Compute_V1beta1_QueryServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Secret_Compute_V1beta1_QueryServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ContractInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryByContractAddressRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryContractInfoResponse>(),
        interceptors: self.interceptors?.makeContractInfoInterceptors() ?? [],
        wrapping: self.contractInfo(request:context:)
      )

    case "ContractsByCodeId":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryByCodeIdRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryContractsByCodeIdResponse>(),
        interceptors: self.interceptors?.makeContractsByCodeIdInterceptors() ?? [],
        wrapping: self.contractsByCodeId(request:context:)
      )

    case "QuerySecretContract":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QuerySecretContractRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QuerySecretContractResponse>(),
        interceptors: self.interceptors?.makeQuerySecretContractInterceptors() ?? [],
        wrapping: self.querySecretContract(request:context:)
      )

    case "Code":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryByCodeIdRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryCodeResponse>(),
        interceptors: self.interceptors?.makeCodeInterceptors() ?? [],
        wrapping: self.code(request:context:)
      )

    case "Codes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryCodesResponse>(),
        interceptors: self.interceptors?.makeCodesInterceptors() ?? [],
        wrapping: self.codes(request:context:)
      )

    case "CodeHashByContractAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryByContractAddressRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryCodeHashResponse>(),
        interceptors: self.interceptors?.makeCodeHashByContractAddressInterceptors() ?? [],
        wrapping: self.codeHashByContractAddress(request:context:)
      )

    case "CodeHashByCodeId":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryByCodeIdRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryCodeHashResponse>(),
        interceptors: self.interceptors?.makeCodeHashByCodeIdInterceptors() ?? [],
        wrapping: self.codeHashByCodeId(request:context:)
      )

    case "LabelByAddress":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryByContractAddressRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryContractLabelResponse>(),
        interceptors: self.interceptors?.makeLabelByAddressInterceptors() ?? [],
        wrapping: self.labelByAddress(request:context:)
      )

    case "AddressByLabel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Secret_Compute_V1beta1_QueryByLabelRequest>(),
        responseSerializer: ProtobufSerializer<Secret_Compute_V1beta1_QueryContractAddressResponse>(),
        interceptors: self.interceptors?.makeAddressByLabelInterceptors() ?? [],
        wrapping: self.addressByLabel(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Secret_Compute_V1beta1_QueryServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'contractInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeContractInfoInterceptors() -> [ServerInterceptor<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryContractInfoResponse>]

  /// - Returns: Interceptors to use when handling 'contractsByCodeId'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeContractsByCodeIdInterceptors() -> [ServerInterceptor<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryContractsByCodeIdResponse>]

  /// - Returns: Interceptors to use when handling 'querySecretContract'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeQuerySecretContractInterceptors() -> [ServerInterceptor<Secret_Compute_V1beta1_QuerySecretContractRequest, Secret_Compute_V1beta1_QuerySecretContractResponse>]

  /// - Returns: Interceptors to use when handling 'code'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCodeInterceptors() -> [ServerInterceptor<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryCodeResponse>]

  /// - Returns: Interceptors to use when handling 'codes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCodesInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Secret_Compute_V1beta1_QueryCodesResponse>]

  /// - Returns: Interceptors to use when handling 'codeHashByContractAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCodeHashByContractAddressInterceptors() -> [ServerInterceptor<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryCodeHashResponse>]

  /// - Returns: Interceptors to use when handling 'codeHashByCodeId'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCodeHashByCodeIdInterceptors() -> [ServerInterceptor<Secret_Compute_V1beta1_QueryByCodeIdRequest, Secret_Compute_V1beta1_QueryCodeHashResponse>]

  /// - Returns: Interceptors to use when handling 'labelByAddress'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLabelByAddressInterceptors() -> [ServerInterceptor<Secret_Compute_V1beta1_QueryByContractAddressRequest, Secret_Compute_V1beta1_QueryContractLabelResponse>]

  /// - Returns: Interceptors to use when handling 'addressByLabel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddressByLabelInterceptors() -> [ServerInterceptor<Secret_Compute_V1beta1_QueryByLabelRequest, Secret_Compute_V1beta1_QueryContractAddressResponse>]
}

internal enum Secret_Compute_V1beta1_QueryServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Query",
    fullName: "secret.compute.v1beta1.Query",
    methods: [
      Secret_Compute_V1beta1_QueryServerMetadata.Methods.contractInfo,
      Secret_Compute_V1beta1_QueryServerMetadata.Methods.contractsByCodeId,
      Secret_Compute_V1beta1_QueryServerMetadata.Methods.querySecretContract,
      Secret_Compute_V1beta1_QueryServerMetadata.Methods.code,
      Secret_Compute_V1beta1_QueryServerMetadata.Methods.codes,
      Secret_Compute_V1beta1_QueryServerMetadata.Methods.codeHashByContractAddress,
      Secret_Compute_V1beta1_QueryServerMetadata.Methods.codeHashByCodeId,
      Secret_Compute_V1beta1_QueryServerMetadata.Methods.labelByAddress,
      Secret_Compute_V1beta1_QueryServerMetadata.Methods.addressByLabel,
    ]
  )

  internal enum Methods {
    internal static let contractInfo = GRPCMethodDescriptor(
      name: "ContractInfo",
      path: "/secret.compute.v1beta1.Query/ContractInfo",
      type: GRPCCallType.unary
    )

    internal static let contractsByCodeId = GRPCMethodDescriptor(
      name: "ContractsByCodeId",
      path: "/secret.compute.v1beta1.Query/ContractsByCodeId",
      type: GRPCCallType.unary
    )

    internal static let querySecretContract = GRPCMethodDescriptor(
      name: "QuerySecretContract",
      path: "/secret.compute.v1beta1.Query/QuerySecretContract",
      type: GRPCCallType.unary
    )

    internal static let code = GRPCMethodDescriptor(
      name: "Code",
      path: "/secret.compute.v1beta1.Query/Code",
      type: GRPCCallType.unary
    )

    internal static let codes = GRPCMethodDescriptor(
      name: "Codes",
      path: "/secret.compute.v1beta1.Query/Codes",
      type: GRPCCallType.unary
    )

    internal static let codeHashByContractAddress = GRPCMethodDescriptor(
      name: "CodeHashByContractAddress",
      path: "/secret.compute.v1beta1.Query/CodeHashByContractAddress",
      type: GRPCCallType.unary
    )

    internal static let codeHashByCodeId = GRPCMethodDescriptor(
      name: "CodeHashByCodeId",
      path: "/secret.compute.v1beta1.Query/CodeHashByCodeId",
      type: GRPCCallType.unary
    )

    internal static let labelByAddress = GRPCMethodDescriptor(
      name: "LabelByAddress",
      path: "/secret.compute.v1beta1.Query/LabelByAddress",
      type: GRPCCallType.unary
    )

    internal static let addressByLabel = GRPCMethodDescriptor(
      name: "AddressByLabel",
      path: "/secret.compute.v1beta1.Query/AddressByLabel",
      type: GRPCCallType.unary
    )
  }
}
