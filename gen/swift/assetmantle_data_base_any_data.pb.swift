// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: assetmantle/data/base/any_data.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Assetmantle_Schema_Data_Base_AnyData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var impl: Assetmantle_Schema_Data_Base_AnyData.OneOf_Impl? = nil

  var accAddressData: Assetmantle_Schema_Data_Base_AccAddressData {
    get {
      if case .accAddressData(let v)? = impl {return v}
      return Assetmantle_Schema_Data_Base_AccAddressData()
    }
    set {impl = .accAddressData(newValue)}
  }

  var booleanData: Assetmantle_Schema_Data_Base_BooleanData {
    get {
      if case .booleanData(let v)? = impl {return v}
      return Assetmantle_Schema_Data_Base_BooleanData()
    }
    set {impl = .booleanData(newValue)}
  }

  var decData: Assetmantle_Schema_Data_Base_DecData {
    get {
      if case .decData(let v)? = impl {return v}
      return Assetmantle_Schema_Data_Base_DecData()
    }
    set {impl = .decData(newValue)}
  }

  var heightData: Assetmantle_Schema_Data_Base_HeightData {
    get {
      if case .heightData(let v)? = impl {return v}
      return Assetmantle_Schema_Data_Base_HeightData()
    }
    set {impl = .heightData(newValue)}
  }

  var iDData: Assetmantle_Schema_Data_Base_IDData {
    get {
      if case .iDData(let v)? = impl {return v}
      return Assetmantle_Schema_Data_Base_IDData()
    }
    set {impl = .iDData(newValue)}
  }

  var listData: Assetmantle_Schema_Data_Base_ListData {
    get {
      if case .listData(let v)? = impl {return v}
      return Assetmantle_Schema_Data_Base_ListData()
    }
    set {impl = .listData(newValue)}
  }

  var numberData: Assetmantle_Schema_Data_Base_NumberData {
    get {
      if case .numberData(let v)? = impl {return v}
      return Assetmantle_Schema_Data_Base_NumberData()
    }
    set {impl = .numberData(newValue)}
  }

  var stringData: Assetmantle_Schema_Data_Base_StringData {
    get {
      if case .stringData(let v)? = impl {return v}
      return Assetmantle_Schema_Data_Base_StringData()
    }
    set {impl = .stringData(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Impl: Equatable {
    case accAddressData(Assetmantle_Schema_Data_Base_AccAddressData)
    case booleanData(Assetmantle_Schema_Data_Base_BooleanData)
    case decData(Assetmantle_Schema_Data_Base_DecData)
    case heightData(Assetmantle_Schema_Data_Base_HeightData)
    case iDData(Assetmantle_Schema_Data_Base_IDData)
    case listData(Assetmantle_Schema_Data_Base_ListData)
    case numberData(Assetmantle_Schema_Data_Base_NumberData)
    case stringData(Assetmantle_Schema_Data_Base_StringData)

  #if !swift(>=4.1)
    static func ==(lhs: Assetmantle_Schema_Data_Base_AnyData.OneOf_Impl, rhs: Assetmantle_Schema_Data_Base_AnyData.OneOf_Impl) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.accAddressData, .accAddressData): return {
        guard case .accAddressData(let l) = lhs, case .accAddressData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.booleanData, .booleanData): return {
        guard case .booleanData(let l) = lhs, case .booleanData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.decData, .decData): return {
        guard case .decData(let l) = lhs, case .decData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.heightData, .heightData): return {
        guard case .heightData(let l) = lhs, case .heightData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.iDData, .iDData): return {
        guard case .iDData(let l) = lhs, case .iDData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.listData, .listData): return {
        guard case .listData(let l) = lhs, case .listData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.numberData, .numberData): return {
        guard case .numberData(let l) = lhs, case .numberData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.stringData, .stringData): return {
        guard case .stringData(let l) = lhs, case .stringData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Assetmantle_Schema_Data_Base_AnyData: @unchecked Sendable {}
extension Assetmantle_Schema_Data_Base_AnyData.OneOf_Impl: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "assetmantle.schema.data.base"

extension Assetmantle_Schema_Data_Base_AnyData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AnyData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "acc_address_data"),
    2: .standard(proto: "boolean_data"),
    3: .standard(proto: "dec_data"),
    4: .standard(proto: "height_data"),
    5: .standard(proto: "i_d_data"),
    6: .standard(proto: "list_data"),
    7: .standard(proto: "number_data"),
    8: .standard(proto: "string_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Assetmantle_Schema_Data_Base_AccAddressData?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .accAddressData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .accAddressData(v)
        }
      }()
      case 2: try {
        var v: Assetmantle_Schema_Data_Base_BooleanData?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .booleanData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .booleanData(v)
        }
      }()
      case 3: try {
        var v: Assetmantle_Schema_Data_Base_DecData?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .decData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .decData(v)
        }
      }()
      case 4: try {
        var v: Assetmantle_Schema_Data_Base_HeightData?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .heightData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .heightData(v)
        }
      }()
      case 5: try {
        var v: Assetmantle_Schema_Data_Base_IDData?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .iDData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .iDData(v)
        }
      }()
      case 6: try {
        var v: Assetmantle_Schema_Data_Base_ListData?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .listData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .listData(v)
        }
      }()
      case 7: try {
        var v: Assetmantle_Schema_Data_Base_NumberData?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .numberData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .numberData(v)
        }
      }()
      case 8: try {
        var v: Assetmantle_Schema_Data_Base_StringData?
        var hadOneofValue = false
        if let current = self.impl {
          hadOneofValue = true
          if case .stringData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.impl = .stringData(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.impl {
    case .accAddressData?: try {
      guard case .accAddressData(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .booleanData?: try {
      guard case .booleanData(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .decData?: try {
      guard case .decData(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .heightData?: try {
      guard case .heightData(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .iDData?: try {
      guard case .iDData(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .listData?: try {
      guard case .listData(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .numberData?: try {
      guard case .numberData(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case .stringData?: try {
      guard case .stringData(let v)? = self.impl else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Assetmantle_Schema_Data_Base_AnyData, rhs: Assetmantle_Schema_Data_Base_AnyData) -> Bool {
    if lhs.impl != rhs.impl {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
