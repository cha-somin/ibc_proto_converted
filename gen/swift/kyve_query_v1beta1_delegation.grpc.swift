//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: kyve/query/v1beta1/delegation.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// QueryDelegation contains all rpc requests related to direct delegation data
///
/// Usage: instantiate `Kyve_Query_V1beta1_QueryDelegationClient`, then call methods of this protocol to make API calls.
internal protocol Kyve_Query_V1beta1_QueryDelegationClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Kyve_Query_V1beta1_QueryDelegationClientInterceptorFactoryProtocol? { get }

  func delegator(
    _ request: Kyve_Query_V1beta1_QueryDelegatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryDelegatorRequest, Kyve_Query_V1beta1_QueryDelegatorResponse>

  func delegatorsByStaker(
    _ request: Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest, Kyve_Query_V1beta1_QueryDelegatorsByStakerResponse>

  func stakersByDelegator(
    _ request: Kyve_Query_V1beta1_QueryStakersByDelegatorRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryStakersByDelegatorRequest, Kyve_Query_V1beta1_QueryStakersByDelegatorResponse>
}

extension Kyve_Query_V1beta1_QueryDelegationClientProtocol {
  internal var serviceName: String {
    return "kyve.query.v1beta1.QueryDelegation"
  }

  /// Delegator returns delegation information for a specific delegator of a specific staker.
  ///
  /// - Parameters:
  ///   - request: Request to send to Delegator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegator(
    _ request: Kyve_Query_V1beta1_QueryDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryDelegatorRequest, Kyve_Query_V1beta1_QueryDelegatorResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryDelegationClientMetadata.Methods.delegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorInterceptors() ?? []
    )
  }

  /// DelegatorsByStaker returns all delegators that have delegated to the given staker
  /// This query is paginated.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatorsByStaker.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegatorsByStaker(
    _ request: Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest, Kyve_Query_V1beta1_QueryDelegatorsByStakerResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryDelegationClientMetadata.Methods.delegatorsByStaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorsByStakerInterceptors() ?? []
    )
  }

  /// StakersByPoolAndDelegator returns all stakers the given delegator has delegated to.
  /// This query is paginated.
  ///
  /// - Parameters:
  ///   - request: Request to send to StakersByDelegator.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func stakersByDelegator(
    _ request: Kyve_Query_V1beta1_QueryStakersByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Kyve_Query_V1beta1_QueryStakersByDelegatorRequest, Kyve_Query_V1beta1_QueryStakersByDelegatorResponse> {
    return self.makeUnaryCall(
      path: Kyve_Query_V1beta1_QueryDelegationClientMetadata.Methods.stakersByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakersByDelegatorInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Kyve_Query_V1beta1_QueryDelegationClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Kyve_Query_V1beta1_QueryDelegationNIOClient")
internal final class Kyve_Query_V1beta1_QueryDelegationClient: Kyve_Query_V1beta1_QueryDelegationClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Kyve_Query_V1beta1_QueryDelegationClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Kyve_Query_V1beta1_QueryDelegationClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the kyve.query.v1beta1.QueryDelegation service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Query_V1beta1_QueryDelegationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Kyve_Query_V1beta1_QueryDelegationNIOClient: Kyve_Query_V1beta1_QueryDelegationClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Query_V1beta1_QueryDelegationClientInterceptorFactoryProtocol?

  /// Creates a client for the kyve.query.v1beta1.QueryDelegation service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Query_V1beta1_QueryDelegationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// QueryDelegation contains all rpc requests related to direct delegation data
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Query_V1beta1_QueryDelegationAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Query_V1beta1_QueryDelegationClientInterceptorFactoryProtocol? { get }

  func makeDelegatorCall(
    _ request: Kyve_Query_V1beta1_QueryDelegatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryDelegatorRequest, Kyve_Query_V1beta1_QueryDelegatorResponse>

  func makeDelegatorsByStakerCall(
    _ request: Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest, Kyve_Query_V1beta1_QueryDelegatorsByStakerResponse>

  func makeStakersByDelegatorCall(
    _ request: Kyve_Query_V1beta1_QueryStakersByDelegatorRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryStakersByDelegatorRequest, Kyve_Query_V1beta1_QueryStakersByDelegatorResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Query_V1beta1_QueryDelegationAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Query_V1beta1_QueryDelegationClientMetadata.serviceDescriptor
  }

  internal var interceptors: Kyve_Query_V1beta1_QueryDelegationClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeDelegatorCall(
    _ request: Kyve_Query_V1beta1_QueryDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryDelegatorRequest, Kyve_Query_V1beta1_QueryDelegatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryDelegationClientMetadata.Methods.delegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorInterceptors() ?? []
    )
  }

  internal func makeDelegatorsByStakerCall(
    _ request: Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest, Kyve_Query_V1beta1_QueryDelegatorsByStakerResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryDelegationClientMetadata.Methods.delegatorsByStaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorsByStakerInterceptors() ?? []
    )
  }

  internal func makeStakersByDelegatorCall(
    _ request: Kyve_Query_V1beta1_QueryStakersByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Kyve_Query_V1beta1_QueryStakersByDelegatorRequest, Kyve_Query_V1beta1_QueryStakersByDelegatorResponse> {
    return self.makeAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryDelegationClientMetadata.Methods.stakersByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakersByDelegatorInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Query_V1beta1_QueryDelegationAsyncClientProtocol {
  internal func delegator(
    _ request: Kyve_Query_V1beta1_QueryDelegatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryDelegatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryDelegationClientMetadata.Methods.delegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorInterceptors() ?? []
    )
  }

  internal func delegatorsByStaker(
    _ request: Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryDelegatorsByStakerResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryDelegationClientMetadata.Methods.delegatorsByStaker.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDelegatorsByStakerInterceptors() ?? []
    )
  }

  internal func stakersByDelegator(
    _ request: Kyve_Query_V1beta1_QueryStakersByDelegatorRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Kyve_Query_V1beta1_QueryStakersByDelegatorResponse {
    return try await self.performAsyncUnaryCall(
      path: Kyve_Query_V1beta1_QueryDelegationClientMetadata.Methods.stakersByDelegator.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStakersByDelegatorInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Kyve_Query_V1beta1_QueryDelegationAsyncClient: Kyve_Query_V1beta1_QueryDelegationAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Kyve_Query_V1beta1_QueryDelegationClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Kyve_Query_V1beta1_QueryDelegationClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Kyve_Query_V1beta1_QueryDelegationClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'delegator'.
  func makeDelegatorInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryDelegatorRequest, Kyve_Query_V1beta1_QueryDelegatorResponse>]

  /// - Returns: Interceptors to use when invoking 'delegatorsByStaker'.
  func makeDelegatorsByStakerInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest, Kyve_Query_V1beta1_QueryDelegatorsByStakerResponse>]

  /// - Returns: Interceptors to use when invoking 'stakersByDelegator'.
  func makeStakersByDelegatorInterceptors() -> [ClientInterceptor<Kyve_Query_V1beta1_QueryStakersByDelegatorRequest, Kyve_Query_V1beta1_QueryStakersByDelegatorResponse>]
}

internal enum Kyve_Query_V1beta1_QueryDelegationClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryDelegation",
    fullName: "kyve.query.v1beta1.QueryDelegation",
    methods: [
      Kyve_Query_V1beta1_QueryDelegationClientMetadata.Methods.delegator,
      Kyve_Query_V1beta1_QueryDelegationClientMetadata.Methods.delegatorsByStaker,
      Kyve_Query_V1beta1_QueryDelegationClientMetadata.Methods.stakersByDelegator,
    ]
  )

  internal enum Methods {
    internal static let delegator = GRPCMethodDescriptor(
      name: "Delegator",
      path: "/kyve.query.v1beta1.QueryDelegation/Delegator",
      type: GRPCCallType.unary
    )

    internal static let delegatorsByStaker = GRPCMethodDescriptor(
      name: "DelegatorsByStaker",
      path: "/kyve.query.v1beta1.QueryDelegation/DelegatorsByStaker",
      type: GRPCCallType.unary
    )

    internal static let stakersByDelegator = GRPCMethodDescriptor(
      name: "StakersByDelegator",
      path: "/kyve.query.v1beta1.QueryDelegation/StakersByDelegator",
      type: GRPCCallType.unary
    )
  }
}

/// QueryDelegation contains all rpc requests related to direct delegation data
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Kyve_Query_V1beta1_QueryDelegationProvider: CallHandlerProvider {
  var interceptors: Kyve_Query_V1beta1_QueryDelegationServerInterceptorFactoryProtocol? { get }

  /// Delegator returns delegation information for a specific delegator of a specific staker.
  func delegator(request: Kyve_Query_V1beta1_QueryDelegatorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryDelegatorResponse>

  /// DelegatorsByStaker returns all delegators that have delegated to the given staker
  /// This query is paginated.
  func delegatorsByStaker(request: Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryDelegatorsByStakerResponse>

  /// StakersByPoolAndDelegator returns all stakers the given delegator has delegated to.
  /// This query is paginated.
  func stakersByDelegator(request: Kyve_Query_V1beta1_QueryStakersByDelegatorRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Kyve_Query_V1beta1_QueryStakersByDelegatorResponse>
}

extension Kyve_Query_V1beta1_QueryDelegationProvider {
  internal var serviceName: Substring {
    return Kyve_Query_V1beta1_QueryDelegationServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Delegator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryDelegatorRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryDelegatorResponse>(),
        interceptors: self.interceptors?.makeDelegatorInterceptors() ?? [],
        userFunction: self.delegator(request:context:)
      )

    case "DelegatorsByStaker":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryDelegatorsByStakerResponse>(),
        interceptors: self.interceptors?.makeDelegatorsByStakerInterceptors() ?? [],
        userFunction: self.delegatorsByStaker(request:context:)
      )

    case "StakersByDelegator":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryStakersByDelegatorRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryStakersByDelegatorResponse>(),
        interceptors: self.interceptors?.makeStakersByDelegatorInterceptors() ?? [],
        userFunction: self.stakersByDelegator(request:context:)
      )

    default:
      return nil
    }
  }
}

/// QueryDelegation contains all rpc requests related to direct delegation data
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Kyve_Query_V1beta1_QueryDelegationAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Kyve_Query_V1beta1_QueryDelegationServerInterceptorFactoryProtocol? { get }

  /// Delegator returns delegation information for a specific delegator of a specific staker.
  @Sendable func delegator(
    request: Kyve_Query_V1beta1_QueryDelegatorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryDelegatorResponse

  /// DelegatorsByStaker returns all delegators that have delegated to the given staker
  /// This query is paginated.
  @Sendable func delegatorsByStaker(
    request: Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryDelegatorsByStakerResponse

  /// StakersByPoolAndDelegator returns all stakers the given delegator has delegated to.
  /// This query is paginated.
  @Sendable func stakersByDelegator(
    request: Kyve_Query_V1beta1_QueryStakersByDelegatorRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Kyve_Query_V1beta1_QueryStakersByDelegatorResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Kyve_Query_V1beta1_QueryDelegationAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Kyve_Query_V1beta1_QueryDelegationServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Kyve_Query_V1beta1_QueryDelegationServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Kyve_Query_V1beta1_QueryDelegationServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Delegator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryDelegatorRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryDelegatorResponse>(),
        interceptors: self.interceptors?.makeDelegatorInterceptors() ?? [],
        wrapping: self.delegator(request:context:)
      )

    case "DelegatorsByStaker":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryDelegatorsByStakerResponse>(),
        interceptors: self.interceptors?.makeDelegatorsByStakerInterceptors() ?? [],
        wrapping: self.delegatorsByStaker(request:context:)
      )

    case "StakersByDelegator":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Kyve_Query_V1beta1_QueryStakersByDelegatorRequest>(),
        responseSerializer: ProtobufSerializer<Kyve_Query_V1beta1_QueryStakersByDelegatorResponse>(),
        interceptors: self.interceptors?.makeStakersByDelegatorInterceptors() ?? [],
        wrapping: self.stakersByDelegator(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Kyve_Query_V1beta1_QueryDelegationServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'delegator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegatorInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryDelegatorRequest, Kyve_Query_V1beta1_QueryDelegatorResponse>]

  /// - Returns: Interceptors to use when handling 'delegatorsByStaker'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDelegatorsByStakerInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryDelegatorsByStakerRequest, Kyve_Query_V1beta1_QueryDelegatorsByStakerResponse>]

  /// - Returns: Interceptors to use when handling 'stakersByDelegator'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStakersByDelegatorInterceptors() -> [ServerInterceptor<Kyve_Query_V1beta1_QueryStakersByDelegatorRequest, Kyve_Query_V1beta1_QueryStakersByDelegatorResponse>]
}

internal enum Kyve_Query_V1beta1_QueryDelegationServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "QueryDelegation",
    fullName: "kyve.query.v1beta1.QueryDelegation",
    methods: [
      Kyve_Query_V1beta1_QueryDelegationServerMetadata.Methods.delegator,
      Kyve_Query_V1beta1_QueryDelegationServerMetadata.Methods.delegatorsByStaker,
      Kyve_Query_V1beta1_QueryDelegationServerMetadata.Methods.stakersByDelegator,
    ]
  )

  internal enum Methods {
    internal static let delegator = GRPCMethodDescriptor(
      name: "Delegator",
      path: "/kyve.query.v1beta1.QueryDelegation/Delegator",
      type: GRPCCallType.unary
    )

    internal static let delegatorsByStaker = GRPCMethodDescriptor(
      name: "DelegatorsByStaker",
      path: "/kyve.query.v1beta1.QueryDelegation/DelegatorsByStaker",
      type: GRPCCallType.unary
    )

    internal static let stakersByDelegator = GRPCMethodDescriptor(
      name: "StakersByDelegator",
      path: "/kyve.query.v1beta1.QueryDelegation/StakersByDelegator",
      type: GRPCCallType.unary
    )
  }
}
