//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: zrchain/identity/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Zrchain_Identity_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Zrchain_Identity_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Zrchain_Identity_MsgClientInterceptorFactoryProtocol? { get }

  func updateParams(
    _ request: Zrchain_Identity_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_MsgUpdateParams, Zrchain_Identity_MsgUpdateParamsResponse>

  func newWorkspace(
    _ request: Zrchain_Identity_MsgNewWorkspace,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_MsgNewWorkspace, Zrchain_Identity_MsgNewWorkspaceResponse>

  func addWorkspaceOwner(
    _ request: Zrchain_Identity_MsgAddWorkspaceOwner,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_MsgAddWorkspaceOwner, Zrchain_Identity_MsgAddWorkspaceOwnerResponse>

  func appendChildWorkspace(
    _ request: Zrchain_Identity_MsgAppendChildWorkspace,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_MsgAppendChildWorkspace, Zrchain_Identity_MsgAppendChildWorkspaceResponse>

  func newChildWorkspace(
    _ request: Zrchain_Identity_MsgNewChildWorkspace,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_MsgNewChildWorkspace, Zrchain_Identity_MsgNewChildWorkspaceResponse>

  func removeWorkspaceOwner(
    _ request: Zrchain_Identity_MsgRemoveWorkspaceOwner,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_MsgRemoveWorkspaceOwner, Zrchain_Identity_MsgRemoveWorkspaceOwnerResponse>

  func newKeyring(
    _ request: Zrchain_Identity_MsgNewKeyring,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_MsgNewKeyring, Zrchain_Identity_MsgNewKeyringResponse>

  func addKeyringParty(
    _ request: Zrchain_Identity_MsgAddKeyringParty,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_MsgAddKeyringParty, Zrchain_Identity_MsgAddKeyringPartyResponse>

  func updateKeyring(
    _ request: Zrchain_Identity_MsgUpdateKeyring,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_MsgUpdateKeyring, Zrchain_Identity_MsgUpdateKeyringResponse>

  func removeKeyringParty(
    _ request: Zrchain_Identity_MsgRemoveKeyringParty,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_MsgRemoveKeyringParty, Zrchain_Identity_MsgRemoveKeyringPartyResponse>

  func addKeyringAdmin(
    _ request: Zrchain_Identity_MsgAddKeyringAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_MsgAddKeyringAdmin, Zrchain_Identity_MsgAddKeyringAdminResponse>

  func removeKeyringAdmin(
    _ request: Zrchain_Identity_MsgRemoveKeyringAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_MsgRemoveKeyringAdmin, Zrchain_Identity_MsgRemoveKeyringAdminResponse>

  func updateWorkspace(
    _ request: Zrchain_Identity_MsgUpdateWorkspace,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_MsgUpdateWorkspace, Zrchain_Identity_MsgUpdateWorkspaceResponse>

  func deactivateKeyring(
    _ request: Zrchain_Identity_MsgDeactivateKeyring,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Identity_MsgDeactivateKeyring, Zrchain_Identity_MsgDeactivateKeyringResponse>
}

extension Zrchain_Identity_MsgClientProtocol {
  internal var serviceName: String {
    return "zrchain.identity.Msg"
  }

  /// UpdateParams defines the operation for updating the module
  /// parameters. The authority defaults to the x/gov module account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: Zrchain_Identity_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_MsgUpdateParams, Zrchain_Identity_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  /// NewWorkspace defines an operation for creating a new workspace
  ///
  /// - Parameters:
  ///   - request: Request to send to NewWorkspace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func newWorkspace(
    _ request: Zrchain_Identity_MsgNewWorkspace,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_MsgNewWorkspace, Zrchain_Identity_MsgNewWorkspaceResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.newWorkspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewWorkspaceInterceptors() ?? []
    )
  }

  /// AddWorkspaceOwner defines an operation for adding a workspace owner
  ///
  /// - Parameters:
  ///   - request: Request to send to AddWorkspaceOwner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addWorkspaceOwner(
    _ request: Zrchain_Identity_MsgAddWorkspaceOwner,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_MsgAddWorkspaceOwner, Zrchain_Identity_MsgAddWorkspaceOwnerResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.addWorkspaceOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddWorkspaceOwnerInterceptors() ?? []
    )
  }

  /// AppendChildWorkspace defines an operation for appending a child workspace
  ///
  /// - Parameters:
  ///   - request: Request to send to AppendChildWorkspace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func appendChildWorkspace(
    _ request: Zrchain_Identity_MsgAppendChildWorkspace,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_MsgAppendChildWorkspace, Zrchain_Identity_MsgAppendChildWorkspaceResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.appendChildWorkspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAppendChildWorkspaceInterceptors() ?? []
    )
  }

  /// NewChildWorkspace defines an operation for creating a new child workspace
  ///
  /// - Parameters:
  ///   - request: Request to send to NewChildWorkspace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func newChildWorkspace(
    _ request: Zrchain_Identity_MsgNewChildWorkspace,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_MsgNewChildWorkspace, Zrchain_Identity_MsgNewChildWorkspaceResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.newChildWorkspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewChildWorkspaceInterceptors() ?? []
    )
  }

  /// RemoveWorkspaceOwner defines an operation for removing a workspace owner
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveWorkspaceOwner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeWorkspaceOwner(
    _ request: Zrchain_Identity_MsgRemoveWorkspaceOwner,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_MsgRemoveWorkspaceOwner, Zrchain_Identity_MsgRemoveWorkspaceOwnerResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.removeWorkspaceOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveWorkspaceOwnerInterceptors() ?? []
    )
  }

  /// // NewKeyring defines an operation for creating a keyring
  ///
  /// - Parameters:
  ///   - request: Request to send to NewKeyring.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func newKeyring(
    _ request: Zrchain_Identity_MsgNewKeyring,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_MsgNewKeyring, Zrchain_Identity_MsgNewKeyringResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.newKeyring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewKeyringInterceptors() ?? []
    )
  }

  /// AddKeyringParty defines an operation for adding a party to a keyring
  ///
  /// - Parameters:
  ///   - request: Request to send to AddKeyringParty.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addKeyringParty(
    _ request: Zrchain_Identity_MsgAddKeyringParty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_MsgAddKeyringParty, Zrchain_Identity_MsgAddKeyringPartyResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.addKeyringParty.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddKeyringPartyInterceptors() ?? []
    )
  }

  /// UpdateKeyring defines an operation to update the keyring attributes
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateKeyring.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateKeyring(
    _ request: Zrchain_Identity_MsgUpdateKeyring,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_MsgUpdateKeyring, Zrchain_Identity_MsgUpdateKeyringResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.updateKeyring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateKeyringInterceptors() ?? []
    )
  }

  /// RemoveKeyringParty defines an operation to remove a party from a keyring
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveKeyringParty.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeKeyringParty(
    _ request: Zrchain_Identity_MsgRemoveKeyringParty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_MsgRemoveKeyringParty, Zrchain_Identity_MsgRemoveKeyringPartyResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.removeKeyringParty.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveKeyringPartyInterceptors() ?? []
    )
  }

  /// AddKeyringAdmin defines an operation to add an admin to a keyring
  ///
  /// - Parameters:
  ///   - request: Request to send to AddKeyringAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addKeyringAdmin(
    _ request: Zrchain_Identity_MsgAddKeyringAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_MsgAddKeyringAdmin, Zrchain_Identity_MsgAddKeyringAdminResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.addKeyringAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddKeyringAdminInterceptors() ?? []
    )
  }

  /// RemoveKeyringAdmin defines an operation to remove an admin from a keyring
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveKeyringAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeKeyringAdmin(
    _ request: Zrchain_Identity_MsgRemoveKeyringAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_MsgRemoveKeyringAdmin, Zrchain_Identity_MsgRemoveKeyringAdminResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.removeKeyringAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveKeyringAdminInterceptors() ?? []
    )
  }

  /// Update a workspace, e.g. changing the policies in use.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateWorkspace.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateWorkspace(
    _ request: Zrchain_Identity_MsgUpdateWorkspace,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_MsgUpdateWorkspace, Zrchain_Identity_MsgUpdateWorkspaceResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.updateWorkspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateWorkspaceInterceptors() ?? []
    )
  }

  /// Deactivate a keyring
  ///
  /// - Parameters:
  ///   - request: Request to send to DeactivateKeyring.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deactivateKeyring(
    _ request: Zrchain_Identity_MsgDeactivateKeyring,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Identity_MsgDeactivateKeyring, Zrchain_Identity_MsgDeactivateKeyringResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.deactivateKeyring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeactivateKeyringInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Zrchain_Identity_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Zrchain_Identity_MsgNIOClient")
internal final class Zrchain_Identity_MsgClient: Zrchain_Identity_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Zrchain_Identity_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Zrchain_Identity_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the zrchain.identity.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Identity_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Zrchain_Identity_MsgNIOClient: Zrchain_Identity_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Zrchain_Identity_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the zrchain.identity.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Identity_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Zrchain_Identity_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Zrchain_Identity_MsgClientInterceptorFactoryProtocol? { get }

  func makeUpdateParamsCall(
    _ request: Zrchain_Identity_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgUpdateParams, Zrchain_Identity_MsgUpdateParamsResponse>

  func makeNewWorkspaceCall(
    _ request: Zrchain_Identity_MsgNewWorkspace,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgNewWorkspace, Zrchain_Identity_MsgNewWorkspaceResponse>

  func makeAddWorkspaceOwnerCall(
    _ request: Zrchain_Identity_MsgAddWorkspaceOwner,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgAddWorkspaceOwner, Zrchain_Identity_MsgAddWorkspaceOwnerResponse>

  func makeAppendChildWorkspaceCall(
    _ request: Zrchain_Identity_MsgAppendChildWorkspace,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgAppendChildWorkspace, Zrchain_Identity_MsgAppendChildWorkspaceResponse>

  func makeNewChildWorkspaceCall(
    _ request: Zrchain_Identity_MsgNewChildWorkspace,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgNewChildWorkspace, Zrchain_Identity_MsgNewChildWorkspaceResponse>

  func makeRemoveWorkspaceOwnerCall(
    _ request: Zrchain_Identity_MsgRemoveWorkspaceOwner,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgRemoveWorkspaceOwner, Zrchain_Identity_MsgRemoveWorkspaceOwnerResponse>

  func makeNewKeyringCall(
    _ request: Zrchain_Identity_MsgNewKeyring,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgNewKeyring, Zrchain_Identity_MsgNewKeyringResponse>

  func makeAddKeyringPartyCall(
    _ request: Zrchain_Identity_MsgAddKeyringParty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgAddKeyringParty, Zrchain_Identity_MsgAddKeyringPartyResponse>

  func makeUpdateKeyringCall(
    _ request: Zrchain_Identity_MsgUpdateKeyring,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgUpdateKeyring, Zrchain_Identity_MsgUpdateKeyringResponse>

  func makeRemoveKeyringPartyCall(
    _ request: Zrchain_Identity_MsgRemoveKeyringParty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgRemoveKeyringParty, Zrchain_Identity_MsgRemoveKeyringPartyResponse>

  func makeAddKeyringAdminCall(
    _ request: Zrchain_Identity_MsgAddKeyringAdmin,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgAddKeyringAdmin, Zrchain_Identity_MsgAddKeyringAdminResponse>

  func makeRemoveKeyringAdminCall(
    _ request: Zrchain_Identity_MsgRemoveKeyringAdmin,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgRemoveKeyringAdmin, Zrchain_Identity_MsgRemoveKeyringAdminResponse>

  func makeUpdateWorkspaceCall(
    _ request: Zrchain_Identity_MsgUpdateWorkspace,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgUpdateWorkspace, Zrchain_Identity_MsgUpdateWorkspaceResponse>

  func makeDeactivateKeyringCall(
    _ request: Zrchain_Identity_MsgDeactivateKeyring,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgDeactivateKeyring, Zrchain_Identity_MsgDeactivateKeyringResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Identity_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Zrchain_Identity_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Zrchain_Identity_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeUpdateParamsCall(
    _ request: Zrchain_Identity_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgUpdateParams, Zrchain_Identity_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  internal func makeNewWorkspaceCall(
    _ request: Zrchain_Identity_MsgNewWorkspace,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgNewWorkspace, Zrchain_Identity_MsgNewWorkspaceResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.newWorkspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewWorkspaceInterceptors() ?? []
    )
  }

  internal func makeAddWorkspaceOwnerCall(
    _ request: Zrchain_Identity_MsgAddWorkspaceOwner,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgAddWorkspaceOwner, Zrchain_Identity_MsgAddWorkspaceOwnerResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.addWorkspaceOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddWorkspaceOwnerInterceptors() ?? []
    )
  }

  internal func makeAppendChildWorkspaceCall(
    _ request: Zrchain_Identity_MsgAppendChildWorkspace,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgAppendChildWorkspace, Zrchain_Identity_MsgAppendChildWorkspaceResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.appendChildWorkspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAppendChildWorkspaceInterceptors() ?? []
    )
  }

  internal func makeNewChildWorkspaceCall(
    _ request: Zrchain_Identity_MsgNewChildWorkspace,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgNewChildWorkspace, Zrchain_Identity_MsgNewChildWorkspaceResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.newChildWorkspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewChildWorkspaceInterceptors() ?? []
    )
  }

  internal func makeRemoveWorkspaceOwnerCall(
    _ request: Zrchain_Identity_MsgRemoveWorkspaceOwner,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgRemoveWorkspaceOwner, Zrchain_Identity_MsgRemoveWorkspaceOwnerResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.removeWorkspaceOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveWorkspaceOwnerInterceptors() ?? []
    )
  }

  internal func makeNewKeyringCall(
    _ request: Zrchain_Identity_MsgNewKeyring,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgNewKeyring, Zrchain_Identity_MsgNewKeyringResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.newKeyring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewKeyringInterceptors() ?? []
    )
  }

  internal func makeAddKeyringPartyCall(
    _ request: Zrchain_Identity_MsgAddKeyringParty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgAddKeyringParty, Zrchain_Identity_MsgAddKeyringPartyResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.addKeyringParty.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddKeyringPartyInterceptors() ?? []
    )
  }

  internal func makeUpdateKeyringCall(
    _ request: Zrchain_Identity_MsgUpdateKeyring,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgUpdateKeyring, Zrchain_Identity_MsgUpdateKeyringResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.updateKeyring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateKeyringInterceptors() ?? []
    )
  }

  internal func makeRemoveKeyringPartyCall(
    _ request: Zrchain_Identity_MsgRemoveKeyringParty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgRemoveKeyringParty, Zrchain_Identity_MsgRemoveKeyringPartyResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.removeKeyringParty.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveKeyringPartyInterceptors() ?? []
    )
  }

  internal func makeAddKeyringAdminCall(
    _ request: Zrchain_Identity_MsgAddKeyringAdmin,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgAddKeyringAdmin, Zrchain_Identity_MsgAddKeyringAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.addKeyringAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddKeyringAdminInterceptors() ?? []
    )
  }

  internal func makeRemoveKeyringAdminCall(
    _ request: Zrchain_Identity_MsgRemoveKeyringAdmin,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgRemoveKeyringAdmin, Zrchain_Identity_MsgRemoveKeyringAdminResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.removeKeyringAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveKeyringAdminInterceptors() ?? []
    )
  }

  internal func makeUpdateWorkspaceCall(
    _ request: Zrchain_Identity_MsgUpdateWorkspace,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgUpdateWorkspace, Zrchain_Identity_MsgUpdateWorkspaceResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.updateWorkspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateWorkspaceInterceptors() ?? []
    )
  }

  internal func makeDeactivateKeyringCall(
    _ request: Zrchain_Identity_MsgDeactivateKeyring,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Identity_MsgDeactivateKeyring, Zrchain_Identity_MsgDeactivateKeyringResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.deactivateKeyring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeactivateKeyringInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Identity_MsgAsyncClientProtocol {
  internal func updateParams(
    _ request: Zrchain_Identity_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  internal func newWorkspace(
    _ request: Zrchain_Identity_MsgNewWorkspace,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_MsgNewWorkspaceResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.newWorkspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewWorkspaceInterceptors() ?? []
    )
  }

  internal func addWorkspaceOwner(
    _ request: Zrchain_Identity_MsgAddWorkspaceOwner,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_MsgAddWorkspaceOwnerResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.addWorkspaceOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddWorkspaceOwnerInterceptors() ?? []
    )
  }

  internal func appendChildWorkspace(
    _ request: Zrchain_Identity_MsgAppendChildWorkspace,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_MsgAppendChildWorkspaceResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.appendChildWorkspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAppendChildWorkspaceInterceptors() ?? []
    )
  }

  internal func newChildWorkspace(
    _ request: Zrchain_Identity_MsgNewChildWorkspace,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_MsgNewChildWorkspaceResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.newChildWorkspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewChildWorkspaceInterceptors() ?? []
    )
  }

  internal func removeWorkspaceOwner(
    _ request: Zrchain_Identity_MsgRemoveWorkspaceOwner,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_MsgRemoveWorkspaceOwnerResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.removeWorkspaceOwner.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveWorkspaceOwnerInterceptors() ?? []
    )
  }

  internal func newKeyring(
    _ request: Zrchain_Identity_MsgNewKeyring,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_MsgNewKeyringResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.newKeyring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewKeyringInterceptors() ?? []
    )
  }

  internal func addKeyringParty(
    _ request: Zrchain_Identity_MsgAddKeyringParty,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_MsgAddKeyringPartyResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.addKeyringParty.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddKeyringPartyInterceptors() ?? []
    )
  }

  internal func updateKeyring(
    _ request: Zrchain_Identity_MsgUpdateKeyring,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_MsgUpdateKeyringResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.updateKeyring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateKeyringInterceptors() ?? []
    )
  }

  internal func removeKeyringParty(
    _ request: Zrchain_Identity_MsgRemoveKeyringParty,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_MsgRemoveKeyringPartyResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.removeKeyringParty.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveKeyringPartyInterceptors() ?? []
    )
  }

  internal func addKeyringAdmin(
    _ request: Zrchain_Identity_MsgAddKeyringAdmin,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_MsgAddKeyringAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.addKeyringAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddKeyringAdminInterceptors() ?? []
    )
  }

  internal func removeKeyringAdmin(
    _ request: Zrchain_Identity_MsgRemoveKeyringAdmin,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_MsgRemoveKeyringAdminResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.removeKeyringAdmin.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveKeyringAdminInterceptors() ?? []
    )
  }

  internal func updateWorkspace(
    _ request: Zrchain_Identity_MsgUpdateWorkspace,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_MsgUpdateWorkspaceResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.updateWorkspace.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateWorkspaceInterceptors() ?? []
    )
  }

  internal func deactivateKeyring(
    _ request: Zrchain_Identity_MsgDeactivateKeyring,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Identity_MsgDeactivateKeyringResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Identity_MsgClientMetadata.Methods.deactivateKeyring.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeactivateKeyringInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Zrchain_Identity_MsgAsyncClient: Zrchain_Identity_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Zrchain_Identity_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Identity_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Zrchain_Identity_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Zrchain_Identity_MsgUpdateParams, Zrchain_Identity_MsgUpdateParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'newWorkspace'.
  func makeNewWorkspaceInterceptors() -> [ClientInterceptor<Zrchain_Identity_MsgNewWorkspace, Zrchain_Identity_MsgNewWorkspaceResponse>]

  /// - Returns: Interceptors to use when invoking 'addWorkspaceOwner'.
  func makeAddWorkspaceOwnerInterceptors() -> [ClientInterceptor<Zrchain_Identity_MsgAddWorkspaceOwner, Zrchain_Identity_MsgAddWorkspaceOwnerResponse>]

  /// - Returns: Interceptors to use when invoking 'appendChildWorkspace'.
  func makeAppendChildWorkspaceInterceptors() -> [ClientInterceptor<Zrchain_Identity_MsgAppendChildWorkspace, Zrchain_Identity_MsgAppendChildWorkspaceResponse>]

  /// - Returns: Interceptors to use when invoking 'newChildWorkspace'.
  func makeNewChildWorkspaceInterceptors() -> [ClientInterceptor<Zrchain_Identity_MsgNewChildWorkspace, Zrchain_Identity_MsgNewChildWorkspaceResponse>]

  /// - Returns: Interceptors to use when invoking 'removeWorkspaceOwner'.
  func makeRemoveWorkspaceOwnerInterceptors() -> [ClientInterceptor<Zrchain_Identity_MsgRemoveWorkspaceOwner, Zrchain_Identity_MsgRemoveWorkspaceOwnerResponse>]

  /// - Returns: Interceptors to use when invoking 'newKeyring'.
  func makeNewKeyringInterceptors() -> [ClientInterceptor<Zrchain_Identity_MsgNewKeyring, Zrchain_Identity_MsgNewKeyringResponse>]

  /// - Returns: Interceptors to use when invoking 'addKeyringParty'.
  func makeAddKeyringPartyInterceptors() -> [ClientInterceptor<Zrchain_Identity_MsgAddKeyringParty, Zrchain_Identity_MsgAddKeyringPartyResponse>]

  /// - Returns: Interceptors to use when invoking 'updateKeyring'.
  func makeUpdateKeyringInterceptors() -> [ClientInterceptor<Zrchain_Identity_MsgUpdateKeyring, Zrchain_Identity_MsgUpdateKeyringResponse>]

  /// - Returns: Interceptors to use when invoking 'removeKeyringParty'.
  func makeRemoveKeyringPartyInterceptors() -> [ClientInterceptor<Zrchain_Identity_MsgRemoveKeyringParty, Zrchain_Identity_MsgRemoveKeyringPartyResponse>]

  /// - Returns: Interceptors to use when invoking 'addKeyringAdmin'.
  func makeAddKeyringAdminInterceptors() -> [ClientInterceptor<Zrchain_Identity_MsgAddKeyringAdmin, Zrchain_Identity_MsgAddKeyringAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'removeKeyringAdmin'.
  func makeRemoveKeyringAdminInterceptors() -> [ClientInterceptor<Zrchain_Identity_MsgRemoveKeyringAdmin, Zrchain_Identity_MsgRemoveKeyringAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'updateWorkspace'.
  func makeUpdateWorkspaceInterceptors() -> [ClientInterceptor<Zrchain_Identity_MsgUpdateWorkspace, Zrchain_Identity_MsgUpdateWorkspaceResponse>]

  /// - Returns: Interceptors to use when invoking 'deactivateKeyring'.
  func makeDeactivateKeyringInterceptors() -> [ClientInterceptor<Zrchain_Identity_MsgDeactivateKeyring, Zrchain_Identity_MsgDeactivateKeyringResponse>]
}

internal enum Zrchain_Identity_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "zrchain.identity.Msg",
    methods: [
      Zrchain_Identity_MsgClientMetadata.Methods.updateParams,
      Zrchain_Identity_MsgClientMetadata.Methods.newWorkspace,
      Zrchain_Identity_MsgClientMetadata.Methods.addWorkspaceOwner,
      Zrchain_Identity_MsgClientMetadata.Methods.appendChildWorkspace,
      Zrchain_Identity_MsgClientMetadata.Methods.newChildWorkspace,
      Zrchain_Identity_MsgClientMetadata.Methods.removeWorkspaceOwner,
      Zrchain_Identity_MsgClientMetadata.Methods.newKeyring,
      Zrchain_Identity_MsgClientMetadata.Methods.addKeyringParty,
      Zrchain_Identity_MsgClientMetadata.Methods.updateKeyring,
      Zrchain_Identity_MsgClientMetadata.Methods.removeKeyringParty,
      Zrchain_Identity_MsgClientMetadata.Methods.addKeyringAdmin,
      Zrchain_Identity_MsgClientMetadata.Methods.removeKeyringAdmin,
      Zrchain_Identity_MsgClientMetadata.Methods.updateWorkspace,
      Zrchain_Identity_MsgClientMetadata.Methods.deactivateKeyring,
    ]
  )

  internal enum Methods {
    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/zrchain.identity.Msg/UpdateParams",
      type: GRPCCallType.unary
    )

    internal static let newWorkspace = GRPCMethodDescriptor(
      name: "NewWorkspace",
      path: "/zrchain.identity.Msg/NewWorkspace",
      type: GRPCCallType.unary
    )

    internal static let addWorkspaceOwner = GRPCMethodDescriptor(
      name: "AddWorkspaceOwner",
      path: "/zrchain.identity.Msg/AddWorkspaceOwner",
      type: GRPCCallType.unary
    )

    internal static let appendChildWorkspace = GRPCMethodDescriptor(
      name: "AppendChildWorkspace",
      path: "/zrchain.identity.Msg/AppendChildWorkspace",
      type: GRPCCallType.unary
    )

    internal static let newChildWorkspace = GRPCMethodDescriptor(
      name: "NewChildWorkspace",
      path: "/zrchain.identity.Msg/NewChildWorkspace",
      type: GRPCCallType.unary
    )

    internal static let removeWorkspaceOwner = GRPCMethodDescriptor(
      name: "RemoveWorkspaceOwner",
      path: "/zrchain.identity.Msg/RemoveWorkspaceOwner",
      type: GRPCCallType.unary
    )

    internal static let newKeyring = GRPCMethodDescriptor(
      name: "NewKeyring",
      path: "/zrchain.identity.Msg/NewKeyring",
      type: GRPCCallType.unary
    )

    internal static let addKeyringParty = GRPCMethodDescriptor(
      name: "AddKeyringParty",
      path: "/zrchain.identity.Msg/AddKeyringParty",
      type: GRPCCallType.unary
    )

    internal static let updateKeyring = GRPCMethodDescriptor(
      name: "UpdateKeyring",
      path: "/zrchain.identity.Msg/UpdateKeyring",
      type: GRPCCallType.unary
    )

    internal static let removeKeyringParty = GRPCMethodDescriptor(
      name: "RemoveKeyringParty",
      path: "/zrchain.identity.Msg/RemoveKeyringParty",
      type: GRPCCallType.unary
    )

    internal static let addKeyringAdmin = GRPCMethodDescriptor(
      name: "AddKeyringAdmin",
      path: "/zrchain.identity.Msg/AddKeyringAdmin",
      type: GRPCCallType.unary
    )

    internal static let removeKeyringAdmin = GRPCMethodDescriptor(
      name: "RemoveKeyringAdmin",
      path: "/zrchain.identity.Msg/RemoveKeyringAdmin",
      type: GRPCCallType.unary
    )

    internal static let updateWorkspace = GRPCMethodDescriptor(
      name: "UpdateWorkspace",
      path: "/zrchain.identity.Msg/UpdateWorkspace",
      type: GRPCCallType.unary
    )

    internal static let deactivateKeyring = GRPCMethodDescriptor(
      name: "DeactivateKeyring",
      path: "/zrchain.identity.Msg/DeactivateKeyring",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Zrchain_Identity_MsgProvider: CallHandlerProvider {
  var interceptors: Zrchain_Identity_MsgServerInterceptorFactoryProtocol? { get }

  /// UpdateParams defines the operation for updating the module
  /// parameters. The authority defaults to the x/gov module account.
  func updateParams(request: Zrchain_Identity_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_MsgUpdateParamsResponse>

  /// NewWorkspace defines an operation for creating a new workspace
  func newWorkspace(request: Zrchain_Identity_MsgNewWorkspace, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_MsgNewWorkspaceResponse>

  /// AddWorkspaceOwner defines an operation for adding a workspace owner
  func addWorkspaceOwner(request: Zrchain_Identity_MsgAddWorkspaceOwner, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_MsgAddWorkspaceOwnerResponse>

  /// AppendChildWorkspace defines an operation for appending a child workspace
  func appendChildWorkspace(request: Zrchain_Identity_MsgAppendChildWorkspace, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_MsgAppendChildWorkspaceResponse>

  /// NewChildWorkspace defines an operation for creating a new child workspace
  func newChildWorkspace(request: Zrchain_Identity_MsgNewChildWorkspace, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_MsgNewChildWorkspaceResponse>

  /// RemoveWorkspaceOwner defines an operation for removing a workspace owner
  func removeWorkspaceOwner(request: Zrchain_Identity_MsgRemoveWorkspaceOwner, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_MsgRemoveWorkspaceOwnerResponse>

  /// // NewKeyring defines an operation for creating a keyring
  func newKeyring(request: Zrchain_Identity_MsgNewKeyring, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_MsgNewKeyringResponse>

  /// AddKeyringParty defines an operation for adding a party to a keyring
  func addKeyringParty(request: Zrchain_Identity_MsgAddKeyringParty, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_MsgAddKeyringPartyResponse>

  /// UpdateKeyring defines an operation to update the keyring attributes
  func updateKeyring(request: Zrchain_Identity_MsgUpdateKeyring, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_MsgUpdateKeyringResponse>

  /// RemoveKeyringParty defines an operation to remove a party from a keyring
  func removeKeyringParty(request: Zrchain_Identity_MsgRemoveKeyringParty, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_MsgRemoveKeyringPartyResponse>

  /// AddKeyringAdmin defines an operation to add an admin to a keyring
  func addKeyringAdmin(request: Zrchain_Identity_MsgAddKeyringAdmin, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_MsgAddKeyringAdminResponse>

  /// RemoveKeyringAdmin defines an operation to remove an admin from a keyring
  func removeKeyringAdmin(request: Zrchain_Identity_MsgRemoveKeyringAdmin, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_MsgRemoveKeyringAdminResponse>

  /// Update a workspace, e.g. changing the policies in use.
  func updateWorkspace(request: Zrchain_Identity_MsgUpdateWorkspace, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_MsgUpdateWorkspaceResponse>

  /// Deactivate a keyring
  func deactivateKeyring(request: Zrchain_Identity_MsgDeactivateKeyring, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Identity_MsgDeactivateKeyringResponse>
}

extension Zrchain_Identity_MsgProvider {
  internal var serviceName: Substring {
    return Zrchain_Identity_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    case "NewWorkspace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgNewWorkspace>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgNewWorkspaceResponse>(),
        interceptors: self.interceptors?.makeNewWorkspaceInterceptors() ?? [],
        userFunction: self.newWorkspace(request:context:)
      )

    case "AddWorkspaceOwner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgAddWorkspaceOwner>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgAddWorkspaceOwnerResponse>(),
        interceptors: self.interceptors?.makeAddWorkspaceOwnerInterceptors() ?? [],
        userFunction: self.addWorkspaceOwner(request:context:)
      )

    case "AppendChildWorkspace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgAppendChildWorkspace>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgAppendChildWorkspaceResponse>(),
        interceptors: self.interceptors?.makeAppendChildWorkspaceInterceptors() ?? [],
        userFunction: self.appendChildWorkspace(request:context:)
      )

    case "NewChildWorkspace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgNewChildWorkspace>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgNewChildWorkspaceResponse>(),
        interceptors: self.interceptors?.makeNewChildWorkspaceInterceptors() ?? [],
        userFunction: self.newChildWorkspace(request:context:)
      )

    case "RemoveWorkspaceOwner":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgRemoveWorkspaceOwner>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgRemoveWorkspaceOwnerResponse>(),
        interceptors: self.interceptors?.makeRemoveWorkspaceOwnerInterceptors() ?? [],
        userFunction: self.removeWorkspaceOwner(request:context:)
      )

    case "NewKeyring":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgNewKeyring>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgNewKeyringResponse>(),
        interceptors: self.interceptors?.makeNewKeyringInterceptors() ?? [],
        userFunction: self.newKeyring(request:context:)
      )

    case "AddKeyringParty":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgAddKeyringParty>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgAddKeyringPartyResponse>(),
        interceptors: self.interceptors?.makeAddKeyringPartyInterceptors() ?? [],
        userFunction: self.addKeyringParty(request:context:)
      )

    case "UpdateKeyring":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgUpdateKeyring>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgUpdateKeyringResponse>(),
        interceptors: self.interceptors?.makeUpdateKeyringInterceptors() ?? [],
        userFunction: self.updateKeyring(request:context:)
      )

    case "RemoveKeyringParty":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgRemoveKeyringParty>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgRemoveKeyringPartyResponse>(),
        interceptors: self.interceptors?.makeRemoveKeyringPartyInterceptors() ?? [],
        userFunction: self.removeKeyringParty(request:context:)
      )

    case "AddKeyringAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgAddKeyringAdmin>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgAddKeyringAdminResponse>(),
        interceptors: self.interceptors?.makeAddKeyringAdminInterceptors() ?? [],
        userFunction: self.addKeyringAdmin(request:context:)
      )

    case "RemoveKeyringAdmin":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgRemoveKeyringAdmin>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgRemoveKeyringAdminResponse>(),
        interceptors: self.interceptors?.makeRemoveKeyringAdminInterceptors() ?? [],
        userFunction: self.removeKeyringAdmin(request:context:)
      )

    case "UpdateWorkspace":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgUpdateWorkspace>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgUpdateWorkspaceResponse>(),
        interceptors: self.interceptors?.makeUpdateWorkspaceInterceptors() ?? [],
        userFunction: self.updateWorkspace(request:context:)
      )

    case "DeactivateKeyring":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgDeactivateKeyring>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgDeactivateKeyringResponse>(),
        interceptors: self.interceptors?.makeDeactivateKeyringInterceptors() ?? [],
        userFunction: self.deactivateKeyring(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Zrchain_Identity_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Zrchain_Identity_MsgServerInterceptorFactoryProtocol? { get }

  /// UpdateParams defines the operation for updating the module
  /// parameters. The authority defaults to the x/gov module account.
  @Sendable func updateParams(
    request: Zrchain_Identity_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_MsgUpdateParamsResponse

  /// NewWorkspace defines an operation for creating a new workspace
  @Sendable func newWorkspace(
    request: Zrchain_Identity_MsgNewWorkspace,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_MsgNewWorkspaceResponse

  /// AddWorkspaceOwner defines an operation for adding a workspace owner
  @Sendable func addWorkspaceOwner(
    request: Zrchain_Identity_MsgAddWorkspaceOwner,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_MsgAddWorkspaceOwnerResponse

  /// AppendChildWorkspace defines an operation for appending a child workspace
  @Sendable func appendChildWorkspace(
    request: Zrchain_Identity_MsgAppendChildWorkspace,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_MsgAppendChildWorkspaceResponse

  /// NewChildWorkspace defines an operation for creating a new child workspace
  @Sendable func newChildWorkspace(
    request: Zrchain_Identity_MsgNewChildWorkspace,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_MsgNewChildWorkspaceResponse

  /// RemoveWorkspaceOwner defines an operation for removing a workspace owner
  @Sendable func removeWorkspaceOwner(
    request: Zrchain_Identity_MsgRemoveWorkspaceOwner,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_MsgRemoveWorkspaceOwnerResponse

  /// // NewKeyring defines an operation for creating a keyring
  @Sendable func newKeyring(
    request: Zrchain_Identity_MsgNewKeyring,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_MsgNewKeyringResponse

  /// AddKeyringParty defines an operation for adding a party to a keyring
  @Sendable func addKeyringParty(
    request: Zrchain_Identity_MsgAddKeyringParty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_MsgAddKeyringPartyResponse

  /// UpdateKeyring defines an operation to update the keyring attributes
  @Sendable func updateKeyring(
    request: Zrchain_Identity_MsgUpdateKeyring,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_MsgUpdateKeyringResponse

  /// RemoveKeyringParty defines an operation to remove a party from a keyring
  @Sendable func removeKeyringParty(
    request: Zrchain_Identity_MsgRemoveKeyringParty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_MsgRemoveKeyringPartyResponse

  /// AddKeyringAdmin defines an operation to add an admin to a keyring
  @Sendable func addKeyringAdmin(
    request: Zrchain_Identity_MsgAddKeyringAdmin,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_MsgAddKeyringAdminResponse

  /// RemoveKeyringAdmin defines an operation to remove an admin from a keyring
  @Sendable func removeKeyringAdmin(
    request: Zrchain_Identity_MsgRemoveKeyringAdmin,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_MsgRemoveKeyringAdminResponse

  /// Update a workspace, e.g. changing the policies in use.
  @Sendable func updateWorkspace(
    request: Zrchain_Identity_MsgUpdateWorkspace,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_MsgUpdateWorkspaceResponse

  /// Deactivate a keyring
  @Sendable func deactivateKeyring(
    request: Zrchain_Identity_MsgDeactivateKeyring,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Identity_MsgDeactivateKeyringResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Identity_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Zrchain_Identity_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Zrchain_Identity_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Zrchain_Identity_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    case "NewWorkspace":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgNewWorkspace>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgNewWorkspaceResponse>(),
        interceptors: self.interceptors?.makeNewWorkspaceInterceptors() ?? [],
        wrapping: self.newWorkspace(request:context:)
      )

    case "AddWorkspaceOwner":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgAddWorkspaceOwner>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgAddWorkspaceOwnerResponse>(),
        interceptors: self.interceptors?.makeAddWorkspaceOwnerInterceptors() ?? [],
        wrapping: self.addWorkspaceOwner(request:context:)
      )

    case "AppendChildWorkspace":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgAppendChildWorkspace>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgAppendChildWorkspaceResponse>(),
        interceptors: self.interceptors?.makeAppendChildWorkspaceInterceptors() ?? [],
        wrapping: self.appendChildWorkspace(request:context:)
      )

    case "NewChildWorkspace":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgNewChildWorkspace>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgNewChildWorkspaceResponse>(),
        interceptors: self.interceptors?.makeNewChildWorkspaceInterceptors() ?? [],
        wrapping: self.newChildWorkspace(request:context:)
      )

    case "RemoveWorkspaceOwner":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgRemoveWorkspaceOwner>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgRemoveWorkspaceOwnerResponse>(),
        interceptors: self.interceptors?.makeRemoveWorkspaceOwnerInterceptors() ?? [],
        wrapping: self.removeWorkspaceOwner(request:context:)
      )

    case "NewKeyring":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgNewKeyring>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgNewKeyringResponse>(),
        interceptors: self.interceptors?.makeNewKeyringInterceptors() ?? [],
        wrapping: self.newKeyring(request:context:)
      )

    case "AddKeyringParty":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgAddKeyringParty>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgAddKeyringPartyResponse>(),
        interceptors: self.interceptors?.makeAddKeyringPartyInterceptors() ?? [],
        wrapping: self.addKeyringParty(request:context:)
      )

    case "UpdateKeyring":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgUpdateKeyring>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgUpdateKeyringResponse>(),
        interceptors: self.interceptors?.makeUpdateKeyringInterceptors() ?? [],
        wrapping: self.updateKeyring(request:context:)
      )

    case "RemoveKeyringParty":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgRemoveKeyringParty>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgRemoveKeyringPartyResponse>(),
        interceptors: self.interceptors?.makeRemoveKeyringPartyInterceptors() ?? [],
        wrapping: self.removeKeyringParty(request:context:)
      )

    case "AddKeyringAdmin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgAddKeyringAdmin>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgAddKeyringAdminResponse>(),
        interceptors: self.interceptors?.makeAddKeyringAdminInterceptors() ?? [],
        wrapping: self.addKeyringAdmin(request:context:)
      )

    case "RemoveKeyringAdmin":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgRemoveKeyringAdmin>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgRemoveKeyringAdminResponse>(),
        interceptors: self.interceptors?.makeRemoveKeyringAdminInterceptors() ?? [],
        wrapping: self.removeKeyringAdmin(request:context:)
      )

    case "UpdateWorkspace":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgUpdateWorkspace>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgUpdateWorkspaceResponse>(),
        interceptors: self.interceptors?.makeUpdateWorkspaceInterceptors() ?? [],
        wrapping: self.updateWorkspace(request:context:)
      )

    case "DeactivateKeyring":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Identity_MsgDeactivateKeyring>(),
        responseSerializer: ProtobufSerializer<Zrchain_Identity_MsgDeactivateKeyringResponse>(),
        interceptors: self.interceptors?.makeDeactivateKeyringInterceptors() ?? [],
        wrapping: self.deactivateKeyring(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Zrchain_Identity_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<Zrchain_Identity_MsgUpdateParams, Zrchain_Identity_MsgUpdateParamsResponse>]

  /// - Returns: Interceptors to use when handling 'newWorkspace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNewWorkspaceInterceptors() -> [ServerInterceptor<Zrchain_Identity_MsgNewWorkspace, Zrchain_Identity_MsgNewWorkspaceResponse>]

  /// - Returns: Interceptors to use when handling 'addWorkspaceOwner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddWorkspaceOwnerInterceptors() -> [ServerInterceptor<Zrchain_Identity_MsgAddWorkspaceOwner, Zrchain_Identity_MsgAddWorkspaceOwnerResponse>]

  /// - Returns: Interceptors to use when handling 'appendChildWorkspace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAppendChildWorkspaceInterceptors() -> [ServerInterceptor<Zrchain_Identity_MsgAppendChildWorkspace, Zrchain_Identity_MsgAppendChildWorkspaceResponse>]

  /// - Returns: Interceptors to use when handling 'newChildWorkspace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNewChildWorkspaceInterceptors() -> [ServerInterceptor<Zrchain_Identity_MsgNewChildWorkspace, Zrchain_Identity_MsgNewChildWorkspaceResponse>]

  /// - Returns: Interceptors to use when handling 'removeWorkspaceOwner'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveWorkspaceOwnerInterceptors() -> [ServerInterceptor<Zrchain_Identity_MsgRemoveWorkspaceOwner, Zrchain_Identity_MsgRemoveWorkspaceOwnerResponse>]

  /// - Returns: Interceptors to use when handling 'newKeyring'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNewKeyringInterceptors() -> [ServerInterceptor<Zrchain_Identity_MsgNewKeyring, Zrchain_Identity_MsgNewKeyringResponse>]

  /// - Returns: Interceptors to use when handling 'addKeyringParty'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddKeyringPartyInterceptors() -> [ServerInterceptor<Zrchain_Identity_MsgAddKeyringParty, Zrchain_Identity_MsgAddKeyringPartyResponse>]

  /// - Returns: Interceptors to use when handling 'updateKeyring'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateKeyringInterceptors() -> [ServerInterceptor<Zrchain_Identity_MsgUpdateKeyring, Zrchain_Identity_MsgUpdateKeyringResponse>]

  /// - Returns: Interceptors to use when handling 'removeKeyringParty'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveKeyringPartyInterceptors() -> [ServerInterceptor<Zrchain_Identity_MsgRemoveKeyringParty, Zrchain_Identity_MsgRemoveKeyringPartyResponse>]

  /// - Returns: Interceptors to use when handling 'addKeyringAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddKeyringAdminInterceptors() -> [ServerInterceptor<Zrchain_Identity_MsgAddKeyringAdmin, Zrchain_Identity_MsgAddKeyringAdminResponse>]

  /// - Returns: Interceptors to use when handling 'removeKeyringAdmin'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveKeyringAdminInterceptors() -> [ServerInterceptor<Zrchain_Identity_MsgRemoveKeyringAdmin, Zrchain_Identity_MsgRemoveKeyringAdminResponse>]

  /// - Returns: Interceptors to use when handling 'updateWorkspace'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateWorkspaceInterceptors() -> [ServerInterceptor<Zrchain_Identity_MsgUpdateWorkspace, Zrchain_Identity_MsgUpdateWorkspaceResponse>]

  /// - Returns: Interceptors to use when handling 'deactivateKeyring'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeactivateKeyringInterceptors() -> [ServerInterceptor<Zrchain_Identity_MsgDeactivateKeyring, Zrchain_Identity_MsgDeactivateKeyringResponse>]
}

internal enum Zrchain_Identity_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "zrchain.identity.Msg",
    methods: [
      Zrchain_Identity_MsgServerMetadata.Methods.updateParams,
      Zrchain_Identity_MsgServerMetadata.Methods.newWorkspace,
      Zrchain_Identity_MsgServerMetadata.Methods.addWorkspaceOwner,
      Zrchain_Identity_MsgServerMetadata.Methods.appendChildWorkspace,
      Zrchain_Identity_MsgServerMetadata.Methods.newChildWorkspace,
      Zrchain_Identity_MsgServerMetadata.Methods.removeWorkspaceOwner,
      Zrchain_Identity_MsgServerMetadata.Methods.newKeyring,
      Zrchain_Identity_MsgServerMetadata.Methods.addKeyringParty,
      Zrchain_Identity_MsgServerMetadata.Methods.updateKeyring,
      Zrchain_Identity_MsgServerMetadata.Methods.removeKeyringParty,
      Zrchain_Identity_MsgServerMetadata.Methods.addKeyringAdmin,
      Zrchain_Identity_MsgServerMetadata.Methods.removeKeyringAdmin,
      Zrchain_Identity_MsgServerMetadata.Methods.updateWorkspace,
      Zrchain_Identity_MsgServerMetadata.Methods.deactivateKeyring,
    ]
  )

  internal enum Methods {
    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/zrchain.identity.Msg/UpdateParams",
      type: GRPCCallType.unary
    )

    internal static let newWorkspace = GRPCMethodDescriptor(
      name: "NewWorkspace",
      path: "/zrchain.identity.Msg/NewWorkspace",
      type: GRPCCallType.unary
    )

    internal static let addWorkspaceOwner = GRPCMethodDescriptor(
      name: "AddWorkspaceOwner",
      path: "/zrchain.identity.Msg/AddWorkspaceOwner",
      type: GRPCCallType.unary
    )

    internal static let appendChildWorkspace = GRPCMethodDescriptor(
      name: "AppendChildWorkspace",
      path: "/zrchain.identity.Msg/AppendChildWorkspace",
      type: GRPCCallType.unary
    )

    internal static let newChildWorkspace = GRPCMethodDescriptor(
      name: "NewChildWorkspace",
      path: "/zrchain.identity.Msg/NewChildWorkspace",
      type: GRPCCallType.unary
    )

    internal static let removeWorkspaceOwner = GRPCMethodDescriptor(
      name: "RemoveWorkspaceOwner",
      path: "/zrchain.identity.Msg/RemoveWorkspaceOwner",
      type: GRPCCallType.unary
    )

    internal static let newKeyring = GRPCMethodDescriptor(
      name: "NewKeyring",
      path: "/zrchain.identity.Msg/NewKeyring",
      type: GRPCCallType.unary
    )

    internal static let addKeyringParty = GRPCMethodDescriptor(
      name: "AddKeyringParty",
      path: "/zrchain.identity.Msg/AddKeyringParty",
      type: GRPCCallType.unary
    )

    internal static let updateKeyring = GRPCMethodDescriptor(
      name: "UpdateKeyring",
      path: "/zrchain.identity.Msg/UpdateKeyring",
      type: GRPCCallType.unary
    )

    internal static let removeKeyringParty = GRPCMethodDescriptor(
      name: "RemoveKeyringParty",
      path: "/zrchain.identity.Msg/RemoveKeyringParty",
      type: GRPCCallType.unary
    )

    internal static let addKeyringAdmin = GRPCMethodDescriptor(
      name: "AddKeyringAdmin",
      path: "/zrchain.identity.Msg/AddKeyringAdmin",
      type: GRPCCallType.unary
    )

    internal static let removeKeyringAdmin = GRPCMethodDescriptor(
      name: "RemoveKeyringAdmin",
      path: "/zrchain.identity.Msg/RemoveKeyringAdmin",
      type: GRPCCallType.unary
    )

    internal static let updateWorkspace = GRPCMethodDescriptor(
      name: "UpdateWorkspace",
      path: "/zrchain.identity.Msg/UpdateWorkspace",
      type: GRPCCallType.unary
    )

    internal static let deactivateKeyring = GRPCMethodDescriptor(
      name: "DeactivateKeyring",
      path: "/zrchain.identity.Msg/DeactivateKeyring",
      type: GRPCCallType.unary
    )
  }
}
