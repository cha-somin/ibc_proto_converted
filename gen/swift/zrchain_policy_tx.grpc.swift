//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: zrchain/policy/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Msg defines the Msg service.
///
/// Usage: instantiate `Zrchain_Policy_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Zrchain_Policy_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Zrchain_Policy_MsgClientInterceptorFactoryProtocol? { get }

  func updateParams(
    _ request: Zrchain_Policy_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_MsgUpdateParams, Zrchain_Policy_MsgUpdateParamsResponse>

  func newPolicy(
    _ request: Zrchain_Policy_MsgNewPolicy,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_MsgNewPolicy, Zrchain_Policy_MsgNewPolicyResponse>

  func revokeAction(
    _ request: Zrchain_Policy_MsgRevokeAction,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_MsgRevokeAction, Zrchain_Policy_MsgRevokeActionResponse>

  func approveAction(
    _ request: Zrchain_Policy_MsgApproveAction,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_MsgApproveAction, Zrchain_Policy_MsgApproveActionResponse>

  func addSignMethod(
    _ request: Zrchain_Policy_MsgAddSignMethod,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_MsgAddSignMethod, Zrchain_Policy_MsgAddSignMethodResponse>

  func removeSignMethod(
    _ request: Zrchain_Policy_MsgRemoveSignMethod,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_MsgRemoveSignMethod, Zrchain_Policy_MsgRemoveSignMethodResponse>

  func addMultiGrant(
    _ request: Zrchain_Policy_MsgAddMultiGrant,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_MsgAddMultiGrant, Zrchain_Policy_MsgAddMultiGrantResponse>

  func removeMultiGrant(
    _ request: Zrchain_Policy_MsgRemoveMultiGrant,
    callOptions: CallOptions?
  ) -> UnaryCall<Zrchain_Policy_MsgRemoveMultiGrant, Zrchain_Policy_MsgRemoveMultiGrantResponse>
}

extension Zrchain_Policy_MsgClientProtocol {
  internal var serviceName: String {
    return "zrchain.policy.Msg"
  }

  /// UpdateParams defines the operation for updating the module
  /// parameters. The authority defaults to the x/gov module account.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateParams.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateParams(
    _ request: Zrchain_Policy_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_MsgUpdateParams, Zrchain_Policy_MsgUpdateParamsResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  /// NewPolicy defines the operation for creating a new policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to NewPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func newPolicy(
    _ request: Zrchain_Policy_MsgNewPolicy,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_MsgNewPolicy, Zrchain_Policy_MsgNewPolicyResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.newPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewPolicyInterceptors() ?? []
    )
  }

  /// RevokeAction defines the operation for revoking an action.
  ///
  /// - Parameters:
  ///   - request: Request to send to RevokeAction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func revokeAction(
    _ request: Zrchain_Policy_MsgRevokeAction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_MsgRevokeAction, Zrchain_Policy_MsgRevokeActionResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.revokeAction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeActionInterceptors() ?? []
    )
  }

  /// ApproveAction defines the operation for approving an action.
  ///
  /// - Parameters:
  ///   - request: Request to send to ApproveAction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func approveAction(
    _ request: Zrchain_Policy_MsgApproveAction,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_MsgApproveAction, Zrchain_Policy_MsgApproveActionResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.approveAction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApproveActionInterceptors() ?? []
    )
  }

  /// AddSignMethod defines the operation for adding a sign method.
  ///
  /// - Parameters:
  ///   - request: Request to send to AddSignMethod.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addSignMethod(
    _ request: Zrchain_Policy_MsgAddSignMethod,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_MsgAddSignMethod, Zrchain_Policy_MsgAddSignMethodResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.addSignMethod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddSignMethodInterceptors() ?? []
    )
  }

  /// RemoveSignMethod defines the operation for removing a sign method.
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveSignMethod.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeSignMethod(
    _ request: Zrchain_Policy_MsgRemoveSignMethod,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_MsgRemoveSignMethod, Zrchain_Policy_MsgRemoveSignMethodResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.removeSignMethod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveSignMethodInterceptors() ?? []
    )
  }

  /// AddMultiGrant defines the operation for adding multiple grants
  ///
  /// - Parameters:
  ///   - request: Request to send to AddMultiGrant.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addMultiGrant(
    _ request: Zrchain_Policy_MsgAddMultiGrant,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_MsgAddMultiGrant, Zrchain_Policy_MsgAddMultiGrantResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.addMultiGrant.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddMultiGrantInterceptors() ?? []
    )
  }

  /// RemoveMultiGrant defines the operation for removing multiple grants
  ///
  /// - Parameters:
  ///   - request: Request to send to RemoveMultiGrant.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func removeMultiGrant(
    _ request: Zrchain_Policy_MsgRemoveMultiGrant,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Zrchain_Policy_MsgRemoveMultiGrant, Zrchain_Policy_MsgRemoveMultiGrantResponse> {
    return self.makeUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.removeMultiGrant.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveMultiGrantInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Zrchain_Policy_MsgClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Zrchain_Policy_MsgNIOClient")
internal final class Zrchain_Policy_MsgClient: Zrchain_Policy_MsgClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Zrchain_Policy_MsgClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Zrchain_Policy_MsgClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the zrchain.policy.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Policy_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Zrchain_Policy_MsgNIOClient: Zrchain_Policy_MsgClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Zrchain_Policy_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the zrchain.policy.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Policy_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// Msg defines the Msg service.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Zrchain_Policy_MsgAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Zrchain_Policy_MsgClientInterceptorFactoryProtocol? { get }

  func makeUpdateParamsCall(
    _ request: Zrchain_Policy_MsgUpdateParams,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgUpdateParams, Zrchain_Policy_MsgUpdateParamsResponse>

  func makeNewPolicyCall(
    _ request: Zrchain_Policy_MsgNewPolicy,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgNewPolicy, Zrchain_Policy_MsgNewPolicyResponse>

  func makeRevokeActionCall(
    _ request: Zrchain_Policy_MsgRevokeAction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgRevokeAction, Zrchain_Policy_MsgRevokeActionResponse>

  func makeApproveActionCall(
    _ request: Zrchain_Policy_MsgApproveAction,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgApproveAction, Zrchain_Policy_MsgApproveActionResponse>

  func makeAddSignMethodCall(
    _ request: Zrchain_Policy_MsgAddSignMethod,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgAddSignMethod, Zrchain_Policy_MsgAddSignMethodResponse>

  func makeRemoveSignMethodCall(
    _ request: Zrchain_Policy_MsgRemoveSignMethod,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgRemoveSignMethod, Zrchain_Policy_MsgRemoveSignMethodResponse>

  func makeAddMultiGrantCall(
    _ request: Zrchain_Policy_MsgAddMultiGrant,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgAddMultiGrant, Zrchain_Policy_MsgAddMultiGrantResponse>

  func makeRemoveMultiGrantCall(
    _ request: Zrchain_Policy_MsgRemoveMultiGrant,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgRemoveMultiGrant, Zrchain_Policy_MsgRemoveMultiGrantResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Policy_MsgAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Zrchain_Policy_MsgClientMetadata.serviceDescriptor
  }

  internal var interceptors: Zrchain_Policy_MsgClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeUpdateParamsCall(
    _ request: Zrchain_Policy_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgUpdateParams, Zrchain_Policy_MsgUpdateParamsResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  internal func makeNewPolicyCall(
    _ request: Zrchain_Policy_MsgNewPolicy,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgNewPolicy, Zrchain_Policy_MsgNewPolicyResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.newPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewPolicyInterceptors() ?? []
    )
  }

  internal func makeRevokeActionCall(
    _ request: Zrchain_Policy_MsgRevokeAction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgRevokeAction, Zrchain_Policy_MsgRevokeActionResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.revokeAction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeActionInterceptors() ?? []
    )
  }

  internal func makeApproveActionCall(
    _ request: Zrchain_Policy_MsgApproveAction,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgApproveAction, Zrchain_Policy_MsgApproveActionResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.approveAction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApproveActionInterceptors() ?? []
    )
  }

  internal func makeAddSignMethodCall(
    _ request: Zrchain_Policy_MsgAddSignMethod,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgAddSignMethod, Zrchain_Policy_MsgAddSignMethodResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.addSignMethod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddSignMethodInterceptors() ?? []
    )
  }

  internal func makeRemoveSignMethodCall(
    _ request: Zrchain_Policy_MsgRemoveSignMethod,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgRemoveSignMethod, Zrchain_Policy_MsgRemoveSignMethodResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.removeSignMethod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveSignMethodInterceptors() ?? []
    )
  }

  internal func makeAddMultiGrantCall(
    _ request: Zrchain_Policy_MsgAddMultiGrant,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgAddMultiGrant, Zrchain_Policy_MsgAddMultiGrantResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.addMultiGrant.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddMultiGrantInterceptors() ?? []
    )
  }

  internal func makeRemoveMultiGrantCall(
    _ request: Zrchain_Policy_MsgRemoveMultiGrant,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Zrchain_Policy_MsgRemoveMultiGrant, Zrchain_Policy_MsgRemoveMultiGrantResponse> {
    return self.makeAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.removeMultiGrant.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveMultiGrantInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Policy_MsgAsyncClientProtocol {
  internal func updateParams(
    _ request: Zrchain_Policy_MsgUpdateParams,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_MsgUpdateParamsResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.updateParams.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? []
    )
  }

  internal func newPolicy(
    _ request: Zrchain_Policy_MsgNewPolicy,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_MsgNewPolicyResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.newPolicy.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNewPolicyInterceptors() ?? []
    )
  }

  internal func revokeAction(
    _ request: Zrchain_Policy_MsgRevokeAction,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_MsgRevokeActionResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.revokeAction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRevokeActionInterceptors() ?? []
    )
  }

  internal func approveAction(
    _ request: Zrchain_Policy_MsgApproveAction,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_MsgApproveActionResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.approveAction.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeApproveActionInterceptors() ?? []
    )
  }

  internal func addSignMethod(
    _ request: Zrchain_Policy_MsgAddSignMethod,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_MsgAddSignMethodResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.addSignMethod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddSignMethodInterceptors() ?? []
    )
  }

  internal func removeSignMethod(
    _ request: Zrchain_Policy_MsgRemoveSignMethod,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_MsgRemoveSignMethodResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.removeSignMethod.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveSignMethodInterceptors() ?? []
    )
  }

  internal func addMultiGrant(
    _ request: Zrchain_Policy_MsgAddMultiGrant,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_MsgAddMultiGrantResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.addMultiGrant.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddMultiGrantInterceptors() ?? []
    )
  }

  internal func removeMultiGrant(
    _ request: Zrchain_Policy_MsgRemoveMultiGrant,
    callOptions: CallOptions? = nil
  ) async throws -> Zrchain_Policy_MsgRemoveMultiGrantResponse {
    return try await self.performAsyncUnaryCall(
      path: Zrchain_Policy_MsgClientMetadata.Methods.removeMultiGrant.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRemoveMultiGrantInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Zrchain_Policy_MsgAsyncClient: Zrchain_Policy_MsgAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Zrchain_Policy_MsgClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Zrchain_Policy_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Zrchain_Policy_MsgClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'updateParams'.
  func makeUpdateParamsInterceptors() -> [ClientInterceptor<Zrchain_Policy_MsgUpdateParams, Zrchain_Policy_MsgUpdateParamsResponse>]

  /// - Returns: Interceptors to use when invoking 'newPolicy'.
  func makeNewPolicyInterceptors() -> [ClientInterceptor<Zrchain_Policy_MsgNewPolicy, Zrchain_Policy_MsgNewPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'revokeAction'.
  func makeRevokeActionInterceptors() -> [ClientInterceptor<Zrchain_Policy_MsgRevokeAction, Zrchain_Policy_MsgRevokeActionResponse>]

  /// - Returns: Interceptors to use when invoking 'approveAction'.
  func makeApproveActionInterceptors() -> [ClientInterceptor<Zrchain_Policy_MsgApproveAction, Zrchain_Policy_MsgApproveActionResponse>]

  /// - Returns: Interceptors to use when invoking 'addSignMethod'.
  func makeAddSignMethodInterceptors() -> [ClientInterceptor<Zrchain_Policy_MsgAddSignMethod, Zrchain_Policy_MsgAddSignMethodResponse>]

  /// - Returns: Interceptors to use when invoking 'removeSignMethod'.
  func makeRemoveSignMethodInterceptors() -> [ClientInterceptor<Zrchain_Policy_MsgRemoveSignMethod, Zrchain_Policy_MsgRemoveSignMethodResponse>]

  /// - Returns: Interceptors to use when invoking 'addMultiGrant'.
  func makeAddMultiGrantInterceptors() -> [ClientInterceptor<Zrchain_Policy_MsgAddMultiGrant, Zrchain_Policy_MsgAddMultiGrantResponse>]

  /// - Returns: Interceptors to use when invoking 'removeMultiGrant'.
  func makeRemoveMultiGrantInterceptors() -> [ClientInterceptor<Zrchain_Policy_MsgRemoveMultiGrant, Zrchain_Policy_MsgRemoveMultiGrantResponse>]
}

internal enum Zrchain_Policy_MsgClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "zrchain.policy.Msg",
    methods: [
      Zrchain_Policy_MsgClientMetadata.Methods.updateParams,
      Zrchain_Policy_MsgClientMetadata.Methods.newPolicy,
      Zrchain_Policy_MsgClientMetadata.Methods.revokeAction,
      Zrchain_Policy_MsgClientMetadata.Methods.approveAction,
      Zrchain_Policy_MsgClientMetadata.Methods.addSignMethod,
      Zrchain_Policy_MsgClientMetadata.Methods.removeSignMethod,
      Zrchain_Policy_MsgClientMetadata.Methods.addMultiGrant,
      Zrchain_Policy_MsgClientMetadata.Methods.removeMultiGrant,
    ]
  )

  internal enum Methods {
    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/zrchain.policy.Msg/UpdateParams",
      type: GRPCCallType.unary
    )

    internal static let newPolicy = GRPCMethodDescriptor(
      name: "NewPolicy",
      path: "/zrchain.policy.Msg/NewPolicy",
      type: GRPCCallType.unary
    )

    internal static let revokeAction = GRPCMethodDescriptor(
      name: "RevokeAction",
      path: "/zrchain.policy.Msg/RevokeAction",
      type: GRPCCallType.unary
    )

    internal static let approveAction = GRPCMethodDescriptor(
      name: "ApproveAction",
      path: "/zrchain.policy.Msg/ApproveAction",
      type: GRPCCallType.unary
    )

    internal static let addSignMethod = GRPCMethodDescriptor(
      name: "AddSignMethod",
      path: "/zrchain.policy.Msg/AddSignMethod",
      type: GRPCCallType.unary
    )

    internal static let removeSignMethod = GRPCMethodDescriptor(
      name: "RemoveSignMethod",
      path: "/zrchain.policy.Msg/RemoveSignMethod",
      type: GRPCCallType.unary
    )

    internal static let addMultiGrant = GRPCMethodDescriptor(
      name: "AddMultiGrant",
      path: "/zrchain.policy.Msg/AddMultiGrant",
      type: GRPCCallType.unary
    )

    internal static let removeMultiGrant = GRPCMethodDescriptor(
      name: "RemoveMultiGrant",
      path: "/zrchain.policy.Msg/RemoveMultiGrant",
      type: GRPCCallType.unary
    )
  }
}

/// Msg defines the Msg service.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Zrchain_Policy_MsgProvider: CallHandlerProvider {
  var interceptors: Zrchain_Policy_MsgServerInterceptorFactoryProtocol? { get }

  /// UpdateParams defines the operation for updating the module
  /// parameters. The authority defaults to the x/gov module account.
  func updateParams(request: Zrchain_Policy_MsgUpdateParams, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_MsgUpdateParamsResponse>

  /// NewPolicy defines the operation for creating a new policy.
  func newPolicy(request: Zrchain_Policy_MsgNewPolicy, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_MsgNewPolicyResponse>

  /// RevokeAction defines the operation for revoking an action.
  func revokeAction(request: Zrchain_Policy_MsgRevokeAction, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_MsgRevokeActionResponse>

  /// ApproveAction defines the operation for approving an action.
  func approveAction(request: Zrchain_Policy_MsgApproveAction, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_MsgApproveActionResponse>

  /// AddSignMethod defines the operation for adding a sign method.
  func addSignMethod(request: Zrchain_Policy_MsgAddSignMethod, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_MsgAddSignMethodResponse>

  /// RemoveSignMethod defines the operation for removing a sign method.
  func removeSignMethod(request: Zrchain_Policy_MsgRemoveSignMethod, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_MsgRemoveSignMethodResponse>

  /// AddMultiGrant defines the operation for adding multiple grants
  func addMultiGrant(request: Zrchain_Policy_MsgAddMultiGrant, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_MsgAddMultiGrantResponse>

  /// RemoveMultiGrant defines the operation for removing multiple grants
  func removeMultiGrant(request: Zrchain_Policy_MsgRemoveMultiGrant, context: StatusOnlyCallContext) -> EventLoopFuture<Zrchain_Policy_MsgRemoveMultiGrantResponse>
}

extension Zrchain_Policy_MsgProvider {
  internal var serviceName: Substring {
    return Zrchain_Policy_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpdateParams":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        userFunction: self.updateParams(request:context:)
      )

    case "NewPolicy":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgNewPolicy>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgNewPolicyResponse>(),
        interceptors: self.interceptors?.makeNewPolicyInterceptors() ?? [],
        userFunction: self.newPolicy(request:context:)
      )

    case "RevokeAction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgRevokeAction>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgRevokeActionResponse>(),
        interceptors: self.interceptors?.makeRevokeActionInterceptors() ?? [],
        userFunction: self.revokeAction(request:context:)
      )

    case "ApproveAction":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgApproveAction>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgApproveActionResponse>(),
        interceptors: self.interceptors?.makeApproveActionInterceptors() ?? [],
        userFunction: self.approveAction(request:context:)
      )

    case "AddSignMethod":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgAddSignMethod>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgAddSignMethodResponse>(),
        interceptors: self.interceptors?.makeAddSignMethodInterceptors() ?? [],
        userFunction: self.addSignMethod(request:context:)
      )

    case "RemoveSignMethod":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgRemoveSignMethod>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgRemoveSignMethodResponse>(),
        interceptors: self.interceptors?.makeRemoveSignMethodInterceptors() ?? [],
        userFunction: self.removeSignMethod(request:context:)
      )

    case "AddMultiGrant":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgAddMultiGrant>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgAddMultiGrantResponse>(),
        interceptors: self.interceptors?.makeAddMultiGrantInterceptors() ?? [],
        userFunction: self.addMultiGrant(request:context:)
      )

    case "RemoveMultiGrant":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgRemoveMultiGrant>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgRemoveMultiGrantResponse>(),
        interceptors: self.interceptors?.makeRemoveMultiGrantInterceptors() ?? [],
        userFunction: self.removeMultiGrant(request:context:)
      )

    default:
      return nil
    }
  }
}

/// Msg defines the Msg service.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Zrchain_Policy_MsgAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Zrchain_Policy_MsgServerInterceptorFactoryProtocol? { get }

  /// UpdateParams defines the operation for updating the module
  /// parameters. The authority defaults to the x/gov module account.
  @Sendable func updateParams(
    request: Zrchain_Policy_MsgUpdateParams,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_MsgUpdateParamsResponse

  /// NewPolicy defines the operation for creating a new policy.
  @Sendable func newPolicy(
    request: Zrchain_Policy_MsgNewPolicy,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_MsgNewPolicyResponse

  /// RevokeAction defines the operation for revoking an action.
  @Sendable func revokeAction(
    request: Zrchain_Policy_MsgRevokeAction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_MsgRevokeActionResponse

  /// ApproveAction defines the operation for approving an action.
  @Sendable func approveAction(
    request: Zrchain_Policy_MsgApproveAction,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_MsgApproveActionResponse

  /// AddSignMethod defines the operation for adding a sign method.
  @Sendable func addSignMethod(
    request: Zrchain_Policy_MsgAddSignMethod,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_MsgAddSignMethodResponse

  /// RemoveSignMethod defines the operation for removing a sign method.
  @Sendable func removeSignMethod(
    request: Zrchain_Policy_MsgRemoveSignMethod,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_MsgRemoveSignMethodResponse

  /// AddMultiGrant defines the operation for adding multiple grants
  @Sendable func addMultiGrant(
    request: Zrchain_Policy_MsgAddMultiGrant,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_MsgAddMultiGrantResponse

  /// RemoveMultiGrant defines the operation for removing multiple grants
  @Sendable func removeMultiGrant(
    request: Zrchain_Policy_MsgRemoveMultiGrant,
    context: GRPCAsyncServerCallContext
  ) async throws -> Zrchain_Policy_MsgRemoveMultiGrantResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Zrchain_Policy_MsgAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Zrchain_Policy_MsgServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Zrchain_Policy_MsgServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Zrchain_Policy_MsgServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "UpdateParams":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgUpdateParams>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgUpdateParamsResponse>(),
        interceptors: self.interceptors?.makeUpdateParamsInterceptors() ?? [],
        wrapping: self.updateParams(request:context:)
      )

    case "NewPolicy":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgNewPolicy>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgNewPolicyResponse>(),
        interceptors: self.interceptors?.makeNewPolicyInterceptors() ?? [],
        wrapping: self.newPolicy(request:context:)
      )

    case "RevokeAction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgRevokeAction>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgRevokeActionResponse>(),
        interceptors: self.interceptors?.makeRevokeActionInterceptors() ?? [],
        wrapping: self.revokeAction(request:context:)
      )

    case "ApproveAction":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgApproveAction>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgApproveActionResponse>(),
        interceptors: self.interceptors?.makeApproveActionInterceptors() ?? [],
        wrapping: self.approveAction(request:context:)
      )

    case "AddSignMethod":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgAddSignMethod>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgAddSignMethodResponse>(),
        interceptors: self.interceptors?.makeAddSignMethodInterceptors() ?? [],
        wrapping: self.addSignMethod(request:context:)
      )

    case "RemoveSignMethod":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgRemoveSignMethod>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgRemoveSignMethodResponse>(),
        interceptors: self.interceptors?.makeRemoveSignMethodInterceptors() ?? [],
        wrapping: self.removeSignMethod(request:context:)
      )

    case "AddMultiGrant":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgAddMultiGrant>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgAddMultiGrantResponse>(),
        interceptors: self.interceptors?.makeAddMultiGrantInterceptors() ?? [],
        wrapping: self.addMultiGrant(request:context:)
      )

    case "RemoveMultiGrant":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Zrchain_Policy_MsgRemoveMultiGrant>(),
        responseSerializer: ProtobufSerializer<Zrchain_Policy_MsgRemoveMultiGrantResponse>(),
        interceptors: self.interceptors?.makeRemoveMultiGrantInterceptors() ?? [],
        wrapping: self.removeMultiGrant(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Zrchain_Policy_MsgServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'updateParams'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateParamsInterceptors() -> [ServerInterceptor<Zrchain_Policy_MsgUpdateParams, Zrchain_Policy_MsgUpdateParamsResponse>]

  /// - Returns: Interceptors to use when handling 'newPolicy'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeNewPolicyInterceptors() -> [ServerInterceptor<Zrchain_Policy_MsgNewPolicy, Zrchain_Policy_MsgNewPolicyResponse>]

  /// - Returns: Interceptors to use when handling 'revokeAction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRevokeActionInterceptors() -> [ServerInterceptor<Zrchain_Policy_MsgRevokeAction, Zrchain_Policy_MsgRevokeActionResponse>]

  /// - Returns: Interceptors to use when handling 'approveAction'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeApproveActionInterceptors() -> [ServerInterceptor<Zrchain_Policy_MsgApproveAction, Zrchain_Policy_MsgApproveActionResponse>]

  /// - Returns: Interceptors to use when handling 'addSignMethod'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddSignMethodInterceptors() -> [ServerInterceptor<Zrchain_Policy_MsgAddSignMethod, Zrchain_Policy_MsgAddSignMethodResponse>]

  /// - Returns: Interceptors to use when handling 'removeSignMethod'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveSignMethodInterceptors() -> [ServerInterceptor<Zrchain_Policy_MsgRemoveSignMethod, Zrchain_Policy_MsgRemoveSignMethodResponse>]

  /// - Returns: Interceptors to use when handling 'addMultiGrant'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddMultiGrantInterceptors() -> [ServerInterceptor<Zrchain_Policy_MsgAddMultiGrant, Zrchain_Policy_MsgAddMultiGrantResponse>]

  /// - Returns: Interceptors to use when handling 'removeMultiGrant'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRemoveMultiGrantInterceptors() -> [ServerInterceptor<Zrchain_Policy_MsgRemoveMultiGrant, Zrchain_Policy_MsgRemoveMultiGrantResponse>]
}

internal enum Zrchain_Policy_MsgServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Msg",
    fullName: "zrchain.policy.Msg",
    methods: [
      Zrchain_Policy_MsgServerMetadata.Methods.updateParams,
      Zrchain_Policy_MsgServerMetadata.Methods.newPolicy,
      Zrchain_Policy_MsgServerMetadata.Methods.revokeAction,
      Zrchain_Policy_MsgServerMetadata.Methods.approveAction,
      Zrchain_Policy_MsgServerMetadata.Methods.addSignMethod,
      Zrchain_Policy_MsgServerMetadata.Methods.removeSignMethod,
      Zrchain_Policy_MsgServerMetadata.Methods.addMultiGrant,
      Zrchain_Policy_MsgServerMetadata.Methods.removeMultiGrant,
    ]
  )

  internal enum Methods {
    internal static let updateParams = GRPCMethodDescriptor(
      name: "UpdateParams",
      path: "/zrchain.policy.Msg/UpdateParams",
      type: GRPCCallType.unary
    )

    internal static let newPolicy = GRPCMethodDescriptor(
      name: "NewPolicy",
      path: "/zrchain.policy.Msg/NewPolicy",
      type: GRPCCallType.unary
    )

    internal static let revokeAction = GRPCMethodDescriptor(
      name: "RevokeAction",
      path: "/zrchain.policy.Msg/RevokeAction",
      type: GRPCCallType.unary
    )

    internal static let approveAction = GRPCMethodDescriptor(
      name: "ApproveAction",
      path: "/zrchain.policy.Msg/ApproveAction",
      type: GRPCCallType.unary
    )

    internal static let addSignMethod = GRPCMethodDescriptor(
      name: "AddSignMethod",
      path: "/zrchain.policy.Msg/AddSignMethod",
      type: GRPCCallType.unary
    )

    internal static let removeSignMethod = GRPCMethodDescriptor(
      name: "RemoveSignMethod",
      path: "/zrchain.policy.Msg/RemoveSignMethod",
      type: GRPCCallType.unary
    )

    internal static let addMultiGrant = GRPCMethodDescriptor(
      name: "AddMultiGrant",
      path: "/zrchain.policy.Msg/AddMultiGrant",
      type: GRPCCallType.unary
    )

    internal static let removeMultiGrant = GRPCMethodDescriptor(
      name: "RemoveMultiGrant",
      path: "/zrchain.policy.Msg/RemoveMultiGrant",
      type: GRPCCallType.unary
    )
  }
}
