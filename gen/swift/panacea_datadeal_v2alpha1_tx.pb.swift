// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: panacea/datadeal/v2alpha1/tx.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///MsgCreateDeal defines the Msg/CreateDeal request type.
struct Panacea_Datadeal_V2alpha1_MsgCreateDeal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataSchema: [String] = []

  var budget: Cosmos_Base_V1beta1_Coin {
    get {return _budget ?? Cosmos_Base_V1beta1_Coin()}
    set {_budget = newValue}
  }
  /// Returns true if `budget` has been explicitly set.
  var hasBudget: Bool {return self._budget != nil}
  /// Clears the value of `budget`. Subsequent reads from it will return its default value.
  mutating func clearBudget() {self._budget = nil}

  var maxNumData: UInt64 = 0

  var trustedOracles: [String] = []

  var owner: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _budget: Cosmos_Base_V1beta1_Coin? = nil
}

///MsgCreateDealResponse defines the Msg/CreateDeal response type.
struct Panacea_Datadeal_V2alpha1_MsgCreateDealResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dealID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

///MsgSellData defines the Msg/SellData request type.
struct Panacea_Datadeal_V2alpha1_MsgSellData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cert: Panacea_Datadeal_V2alpha1_DataCert {
    get {return _cert ?? Panacea_Datadeal_V2alpha1_DataCert()}
    set {_cert = newValue}
  }
  /// Returns true if `cert` has been explicitly set.
  var hasCert: Bool {return self._cert != nil}
  /// Clears the value of `cert`. Subsequent reads from it will return its default value.
  mutating func clearCert() {self._cert = nil}

  var seller: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _cert: Panacea_Datadeal_V2alpha1_DataCert? = nil
}

///MsgSellDataResponse defines the Msg/SellData response type.
struct Panacea_Datadeal_V2alpha1_MsgSellDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reward: Cosmos_Base_V1beta1_Coin {
    get {return _reward ?? Cosmos_Base_V1beta1_Coin()}
    set {_reward = newValue}
  }
  /// Returns true if `reward` has been explicitly set.
  var hasReward: Bool {return self._reward != nil}
  /// Clears the value of `reward`. Subsequent reads from it will return its default value.
  mutating func clearReward() {self._reward = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _reward: Cosmos_Base_V1beta1_Coin? = nil
}

/// DataCert defines data validation certificate.
struct Panacea_Datadeal_V2alpha1_DataCert {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unsignedCert: Panacea_Datadeal_V2alpha1_UnsignedDataCert {
    get {return _unsignedCert ?? Panacea_Datadeal_V2alpha1_UnsignedDataCert()}
    set {_unsignedCert = newValue}
  }
  /// Returns true if `unsignedCert` has been explicitly set.
  var hasUnsignedCert: Bool {return self._unsignedCert != nil}
  /// Clears the value of `unsignedCert`. Subsequent reads from it will return its default value.
  mutating func clearUnsignedCert() {self._unsignedCert = nil}

  var signature: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _unsignedCert: Panacea_Datadeal_V2alpha1_UnsignedDataCert? = nil
}

/// UnsignedDataCert defines unsigned data validation certificate.
struct Panacea_Datadeal_V2alpha1_UnsignedDataCert {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dealID: UInt64 = 0

  var dataHash: Data = Data()

  var encryptedDataURL: Data = Data()

  var oracleAddress: String = String()

  var requesterAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDeactivateDeal defines the Msg/DeactivateDeal request type.
struct Panacea_Datadeal_V2alpha1_MsgDeactivateDeal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dealID: UInt64 = 0

  var deactivateRequester: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDeactivateDealResponse defines the Msg/DeactivateDeal response type.
struct Panacea_Datadeal_V2alpha1_MsgDeactivateDealResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dealID: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Panacea_Datadeal_V2alpha1_MsgCreateDeal: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha1_MsgCreateDealResponse: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha1_MsgSellData: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha1_MsgSellDataResponse: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha1_DataCert: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha1_UnsignedDataCert: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha1_MsgDeactivateDeal: @unchecked Sendable {}
extension Panacea_Datadeal_V2alpha1_MsgDeactivateDealResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "panacea.datadeal.v2alpha1"

extension Panacea_Datadeal_V2alpha1_MsgCreateDeal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateDeal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_schema"),
    2: .same(proto: "budget"),
    3: .standard(proto: "max_num_data"),
    4: .standard(proto: "trusted_oracles"),
    5: .same(proto: "owner"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.dataSchema) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._budget) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.maxNumData) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.trustedOracles) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.owner) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.dataSchema.isEmpty {
      try visitor.visitRepeatedStringField(value: self.dataSchema, fieldNumber: 1)
    }
    try { if let v = self._budget {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.maxNumData != 0 {
      try visitor.visitSingularUInt64Field(value: self.maxNumData, fieldNumber: 3)
    }
    if !self.trustedOracles.isEmpty {
      try visitor.visitRepeatedStringField(value: self.trustedOracles, fieldNumber: 4)
    }
    if !self.owner.isEmpty {
      try visitor.visitSingularStringField(value: self.owner, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha1_MsgCreateDeal, rhs: Panacea_Datadeal_V2alpha1_MsgCreateDeal) -> Bool {
    if lhs.dataSchema != rhs.dataSchema {return false}
    if lhs._budget != rhs._budget {return false}
    if lhs.maxNumData != rhs.maxNumData {return false}
    if lhs.trustedOracles != rhs.trustedOracles {return false}
    if lhs.owner != rhs.owner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha1_MsgCreateDealResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateDealResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deal_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha1_MsgCreateDealResponse, rhs: Panacea_Datadeal_V2alpha1_MsgCreateDealResponse) -> Bool {
    if lhs.dealID != rhs.dealID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha1_MsgSellData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSellData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cert"),
    2: .same(proto: "seller"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._cert) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.seller) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._cert {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.seller.isEmpty {
      try visitor.visitSingularStringField(value: self.seller, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha1_MsgSellData, rhs: Panacea_Datadeal_V2alpha1_MsgSellData) -> Bool {
    if lhs._cert != rhs._cert {return false}
    if lhs.seller != rhs.seller {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha1_MsgSellDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSellDataResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reward"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._reward) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._reward {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha1_MsgSellDataResponse, rhs: Panacea_Datadeal_V2alpha1_MsgSellDataResponse) -> Bool {
    if lhs._reward != rhs._reward {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha1_DataCert: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCert"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "unsigned_cert"),
    2: .same(proto: "signature"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._unsignedCert) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.signature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._unsignedCert {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha1_DataCert, rhs: Panacea_Datadeal_V2alpha1_DataCert) -> Bool {
    if lhs._unsignedCert != rhs._unsignedCert {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha1_UnsignedDataCert: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UnsignedDataCert"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deal_id"),
    2: .standard(proto: "data_hash"),
    3: .standard(proto: "encrypted_data_url"),
    4: .standard(proto: "oracle_address"),
    5: .standard(proto: "requester_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.dataHash) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.encryptedDataURL) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.oracleAddress) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.requesterAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 1)
    }
    if !self.dataHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.dataHash, fieldNumber: 2)
    }
    if !self.encryptedDataURL.isEmpty {
      try visitor.visitSingularBytesField(value: self.encryptedDataURL, fieldNumber: 3)
    }
    if !self.oracleAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.oracleAddress, fieldNumber: 4)
    }
    if !self.requesterAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.requesterAddress, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha1_UnsignedDataCert, rhs: Panacea_Datadeal_V2alpha1_UnsignedDataCert) -> Bool {
    if lhs.dealID != rhs.dealID {return false}
    if lhs.dataHash != rhs.dataHash {return false}
    if lhs.encryptedDataURL != rhs.encryptedDataURL {return false}
    if lhs.oracleAddress != rhs.oracleAddress {return false}
    if lhs.requesterAddress != rhs.requesterAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha1_MsgDeactivateDeal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDeactivateDeal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deal_id"),
    2: .standard(proto: "deactivate_requester"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.deactivateRequester) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 1)
    }
    if !self.deactivateRequester.isEmpty {
      try visitor.visitSingularStringField(value: self.deactivateRequester, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha1_MsgDeactivateDeal, rhs: Panacea_Datadeal_V2alpha1_MsgDeactivateDeal) -> Bool {
    if lhs.dealID != rhs.dealID {return false}
    if lhs.deactivateRequester != rhs.deactivateRequester {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Panacea_Datadeal_V2alpha1_MsgDeactivateDealResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDeactivateDealResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deal_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.dealID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dealID != 0 {
      try visitor.visitSingularUInt64Field(value: self.dealID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Panacea_Datadeal_V2alpha1_MsgDeactivateDealResponse, rhs: Panacea_Datadeal_V2alpha1_MsgDeactivateDealResponse) -> Bool {
    if lhs.dealID != rhs.dealID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
