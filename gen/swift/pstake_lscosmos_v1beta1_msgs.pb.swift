// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pstake/lscosmos/v1beta1/msgs.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Pstake_Lscosmos_V1beta1_MsgLiquidStake {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegatorAddress: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

struct Pstake_Lscosmos_V1beta1_MsgLiquidStakeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_MsgLiquidUnstake {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegatorAddress: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

struct Pstake_Lscosmos_V1beta1_MsgLiquidUnstakeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_MsgRedeem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegatorAddress: String = String()

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _amount: Cosmos_Base_V1beta1_Coin? = nil
}

struct Pstake_Lscosmos_V1beta1_MsgRedeemResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_MsgClaim {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegatorAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_MsgClaimResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_MsgRecreateICA {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fromAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_MsgRecreateICAResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_MsgJumpStart {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pstakeAddress: String = String()

  var chainID: String = String()

  var connectionID: String = String()

  var transferChannel: String = String()

  var transferPort: String = String()

  var baseDenom: String = String()

  var mintDenom: String = String()

  var minDeposit: String = String()

  var allowListedValidators: Pstake_Lscosmos_V1beta1_AllowListedValidators {
    get {return _allowListedValidators ?? Pstake_Lscosmos_V1beta1_AllowListedValidators()}
    set {_allowListedValidators = newValue}
  }
  /// Returns true if `allowListedValidators` has been explicitly set.
  var hasAllowListedValidators: Bool {return self._allowListedValidators != nil}
  /// Clears the value of `allowListedValidators`. Subsequent reads from it will return its default value.
  mutating func clearAllowListedValidators() {self._allowListedValidators = nil}

  var pstakeParams: Pstake_Lscosmos_V1beta1_PstakeParams {
    get {return _pstakeParams ?? Pstake_Lscosmos_V1beta1_PstakeParams()}
    set {_pstakeParams = newValue}
  }
  /// Returns true if `pstakeParams` has been explicitly set.
  var hasPstakeParams: Bool {return self._pstakeParams != nil}
  /// Clears the value of `pstakeParams`. Subsequent reads from it will return its default value.
  mutating func clearPstakeParams() {self._pstakeParams = nil}

  var hostAccounts: Pstake_Lscosmos_V1beta1_HostAccounts {
    get {return _hostAccounts ?? Pstake_Lscosmos_V1beta1_HostAccounts()}
    set {_hostAccounts = newValue}
  }
  /// Returns true if `hostAccounts` has been explicitly set.
  var hasHostAccounts: Bool {return self._hostAccounts != nil}
  /// Clears the value of `hostAccounts`. Subsequent reads from it will return its default value.
  mutating func clearHostAccounts() {self._hostAccounts = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _allowListedValidators: Pstake_Lscosmos_V1beta1_AllowListedValidators? = nil
  fileprivate var _pstakeParams: Pstake_Lscosmos_V1beta1_PstakeParams? = nil
  fileprivate var _hostAccounts: Pstake_Lscosmos_V1beta1_HostAccounts? = nil
}

struct Pstake_Lscosmos_V1beta1_MsgJumpStartResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_MsgChangeModuleState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pstakeAddress: String = String()

  var moduleState: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_MsgChangeModuleStateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_MsgReportSlashing {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pstakeAddress: String = String()

  var validatorAddress: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pstake_Lscosmos_V1beta1_MsgReportSlashingResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Pstake_Lscosmos_V1beta1_MsgLiquidStake: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgLiquidStakeResponse: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgLiquidUnstake: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgLiquidUnstakeResponse: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgRedeem: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgRedeemResponse: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgClaim: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgClaimResponse: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgRecreateICA: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgRecreateICAResponse: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgJumpStart: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgJumpStartResponse: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgChangeModuleState: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgChangeModuleStateResponse: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgReportSlashing: @unchecked Sendable {}
extension Pstake_Lscosmos_V1beta1_MsgReportSlashingResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "pstake.lscosmos.v1beta1"

extension Pstake_Lscosmos_V1beta1_MsgLiquidStake: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLiquidStake"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgLiquidStake, rhs: Pstake_Lscosmos_V1beta1_MsgLiquidStake) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgLiquidStakeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLiquidStakeResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgLiquidStakeResponse, rhs: Pstake_Lscosmos_V1beta1_MsgLiquidStakeResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgLiquidUnstake: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLiquidUnstake"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgLiquidUnstake, rhs: Pstake_Lscosmos_V1beta1_MsgLiquidUnstake) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgLiquidUnstakeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgLiquidUnstakeResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgLiquidUnstakeResponse, rhs: Pstake_Lscosmos_V1beta1_MsgLiquidUnstakeResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgRedeem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRedeem"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    try { if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgRedeem, rhs: Pstake_Lscosmos_V1beta1_MsgRedeem) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgRedeemResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRedeemResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgRedeemResponse, rhs: Pstake_Lscosmos_V1beta1_MsgRedeemResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgClaim: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgClaim"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.delegatorAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delegatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.delegatorAddress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgClaim, rhs: Pstake_Lscosmos_V1beta1_MsgClaim) -> Bool {
    if lhs.delegatorAddress != rhs.delegatorAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgClaimResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgClaimResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgClaimResponse, rhs: Pstake_Lscosmos_V1beta1_MsgClaimResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgRecreateICA: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRecreateICA"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "from_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.fromAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.fromAddress, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgRecreateICA, rhs: Pstake_Lscosmos_V1beta1_MsgRecreateICA) -> Bool {
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgRecreateICAResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRecreateICAResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgRecreateICAResponse, rhs: Pstake_Lscosmos_V1beta1_MsgRecreateICAResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgJumpStart: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgJumpStart"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pstake_address"),
    2: .standard(proto: "chain_i_d"),
    3: .standard(proto: "connection_i_d"),
    4: .standard(proto: "transfer_channel"),
    5: .standard(proto: "transfer_port"),
    6: .standard(proto: "base_denom"),
    7: .standard(proto: "mint_denom"),
    8: .standard(proto: "min_deposit"),
    9: .standard(proto: "allow_listed_validators"),
    10: .standard(proto: "pstake_params"),
    11: .standard(proto: "host_accounts"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.pstakeAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.chainID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.connectionID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.transferChannel) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.transferPort) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.baseDenom) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.mintDenom) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.minDeposit) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._allowListedValidators) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._pstakeParams) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._hostAccounts) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.pstakeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.pstakeAddress, fieldNumber: 1)
    }
    if !self.chainID.isEmpty {
      try visitor.visitSingularStringField(value: self.chainID, fieldNumber: 2)
    }
    if !self.connectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.connectionID, fieldNumber: 3)
    }
    if !self.transferChannel.isEmpty {
      try visitor.visitSingularStringField(value: self.transferChannel, fieldNumber: 4)
    }
    if !self.transferPort.isEmpty {
      try visitor.visitSingularStringField(value: self.transferPort, fieldNumber: 5)
    }
    if !self.baseDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.baseDenom, fieldNumber: 6)
    }
    if !self.mintDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.mintDenom, fieldNumber: 7)
    }
    if !self.minDeposit.isEmpty {
      try visitor.visitSingularStringField(value: self.minDeposit, fieldNumber: 8)
    }
    try { if let v = self._allowListedValidators {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._pstakeParams {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._hostAccounts {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgJumpStart, rhs: Pstake_Lscosmos_V1beta1_MsgJumpStart) -> Bool {
    if lhs.pstakeAddress != rhs.pstakeAddress {return false}
    if lhs.chainID != rhs.chainID {return false}
    if lhs.connectionID != rhs.connectionID {return false}
    if lhs.transferChannel != rhs.transferChannel {return false}
    if lhs.transferPort != rhs.transferPort {return false}
    if lhs.baseDenom != rhs.baseDenom {return false}
    if lhs.mintDenom != rhs.mintDenom {return false}
    if lhs.minDeposit != rhs.minDeposit {return false}
    if lhs._allowListedValidators != rhs._allowListedValidators {return false}
    if lhs._pstakeParams != rhs._pstakeParams {return false}
    if lhs._hostAccounts != rhs._hostAccounts {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgJumpStartResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgJumpStartResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgJumpStartResponse, rhs: Pstake_Lscosmos_V1beta1_MsgJumpStartResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgChangeModuleState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChangeModuleState"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pstake_address"),
    2: .standard(proto: "module_state"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.pstakeAddress) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.moduleState) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pstakeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.pstakeAddress, fieldNumber: 1)
    }
    if self.moduleState != false {
      try visitor.visitSingularBoolField(value: self.moduleState, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgChangeModuleState, rhs: Pstake_Lscosmos_V1beta1_MsgChangeModuleState) -> Bool {
    if lhs.pstakeAddress != rhs.pstakeAddress {return false}
    if lhs.moduleState != rhs.moduleState {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgChangeModuleStateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgChangeModuleStateResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgChangeModuleStateResponse, rhs: Pstake_Lscosmos_V1beta1_MsgChangeModuleStateResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgReportSlashing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgReportSlashing"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pstake_address"),
    2: .standard(proto: "validator_address"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.pstakeAddress) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.validatorAddress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pstakeAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.pstakeAddress, fieldNumber: 1)
    }
    if !self.validatorAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.validatorAddress, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgReportSlashing, rhs: Pstake_Lscosmos_V1beta1_MsgReportSlashing) -> Bool {
    if lhs.pstakeAddress != rhs.pstakeAddress {return false}
    if lhs.validatorAddress != rhs.validatorAddress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pstake_Lscosmos_V1beta1_MsgReportSlashingResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgReportSlashingResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pstake_Lscosmos_V1beta1_MsgReportSlashingResponse, rhs: Pstake_Lscosmos_V1beta1_MsgReportSlashingResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
