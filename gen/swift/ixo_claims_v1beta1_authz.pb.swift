// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ixo/claims/v1beta1/authz.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Ixo_Claims_V1beta1_SubmitClaimAuthorization {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address of admin
  var admin: String = String()

  var constraints: [Ixo_Claims_V1beta1_SubmitClaimConstraints] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ixo_Claims_V1beta1_SubmitClaimConstraints {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// collection_id indicates to which Collection this claim belongs
  var collectionID: String = String()

  var agentQuota: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ixo_Claims_V1beta1_EvaluateClaimAuthorization {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address of admin
  var admin: String = String()

  var constraints: [Ixo_Claims_V1beta1_EvaluateClaimConstraints] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ixo_Claims_V1beta1_EvaluateClaimConstraints {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// collection_id indicates to which Collection this claim belongs
  var collectionID: String = String()

  /// either collection_id or claim_ids is needed
  var claimIds: [String] = []

  var agentQuota: UInt64 = 0

  /// if null then no before_date validation done
  var beforeDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _beforeDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_beforeDate = newValue}
  }
  /// Returns true if `beforeDate` has been explicitly set.
  var hasBeforeDate: Bool {return self._beforeDate != nil}
  /// Clears the value of `beforeDate`. Subsequent reads from it will return its default value.
  mutating func clearBeforeDate() {self._beforeDate = nil}

  /// max custom amount evaluator can change, if empty list must use amount
  /// defined in Token payments
  var maxCustomAmount: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _beforeDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Ixo_Claims_V1beta1_WithdrawPaymentAuthorization {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// address of admin
  var admin: String = String()

  var constraints: [Ixo_Claims_V1beta1_WithdrawPaymentConstraints] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ixo_Claims_V1beta1_WithdrawPaymentConstraints {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// claim_id the withdrawal is for
  var claimID: String = String()

  /// Inputs to the multisend tx to run to withdraw payment
  var inputs: [Ixo_Claims_V1beta1_Input] = []

  /// Outputs for the multisend tx to run to withdraw payment
  var outputs: [Ixo_Claims_V1beta1_Output] = []

  /// payment type to keep track what payment is for and mark claim payment
  /// accordingly
  var paymentType: Ixo_Claims_V1beta1_PaymentType = .submission

  /// if empty(nil) then no contract payment
  var contract1155Payment: Ixo_Claims_V1beta1_Contract1155Payment {
    get {return _contract1155Payment ?? Ixo_Claims_V1beta1_Contract1155Payment()}
    set {_contract1155Payment = newValue}
  }
  /// Returns true if `contract1155Payment` has been explicitly set.
  var hasContract1155Payment: Bool {return self._contract1155Payment != nil}
  /// Clears the value of `contract1155Payment`. Subsequent reads from it will return its default value.
  mutating func clearContract1155Payment() {self._contract1155Payment = nil}

  /// for contract payment
  var toAddress: String = String()

  /// for contract payment
  var fromAddress: String = String()

  /// date that grantee can execute authorization, calculated from created date
  /// plus the timeout on Collection payments, if null then none
  var releaseDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _releaseDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_releaseDate = newValue}
  }
  /// Returns true if `releaseDate` has been explicitly set.
  var hasReleaseDate: Bool {return self._releaseDate != nil}
  /// Clears the value of `releaseDate`. Subsequent reads from it will return its default value.
  mutating func clearReleaseDate() {self._releaseDate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _contract1155Payment: Ixo_Claims_V1beta1_Contract1155Payment? = nil
  fileprivate var _releaseDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Ixo_Claims_V1beta1_SubmitClaimAuthorization: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_SubmitClaimConstraints: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_EvaluateClaimAuthorization: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_EvaluateClaimConstraints: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_WithdrawPaymentAuthorization: @unchecked Sendable {}
extension Ixo_Claims_V1beta1_WithdrawPaymentConstraints: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ixo.claims.v1beta1"

extension Ixo_Claims_V1beta1_SubmitClaimAuthorization: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitClaimAuthorization"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "admin"),
    2: .same(proto: "constraints"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.admin) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.constraints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.admin.isEmpty {
      try visitor.visitSingularStringField(value: self.admin, fieldNumber: 1)
    }
    if !self.constraints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.constraints, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_SubmitClaimAuthorization, rhs: Ixo_Claims_V1beta1_SubmitClaimAuthorization) -> Bool {
    if lhs.admin != rhs.admin {return false}
    if lhs.constraints != rhs.constraints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_SubmitClaimConstraints: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitClaimConstraints"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collection_id"),
    2: .standard(proto: "agent_quota"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.collectionID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self.agentQuota) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.collectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.collectionID, fieldNumber: 1)
    }
    if self.agentQuota != 0 {
      try visitor.visitSingularUInt64Field(value: self.agentQuota, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_SubmitClaimConstraints, rhs: Ixo_Claims_V1beta1_SubmitClaimConstraints) -> Bool {
    if lhs.collectionID != rhs.collectionID {return false}
    if lhs.agentQuota != rhs.agentQuota {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_EvaluateClaimAuthorization: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EvaluateClaimAuthorization"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "admin"),
    2: .same(proto: "constraints"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.admin) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.constraints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.admin.isEmpty {
      try visitor.visitSingularStringField(value: self.admin, fieldNumber: 1)
    }
    if !self.constraints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.constraints, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_EvaluateClaimAuthorization, rhs: Ixo_Claims_V1beta1_EvaluateClaimAuthorization) -> Bool {
    if lhs.admin != rhs.admin {return false}
    if lhs.constraints != rhs.constraints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_EvaluateClaimConstraints: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EvaluateClaimConstraints"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "collection_id"),
    2: .standard(proto: "claim_ids"),
    3: .standard(proto: "agent_quota"),
    4: .standard(proto: "before_date"),
    10: .standard(proto: "max_custom_amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.collectionID) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.claimIds) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.agentQuota) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._beforeDate) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.maxCustomAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.collectionID.isEmpty {
      try visitor.visitSingularStringField(value: self.collectionID, fieldNumber: 1)
    }
    if !self.claimIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.claimIds, fieldNumber: 2)
    }
    if self.agentQuota != 0 {
      try visitor.visitSingularUInt64Field(value: self.agentQuota, fieldNumber: 3)
    }
    try { if let v = self._beforeDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if !self.maxCustomAmount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.maxCustomAmount, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_EvaluateClaimConstraints, rhs: Ixo_Claims_V1beta1_EvaluateClaimConstraints) -> Bool {
    if lhs.collectionID != rhs.collectionID {return false}
    if lhs.claimIds != rhs.claimIds {return false}
    if lhs.agentQuota != rhs.agentQuota {return false}
    if lhs._beforeDate != rhs._beforeDate {return false}
    if lhs.maxCustomAmount != rhs.maxCustomAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_WithdrawPaymentAuthorization: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WithdrawPaymentAuthorization"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "admin"),
    2: .same(proto: "constraints"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.admin) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.constraints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.admin.isEmpty {
      try visitor.visitSingularStringField(value: self.admin, fieldNumber: 1)
    }
    if !self.constraints.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.constraints, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_WithdrawPaymentAuthorization, rhs: Ixo_Claims_V1beta1_WithdrawPaymentAuthorization) -> Bool {
    if lhs.admin != rhs.admin {return false}
    if lhs.constraints != rhs.constraints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ixo_Claims_V1beta1_WithdrawPaymentConstraints: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WithdrawPaymentConstraints"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "claim_id"),
    2: .same(proto: "inputs"),
    3: .same(proto: "outputs"),
    4: .standard(proto: "payment_type"),
    5: .standard(proto: "contract_1155_payment"),
    6: .same(proto: "toAddress"),
    7: .same(proto: "fromAddress"),
    8: .standard(proto: "release_date"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.claimID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.paymentType) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._contract1155Payment) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.toAddress) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.fromAddress) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._releaseDate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.claimID.isEmpty {
      try visitor.visitSingularStringField(value: self.claimID, fieldNumber: 1)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 2)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 3)
    }
    if self.paymentType != .submission {
      try visitor.visitSingularEnumField(value: self.paymentType, fieldNumber: 4)
    }
    try { if let v = self._contract1155Payment {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.toAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.toAddress, fieldNumber: 6)
    }
    if !self.fromAddress.isEmpty {
      try visitor.visitSingularStringField(value: self.fromAddress, fieldNumber: 7)
    }
    try { if let v = self._releaseDate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ixo_Claims_V1beta1_WithdrawPaymentConstraints, rhs: Ixo_Claims_V1beta1_WithdrawPaymentConstraints) -> Bool {
    if lhs.claimID != rhs.claimID {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.paymentType != rhs.paymentType {return false}
    if lhs._contract1155Payment != rhs._contract1155Payment {return false}
    if lhs.toAddress != rhs.toAddress {return false}
    if lhs.fromAddress != rhs.fromAddress {return false}
    if lhs._releaseDate != rhs._releaseDate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
