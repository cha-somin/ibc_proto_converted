// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyve/pool/v1beta1/events.proto

package com.kyve.pool.v1beta1;

public interface EventPoolUpdatedOrBuilder extends
    // @@protoc_insertion_point(interface_extends:kyve.pool.v1beta1.EventPoolUpdated)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * id is the unique ID of the pool.
   * </pre>
   *
   * <code>uint64 id = 1 [json_name = "id"];</code>
   * @return The id.
   */
  long getId();

  /**
   * <pre>
   * raw update string
   * </pre>
   *
   * <code>string raw_update_string = 2 [json_name = "rawUpdateString"];</code>
   * @return The rawUpdateString.
   */
  java.lang.String getRawUpdateString();
  /**
   * <pre>
   * raw update string
   * </pre>
   *
   * <code>string raw_update_string = 2 [json_name = "rawUpdateString"];</code>
   * @return The bytes for rawUpdateString.
   */
  com.google.protobuf.ByteString
      getRawUpdateStringBytes();

  /**
   * <pre>
   * name is the human readable name of the pool
   * </pre>
   *
   * <code>string name = 3 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * name is the human readable name of the pool
   * </pre>
   *
   * <code>string name = 3 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * runtime is the runtime name of the pool
   * </pre>
   *
   * <code>string runtime = 4 [json_name = "runtime"];</code>
   * @return The runtime.
   */
  java.lang.String getRuntime();
  /**
   * <pre>
   * runtime is the runtime name of the pool
   * </pre>
   *
   * <code>string runtime = 4 [json_name = "runtime"];</code>
   * @return The bytes for runtime.
   */
  com.google.protobuf.ByteString
      getRuntimeBytes();

  /**
   * <pre>
   * logo is the logo url of the pool
   * </pre>
   *
   * <code>string logo = 5 [json_name = "logo"];</code>
   * @return The logo.
   */
  java.lang.String getLogo();
  /**
   * <pre>
   * logo is the logo url of the pool
   * </pre>
   *
   * <code>string logo = 5 [json_name = "logo"];</code>
   * @return The bytes for logo.
   */
  com.google.protobuf.ByteString
      getLogoBytes();

  /**
   * <pre>
   * config is either a json stringified config or an
   * external link pointing to the config
   * </pre>
   *
   * <code>string config = 6 [json_name = "config"];</code>
   * @return The config.
   */
  java.lang.String getConfig();
  /**
   * <pre>
   * config is either a json stringified config or an
   * external link pointing to the config
   * </pre>
   *
   * <code>string config = 6 [json_name = "config"];</code>
   * @return The bytes for config.
   */
  com.google.protobuf.ByteString
      getConfigBytes();

  /**
   * <pre>
   * upload_interval is the interval the pool should validate
   * bundles with
   * </pre>
   *
   * <code>uint64 upload_interval = 7 [json_name = "uploadInterval"];</code>
   * @return The uploadInterval.
   */
  long getUploadInterval();

  /**
   * <pre>
   * operating_cost is the fixed cost which gets paid out
   * to every successful uploader
   * </pre>
   *
   * <code>uint64 operating_cost = 8 [json_name = "operatingCost"];</code>
   * @return The operatingCost.
   */
  long getOperatingCost();

  /**
   * <pre>
   * min_delegation is the minimum amount of $KYVE the pool has
   * to have in order to produce bundles
   * </pre>
   *
   * <code>uint64 min_delegation = 9 [json_name = "minDelegation"];</code>
   * @return The minDelegation.
   */
  long getMinDelegation();

  /**
   * <pre>
   * max_bundle_size is the max size a data bundle can have
   * (amount of data items)
   * </pre>
   *
   * <code>uint64 max_bundle_size = 10 [json_name = "maxBundleSize"];</code>
   * @return The maxBundleSize.
   */
  long getMaxBundleSize();

  /**
   * <pre>
   * storage_provider_id is the unique id of the storage provider
   * the pool is archiving the data on
   * </pre>
   *
   * <code>uint32 storage_provider_id = 11 [json_name = "storageProviderId"];</code>
   * @return The storageProviderId.
   */
  int getStorageProviderId();

  /**
   * <pre>
   * compression_id is the unique id of the compression type the bundles
   * get compressed with
   * </pre>
   *
   * <code>uint32 compression_id = 12 [json_name = "compressionId"];</code>
   * @return The compressionId.
   */
  int getCompressionId();
}
