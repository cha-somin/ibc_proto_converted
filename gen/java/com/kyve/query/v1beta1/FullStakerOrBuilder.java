// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyve/query/v1beta1/query.proto

package com.kyve.query.v1beta1;

public interface FullStakerOrBuilder extends
    // @@protoc_insertion_point(interface_extends:kyve.query.v1beta1.FullStaker)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * address of the staker
   * </pre>
   *
   * <code>string address = 1 [json_name = "address"];</code>
   * @return The address.
   */
  java.lang.String getAddress();
  /**
   * <pre>
   * address of the staker
   * </pre>
   *
   * <code>string address = 1 [json_name = "address"];</code>
   * @return The bytes for address.
   */
  com.google.protobuf.ByteString
      getAddressBytes();

  /**
   * <pre>
   * metadata as logo, moniker, etc.
   * </pre>
   *
   * <code>.kyve.query.v1beta1.StakerMetadata metadata = 2 [json_name = "metadata"];</code>
   * @return Whether the metadata field is set.
   */
  boolean hasMetadata();
  /**
   * <pre>
   * metadata as logo, moniker, etc.
   * </pre>
   *
   * <code>.kyve.query.v1beta1.StakerMetadata metadata = 2 [json_name = "metadata"];</code>
   * @return The metadata.
   */
  com.kyve.query.v1beta1.StakerMetadata getMetadata();
  /**
   * <pre>
   * metadata as logo, moniker, etc.
   * </pre>
   *
   * <code>.kyve.query.v1beta1.StakerMetadata metadata = 2 [json_name = "metadata"];</code>
   */
  com.kyve.query.v1beta1.StakerMetadataOrBuilder getMetadataOrBuilder();

  /**
   * <pre>
   * amount the staker has delegated to himself
   * </pre>
   *
   * <code>uint64 self_delegation = 3 [json_name = "selfDelegation"];</code>
   * @return The selfDelegation.
   */
  long getSelfDelegation();

  /**
   * <pre>
   * unbonding_amount is the amount the staker is currently unbonding
   * from the self-delegation.
   * This amount can be larger than `amount` when the staker
   * got slashed during unbonding. However, at the end of
   * the unbonding period this amount is double checked with the
   * remaining amount.
   * </pre>
   *
   * <code>uint64 self_delegation_unbonding = 4 [json_name = "selfDelegationUnbonding"];</code>
   * @return The selfDelegationUnbonding.
   */
  long getSelfDelegationUnbonding();

  /**
   * <pre>
   * total_delegation returns the sum of all $KYVE users
   * have delegated to this staker
   * </pre>
   *
   * <code>uint64 total_delegation = 5 [json_name = "totalDelegation"];</code>
   * @return The totalDelegation.
   */
  long getTotalDelegation();

  /**
   * <pre>
   * delegator_count is the total number of individual
   * delegator addresses for that user.
   * </pre>
   *
   * <code>uint64 delegator_count = 6 [json_name = "delegatorCount"];</code>
   * @return The delegatorCount.
   */
  long getDelegatorCount();

  /**
   * <pre>
   * pools is a list of all pools the staker is currently
   * participating, i.e. allowed to vote and upload data.
   * </pre>
   *
   * <code>repeated .kyve.query.v1beta1.PoolMembership pools = 7 [json_name = "pools"];</code>
   */
  java.util.List<com.kyve.query.v1beta1.PoolMembership> 
      getPoolsList();
  /**
   * <pre>
   * pools is a list of all pools the staker is currently
   * participating, i.e. allowed to vote and upload data.
   * </pre>
   *
   * <code>repeated .kyve.query.v1beta1.PoolMembership pools = 7 [json_name = "pools"];</code>
   */
  com.kyve.query.v1beta1.PoolMembership getPools(int index);
  /**
   * <pre>
   * pools is a list of all pools the staker is currently
   * participating, i.e. allowed to vote and upload data.
   * </pre>
   *
   * <code>repeated .kyve.query.v1beta1.PoolMembership pools = 7 [json_name = "pools"];</code>
   */
  int getPoolsCount();
  /**
   * <pre>
   * pools is a list of all pools the staker is currently
   * participating, i.e. allowed to vote and upload data.
   * </pre>
   *
   * <code>repeated .kyve.query.v1beta1.PoolMembership pools = 7 [json_name = "pools"];</code>
   */
  java.util.List<? extends com.kyve.query.v1beta1.PoolMembershipOrBuilder> 
      getPoolsOrBuilderList();
  /**
   * <pre>
   * pools is a list of all pools the staker is currently
   * participating, i.e. allowed to vote and upload data.
   * </pre>
   *
   * <code>repeated .kyve.query.v1beta1.PoolMembership pools = 7 [json_name = "pools"];</code>
   */
  com.kyve.query.v1beta1.PoolMembershipOrBuilder getPoolsOrBuilder(
      int index);
}
