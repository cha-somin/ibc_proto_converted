// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyve/query/v1beta1/query.proto

package com.kyve.query.v1beta1;

public interface BasicPoolOrBuilder extends
    // @@protoc_insertion_point(interface_extends:kyve.query.v1beta1.BasicPool)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * id is the ID of the pool
   * </pre>
   *
   * <code>uint64 id = 1 [json_name = "id"];</code>
   * @return The id.
   */
  long getId();

  /**
   * <pre>
   * name of the pool
   * </pre>
   *
   * <code>string name = 2 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * name of the pool
   * </pre>
   *
   * <code>string name = 2 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * runtime for the protocol nodes
   * like evm, bitcoin, etc.
   * </pre>
   *
   * <code>string runtime = 3 [json_name = "runtime"];</code>
   * @return The runtime.
   */
  java.lang.String getRuntime();
  /**
   * <pre>
   * runtime for the protocol nodes
   * like evm, bitcoin, etc.
   * </pre>
   *
   * <code>string runtime = 3 [json_name = "runtime"];</code>
   * @return The bytes for runtime.
   */
  com.google.protobuf.ByteString
      getRuntimeBytes();

  /**
   * <pre>
   * logo of the pool
   * </pre>
   *
   * <code>string logo = 4 [json_name = "logo"];</code>
   * @return The logo.
   */
  java.lang.String getLogo();
  /**
   * <pre>
   * logo of the pool
   * </pre>
   *
   * <code>string logo = 4 [json_name = "logo"];</code>
   * @return The bytes for logo.
   */
  com.google.protobuf.ByteString
      getLogoBytes();

  /**
   * <pre>
   * operating_cost is the base payout for each bundle reward
   * </pre>
   *
   * <code>uint64 operating_cost = 5 [json_name = "operatingCost"];</code>
   * @return The operatingCost.
   */
  long getOperatingCost();

  /**
   * <pre>
   * upload_interval is the interval bundles get created
   * </pre>
   *
   * <code>uint64 upload_interval = 6 [json_name = "uploadInterval"];</code>
   * @return The uploadInterval.
   */
  long getUploadInterval();

  /**
   * <pre>
   * total_funds of the pool. If the pool runs
   * out of funds no more bundles will be produced
   * </pre>
   *
   * <code>uint64 total_funds = 7 [json_name = "totalFunds"];</code>
   * @return The totalFunds.
   */
  long getTotalFunds();

  /**
   * <pre>
   * total_delegation of the pool
   * </pre>
   *
   * <code>uint64 total_delegation = 8 [json_name = "totalDelegation"];</code>
   * @return The totalDelegation.
   */
  long getTotalDelegation();

  /**
   * <pre>
   * status of the pool if pool is able
   * to produce bundles, etc.
   * </pre>
   *
   * <code>.kyve.pool.v1beta1.PoolStatus status = 9 [json_name = "status"];</code>
   * @return The enum numeric value on the wire for status.
   */
  int getStatusValue();
  /**
   * <pre>
   * status of the pool if pool is able
   * to produce bundles, etc.
   * </pre>
   *
   * <code>.kyve.pool.v1beta1.PoolStatus status = 9 [json_name = "status"];</code>
   * @return The status.
   */
  com.kyve.pool.v1beta1.PoolStatus getStatus();
}
