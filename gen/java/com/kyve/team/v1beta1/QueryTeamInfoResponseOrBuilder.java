// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kyve/team/v1beta1/query.proto

package com.kyve.team.v1beta1;

public interface QueryTeamInfoResponseOrBuilder extends
    // @@protoc_insertion_point(interface_extends:kyve.team.v1beta1.QueryTeamInfoResponse)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * foundation is the authority foundation address
   * </pre>
   *
   * <code>string foundation_authority = 1 [json_name = "foundationAuthority"];</code>
   * @return The foundationAuthority.
   */
  java.lang.String getFoundationAuthority();
  /**
   * <pre>
   * foundation is the authority foundation address
   * </pre>
   *
   * <code>string foundation_authority = 1 [json_name = "foundationAuthority"];</code>
   * @return The bytes for foundationAuthority.
   */
  com.google.protobuf.ByteString
      getFoundationAuthorityBytes();

  /**
   * <pre>
   * bcp is the authority bcp address
   * </pre>
   *
   * <code>string bcp_authority = 2 [json_name = "bcpAuthority"];</code>
   * @return The bcpAuthority.
   */
  java.lang.String getBcpAuthority();
  /**
   * <pre>
   * bcp is the authority bcp address
   * </pre>
   *
   * <code>string bcp_authority = 2 [json_name = "bcpAuthority"];</code>
   * @return The bytes for bcpAuthority.
   */
  com.google.protobuf.ByteString
      getBcpAuthorityBytes();

  /**
   * <pre>
   * total_team_allocation is the total allocation in $KYVE the team module has in order to reward team members
   * </pre>
   *
   * <code>uint64 total_team_allocation = 3 [json_name = "totalTeamAllocation"];</code>
   * @return The totalTeamAllocation.
   */
  long getTotalTeamAllocation();

  /**
   * <pre>
   * issued_team_allocation is the amount in $KYVE tied to team vesting accounts and which are not available anymore
   * </pre>
   *
   * <code>uint64 issued_team_allocation = 4 [json_name = "issuedTeamAllocation"];</code>
   * @return The issuedTeamAllocation.
   */
  long getIssuedTeamAllocation();

  /**
   * <pre>
   * available_team_allocation is the amount in $KYVE with which further team vesting accounts can be created.
   * if the available amount is zero no new vesting accounts can be created
   * </pre>
   *
   * <code>uint64 available_team_allocation = 5 [json_name = "availableTeamAllocation"];</code>
   * @return The availableTeamAllocation.
   */
  long getAvailableTeamAllocation();

  /**
   * <pre>
   * total_authority_rewards is the amount in $KYVE the authority has earned in total with inflation rewards.
   * Those rewards can be payed out for different purposes
   * </pre>
   *
   * <code>uint64 total_authority_rewards = 6 [json_name = "totalAuthorityRewards"];</code>
   * @return The totalAuthorityRewards.
   */
  long getTotalAuthorityRewards();

  /**
   * <pre>
   * claimed_authority_rewards is the amount in $KYVE of how much the authority already claimed
   * </pre>
   *
   * <code>uint64 claimed_authority_rewards = 7 [json_name = "claimedAuthorityRewards"];</code>
   * @return The claimedAuthorityRewards.
   */
  long getClaimedAuthorityRewards();

  /**
   * <pre>
   * available_authority_rewards is the amount in $KYVE of how much rewards the authority can claim right now
   * </pre>
   *
   * <code>uint64 available_authority_rewards = 8 [json_name = "availableAuthorityRewards"];</code>
   * @return The availableAuthorityRewards.
   */
  long getAvailableAuthorityRewards();

  /**
   * <pre>
   * total_account_rewards is the amount in $KYVE all team vesting accounts have ever received
   * </pre>
   *
   * <code>uint64 total_account_rewards = 9 [json_name = "totalAccountRewards"];</code>
   * @return The totalAccountRewards.
   */
  long getTotalAccountRewards();

  /**
   * <pre>
   * claimed_account_rewards is the amount in $KYVE all team vesting accounts have ever claimed
   * </pre>
   *
   * <code>uint64 claimed_account_rewards = 10 [json_name = "claimedAccountRewards"];</code>
   * @return The claimedAccountRewards.
   */
  long getClaimedAccountRewards();

  /**
   * <pre>
   * available_account_rewards is the total amount of $KYVE all team vesting accounts can currently claim
   * </pre>
   *
   * <code>uint64 available_account_rewards = 11 [json_name = "availableAccountRewards"];</code>
   * @return The availableAccountRewards.
   */
  long getAvailableAccountRewards();

  /**
   * <pre>
   * required_module_balance is the balance the team module should have. If this is less than the module balance
   * something went wrong
   * </pre>
   *
   * <code>uint64 required_module_balance = 12 [json_name = "requiredModuleBalance"];</code>
   * @return The requiredModuleBalance.
   */
  long getRequiredModuleBalance();

  /**
   * <pre>
   * team_module_balance is the team module balance in $KYVE
   * </pre>
   *
   * <code>uint64 team_module_balance = 13 [json_name = "teamModuleBalance"];</code>
   * @return The teamModuleBalance.
   */
  long getTeamModuleBalance();
}
