// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neutron/interchainqueries/tx.proto

package com.neutron.interchainqueries;

public interface MsgRegisterInterchainQueryOrBuilder extends
    // @@protoc_insertion_point(interface_extends:neutron.interchainqueries.MsgRegisterInterchainQuery)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * defines a query type: `kv` or `tx` now
   * </pre>
   *
   * <code>string query_type = 1 [json_name = "queryType"];</code>
   * @return The queryType.
   */
  java.lang.String getQueryType();
  /**
   * <pre>
   * defines a query type: `kv` or `tx` now
   * </pre>
   *
   * <code>string query_type = 1 [json_name = "queryType"];</code>
   * @return The bytes for queryType.
   */
  com.google.protobuf.ByteString
      getQueryTypeBytes();

  /**
   * <pre>
   * is used to define KV-storage keys for which we want to get values from
   * remote chain
   * </pre>
   *
   * <code>repeated .neutron.interchainqueries.KVKey keys = 2 [json_name = "keys"];</code>
   */
  java.util.List<com.neutron.interchainqueries.KVKey> 
      getKeysList();
  /**
   * <pre>
   * is used to define KV-storage keys for which we want to get values from
   * remote chain
   * </pre>
   *
   * <code>repeated .neutron.interchainqueries.KVKey keys = 2 [json_name = "keys"];</code>
   */
  com.neutron.interchainqueries.KVKey getKeys(int index);
  /**
   * <pre>
   * is used to define KV-storage keys for which we want to get values from
   * remote chain
   * </pre>
   *
   * <code>repeated .neutron.interchainqueries.KVKey keys = 2 [json_name = "keys"];</code>
   */
  int getKeysCount();
  /**
   * <pre>
   * is used to define KV-storage keys for which we want to get values from
   * remote chain
   * </pre>
   *
   * <code>repeated .neutron.interchainqueries.KVKey keys = 2 [json_name = "keys"];</code>
   */
  java.util.List<? extends com.neutron.interchainqueries.KVKeyOrBuilder> 
      getKeysOrBuilderList();
  /**
   * <pre>
   * is used to define KV-storage keys for which we want to get values from
   * remote chain
   * </pre>
   *
   * <code>repeated .neutron.interchainqueries.KVKey keys = 2 [json_name = "keys"];</code>
   */
  com.neutron.interchainqueries.KVKeyOrBuilder getKeysOrBuilder(
      int index);

  /**
   * <pre>
   * is used to define a filter for transaction search ICQ
   * </pre>
   *
   * <code>string transactions_filter = 3 [json_name = "transactionsFilter"];</code>
   * @return The transactionsFilter.
   */
  java.lang.String getTransactionsFilter();
  /**
   * <pre>
   * is used to define a filter for transaction search ICQ
   * </pre>
   *
   * <code>string transactions_filter = 3 [json_name = "transactionsFilter"];</code>
   * @return The bytes for transactionsFilter.
   */
  com.google.protobuf.ByteString
      getTransactionsFilterBytes();

  /**
   * <pre>
   * is IBC connection ID for getting ConsensusState to verify proofs
   * </pre>
   *
   * <code>string connection_id = 4 [json_name = "connectionId"];</code>
   * @return The connectionId.
   */
  java.lang.String getConnectionId();
  /**
   * <pre>
   * is IBC connection ID for getting ConsensusState to verify proofs
   * </pre>
   *
   * <code>string connection_id = 4 [json_name = "connectionId"];</code>
   * @return The bytes for connectionId.
   */
  com.google.protobuf.ByteString
      getConnectionIdBytes();

  /**
   * <pre>
   * is used to specify how often (in neutron blocks) the query must be updated
   * </pre>
   *
   * <code>uint64 update_period = 5 [json_name = "updatePeriod"];</code>
   * @return The updatePeriod.
   */
  long getUpdatePeriod();

  /**
   * <pre>
   * is the signer of the message
   * </pre>
   *
   * <code>string sender = 6 [json_name = "sender"];</code>
   * @return The sender.
   */
  java.lang.String getSender();
  /**
   * <pre>
   * is the signer of the message
   * </pre>
   *
   * <code>string sender = 6 [json_name = "sender"];</code>
   * @return The bytes for sender.
   */
  com.google.protobuf.ByteString
      getSenderBytes();
}
