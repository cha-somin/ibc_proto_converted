// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neutron/interchainqueries/tx.proto

package com.neutron.interchainqueries;

public interface StorageValueOrBuilder extends
    // @@protoc_insertion_point(interface_extends:neutron.interchainqueries.StorageValue)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * is the substore name (acc, staking, etc.)
   * </pre>
   *
   * <code>string storage_prefix = 1 [json_name = "storagePrefix"];</code>
   * @return The storagePrefix.
   */
  java.lang.String getStoragePrefix();
  /**
   * <pre>
   * is the substore name (acc, staking, etc.)
   * </pre>
   *
   * <code>string storage_prefix = 1 [json_name = "storagePrefix"];</code>
   * @return The bytes for storagePrefix.
   */
  com.google.protobuf.ByteString
      getStoragePrefixBytes();

  /**
   * <pre>
   * is the key in IAVL store
   * </pre>
   *
   * <code>bytes key = 2 [json_name = "key"];</code>
   * @return The key.
   */
  com.google.protobuf.ByteString getKey();

  /**
   * <pre>
   * is the value in IAVL store
   * </pre>
   *
   * <code>bytes value = 3 [json_name = "value"];</code>
   * @return The value.
   */
  com.google.protobuf.ByteString getValue();

  /**
   * <pre>
   * is the Merkle Proof which proves existence of key-value pair in IAVL
   * storage
   * </pre>
   *
   * <code>.tendermint.crypto.ProofOps Proof = 4 [json_name = "Proof"];</code>
   * @return Whether the proof field is set.
   */
  boolean hasProof();
  /**
   * <pre>
   * is the Merkle Proof which proves existence of key-value pair in IAVL
   * storage
   * </pre>
   *
   * <code>.tendermint.crypto.ProofOps Proof = 4 [json_name = "Proof"];</code>
   * @return The proof.
   */
  com.tendermint.crypto.ProofOps getProof();
  /**
   * <pre>
   * is the Merkle Proof which proves existence of key-value pair in IAVL
   * storage
   * </pre>
   *
   * <code>.tendermint.crypto.ProofOps Proof = 4 [json_name = "Proof"];</code>
   */
  com.tendermint.crypto.ProofOpsOrBuilder getProofOrBuilder();
}
