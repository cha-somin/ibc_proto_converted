// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neutron/dynamicfees/v1/params.proto

package com.neutron.dynamicfees.v1;

public final class ParamsProto {
  private ParamsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:neutron.dynamicfees.v1.Params)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * List of asset prices by the NTRN
     * it's used in cooperation with feemarket module
     * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
     * into a given asset
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
     */
    java.util.List<com.cosmos.base.v1beta1.CoinProto.DecCoin> 
        getNtrnPricesList();
    /**
     * <pre>
     * List of asset prices by the NTRN
     * it's used in cooperation with feemarket module
     * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
     * into a given asset
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
     */
    com.cosmos.base.v1beta1.CoinProto.DecCoin getNtrnPrices(int index);
    /**
     * <pre>
     * List of asset prices by the NTRN
     * it's used in cooperation with feemarket module
     * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
     * into a given asset
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
     */
    int getNtrnPricesCount();
    /**
     * <pre>
     * List of asset prices by the NTRN
     * it's used in cooperation with feemarket module
     * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
     * into a given asset
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
     */
    java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.DecCoinOrBuilder> 
        getNtrnPricesOrBuilderList();
    /**
     * <pre>
     * List of asset prices by the NTRN
     * it's used in cooperation with feemarket module
     * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
     * into a given asset
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
     */
    com.cosmos.base.v1beta1.CoinProto.DecCoinOrBuilder getNtrnPricesOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Params defines the parameters for the module.
   * </pre>
   *
   * Protobuf type {@code neutron.dynamicfees.v1.Params}
   */
  public static final class Params extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:neutron.dynamicfees.v1.Params)
      ParamsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Params.newBuilder() to construct.
    private Params(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Params() {
      ntrnPrices_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Params();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.neutron.dynamicfees.v1.ParamsProto.internal_static_neutron_dynamicfees_v1_Params_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.neutron.dynamicfees.v1.ParamsProto.internal_static_neutron_dynamicfees_v1_Params_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.neutron.dynamicfees.v1.ParamsProto.Params.class, com.neutron.dynamicfees.v1.ParamsProto.Params.Builder.class);
    }

    public static final int NTRN_PRICES_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<com.cosmos.base.v1beta1.CoinProto.DecCoin> ntrnPrices_;
    /**
     * <pre>
     * List of asset prices by the NTRN
     * it's used in cooperation with feemarket module
     * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
     * into a given asset
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
     */
    @java.lang.Override
    public java.util.List<com.cosmos.base.v1beta1.CoinProto.DecCoin> getNtrnPricesList() {
      return ntrnPrices_;
    }
    /**
     * <pre>
     * List of asset prices by the NTRN
     * it's used in cooperation with feemarket module
     * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
     * into a given asset
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.DecCoinOrBuilder> 
        getNtrnPricesOrBuilderList() {
      return ntrnPrices_;
    }
    /**
     * <pre>
     * List of asset prices by the NTRN
     * it's used in cooperation with feemarket module
     * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
     * into a given asset
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
     */
    @java.lang.Override
    public int getNtrnPricesCount() {
      return ntrnPrices_.size();
    }
    /**
     * <pre>
     * List of asset prices by the NTRN
     * it's used in cooperation with feemarket module
     * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
     * into a given asset
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
     */
    @java.lang.Override
    public com.cosmos.base.v1beta1.CoinProto.DecCoin getNtrnPrices(int index) {
      return ntrnPrices_.get(index);
    }
    /**
     * <pre>
     * List of asset prices by the NTRN
     * it's used in cooperation with feemarket module
     * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
     * into a given asset
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
     */
    @java.lang.Override
    public com.cosmos.base.v1beta1.CoinProto.DecCoinOrBuilder getNtrnPricesOrBuilder(
        int index) {
      return ntrnPrices_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < ntrnPrices_.size(); i++) {
        output.writeMessage(1, ntrnPrices_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < ntrnPrices_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, ntrnPrices_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.neutron.dynamicfees.v1.ParamsProto.Params)) {
        return super.equals(obj);
      }
      com.neutron.dynamicfees.v1.ParamsProto.Params other = (com.neutron.dynamicfees.v1.ParamsProto.Params) obj;

      if (!getNtrnPricesList()
          .equals(other.getNtrnPricesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getNtrnPricesCount() > 0) {
        hash = (37 * hash) + NTRN_PRICES_FIELD_NUMBER;
        hash = (53 * hash) + getNtrnPricesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.neutron.dynamicfees.v1.ParamsProto.Params parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.neutron.dynamicfees.v1.ParamsProto.Params parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.neutron.dynamicfees.v1.ParamsProto.Params parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.neutron.dynamicfees.v1.ParamsProto.Params parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.neutron.dynamicfees.v1.ParamsProto.Params parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.neutron.dynamicfees.v1.ParamsProto.Params parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.neutron.dynamicfees.v1.ParamsProto.Params parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.neutron.dynamicfees.v1.ParamsProto.Params parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.neutron.dynamicfees.v1.ParamsProto.Params parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.neutron.dynamicfees.v1.ParamsProto.Params parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.neutron.dynamicfees.v1.ParamsProto.Params parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.neutron.dynamicfees.v1.ParamsProto.Params parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.neutron.dynamicfees.v1.ParamsProto.Params prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Params defines the parameters for the module.
     * </pre>
     *
     * Protobuf type {@code neutron.dynamicfees.v1.Params}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:neutron.dynamicfees.v1.Params)
        com.neutron.dynamicfees.v1.ParamsProto.ParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.neutron.dynamicfees.v1.ParamsProto.internal_static_neutron_dynamicfees_v1_Params_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.neutron.dynamicfees.v1.ParamsProto.internal_static_neutron_dynamicfees_v1_Params_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.neutron.dynamicfees.v1.ParamsProto.Params.class, com.neutron.dynamicfees.v1.ParamsProto.Params.Builder.class);
      }

      // Construct using com.neutron.dynamicfees.v1.ParamsProto.Params.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (ntrnPricesBuilder_ == null) {
          ntrnPrices_ = java.util.Collections.emptyList();
        } else {
          ntrnPrices_ = null;
          ntrnPricesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.neutron.dynamicfees.v1.ParamsProto.internal_static_neutron_dynamicfees_v1_Params_descriptor;
      }

      @java.lang.Override
      public com.neutron.dynamicfees.v1.ParamsProto.Params getDefaultInstanceForType() {
        return com.neutron.dynamicfees.v1.ParamsProto.Params.getDefaultInstance();
      }

      @java.lang.Override
      public com.neutron.dynamicfees.v1.ParamsProto.Params build() {
        com.neutron.dynamicfees.v1.ParamsProto.Params result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.neutron.dynamicfees.v1.ParamsProto.Params buildPartial() {
        com.neutron.dynamicfees.v1.ParamsProto.Params result = new com.neutron.dynamicfees.v1.ParamsProto.Params(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.neutron.dynamicfees.v1.ParamsProto.Params result) {
        if (ntrnPricesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            ntrnPrices_ = java.util.Collections.unmodifiableList(ntrnPrices_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.ntrnPrices_ = ntrnPrices_;
        } else {
          result.ntrnPrices_ = ntrnPricesBuilder_.build();
        }
      }

      private void buildPartial0(com.neutron.dynamicfees.v1.ParamsProto.Params result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.neutron.dynamicfees.v1.ParamsProto.Params) {
          return mergeFrom((com.neutron.dynamicfees.v1.ParamsProto.Params)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.neutron.dynamicfees.v1.ParamsProto.Params other) {
        if (other == com.neutron.dynamicfees.v1.ParamsProto.Params.getDefaultInstance()) return this;
        if (ntrnPricesBuilder_ == null) {
          if (!other.ntrnPrices_.isEmpty()) {
            if (ntrnPrices_.isEmpty()) {
              ntrnPrices_ = other.ntrnPrices_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureNtrnPricesIsMutable();
              ntrnPrices_.addAll(other.ntrnPrices_);
            }
            onChanged();
          }
        } else {
          if (!other.ntrnPrices_.isEmpty()) {
            if (ntrnPricesBuilder_.isEmpty()) {
              ntrnPricesBuilder_.dispose();
              ntrnPricesBuilder_ = null;
              ntrnPrices_ = other.ntrnPrices_;
              bitField0_ = (bitField0_ & ~0x00000001);
              ntrnPricesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getNtrnPricesFieldBuilder() : null;
            } else {
              ntrnPricesBuilder_.addAllMessages(other.ntrnPrices_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.cosmos.base.v1beta1.CoinProto.DecCoin m =
                    input.readMessage(
                        com.cosmos.base.v1beta1.CoinProto.DecCoin.parser(),
                        extensionRegistry);
                if (ntrnPricesBuilder_ == null) {
                  ensureNtrnPricesIsMutable();
                  ntrnPrices_.add(m);
                } else {
                  ntrnPricesBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<com.cosmos.base.v1beta1.CoinProto.DecCoin> ntrnPrices_ =
        java.util.Collections.emptyList();
      private void ensureNtrnPricesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          ntrnPrices_ = new java.util.ArrayList<com.cosmos.base.v1beta1.CoinProto.DecCoin>(ntrnPrices_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.base.v1beta1.CoinProto.DecCoin, com.cosmos.base.v1beta1.CoinProto.DecCoin.Builder, com.cosmos.base.v1beta1.CoinProto.DecCoinOrBuilder> ntrnPricesBuilder_;

      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public java.util.List<com.cosmos.base.v1beta1.CoinProto.DecCoin> getNtrnPricesList() {
        if (ntrnPricesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(ntrnPrices_);
        } else {
          return ntrnPricesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public int getNtrnPricesCount() {
        if (ntrnPricesBuilder_ == null) {
          return ntrnPrices_.size();
        } else {
          return ntrnPricesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.DecCoin getNtrnPrices(int index) {
        if (ntrnPricesBuilder_ == null) {
          return ntrnPrices_.get(index);
        } else {
          return ntrnPricesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public Builder setNtrnPrices(
          int index, com.cosmos.base.v1beta1.CoinProto.DecCoin value) {
        if (ntrnPricesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNtrnPricesIsMutable();
          ntrnPrices_.set(index, value);
          onChanged();
        } else {
          ntrnPricesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public Builder setNtrnPrices(
          int index, com.cosmos.base.v1beta1.CoinProto.DecCoin.Builder builderForValue) {
        if (ntrnPricesBuilder_ == null) {
          ensureNtrnPricesIsMutable();
          ntrnPrices_.set(index, builderForValue.build());
          onChanged();
        } else {
          ntrnPricesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public Builder addNtrnPrices(com.cosmos.base.v1beta1.CoinProto.DecCoin value) {
        if (ntrnPricesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNtrnPricesIsMutable();
          ntrnPrices_.add(value);
          onChanged();
        } else {
          ntrnPricesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public Builder addNtrnPrices(
          int index, com.cosmos.base.v1beta1.CoinProto.DecCoin value) {
        if (ntrnPricesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNtrnPricesIsMutable();
          ntrnPrices_.add(index, value);
          onChanged();
        } else {
          ntrnPricesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public Builder addNtrnPrices(
          com.cosmos.base.v1beta1.CoinProto.DecCoin.Builder builderForValue) {
        if (ntrnPricesBuilder_ == null) {
          ensureNtrnPricesIsMutable();
          ntrnPrices_.add(builderForValue.build());
          onChanged();
        } else {
          ntrnPricesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public Builder addNtrnPrices(
          int index, com.cosmos.base.v1beta1.CoinProto.DecCoin.Builder builderForValue) {
        if (ntrnPricesBuilder_ == null) {
          ensureNtrnPricesIsMutable();
          ntrnPrices_.add(index, builderForValue.build());
          onChanged();
        } else {
          ntrnPricesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public Builder addAllNtrnPrices(
          java.lang.Iterable<? extends com.cosmos.base.v1beta1.CoinProto.DecCoin> values) {
        if (ntrnPricesBuilder_ == null) {
          ensureNtrnPricesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, ntrnPrices_);
          onChanged();
        } else {
          ntrnPricesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public Builder clearNtrnPrices() {
        if (ntrnPricesBuilder_ == null) {
          ntrnPrices_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          ntrnPricesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public Builder removeNtrnPrices(int index) {
        if (ntrnPricesBuilder_ == null) {
          ensureNtrnPricesIsMutable();
          ntrnPrices_.remove(index);
          onChanged();
        } else {
          ntrnPricesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.DecCoin.Builder getNtrnPricesBuilder(
          int index) {
        return getNtrnPricesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.DecCoinOrBuilder getNtrnPricesOrBuilder(
          int index) {
        if (ntrnPricesBuilder_ == null) {
          return ntrnPrices_.get(index);  } else {
          return ntrnPricesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.DecCoinOrBuilder> 
           getNtrnPricesOrBuilderList() {
        if (ntrnPricesBuilder_ != null) {
          return ntrnPricesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(ntrnPrices_);
        }
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.DecCoin.Builder addNtrnPricesBuilder() {
        return getNtrnPricesFieldBuilder().addBuilder(
            com.cosmos.base.v1beta1.CoinProto.DecCoin.getDefaultInstance());
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.DecCoin.Builder addNtrnPricesBuilder(
          int index) {
        return getNtrnPricesFieldBuilder().addBuilder(
            index, com.cosmos.base.v1beta1.CoinProto.DecCoin.getDefaultInstance());
      }
      /**
       * <pre>
       * List of asset prices by the NTRN
       * it's used in cooperation with feemarket module
       * ntrn_prices is a data source to convert gas_price from feemarket's base_denom (untrn)
       * into a given asset
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.DecCoin ntrn_prices = 1 [json_name = "ntrnPrices", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
       */
      public java.util.List<com.cosmos.base.v1beta1.CoinProto.DecCoin.Builder> 
           getNtrnPricesBuilderList() {
        return getNtrnPricesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.base.v1beta1.CoinProto.DecCoin, com.cosmos.base.v1beta1.CoinProto.DecCoin.Builder, com.cosmos.base.v1beta1.CoinProto.DecCoinOrBuilder> 
          getNtrnPricesFieldBuilder() {
        if (ntrnPricesBuilder_ == null) {
          ntrnPricesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.cosmos.base.v1beta1.CoinProto.DecCoin, com.cosmos.base.v1beta1.CoinProto.DecCoin.Builder, com.cosmos.base.v1beta1.CoinProto.DecCoinOrBuilder>(
                  ntrnPrices_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          ntrnPrices_ = null;
        }
        return ntrnPricesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:neutron.dynamicfees.v1.Params)
    }

    // @@protoc_insertion_point(class_scope:neutron.dynamicfees.v1.Params)
    private static final com.neutron.dynamicfees.v1.ParamsProto.Params DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.neutron.dynamicfees.v1.ParamsProto.Params();
    }

    public static com.neutron.dynamicfees.v1.ParamsProto.Params getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Params>
        PARSER = new com.google.protobuf.AbstractParser<Params>() {
      @java.lang.Override
      public Params parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Params> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Params> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.neutron.dynamicfees.v1.ParamsProto.Params getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_neutron_dynamicfees_v1_Params_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_neutron_dynamicfees_v1_Params_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n#neutron/dynamicfees/v1/params.proto\022\026n" +
      "eutron.dynamicfees.v1\032\036cosmos/base/v1bet" +
      "a1/coin.proto\032\024gogoproto/gogo.proto\"\202\001\n\006" +
      "Params\022r\n\013ntrn_prices\030\001 \003(\0132\034.cosmos.bas" +
      "e.v1beta1.DecCoinB3\310\336\037\000\252\337\037+github.com/co" +
      "smos/cosmos-sdk/types.DecCoinsR\nntrnPric" +
      "es:\004\230\240\037\000B\330\001\n\032com.neutron.dynamicfees.v1B" +
      "\013ParamsProtoZ5github.com/neutron-org/neu" +
      "tron/v4/x/dynamicfees/types\242\002\003NDX\252\002\026Neut" +
      "ron.Dynamicfees.V1\312\002\026Neutron\\Dynamicfees" +
      "\\V1\342\002\"Neutron\\Dynamicfees\\V1\\GPBMetadata" +
      "\352\002\030Neutron::Dynamicfees::V1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.cosmos.base.v1beta1.CoinProto.getDescriptor(),
          com.gogoproto.GogoProto.getDescriptor(),
        });
    internal_static_neutron_dynamicfees_v1_Params_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_neutron_dynamicfees_v1_Params_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_neutron_dynamicfees_v1_Params_descriptor,
        new java.lang.String[] { "NtrnPrices", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.gogoproto.GogoProto.castrepeated);
    registry.add(com.gogoproto.GogoProto.goprotoStringer);
    registry.add(com.gogoproto.GogoProto.nullable);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.cosmos.base.v1beta1.CoinProto.getDescriptor();
    com.gogoproto.GogoProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
