// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zrchain/treasury/wallet.proto

package com.zrchain.treasury;

public final class WalletProto {
  private WalletProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * WalletType specifies the Layer 1 blockchain that this wallet will be used
   * for.
   * </pre>
   *
   * Protobuf enum {@code zrchain.treasury.WalletType}
   */
  public enum WalletType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * The wallet type is missing (all wallets will be derived)
     * </pre>
     *
     * <code>WALLET_TYPE_UNSPECIFIED = 0;</code>
     */
    WALLET_TYPE_UNSPECIFIED(0),
    /**
     * <pre>
     * The wallet type for native cosmos accounts
     * </pre>
     *
     * <code>WALLET_TYPE_NATIVE = 1;</code>
     */
    WALLET_TYPE_NATIVE(1),
    /**
     * <pre>
     * The wallet type for mainnet ETH and its ERC-20 tokens
     * </pre>
     *
     * <code>WALLET_TYPE_EVM = 2;</code>
     */
    WALLET_TYPE_EVM(2),
    /**
     * <pre>
     * The Wallet type for Testnet BTC
     * </pre>
     *
     * <code>WALLET_TYPE_BTC_TESTNET = 3;</code>
     */
    WALLET_TYPE_BTC_TESTNET(3),
    /**
     * <pre>
     * The Wallet type for Mainnet BTC
     * </pre>
     *
     * <code>WALLET_TYPE_BTC_MAINNET = 4;</code>
     */
    WALLET_TYPE_BTC_MAINNET(4),
    /**
     * <pre>
     * The Wallet type for RegNet - Local Test Network
     * </pre>
     *
     * <code>WALLET_TYPE_BTC_REGNET = 5;</code>
     */
    WALLET_TYPE_BTC_REGNET(5),
    /**
     * <pre>
     * Wallet type for Solana
     * </pre>
     *
     * <code>WALLET_TYPE_SOLANA = 6;</code>
     */
    WALLET_TYPE_SOLANA(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * The wallet type is missing (all wallets will be derived)
     * </pre>
     *
     * <code>WALLET_TYPE_UNSPECIFIED = 0;</code>
     */
    public static final int WALLET_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     * <pre>
     * The wallet type for native cosmos accounts
     * </pre>
     *
     * <code>WALLET_TYPE_NATIVE = 1;</code>
     */
    public static final int WALLET_TYPE_NATIVE_VALUE = 1;
    /**
     * <pre>
     * The wallet type for mainnet ETH and its ERC-20 tokens
     * </pre>
     *
     * <code>WALLET_TYPE_EVM = 2;</code>
     */
    public static final int WALLET_TYPE_EVM_VALUE = 2;
    /**
     * <pre>
     * The Wallet type for Testnet BTC
     * </pre>
     *
     * <code>WALLET_TYPE_BTC_TESTNET = 3;</code>
     */
    public static final int WALLET_TYPE_BTC_TESTNET_VALUE = 3;
    /**
     * <pre>
     * The Wallet type for Mainnet BTC
     * </pre>
     *
     * <code>WALLET_TYPE_BTC_MAINNET = 4;</code>
     */
    public static final int WALLET_TYPE_BTC_MAINNET_VALUE = 4;
    /**
     * <pre>
     * The Wallet type for RegNet - Local Test Network
     * </pre>
     *
     * <code>WALLET_TYPE_BTC_REGNET = 5;</code>
     */
    public static final int WALLET_TYPE_BTC_REGNET_VALUE = 5;
    /**
     * <pre>
     * Wallet type for Solana
     * </pre>
     *
     * <code>WALLET_TYPE_SOLANA = 6;</code>
     */
    public static final int WALLET_TYPE_SOLANA_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static WalletType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static WalletType forNumber(int value) {
      switch (value) {
        case 0: return WALLET_TYPE_UNSPECIFIED;
        case 1: return WALLET_TYPE_NATIVE;
        case 2: return WALLET_TYPE_EVM;
        case 3: return WALLET_TYPE_BTC_TESTNET;
        case 4: return WALLET_TYPE_BTC_MAINNET;
        case 5: return WALLET_TYPE_BTC_REGNET;
        case 6: return WALLET_TYPE_SOLANA;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<WalletType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        WalletType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<WalletType>() {
            public WalletType findValueByNumber(int number) {
              return WalletType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.zrchain.treasury.WalletProto.getDescriptor().getEnumTypes().get(0);
    }

    private static final WalletType[] VALUES = values();

    public static WalletType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private WalletType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:zrchain.treasury.WalletType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\035zrchain/treasury/wallet.proto\022\020zrchain" +
      ".treasury*\304\001\n\nWalletType\022\033\n\027WALLET_TYPE_" +
      "UNSPECIFIED\020\000\022\026\n\022WALLET_TYPE_NATIVE\020\001\022\023\n" +
      "\017WALLET_TYPE_EVM\020\002\022\033\n\027WALLET_TYPE_BTC_TE" +
      "STNET\020\003\022\033\n\027WALLET_TYPE_BTC_MAINNET\020\004\022\032\n\026" +
      "WALLET_TYPE_BTC_REGNET\020\005\022\026\n\022WALLET_TYPE_" +
      "SOLANA\020\006B\275\001\n\024com.zrchain.treasuryB\013Walle" +
      "tProtoZ9github.com/Zenrock-Foundation/zr" +
      "chain/v5/x/treasury/types\242\002\003ZTX\252\002\020Zrchai" +
      "n.Treasury\312\002\020Zrchain\\Treasury\342\002\034Zrchain\\" +
      "Treasury\\GPBMetadata\352\002\021Zrchain::Treasury" +
      "b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
