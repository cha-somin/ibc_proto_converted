// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: irismod/nft/nft.proto

package com.irismod.nft;

/**
 * <pre>
 * Collection defines a type of collection
 * </pre>
 *
 * Protobuf type {@code irismod.nft.Collection}
 */
public final class Collection extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:irismod.nft.Collection)
    CollectionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Collection.newBuilder() to construct.
  private Collection(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Collection() {
    nfts_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Collection();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.irismod.nft.NftProto.internal_static_irismod_nft_Collection_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.irismod.nft.NftProto.internal_static_irismod_nft_Collection_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.irismod.nft.Collection.class, com.irismod.nft.Collection.Builder.class);
  }

  public static final int DENOM_FIELD_NUMBER = 1;
  private com.irismod.nft.Denom denom_;
  /**
   * <code>.irismod.nft.Denom denom = 1 [json_name = "denom", (.gogoproto.nullable) = false];</code>
   * @return Whether the denom field is set.
   */
  @java.lang.Override
  public boolean hasDenom() {
    return denom_ != null;
  }
  /**
   * <code>.irismod.nft.Denom denom = 1 [json_name = "denom", (.gogoproto.nullable) = false];</code>
   * @return The denom.
   */
  @java.lang.Override
  public com.irismod.nft.Denom getDenom() {
    return denom_ == null ? com.irismod.nft.Denom.getDefaultInstance() : denom_;
  }
  /**
   * <code>.irismod.nft.Denom denom = 1 [json_name = "denom", (.gogoproto.nullable) = false];</code>
   */
  @java.lang.Override
  public com.irismod.nft.DenomOrBuilder getDenomOrBuilder() {
    return denom_ == null ? com.irismod.nft.Denom.getDefaultInstance() : denom_;
  }

  public static final int NFTS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<com.irismod.nft.BaseNFT> nfts_;
  /**
   * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
   */
  @java.lang.Override
  public java.util.List<com.irismod.nft.BaseNFT> getNftsList() {
    return nfts_;
  }
  /**
   * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.irismod.nft.BaseNFTOrBuilder> 
      getNftsOrBuilderList() {
    return nfts_;
  }
  /**
   * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
   */
  @java.lang.Override
  public int getNftsCount() {
    return nfts_.size();
  }
  /**
   * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
   */
  @java.lang.Override
  public com.irismod.nft.BaseNFT getNfts(int index) {
    return nfts_.get(index);
  }
  /**
   * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
   */
  @java.lang.Override
  public com.irismod.nft.BaseNFTOrBuilder getNftsOrBuilder(
      int index) {
    return nfts_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (denom_ != null) {
      output.writeMessage(1, getDenom());
    }
    for (int i = 0; i < nfts_.size(); i++) {
      output.writeMessage(2, nfts_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (denom_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getDenom());
    }
    for (int i = 0; i < nfts_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, nfts_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.irismod.nft.Collection)) {
      return super.equals(obj);
    }
    com.irismod.nft.Collection other = (com.irismod.nft.Collection) obj;

    if (hasDenom() != other.hasDenom()) return false;
    if (hasDenom()) {
      if (!getDenom()
          .equals(other.getDenom())) return false;
    }
    if (!getNftsList()
        .equals(other.getNftsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasDenom()) {
      hash = (37 * hash) + DENOM_FIELD_NUMBER;
      hash = (53 * hash) + getDenom().hashCode();
    }
    if (getNftsCount() > 0) {
      hash = (37 * hash) + NFTS_FIELD_NUMBER;
      hash = (53 * hash) + getNftsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.irismod.nft.Collection parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.irismod.nft.Collection parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.irismod.nft.Collection parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.irismod.nft.Collection parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.irismod.nft.Collection parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.irismod.nft.Collection parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.irismod.nft.Collection parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.irismod.nft.Collection parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.irismod.nft.Collection parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.irismod.nft.Collection parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.irismod.nft.Collection parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.irismod.nft.Collection parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.irismod.nft.Collection prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Collection defines a type of collection
   * </pre>
   *
   * Protobuf type {@code irismod.nft.Collection}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:irismod.nft.Collection)
      com.irismod.nft.CollectionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.irismod.nft.NftProto.internal_static_irismod_nft_Collection_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.irismod.nft.NftProto.internal_static_irismod_nft_Collection_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.irismod.nft.Collection.class, com.irismod.nft.Collection.Builder.class);
    }

    // Construct using com.irismod.nft.Collection.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      denom_ = null;
      if (denomBuilder_ != null) {
        denomBuilder_.dispose();
        denomBuilder_ = null;
      }
      if (nftsBuilder_ == null) {
        nfts_ = java.util.Collections.emptyList();
      } else {
        nfts_ = null;
        nftsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.irismod.nft.NftProto.internal_static_irismod_nft_Collection_descriptor;
    }

    @java.lang.Override
    public com.irismod.nft.Collection getDefaultInstanceForType() {
      return com.irismod.nft.Collection.getDefaultInstance();
    }

    @java.lang.Override
    public com.irismod.nft.Collection build() {
      com.irismod.nft.Collection result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.irismod.nft.Collection buildPartial() {
      com.irismod.nft.Collection result = new com.irismod.nft.Collection(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.irismod.nft.Collection result) {
      if (nftsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          nfts_ = java.util.Collections.unmodifiableList(nfts_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.nfts_ = nfts_;
      } else {
        result.nfts_ = nftsBuilder_.build();
      }
    }

    private void buildPartial0(com.irismod.nft.Collection result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.denom_ = denomBuilder_ == null
            ? denom_
            : denomBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.irismod.nft.Collection) {
        return mergeFrom((com.irismod.nft.Collection)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.irismod.nft.Collection other) {
      if (other == com.irismod.nft.Collection.getDefaultInstance()) return this;
      if (other.hasDenom()) {
        mergeDenom(other.getDenom());
      }
      if (nftsBuilder_ == null) {
        if (!other.nfts_.isEmpty()) {
          if (nfts_.isEmpty()) {
            nfts_ = other.nfts_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureNftsIsMutable();
            nfts_.addAll(other.nfts_);
          }
          onChanged();
        }
      } else {
        if (!other.nfts_.isEmpty()) {
          if (nftsBuilder_.isEmpty()) {
            nftsBuilder_.dispose();
            nftsBuilder_ = null;
            nfts_ = other.nfts_;
            bitField0_ = (bitField0_ & ~0x00000002);
            nftsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getNftsFieldBuilder() : null;
          } else {
            nftsBuilder_.addAllMessages(other.nfts_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getDenomFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              com.irismod.nft.BaseNFT m =
                  input.readMessage(
                      com.irismod.nft.BaseNFT.parser(),
                      extensionRegistry);
              if (nftsBuilder_ == null) {
                ensureNftsIsMutable();
                nfts_.add(m);
              } else {
                nftsBuilder_.addMessage(m);
              }
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.irismod.nft.Denom denom_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.irismod.nft.Denom, com.irismod.nft.Denom.Builder, com.irismod.nft.DenomOrBuilder> denomBuilder_;
    /**
     * <code>.irismod.nft.Denom denom = 1 [json_name = "denom", (.gogoproto.nullable) = false];</code>
     * @return Whether the denom field is set.
     */
    public boolean hasDenom() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.irismod.nft.Denom denom = 1 [json_name = "denom", (.gogoproto.nullable) = false];</code>
     * @return The denom.
     */
    public com.irismod.nft.Denom getDenom() {
      if (denomBuilder_ == null) {
        return denom_ == null ? com.irismod.nft.Denom.getDefaultInstance() : denom_;
      } else {
        return denomBuilder_.getMessage();
      }
    }
    /**
     * <code>.irismod.nft.Denom denom = 1 [json_name = "denom", (.gogoproto.nullable) = false];</code>
     */
    public Builder setDenom(com.irismod.nft.Denom value) {
      if (denomBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        denom_ = value;
      } else {
        denomBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.irismod.nft.Denom denom = 1 [json_name = "denom", (.gogoproto.nullable) = false];</code>
     */
    public Builder setDenom(
        com.irismod.nft.Denom.Builder builderForValue) {
      if (denomBuilder_ == null) {
        denom_ = builderForValue.build();
      } else {
        denomBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.irismod.nft.Denom denom = 1 [json_name = "denom", (.gogoproto.nullable) = false];</code>
     */
    public Builder mergeDenom(com.irismod.nft.Denom value) {
      if (denomBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          denom_ != null &&
          denom_ != com.irismod.nft.Denom.getDefaultInstance()) {
          getDenomBuilder().mergeFrom(value);
        } else {
          denom_ = value;
        }
      } else {
        denomBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.irismod.nft.Denom denom = 1 [json_name = "denom", (.gogoproto.nullable) = false];</code>
     */
    public Builder clearDenom() {
      bitField0_ = (bitField0_ & ~0x00000001);
      denom_ = null;
      if (denomBuilder_ != null) {
        denomBuilder_.dispose();
        denomBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.irismod.nft.Denom denom = 1 [json_name = "denom", (.gogoproto.nullable) = false];</code>
     */
    public com.irismod.nft.Denom.Builder getDenomBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getDenomFieldBuilder().getBuilder();
    }
    /**
     * <code>.irismod.nft.Denom denom = 1 [json_name = "denom", (.gogoproto.nullable) = false];</code>
     */
    public com.irismod.nft.DenomOrBuilder getDenomOrBuilder() {
      if (denomBuilder_ != null) {
        return denomBuilder_.getMessageOrBuilder();
      } else {
        return denom_ == null ?
            com.irismod.nft.Denom.getDefaultInstance() : denom_;
      }
    }
    /**
     * <code>.irismod.nft.Denom denom = 1 [json_name = "denom", (.gogoproto.nullable) = false];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.irismod.nft.Denom, com.irismod.nft.Denom.Builder, com.irismod.nft.DenomOrBuilder> 
        getDenomFieldBuilder() {
      if (denomBuilder_ == null) {
        denomBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.irismod.nft.Denom, com.irismod.nft.Denom.Builder, com.irismod.nft.DenomOrBuilder>(
                getDenom(),
                getParentForChildren(),
                isClean());
        denom_ = null;
      }
      return denomBuilder_;
    }

    private java.util.List<com.irismod.nft.BaseNFT> nfts_ =
      java.util.Collections.emptyList();
    private void ensureNftsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        nfts_ = new java.util.ArrayList<com.irismod.nft.BaseNFT>(nfts_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.irismod.nft.BaseNFT, com.irismod.nft.BaseNFT.Builder, com.irismod.nft.BaseNFTOrBuilder> nftsBuilder_;

    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public java.util.List<com.irismod.nft.BaseNFT> getNftsList() {
      if (nftsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(nfts_);
      } else {
        return nftsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public int getNftsCount() {
      if (nftsBuilder_ == null) {
        return nfts_.size();
      } else {
        return nftsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public com.irismod.nft.BaseNFT getNfts(int index) {
      if (nftsBuilder_ == null) {
        return nfts_.get(index);
      } else {
        return nftsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public Builder setNfts(
        int index, com.irismod.nft.BaseNFT value) {
      if (nftsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNftsIsMutable();
        nfts_.set(index, value);
        onChanged();
      } else {
        nftsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public Builder setNfts(
        int index, com.irismod.nft.BaseNFT.Builder builderForValue) {
      if (nftsBuilder_ == null) {
        ensureNftsIsMutable();
        nfts_.set(index, builderForValue.build());
        onChanged();
      } else {
        nftsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public Builder addNfts(com.irismod.nft.BaseNFT value) {
      if (nftsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNftsIsMutable();
        nfts_.add(value);
        onChanged();
      } else {
        nftsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public Builder addNfts(
        int index, com.irismod.nft.BaseNFT value) {
      if (nftsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNftsIsMutable();
        nfts_.add(index, value);
        onChanged();
      } else {
        nftsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public Builder addNfts(
        com.irismod.nft.BaseNFT.Builder builderForValue) {
      if (nftsBuilder_ == null) {
        ensureNftsIsMutable();
        nfts_.add(builderForValue.build());
        onChanged();
      } else {
        nftsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public Builder addNfts(
        int index, com.irismod.nft.BaseNFT.Builder builderForValue) {
      if (nftsBuilder_ == null) {
        ensureNftsIsMutable();
        nfts_.add(index, builderForValue.build());
        onChanged();
      } else {
        nftsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public Builder addAllNfts(
        java.lang.Iterable<? extends com.irismod.nft.BaseNFT> values) {
      if (nftsBuilder_ == null) {
        ensureNftsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, nfts_);
        onChanged();
      } else {
        nftsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public Builder clearNfts() {
      if (nftsBuilder_ == null) {
        nfts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        nftsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public Builder removeNfts(int index) {
      if (nftsBuilder_ == null) {
        ensureNftsIsMutable();
        nfts_.remove(index);
        onChanged();
      } else {
        nftsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public com.irismod.nft.BaseNFT.Builder getNftsBuilder(
        int index) {
      return getNftsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public com.irismod.nft.BaseNFTOrBuilder getNftsOrBuilder(
        int index) {
      if (nftsBuilder_ == null) {
        return nfts_.get(index);  } else {
        return nftsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public java.util.List<? extends com.irismod.nft.BaseNFTOrBuilder> 
         getNftsOrBuilderList() {
      if (nftsBuilder_ != null) {
        return nftsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(nfts_);
      }
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public com.irismod.nft.BaseNFT.Builder addNftsBuilder() {
      return getNftsFieldBuilder().addBuilder(
          com.irismod.nft.BaseNFT.getDefaultInstance());
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public com.irismod.nft.BaseNFT.Builder addNftsBuilder(
        int index) {
      return getNftsFieldBuilder().addBuilder(
          index, com.irismod.nft.BaseNFT.getDefaultInstance());
    }
    /**
     * <code>repeated .irismod.nft.BaseNFT nfts = 2 [json_name = "nfts", (.gogoproto.nullable) = false, (.gogoproto.customname) = "NFTs"];</code>
     */
    public java.util.List<com.irismod.nft.BaseNFT.Builder> 
         getNftsBuilderList() {
      return getNftsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.irismod.nft.BaseNFT, com.irismod.nft.BaseNFT.Builder, com.irismod.nft.BaseNFTOrBuilder> 
        getNftsFieldBuilder() {
      if (nftsBuilder_ == null) {
        nftsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.irismod.nft.BaseNFT, com.irismod.nft.BaseNFT.Builder, com.irismod.nft.BaseNFTOrBuilder>(
                nfts_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        nfts_ = null;
      }
      return nftsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:irismod.nft.Collection)
  }

  // @@protoc_insertion_point(class_scope:irismod.nft.Collection)
  private static final com.irismod.nft.Collection DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.irismod.nft.Collection();
  }

  public static com.irismod.nft.Collection getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Collection>
      PARSER = new com.google.protobuf.AbstractParser<Collection>() {
    @java.lang.Override
    public Collection parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Collection> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Collection> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.irismod.nft.Collection getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

