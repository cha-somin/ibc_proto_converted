// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: axelar/evm/v1beta1/params.proto

package com.axelar.evm.v1beta1;

public interface ParamsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:axelar.evm.v1beta1.Params)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string chain = 1 [json_name = "chain", (.gogoproto.casttype) = "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName"];</code>
   * @return The chain.
   */
  java.lang.String getChain();
  /**
   * <code>string chain = 1 [json_name = "chain", (.gogoproto.casttype) = "github.com/axelarnetwork/axelar-core/x/nexus/exported.ChainName"];</code>
   * @return The bytes for chain.
   */
  com.google.protobuf.ByteString
      getChainBytes();

  /**
   * <code>uint64 confirmation_height = 2 [json_name = "confirmationHeight"];</code>
   * @return The confirmationHeight.
   */
  long getConfirmationHeight();

  /**
   * <code>string network = 3 [json_name = "network"];</code>
   * @return The network.
   */
  java.lang.String getNetwork();
  /**
   * <code>string network = 3 [json_name = "network"];</code>
   * @return The bytes for network.
   */
  com.google.protobuf.ByteString
      getNetworkBytes();

  /**
   * <code>bytes token_code = 5 [json_name = "tokenCode"];</code>
   * @return The tokenCode.
   */
  com.google.protobuf.ByteString getTokenCode();

  /**
   * <code>bytes burnable = 6 [json_name = "burnable"];</code>
   * @return The burnable.
   */
  com.google.protobuf.ByteString getBurnable();

  /**
   * <code>int64 revote_locking_period = 7 [json_name = "revoteLockingPeriod"];</code>
   * @return The revoteLockingPeriod.
   */
  long getRevoteLockingPeriod();

  /**
   * <code>repeated .axelar.evm.v1beta1.NetworkInfo networks = 8 [json_name = "networks", (.gogoproto.nullable) = false];</code>
   */
  java.util.List<com.axelar.evm.v1beta1.NetworkInfo> 
      getNetworksList();
  /**
   * <code>repeated .axelar.evm.v1beta1.NetworkInfo networks = 8 [json_name = "networks", (.gogoproto.nullable) = false];</code>
   */
  com.axelar.evm.v1beta1.NetworkInfo getNetworks(int index);
  /**
   * <code>repeated .axelar.evm.v1beta1.NetworkInfo networks = 8 [json_name = "networks", (.gogoproto.nullable) = false];</code>
   */
  int getNetworksCount();
  /**
   * <code>repeated .axelar.evm.v1beta1.NetworkInfo networks = 8 [json_name = "networks", (.gogoproto.nullable) = false];</code>
   */
  java.util.List<? extends com.axelar.evm.v1beta1.NetworkInfoOrBuilder> 
      getNetworksOrBuilderList();
  /**
   * <code>repeated .axelar.evm.v1beta1.NetworkInfo networks = 8 [json_name = "networks", (.gogoproto.nullable) = false];</code>
   */
  com.axelar.evm.v1beta1.NetworkInfoOrBuilder getNetworksOrBuilder(
      int index);

  /**
   * <code>.axelar.utils.v1beta1.Threshold voting_threshold = 9 [json_name = "votingThreshold", (.gogoproto.nullable) = false];</code>
   * @return Whether the votingThreshold field is set.
   */
  boolean hasVotingThreshold();
  /**
   * <code>.axelar.utils.v1beta1.Threshold voting_threshold = 9 [json_name = "votingThreshold", (.gogoproto.nullable) = false];</code>
   * @return The votingThreshold.
   */
  com.axelar.utils.v1beta1.Threshold getVotingThreshold();
  /**
   * <code>.axelar.utils.v1beta1.Threshold voting_threshold = 9 [json_name = "votingThreshold", (.gogoproto.nullable) = false];</code>
   */
  com.axelar.utils.v1beta1.ThresholdOrBuilder getVotingThresholdOrBuilder();

  /**
   * <code>int64 min_voter_count = 10 [json_name = "minVoterCount"];</code>
   * @return The minVoterCount.
   */
  long getMinVoterCount();

  /**
   * <code>uint32 commands_gas_limit = 11 [json_name = "commandsGasLimit"];</code>
   * @return The commandsGasLimit.
   */
  int getCommandsGasLimit();

  /**
   * <code>int64 voting_grace_period = 13 [json_name = "votingGracePeriod"];</code>
   * @return The votingGracePeriod.
   */
  long getVotingGracePeriod();

  /**
   * <code>int64 end_blocker_limit = 14 [json_name = "endBlockerLimit"];</code>
   * @return The endBlockerLimit.
   */
  long getEndBlockerLimit();

  /**
   * <code>uint64 transfer_limit = 15 [json_name = "transferLimit"];</code>
   * @return The transferLimit.
   */
  long getTransferLimit();
}
