// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: axelar/utils/v1beta1/bitmap.proto

package com.axelar.utils.v1beta1;

/**
 * Protobuf type {@code axelar.utils.v1beta1.CircularBuffer}
 */
public final class CircularBuffer extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:axelar.utils.v1beta1.CircularBuffer)
    CircularBufferOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CircularBuffer.newBuilder() to construct.
  private CircularBuffer(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CircularBuffer() {
    cumulativeValue_ = emptyLongList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CircularBuffer();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.axelar.utils.v1beta1.BitmapProto.internal_static_axelar_utils_v1beta1_CircularBuffer_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.axelar.utils.v1beta1.BitmapProto.internal_static_axelar_utils_v1beta1_CircularBuffer_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.axelar.utils.v1beta1.CircularBuffer.class, com.axelar.utils.v1beta1.CircularBuffer.Builder.class);
  }

  public static final int CUMULATIVE_VALUE_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private com.google.protobuf.Internal.LongList cumulativeValue_;
  /**
   * <code>repeated uint64 cumulative_value = 1 [json_name = "cumulativeValue"];</code>
   * @return A list containing the cumulativeValue.
   */
  @java.lang.Override
  public java.util.List<java.lang.Long>
      getCumulativeValueList() {
    return cumulativeValue_;
  }
  /**
   * <code>repeated uint64 cumulative_value = 1 [json_name = "cumulativeValue"];</code>
   * @return The count of cumulativeValue.
   */
  public int getCumulativeValueCount() {
    return cumulativeValue_.size();
  }
  /**
   * <code>repeated uint64 cumulative_value = 1 [json_name = "cumulativeValue"];</code>
   * @param index The index of the element to return.
   * @return The cumulativeValue at the given index.
   */
  public long getCumulativeValue(int index) {
    return cumulativeValue_.getLong(index);
  }
  private int cumulativeValueMemoizedSerializedSize = -1;

  public static final int INDEX_FIELD_NUMBER = 2;
  private int index_ = 0;
  /**
   * <code>int32 index = 2 [json_name = "index"];</code>
   * @return The index.
   */
  @java.lang.Override
  public int getIndex() {
    return index_;
  }

  public static final int MAX_SIZE_FIELD_NUMBER = 3;
  private int maxSize_ = 0;
  /**
   * <code>int32 max_size = 3 [json_name = "maxSize"];</code>
   * @return The maxSize.
   */
  @java.lang.Override
  public int getMaxSize() {
    return maxSize_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getCumulativeValueList().size() > 0) {
      output.writeUInt32NoTag(10);
      output.writeUInt32NoTag(cumulativeValueMemoizedSerializedSize);
    }
    for (int i = 0; i < cumulativeValue_.size(); i++) {
      output.writeUInt64NoTag(cumulativeValue_.getLong(i));
    }
    if (index_ != 0) {
      output.writeInt32(2, index_);
    }
    if (maxSize_ != 0) {
      output.writeInt32(3, maxSize_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < cumulativeValue_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeUInt64SizeNoTag(cumulativeValue_.getLong(i));
      }
      size += dataSize;
      if (!getCumulativeValueList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      cumulativeValueMemoizedSerializedSize = dataSize;
    }
    if (index_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, index_);
    }
    if (maxSize_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, maxSize_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.axelar.utils.v1beta1.CircularBuffer)) {
      return super.equals(obj);
    }
    com.axelar.utils.v1beta1.CircularBuffer other = (com.axelar.utils.v1beta1.CircularBuffer) obj;

    if (!getCumulativeValueList()
        .equals(other.getCumulativeValueList())) return false;
    if (getIndex()
        != other.getIndex()) return false;
    if (getMaxSize()
        != other.getMaxSize()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getCumulativeValueCount() > 0) {
      hash = (37 * hash) + CUMULATIVE_VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getCumulativeValueList().hashCode();
    }
    hash = (37 * hash) + INDEX_FIELD_NUMBER;
    hash = (53 * hash) + getIndex();
    hash = (37 * hash) + MAX_SIZE_FIELD_NUMBER;
    hash = (53 * hash) + getMaxSize();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.axelar.utils.v1beta1.CircularBuffer parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.axelar.utils.v1beta1.CircularBuffer parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.axelar.utils.v1beta1.CircularBuffer parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.axelar.utils.v1beta1.CircularBuffer parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.axelar.utils.v1beta1.CircularBuffer parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.axelar.utils.v1beta1.CircularBuffer parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.axelar.utils.v1beta1.CircularBuffer parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.axelar.utils.v1beta1.CircularBuffer parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.axelar.utils.v1beta1.CircularBuffer parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.axelar.utils.v1beta1.CircularBuffer parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.axelar.utils.v1beta1.CircularBuffer parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.axelar.utils.v1beta1.CircularBuffer parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.axelar.utils.v1beta1.CircularBuffer prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code axelar.utils.v1beta1.CircularBuffer}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:axelar.utils.v1beta1.CircularBuffer)
      com.axelar.utils.v1beta1.CircularBufferOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.axelar.utils.v1beta1.BitmapProto.internal_static_axelar_utils_v1beta1_CircularBuffer_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.axelar.utils.v1beta1.BitmapProto.internal_static_axelar_utils_v1beta1_CircularBuffer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.axelar.utils.v1beta1.CircularBuffer.class, com.axelar.utils.v1beta1.CircularBuffer.Builder.class);
    }

    // Construct using com.axelar.utils.v1beta1.CircularBuffer.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      cumulativeValue_ = emptyLongList();
      index_ = 0;
      maxSize_ = 0;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.axelar.utils.v1beta1.BitmapProto.internal_static_axelar_utils_v1beta1_CircularBuffer_descriptor;
    }

    @java.lang.Override
    public com.axelar.utils.v1beta1.CircularBuffer getDefaultInstanceForType() {
      return com.axelar.utils.v1beta1.CircularBuffer.getDefaultInstance();
    }

    @java.lang.Override
    public com.axelar.utils.v1beta1.CircularBuffer build() {
      com.axelar.utils.v1beta1.CircularBuffer result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.axelar.utils.v1beta1.CircularBuffer buildPartial() {
      com.axelar.utils.v1beta1.CircularBuffer result = new com.axelar.utils.v1beta1.CircularBuffer(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.axelar.utils.v1beta1.CircularBuffer result) {
      if (((bitField0_ & 0x00000001) != 0)) {
        cumulativeValue_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.cumulativeValue_ = cumulativeValue_;
    }

    private void buildPartial0(com.axelar.utils.v1beta1.CircularBuffer result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.index_ = index_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.maxSize_ = maxSize_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.axelar.utils.v1beta1.CircularBuffer) {
        return mergeFrom((com.axelar.utils.v1beta1.CircularBuffer)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.axelar.utils.v1beta1.CircularBuffer other) {
      if (other == com.axelar.utils.v1beta1.CircularBuffer.getDefaultInstance()) return this;
      if (!other.cumulativeValue_.isEmpty()) {
        if (cumulativeValue_.isEmpty()) {
          cumulativeValue_ = other.cumulativeValue_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureCumulativeValueIsMutable();
          cumulativeValue_.addAll(other.cumulativeValue_);
        }
        onChanged();
      }
      if (other.getIndex() != 0) {
        setIndex(other.getIndex());
      }
      if (other.getMaxSize() != 0) {
        setMaxSize(other.getMaxSize());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              long v = input.readUInt64();
              ensureCumulativeValueIsMutable();
              cumulativeValue_.addLong(v);
              break;
            } // case 8
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureCumulativeValueIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                cumulativeValue_.addLong(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            } // case 10
            case 16: {
              index_ = input.readInt32();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 24: {
              maxSize_ = input.readInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Internal.LongList cumulativeValue_ = emptyLongList();
    private void ensureCumulativeValueIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        cumulativeValue_ = mutableCopy(cumulativeValue_);
        bitField0_ |= 0x00000001;
      }
    }
    /**
     * <code>repeated uint64 cumulative_value = 1 [json_name = "cumulativeValue"];</code>
     * @return A list containing the cumulativeValue.
     */
    public java.util.List<java.lang.Long>
        getCumulativeValueList() {
      return ((bitField0_ & 0x00000001) != 0) ?
               java.util.Collections.unmodifiableList(cumulativeValue_) : cumulativeValue_;
    }
    /**
     * <code>repeated uint64 cumulative_value = 1 [json_name = "cumulativeValue"];</code>
     * @return The count of cumulativeValue.
     */
    public int getCumulativeValueCount() {
      return cumulativeValue_.size();
    }
    /**
     * <code>repeated uint64 cumulative_value = 1 [json_name = "cumulativeValue"];</code>
     * @param index The index of the element to return.
     * @return The cumulativeValue at the given index.
     */
    public long getCumulativeValue(int index) {
      return cumulativeValue_.getLong(index);
    }
    /**
     * <code>repeated uint64 cumulative_value = 1 [json_name = "cumulativeValue"];</code>
     * @param index The index to set the value at.
     * @param value The cumulativeValue to set.
     * @return This builder for chaining.
     */
    public Builder setCumulativeValue(
        int index, long value) {

      ensureCumulativeValueIsMutable();
      cumulativeValue_.setLong(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint64 cumulative_value = 1 [json_name = "cumulativeValue"];</code>
     * @param value The cumulativeValue to add.
     * @return This builder for chaining.
     */
    public Builder addCumulativeValue(long value) {

      ensureCumulativeValueIsMutable();
      cumulativeValue_.addLong(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint64 cumulative_value = 1 [json_name = "cumulativeValue"];</code>
     * @param values The cumulativeValue to add.
     * @return This builder for chaining.
     */
    public Builder addAllCumulativeValue(
        java.lang.Iterable<? extends java.lang.Long> values) {
      ensureCumulativeValueIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, cumulativeValue_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated uint64 cumulative_value = 1 [json_name = "cumulativeValue"];</code>
     * @return This builder for chaining.
     */
    public Builder clearCumulativeValue() {
      cumulativeValue_ = emptyLongList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private int index_ ;
    /**
     * <code>int32 index = 2 [json_name = "index"];</code>
     * @return The index.
     */
    @java.lang.Override
    public int getIndex() {
      return index_;
    }
    /**
     * <code>int32 index = 2 [json_name = "index"];</code>
     * @param value The index to set.
     * @return This builder for chaining.
     */
    public Builder setIndex(int value) {

      index_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>int32 index = 2 [json_name = "index"];</code>
     * @return This builder for chaining.
     */
    public Builder clearIndex() {
      bitField0_ = (bitField0_ & ~0x00000002);
      index_ = 0;
      onChanged();
      return this;
    }

    private int maxSize_ ;
    /**
     * <code>int32 max_size = 3 [json_name = "maxSize"];</code>
     * @return The maxSize.
     */
    @java.lang.Override
    public int getMaxSize() {
      return maxSize_;
    }
    /**
     * <code>int32 max_size = 3 [json_name = "maxSize"];</code>
     * @param value The maxSize to set.
     * @return This builder for chaining.
     */
    public Builder setMaxSize(int value) {

      maxSize_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <code>int32 max_size = 3 [json_name = "maxSize"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxSize() {
      bitField0_ = (bitField0_ & ~0x00000004);
      maxSize_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:axelar.utils.v1beta1.CircularBuffer)
  }

  // @@protoc_insertion_point(class_scope:axelar.utils.v1beta1.CircularBuffer)
  private static final com.axelar.utils.v1beta1.CircularBuffer DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.axelar.utils.v1beta1.CircularBuffer();
  }

  public static com.axelar.utils.v1beta1.CircularBuffer getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CircularBuffer>
      PARSER = new com.google.protobuf.AbstractParser<CircularBuffer>() {
    @java.lang.Override
    public CircularBuffer parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CircularBuffer> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CircularBuffer> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.axelar.utils.v1beta1.CircularBuffer getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

