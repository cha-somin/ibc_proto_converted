// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: band/oracle/v1/oracle.proto

package com.oracle.v1;

public interface OracleRequestPacketDataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:oracle.v1.OracleRequestPacketData)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * ClientID is the unique identifier of this oracle request, as specified by
   * the client. This same unique ID will be sent back to the requester with the
   * oracle response.
   * </pre>
   *
   * <code>string client_id = 1 [json_name = "clientId", (.gogoproto.customname) = "ClientID"];</code>
   * @return The clientId.
   */
  java.lang.String getClientId();
  /**
   * <pre>
   * ClientID is the unique identifier of this oracle request, as specified by
   * the client. This same unique ID will be sent back to the requester with the
   * oracle response.
   * </pre>
   *
   * <code>string client_id = 1 [json_name = "clientId", (.gogoproto.customname) = "ClientID"];</code>
   * @return The bytes for clientId.
   */
  com.google.protobuf.ByteString
      getClientIdBytes();

  /**
   * <pre>
   * OracleScriptID is the unique identifier of the oracle script to be
   * executed.
   * </pre>
   *
   * <code>uint64 oracle_script_id = 2 [json_name = "oracleScriptId", (.gogoproto.customname) = "OracleScriptID", (.gogoproto.casttype) = "OracleScriptID"];</code>
   * @return The oracleScriptId.
   */
  long getOracleScriptId();

  /**
   * <pre>
   * Calldata is the OBI-encoded calldata bytes available for oracle executor to
   * read.
   * </pre>
   *
   * <code>bytes calldata = 3 [json_name = "calldata"];</code>
   * @return The calldata.
   */
  com.google.protobuf.ByteString getCalldata();

  /**
   * <pre>
   * AskCount is the number of validators that are requested to respond to this
   * oracle request. Higher value means more security, at a higher gas cost.
   * </pre>
   *
   * <code>uint64 ask_count = 4 [json_name = "askCount"];</code>
   * @return The askCount.
   */
  long getAskCount();

  /**
   * <pre>
   * MinCount is the minimum number of validators necessary for the request to
   * proceed to the execution phase. Higher value means more security, at the
   * cost of liveness.
   * </pre>
   *
   * <code>uint64 min_count = 5 [json_name = "minCount"];</code>
   * @return The minCount.
   */
  long getMinCount();

  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<com.cosmos.base.v1beta1.Coin> 
      getFeeLimitList();
  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  com.cosmos.base.v1beta1.Coin getFeeLimit(int index);
  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  int getFeeLimitCount();
  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getFeeLimitOrBuilderList();
  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  com.cosmos.base.v1beta1.CoinOrBuilder getFeeLimitOrBuilder(
      int index);

  /**
   * <pre>
   * PrepareGas is amount of gas to pay to prepare raw requests
   * </pre>
   *
   * <code>uint64 prepare_gas = 7 [json_name = "prepareGas"];</code>
   * @return The prepareGas.
   */
  long getPrepareGas();

  /**
   * <pre>
   * ExecuteGas is amount of gas to reserve for executing
   * </pre>
   *
   * <code>uint64 execute_gas = 8 [json_name = "executeGas"];</code>
   * @return The executeGas.
   */
  long getExecuteGas();
}
