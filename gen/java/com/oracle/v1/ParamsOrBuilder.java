// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: band/oracle/v1/oracle.proto

package com.oracle.v1;

public interface ParamsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:oracle.v1.Params)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * MaxRawRequestCount is the maximum number of data source raw requests a
   * request can make.
   * </pre>
   *
   * <code>uint64 max_raw_request_count = 1 [json_name = "maxRawRequestCount"];</code>
   * @return The maxRawRequestCount.
   */
  long getMaxRawRequestCount();

  /**
   * <pre>
   * MaxAskCount is the maximum number of validators a request can target.
   * </pre>
   *
   * <code>uint64 max_ask_count = 2 [json_name = "maxAskCount"];</code>
   * @return The maxAskCount.
   */
  long getMaxAskCount();

  /**
   * <pre>
   * MaxCalldataSize is the maximum size limit of calldata (bytes) in a request.
   * </pre>
   *
   * <code>uint64 max_calldata_size = 3 [json_name = "maxCalldataSize"];</code>
   * @return The maxCalldataSize.
   */
  long getMaxCalldataSize();

  /**
   * <pre>
   * MaxReportDataSize is the maximum size limit of report data (bytes) in a
   * report.
   * </pre>
   *
   * <code>uint64 max_report_data_size = 4 [json_name = "maxReportDataSize"];</code>
   * @return The maxReportDataSize.
   */
  long getMaxReportDataSize();

  /**
   * <pre>
   * ExpirationBlockCount is the number of blocks a request stays valid before
   * it gets expired due to insufficient reports.
   * </pre>
   *
   * <code>uint64 expiration_block_count = 5 [json_name = "expirationBlockCount"];</code>
   * @return The expirationBlockCount.
   */
  long getExpirationBlockCount();

  /**
   * <pre>
   * BaseOwasmGas is the base amount of Cosmos-SDK gas charged for owasm
   * execution.
   * </pre>
   *
   * <code>uint64 base_owasm_gas = 6 [json_name = "baseOwasmGas"];</code>
   * @return The baseOwasmGas.
   */
  long getBaseOwasmGas();

  /**
   * <pre>
   * PerValidatorRequestGas is the amount of Cosmos-SDK gas charged per
   * requested validator.
   * </pre>
   *
   * <code>uint64 per_validator_request_gas = 7 [json_name = "perValidatorRequestGas"];</code>
   * @return The perValidatorRequestGas.
   */
  long getPerValidatorRequestGas();

  /**
   * <pre>
   * SamplingTryCount the number of validator sampling tries to pick the highest
   * voting power subset of validators to perform an oracle task.
   * </pre>
   *
   * <code>uint64 sampling_try_count = 8 [json_name = "samplingTryCount"];</code>
   * @return The samplingTryCount.
   */
  long getSamplingTryCount();

  /**
   * <pre>
   * OracleRewardPercentage is the percentage of block rewards allocated to
   * active oracle validators.
   * </pre>
   *
   * <code>uint64 oracle_reward_percentage = 9 [json_name = "oracleRewardPercentage"];</code>
   * @return The oracleRewardPercentage.
   */
  long getOracleRewardPercentage();

  /**
   * <pre>
   * InactivePenaltyDuration is the duration period where a validator cannot
   * activate back after missing an oracle report.
   * </pre>
   *
   * <code>uint64 inactive_penalty_duration = 10 [json_name = "inactivePenaltyDuration"];</code>
   * @return The inactivePenaltyDuration.
   */
  long getInactivePenaltyDuration();

  /**
   * <pre>
   * IBCRequestEnabled is a flag indicating whether sending oracle request via
   * IBC is allowed
   * </pre>
   *
   * <code>bool ibc_request_enabled = 11 [json_name = "ibcRequestEnabled", (.gogoproto.customname) = "IBCRequestEnabled"];</code>
   * @return The ibcRequestEnabled.
   */
  boolean getIbcRequestEnabled();
}
