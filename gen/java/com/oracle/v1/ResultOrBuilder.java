// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: band/oracle/v1/oracle.proto

package com.oracle.v1;

public interface ResultOrBuilder extends
    // @@protoc_insertion_point(interface_extends:oracle.v1.Result)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * ClientID is the unique identifier of this oracle request, as specified by
   * the client. This same unique ID will be sent back to the requester with the
   * oracle response.
   * </pre>
   *
   * <code>string client_id = 1 [json_name = "clientId", (.gogoproto.customname) = "ClientID"];</code>
   * @return The clientId.
   */
  java.lang.String getClientId();
  /**
   * <pre>
   * ClientID is the unique identifier of this oracle request, as specified by
   * the client. This same unique ID will be sent back to the requester with the
   * oracle response.
   * </pre>
   *
   * <code>string client_id = 1 [json_name = "clientId", (.gogoproto.customname) = "ClientID"];</code>
   * @return The bytes for clientId.
   */
  com.google.protobuf.ByteString
      getClientIdBytes();

  /**
   * <pre>
   * OracleScriptID is the unique identifier of the oracle script to be
   * executed.
   * </pre>
   *
   * <code>uint64 oracle_script_id = 2 [json_name = "oracleScriptId", (.gogoproto.customname) = "OracleScriptID", (.gogoproto.casttype) = "OracleScriptID"];</code>
   * @return The oracleScriptId.
   */
  long getOracleScriptId();

  /**
   * <pre>
   * Calldata is the calldata bytes available for oracle executor to read.
   * </pre>
   *
   * <code>bytes calldata = 3 [json_name = "calldata"];</code>
   * @return The calldata.
   */
  com.google.protobuf.ByteString getCalldata();

  /**
   * <pre>
   * AskCount is the number of validators that are requested to respond to this
   * oracle request. Higher value means more security, at a higher gas cost.
   * </pre>
   *
   * <code>uint64 ask_count = 4 [json_name = "askCount"];</code>
   * @return The askCount.
   */
  long getAskCount();

  /**
   * <pre>
   * MinCount is the minimum number of validators necessary for the request to
   * proceed to the execution phase. Higher value means more security, at the
   * cost of liveness.
   * </pre>
   *
   * <code>uint64 min_count = 5 [json_name = "minCount"];</code>
   * @return The minCount.
   */
  long getMinCount();

  /**
   * <pre>
   * RequestID is BandChain's unique identifier for this oracle request.
   * </pre>
   *
   * <code>uint64 request_id = 6 [json_name = "requestId", (.gogoproto.customname) = "RequestID", (.gogoproto.casttype) = "RequestID"];</code>
   * @return The requestId.
   */
  long getRequestId();

  /**
   * <pre>
   * AnsCount is the number of validators among to the asked validators that
   * actually responded to this oracle request prior to this oracle request
   * being resolved.
   * </pre>
   *
   * <code>uint64 ans_count = 7 [json_name = "ansCount"];</code>
   * @return The ansCount.
   */
  long getAnsCount();

  /**
   * <pre>
   * RequestTime is the UNIX epoch time at which the request was sent to
   * BandChain.
   * </pre>
   *
   * <code>int64 request_time = 8 [json_name = "requestTime"];</code>
   * @return The requestTime.
   */
  long getRequestTime();

  /**
   * <pre>
   * ResolveTime is the UNIX epoch time at which the request was resolved to the
   * final result.
   * </pre>
   *
   * <code>int64 resolve_time = 9 [json_name = "resolveTime"];</code>
   * @return The resolveTime.
   */
  long getResolveTime();

  /**
   * <pre>
   * ResolveStatus is the status of this oracle request, which can be OK,
   * FAILURE, or EXPIRED.
   * </pre>
   *
   * <code>.oracle.v1.ResolveStatus resolve_status = 10 [json_name = "resolveStatus"];</code>
   * @return The enum numeric value on the wire for resolveStatus.
   */
  int getResolveStatusValue();
  /**
   * <pre>
   * ResolveStatus is the status of this oracle request, which can be OK,
   * FAILURE, or EXPIRED.
   * </pre>
   *
   * <code>.oracle.v1.ResolveStatus resolve_status = 10 [json_name = "resolveStatus"];</code>
   * @return The resolveStatus.
   */
  com.oracle.v1.ResolveStatus getResolveStatus();

  /**
   * <pre>
   * Result is the final aggregated value only available if status if OK.
   * </pre>
   *
   * <code>bytes result = 11 [json_name = "result"];</code>
   * @return The result.
   */
  com.google.protobuf.ByteString getResult();
}
