// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: noble/tokenfactory/genesis.proto

package com.noble.tokenfactory;

public interface GenesisStateOrBuilder extends
    // @@protoc_insertion_point(interface_extends:noble.tokenfactory.GenesisState)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.noble.tokenfactory.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];</code>
   * @return Whether the params field is set.
   */
  boolean hasParams();
  /**
   * <code>.noble.tokenfactory.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];</code>
   * @return The params.
   */
  com.noble.tokenfactory.Params getParams();
  /**
   * <code>.noble.tokenfactory.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];</code>
   */
  com.noble.tokenfactory.ParamsOrBuilder getParamsOrBuilder();

  /**
   * <code>repeated .noble.tokenfactory.Blacklisted blacklistedList = 2 [json_name = "blacklistedList", (.gogoproto.nullable) = false];</code>
   */
  java.util.List<com.noble.tokenfactory.Blacklisted> 
      getBlacklistedListList();
  /**
   * <code>repeated .noble.tokenfactory.Blacklisted blacklistedList = 2 [json_name = "blacklistedList", (.gogoproto.nullable) = false];</code>
   */
  com.noble.tokenfactory.Blacklisted getBlacklistedList(int index);
  /**
   * <code>repeated .noble.tokenfactory.Blacklisted blacklistedList = 2 [json_name = "blacklistedList", (.gogoproto.nullable) = false];</code>
   */
  int getBlacklistedListCount();
  /**
   * <code>repeated .noble.tokenfactory.Blacklisted blacklistedList = 2 [json_name = "blacklistedList", (.gogoproto.nullable) = false];</code>
   */
  java.util.List<? extends com.noble.tokenfactory.BlacklistedOrBuilder> 
      getBlacklistedListOrBuilderList();
  /**
   * <code>repeated .noble.tokenfactory.Blacklisted blacklistedList = 2 [json_name = "blacklistedList", (.gogoproto.nullable) = false];</code>
   */
  com.noble.tokenfactory.BlacklistedOrBuilder getBlacklistedListOrBuilder(
      int index);

  /**
   * <code>.noble.tokenfactory.Paused paused = 3 [json_name = "paused"];</code>
   * @return Whether the paused field is set.
   */
  boolean hasPaused();
  /**
   * <code>.noble.tokenfactory.Paused paused = 3 [json_name = "paused"];</code>
   * @return The paused.
   */
  com.noble.tokenfactory.Paused getPaused();
  /**
   * <code>.noble.tokenfactory.Paused paused = 3 [json_name = "paused"];</code>
   */
  com.noble.tokenfactory.PausedOrBuilder getPausedOrBuilder();

  /**
   * <code>.noble.tokenfactory.MasterMinter masterMinter = 4 [json_name = "masterMinter"];</code>
   * @return Whether the masterMinter field is set.
   */
  boolean hasMasterMinter();
  /**
   * <code>.noble.tokenfactory.MasterMinter masterMinter = 4 [json_name = "masterMinter"];</code>
   * @return The masterMinter.
   */
  com.noble.tokenfactory.MasterMinter getMasterMinter();
  /**
   * <code>.noble.tokenfactory.MasterMinter masterMinter = 4 [json_name = "masterMinter"];</code>
   */
  com.noble.tokenfactory.MasterMinterOrBuilder getMasterMinterOrBuilder();

  /**
   * <code>repeated .noble.tokenfactory.Minters mintersList = 5 [json_name = "mintersList", (.gogoproto.nullable) = false];</code>
   */
  java.util.List<com.noble.tokenfactory.Minters> 
      getMintersListList();
  /**
   * <code>repeated .noble.tokenfactory.Minters mintersList = 5 [json_name = "mintersList", (.gogoproto.nullable) = false];</code>
   */
  com.noble.tokenfactory.Minters getMintersList(int index);
  /**
   * <code>repeated .noble.tokenfactory.Minters mintersList = 5 [json_name = "mintersList", (.gogoproto.nullable) = false];</code>
   */
  int getMintersListCount();
  /**
   * <code>repeated .noble.tokenfactory.Minters mintersList = 5 [json_name = "mintersList", (.gogoproto.nullable) = false];</code>
   */
  java.util.List<? extends com.noble.tokenfactory.MintersOrBuilder> 
      getMintersListOrBuilderList();
  /**
   * <code>repeated .noble.tokenfactory.Minters mintersList = 5 [json_name = "mintersList", (.gogoproto.nullable) = false];</code>
   */
  com.noble.tokenfactory.MintersOrBuilder getMintersListOrBuilder(
      int index);

  /**
   * <code>.noble.tokenfactory.Pauser pauser = 6 [json_name = "pauser"];</code>
   * @return Whether the pauser field is set.
   */
  boolean hasPauser();
  /**
   * <code>.noble.tokenfactory.Pauser pauser = 6 [json_name = "pauser"];</code>
   * @return The pauser.
   */
  com.noble.tokenfactory.Pauser getPauser();
  /**
   * <code>.noble.tokenfactory.Pauser pauser = 6 [json_name = "pauser"];</code>
   */
  com.noble.tokenfactory.PauserOrBuilder getPauserOrBuilder();

  /**
   * <code>.noble.tokenfactory.Blacklister blacklister = 7 [json_name = "blacklister"];</code>
   * @return Whether the blacklister field is set.
   */
  boolean hasBlacklister();
  /**
   * <code>.noble.tokenfactory.Blacklister blacklister = 7 [json_name = "blacklister"];</code>
   * @return The blacklister.
   */
  com.noble.tokenfactory.Blacklister getBlacklister();
  /**
   * <code>.noble.tokenfactory.Blacklister blacklister = 7 [json_name = "blacklister"];</code>
   */
  com.noble.tokenfactory.BlacklisterOrBuilder getBlacklisterOrBuilder();

  /**
   * <code>.noble.tokenfactory.Owner owner = 8 [json_name = "owner"];</code>
   * @return Whether the owner field is set.
   */
  boolean hasOwner();
  /**
   * <code>.noble.tokenfactory.Owner owner = 8 [json_name = "owner"];</code>
   * @return The owner.
   */
  com.noble.tokenfactory.Owner getOwner();
  /**
   * <code>.noble.tokenfactory.Owner owner = 8 [json_name = "owner"];</code>
   */
  com.noble.tokenfactory.OwnerOrBuilder getOwnerOrBuilder();

  /**
   * <code>repeated .noble.tokenfactory.MinterController minterControllerList = 9 [json_name = "minterControllerList", (.gogoproto.nullable) = false];</code>
   */
  java.util.List<com.noble.tokenfactory.MinterController> 
      getMinterControllerListList();
  /**
   * <code>repeated .noble.tokenfactory.MinterController minterControllerList = 9 [json_name = "minterControllerList", (.gogoproto.nullable) = false];</code>
   */
  com.noble.tokenfactory.MinterController getMinterControllerList(int index);
  /**
   * <code>repeated .noble.tokenfactory.MinterController minterControllerList = 9 [json_name = "minterControllerList", (.gogoproto.nullable) = false];</code>
   */
  int getMinterControllerListCount();
  /**
   * <code>repeated .noble.tokenfactory.MinterController minterControllerList = 9 [json_name = "minterControllerList", (.gogoproto.nullable) = false];</code>
   */
  java.util.List<? extends com.noble.tokenfactory.MinterControllerOrBuilder> 
      getMinterControllerListOrBuilderList();
  /**
   * <code>repeated .noble.tokenfactory.MinterController minterControllerList = 9 [json_name = "minterControllerList", (.gogoproto.nullable) = false];</code>
   */
  com.noble.tokenfactory.MinterControllerOrBuilder getMinterControllerListOrBuilder(
      int index);

  /**
   * <pre>
   * this line is used by starport scaffolding # genesis/proto/state
   * </pre>
   *
   * <code>.noble.tokenfactory.MintingDenom mintingDenom = 10 [json_name = "mintingDenom"];</code>
   * @return Whether the mintingDenom field is set.
   */
  boolean hasMintingDenom();
  /**
   * <pre>
   * this line is used by starport scaffolding # genesis/proto/state
   * </pre>
   *
   * <code>.noble.tokenfactory.MintingDenom mintingDenom = 10 [json_name = "mintingDenom"];</code>
   * @return The mintingDenom.
   */
  com.noble.tokenfactory.MintingDenom getMintingDenom();
  /**
   * <pre>
   * this line is used by starport scaffolding # genesis/proto/state
   * </pre>
   *
   * <code>.noble.tokenfactory.MintingDenom mintingDenom = 10 [json_name = "mintingDenom"];</code>
   */
  com.noble.tokenfactory.MintingDenomOrBuilder getMintingDenomOrBuilder();
}
