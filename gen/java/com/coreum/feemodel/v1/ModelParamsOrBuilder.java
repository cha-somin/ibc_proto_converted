// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: coreum/feemodel/v1/params.proto

package com.coreum.feemodel.v1;

public interface ModelParamsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:coreum.feemodel.v1.ModelParams)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * initial_gas_price is used when block gas short average is 0. It happens when there are no transactions being broadcasted. This value is also used to initialize gas price on brand-new chain.
   * </pre>
   *
   * <code>string initial_gas_price = 1 [json_name = "initialGasPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"initial_gas_price&#92;""];</code>
   * @return The initialGasPrice.
   */
  java.lang.String getInitialGasPrice();
  /**
   * <pre>
   * initial_gas_price is used when block gas short average is 0. It happens when there are no transactions being broadcasted. This value is also used to initialize gas price on brand-new chain.
   * </pre>
   *
   * <code>string initial_gas_price = 1 [json_name = "initialGasPrice", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"initial_gas_price&#92;""];</code>
   * @return The bytes for initialGasPrice.
   */
  com.google.protobuf.ByteString
      getInitialGasPriceBytes();

  /**
   * <pre>
   * max_gas_price_multiplier is used to compute max_gas_price (max_gas_price = initial_gas_price * max_gas_price_multiplier). Max gas price is charged when block gas short average is greater than or equal to MaxBlockGas. This value is used to limit gas price escalation to avoid having possible infinity GasPrice value otherwise.
   * </pre>
   *
   * <code>string max_gas_price_multiplier = 2 [json_name = "maxGasPriceMultiplier", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"max_gas_price_multiplier&#92;""];</code>
   * @return The maxGasPriceMultiplier.
   */
  java.lang.String getMaxGasPriceMultiplier();
  /**
   * <pre>
   * max_gas_price_multiplier is used to compute max_gas_price (max_gas_price = initial_gas_price * max_gas_price_multiplier). Max gas price is charged when block gas short average is greater than or equal to MaxBlockGas. This value is used to limit gas price escalation to avoid having possible infinity GasPrice value otherwise.
   * </pre>
   *
   * <code>string max_gas_price_multiplier = 2 [json_name = "maxGasPriceMultiplier", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"max_gas_price_multiplier&#92;""];</code>
   * @return The bytes for maxGasPriceMultiplier.
   */
  com.google.protobuf.ByteString
      getMaxGasPriceMultiplierBytes();

  /**
   * <pre>
   * max_discount is th maximum discount we offer on top of initial gas price if short average block gas is between long average block gas and escalation start block gas.
   * </pre>
   *
   * <code>string max_discount = 3 [json_name = "maxDiscount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"max_discount&#92;""];</code>
   * @return The maxDiscount.
   */
  java.lang.String getMaxDiscount();
  /**
   * <pre>
   * max_discount is th maximum discount we offer on top of initial gas price if short average block gas is between long average block gas and escalation start block gas.
   * </pre>
   *
   * <code>string max_discount = 3 [json_name = "maxDiscount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"max_discount&#92;""];</code>
   * @return The bytes for maxDiscount.
   */
  com.google.protobuf.ByteString
      getMaxDiscountBytes();

  /**
   * <pre>
   * escalation_start_fraction defines fraction of max block gas usage where gas price escalation starts if short average block gas is higher than this value.
   * </pre>
   *
   * <code>string escalation_start_fraction = 4 [json_name = "escalationStartFraction", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"escalation_start_fraction&#92;""];</code>
   * @return The escalationStartFraction.
   */
  java.lang.String getEscalationStartFraction();
  /**
   * <pre>
   * escalation_start_fraction defines fraction of max block gas usage where gas price escalation starts if short average block gas is higher than this value.
   * </pre>
   *
   * <code>string escalation_start_fraction = 4 [json_name = "escalationStartFraction", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"escalation_start_fraction&#92;""];</code>
   * @return The bytes for escalationStartFraction.
   */
  com.google.protobuf.ByteString
      getEscalationStartFractionBytes();

  /**
   * <pre>
   * max_block_gas sets the maximum capacity of block. This is enforced on tendermint level in genesis configuration. Once short average block gas goes above this value, gas price is a flat line equal to MaxGasPrice.
   * </pre>
   *
   * <code>int64 max_block_gas = 5 [json_name = "maxBlockGas", (.gogoproto.moretags) = "yaml:&#92;"max_block_gas&#92;""];</code>
   * @return The maxBlockGas.
   */
  long getMaxBlockGas();

  /**
   * <pre>
   * short_ema_block_length defines inertia for short average long gas in EMA model. The equation is: NewAverage = ((ShortAverageBlockLength - 1)*PreviousAverage + GasUsedByCurrentBlock) / ShortAverageBlockLength
   * The value might be interpreted as the number of blocks which are taken to calculate the average. It would be exactly like that in SMA model, in EMA this is an approximation.
   * </pre>
   *
   * <code>uint32 short_ema_block_length = 6 [json_name = "shortEmaBlockLength", (.gogoproto.moretags) = "yaml:&#92;"short_ema_block_length&#92;""];</code>
   * @return The shortEmaBlockLength.
   */
  int getShortEmaBlockLength();

  /**
   * <pre>
   * long_ema_block_length defines inertia for long average block gas in EMA model. The equation is: NewAverage = ((LongAverageBlockLength - 1)*PreviousAverage + GasUsedByCurrentBlock) / LongAverageBlockLength
   * The value might be interpreted as the number of blocks which are taken to calculate the average. It would be exactly like that in SMA model, in EMA this is an approximation.
   * </pre>
   *
   * <code>uint32 long_ema_block_length = 7 [json_name = "longEmaBlockLength", (.gogoproto.moretags) = "yaml:&#92;"long_ema_block_length&#92;""];</code>
   * @return The longEmaBlockLength.
   */
  int getLongEmaBlockLength();
}
