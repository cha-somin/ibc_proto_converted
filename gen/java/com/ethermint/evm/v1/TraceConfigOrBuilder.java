// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ethermint/evm/v1/evm.proto

package com.ethermint.evm.v1;

public interface TraceConfigOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ethermint.evm.v1.TraceConfig)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * tracer is a custom javascript tracer
   * </pre>
   *
   * <code>string tracer = 1 [json_name = "tracer"];</code>
   * @return The tracer.
   */
  java.lang.String getTracer();
  /**
   * <pre>
   * tracer is a custom javascript tracer
   * </pre>
   *
   * <code>string tracer = 1 [json_name = "tracer"];</code>
   * @return The bytes for tracer.
   */
  com.google.protobuf.ByteString
      getTracerBytes();

  /**
   * <pre>
   * timeout overrides the default timeout of 5 seconds for JavaScript-based tracing
   * calls
   * </pre>
   *
   * <code>string timeout = 2 [json_name = "timeout"];</code>
   * @return The timeout.
   */
  java.lang.String getTimeout();
  /**
   * <pre>
   * timeout overrides the default timeout of 5 seconds for JavaScript-based tracing
   * calls
   * </pre>
   *
   * <code>string timeout = 2 [json_name = "timeout"];</code>
   * @return The bytes for timeout.
   */
  com.google.protobuf.ByteString
      getTimeoutBytes();

  /**
   * <pre>
   * reexec defines the number of blocks the tracer is willing to go back
   * </pre>
   *
   * <code>uint64 reexec = 3 [json_name = "reexec"];</code>
   * @return The reexec.
   */
  long getReexec();

  /**
   * <pre>
   * disable_stack switches stack capture
   * </pre>
   *
   * <code>bool disable_stack = 5 [json_name = "disableStack", (.gogoproto.jsontag) = "disableStack"];</code>
   * @return The disableStack.
   */
  boolean getDisableStack();

  /**
   * <pre>
   * disable_storage switches storage capture
   * </pre>
   *
   * <code>bool disable_storage = 6 [json_name = "disableStorage", (.gogoproto.jsontag) = "disableStorage"];</code>
   * @return The disableStorage.
   */
  boolean getDisableStorage();

  /**
   * <pre>
   * debug can be used to print output during capture end
   * </pre>
   *
   * <code>bool debug = 8 [json_name = "debug"];</code>
   * @return The debug.
   */
  boolean getDebug();

  /**
   * <pre>
   * limit defines the maximum length of output, but zero means unlimited
   * </pre>
   *
   * <code>int32 limit = 9 [json_name = "limit"];</code>
   * @return The limit.
   */
  int getLimit();

  /**
   * <pre>
   * overrides can be used to execute a trace using future fork rules
   * </pre>
   *
   * <code>.ethermint.evm.v1.ChainConfig overrides = 10 [json_name = "overrides"];</code>
   * @return Whether the overrides field is set.
   */
  boolean hasOverrides();
  /**
   * <pre>
   * overrides can be used to execute a trace using future fork rules
   * </pre>
   *
   * <code>.ethermint.evm.v1.ChainConfig overrides = 10 [json_name = "overrides"];</code>
   * @return The overrides.
   */
  com.ethermint.evm.v1.ChainConfig getOverrides();
  /**
   * <pre>
   * overrides can be used to execute a trace using future fork rules
   * </pre>
   *
   * <code>.ethermint.evm.v1.ChainConfig overrides = 10 [json_name = "overrides"];</code>
   */
  com.ethermint.evm.v1.ChainConfigOrBuilder getOverridesOrBuilder();

  /**
   * <pre>
   * enable_memory switches memory capture
   * </pre>
   *
   * <code>bool enable_memory = 11 [json_name = "enableMemory", (.gogoproto.jsontag) = "enableMemory"];</code>
   * @return The enableMemory.
   */
  boolean getEnableMemory();

  /**
   * <pre>
   * enable_return_data switches the capture of return data
   * </pre>
   *
   * <code>bool enable_return_data = 12 [json_name = "enableReturnData", (.gogoproto.jsontag) = "enableReturnData"];</code>
   * @return The enableReturnData.
   */
  boolean getEnableReturnData();

  /**
   * <pre>
   * tracer_json_config configures the tracer using a JSON string
   * </pre>
   *
   * <code>string tracer_json_config = 13 [json_name = "tracerJsonConfig", (.gogoproto.jsontag) = "tracerConfig"];</code>
   * @return The tracerJsonConfig.
   */
  java.lang.String getTracerJsonConfig();
  /**
   * <pre>
   * tracer_json_config configures the tracer using a JSON string
   * </pre>
   *
   * <code>string tracer_json_config = 13 [json_name = "tracerJsonConfig", (.gogoproto.jsontag) = "tracerConfig"];</code>
   * @return The bytes for tracerJsonConfig.
   */
  com.google.protobuf.ByteString
      getTracerJsonConfigBytes();
}
