// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ethermint/evm/v1/tx.proto

package com.ethermint.evm.v1;

public interface MsgEthereumTxOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ethermint.evm.v1.MsgEthereumTx)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * data is inner transaction data of the Ethereum transaction
   * </pre>
   *
   * <code>.google.protobuf.Any data = 1 [json_name = "data"];</code>
   * @return Whether the data field is set.
   */
  boolean hasData();
  /**
   * <pre>
   * data is inner transaction data of the Ethereum transaction
   * </pre>
   *
   * <code>.google.protobuf.Any data = 1 [json_name = "data"];</code>
   * @return The data.
   */
  com.google.protobuf.Any getData();
  /**
   * <pre>
   * data is inner transaction data of the Ethereum transaction
   * </pre>
   *
   * <code>.google.protobuf.Any data = 1 [json_name = "data"];</code>
   */
  com.google.protobuf.AnyOrBuilder getDataOrBuilder();

  /**
   * <pre>
   * size is the encoded storage size of the transaction (DEPRECATED)
   * </pre>
   *
   * <code>double size = 2 [json_name = "size", (.gogoproto.jsontag) = "-"];</code>
   * @return The size.
   */
  double getSize();

  /**
   * <pre>
   * hash of the transaction in hex format
   * </pre>
   *
   * <code>string hash = 3 [json_name = "hash", (.gogoproto.moretags) = "rlp:&#92;"-&#92;""];</code>
   * @return The hash.
   */
  java.lang.String getHash();
  /**
   * <pre>
   * hash of the transaction in hex format
   * </pre>
   *
   * <code>string hash = 3 [json_name = "hash", (.gogoproto.moretags) = "rlp:&#92;"-&#92;""];</code>
   * @return The bytes for hash.
   */
  com.google.protobuf.ByteString
      getHashBytes();

  /**
   * <pre>
   * from is the ethereum signer address in hex format. This address value is checked
   * against the address derived from the signature (V, R, S) using the
   * secp256k1 elliptic curve
   * </pre>
   *
   * <code>string from = 4 [json_name = "from"];</code>
   * @return The from.
   */
  java.lang.String getFrom();
  /**
   * <pre>
   * from is the ethereum signer address in hex format. This address value is checked
   * against the address derived from the signature (V, R, S) using the
   * secp256k1 elliptic curve
   * </pre>
   *
   * <code>string from = 4 [json_name = "from"];</code>
   * @return The bytes for from.
   */
  com.google.protobuf.ByteString
      getFromBytes();
}
