// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ethermint/types/v1/indexer.proto

package com.ethermint.types.v1;

public interface TxResultOrBuilder extends
    // @@protoc_insertion_point(interface_extends:ethermint.types.v1.TxResult)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * height of the blockchain
   * </pre>
   *
   * <code>int64 height = 1 [json_name = "height"];</code>
   * @return The height.
   */
  long getHeight();

  /**
   * <pre>
   * tx_index of the cosmos transaction
   * </pre>
   *
   * <code>uint32 tx_index = 2 [json_name = "txIndex"];</code>
   * @return The txIndex.
   */
  int getTxIndex();

  /**
   * <pre>
   * msg_index in a batch transaction
   * </pre>
   *
   * <code>uint32 msg_index = 3 [json_name = "msgIndex"];</code>
   * @return The msgIndex.
   */
  int getMsgIndex();

  /**
   * <pre>
   * eth_tx_index is the index in the list of valid eth tx in the block,
   * aka. the transaction list returned by eth_getBlock api.
   * </pre>
   *
   * <code>int32 eth_tx_index = 4 [json_name = "ethTxIndex"];</code>
   * @return The ethTxIndex.
   */
  int getEthTxIndex();

  /**
   * <pre>
   * failed is true if the eth transaction did not go succeed
   * </pre>
   *
   * <code>bool failed = 5 [json_name = "failed"];</code>
   * @return The failed.
   */
  boolean getFailed();

  /**
   * <pre>
   * gas_used by the transaction. If it exceeds the block gas limit,
   * it's set to gas limit, which is what's actually deducted by ante handler.
   * </pre>
   *
   * <code>uint64 gas_used = 6 [json_name = "gasUsed"];</code>
   * @return The gasUsed.
   */
  long getGasUsed();

  /**
   * <pre>
   * cumulative_gas_used specifies the cumulated amount of gas used for all
   * processed messages within the current batch transaction.
   * </pre>
   *
   * <code>uint64 cumulative_gas_used = 7 [json_name = "cumulativeGasUsed"];</code>
   * @return The cumulativeGasUsed.
   */
  long getCumulativeGasUsed();
}
