// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desmos/profiles/v2/models_params.proto

package com.desmos.profiles.v2;

public interface OracleParamsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:desmos.profiles.v2.OracleParams)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * ScriptID represents the ID of the oracle script to be called to verify the
   * data
   * </pre>
   *
   * <code>uint64 script_id = 1 [json_name = "scriptId", (.gogoproto.customname) = "ScriptID", (.gogoproto.moretags) = "yaml:&#92;"script_id&#92;""];</code>
   * @return The scriptId.
   */
  long getScriptId();

  /**
   * <pre>
   * AskCount represents the number of oracles to which ask to verify the data
   * </pre>
   *
   * <code>uint64 ask_count = 2 [json_name = "askCount", (.gogoproto.moretags) = "yaml:&#92;"ask_count&#92;""];</code>
   * @return The askCount.
   */
  long getAskCount();

  /**
   * <pre>
   * MinCount represents the minimum count of oracles that should complete the
   * verification successfully
   * </pre>
   *
   * <code>uint64 min_count = 3 [json_name = "minCount", (.gogoproto.moretags) = "yaml:&#92;"min_count&#92;""];</code>
   * @return The minCount.
   */
  long getMinCount();

  /**
   * <pre>
   * PrepareGas represents the amount of gas to be used during the preparation
   * stage of the oracle script
   * </pre>
   *
   * <code>uint64 prepare_gas = 4 [json_name = "prepareGas", (.gogoproto.moretags) = "yaml:&#92;"prepare_gas&#92;""];</code>
   * @return The prepareGas.
   */
  long getPrepareGas();

  /**
   * <pre>
   * ExecuteGas represents the amount of gas to be used during the execution of
   * the oracle script
   * </pre>
   *
   * <code>uint64 execute_gas = 5 [json_name = "executeGas", (.gogoproto.moretags) = "yaml:&#92;"execute_gas&#92;""];</code>
   * @return The executeGas.
   */
  long getExecuteGas();

  /**
   * <pre>
   * FeeAmount represents the amount of fees to be payed in order to execute the
   * oracle script
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_amount = 6 [json_name = "feeAmount", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"fee_amount&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<com.cosmos.base.v1beta1.Coin> 
      getFeeAmountList();
  /**
   * <pre>
   * FeeAmount represents the amount of fees to be payed in order to execute the
   * oracle script
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_amount = 6 [json_name = "feeAmount", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"fee_amount&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  com.cosmos.base.v1beta1.Coin getFeeAmount(int index);
  /**
   * <pre>
   * FeeAmount represents the amount of fees to be payed in order to execute the
   * oracle script
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_amount = 6 [json_name = "feeAmount", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"fee_amount&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  int getFeeAmountCount();
  /**
   * <pre>
   * FeeAmount represents the amount of fees to be payed in order to execute the
   * oracle script
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_amount = 6 [json_name = "feeAmount", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"fee_amount&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getFeeAmountOrBuilderList();
  /**
   * <pre>
   * FeeAmount represents the amount of fees to be payed in order to execute the
   * oracle script
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_amount = 6 [json_name = "feeAmount", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"fee_amount&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  com.cosmos.base.v1beta1.CoinOrBuilder getFeeAmountOrBuilder(
      int index);
}
