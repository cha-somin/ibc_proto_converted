// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desmos/profiles/v3/models_chain_links.proto

package com.desmos.profiles.v3;

/**
 * <pre>
 * SignatureValueType specifies all the possible signature types
 * </pre>
 *
 * Protobuf enum {@code desmos.profiles.v3.SignatureValueType}
 */
public enum SignatureValueType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * SIGNATURE_VALUE_TYPE_UNSPECIFIED specifies an unknown signing mode
   * and will be rejected
   * </pre>
   *
   * <code>SIGNATURE_VALUE_TYPE_UNSPECIFIED = 0;</code>
   */
  SIGNATURE_VALUE_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   * SIGNATURE_VALUE_TYPE_RAW should be used when the value has been
   * signed as a raw byte array
   * </pre>
   *
   * <code>SIGNATURE_VALUE_TYPE_RAW = 1;</code>
   */
  SIGNATURE_VALUE_TYPE_RAW(1),
  /**
   * <pre>
   * SIGNATURE_VALUE_TYPE_COSMOS_DIRECT should be used when the signed
   * value has been encoded as a Protobuf transaction containing the owner
   * address inside its memo field
   * </pre>
   *
   * <code>SIGNATURE_VALUE_TYPE_COSMOS_DIRECT = 2;</code>
   */
  SIGNATURE_VALUE_TYPE_COSMOS_DIRECT(2),
  /**
   * <pre>
   * SIGNATURE_VALUE_TYPE_COSMOS_AMINO should be used when the value has
   * been encoded as an Amino transaction containing the owner address inside
   * its memo field
   * </pre>
   *
   * <code>SIGNATURE_VALUE_TYPE_COSMOS_AMINO = 3;</code>
   */
  SIGNATURE_VALUE_TYPE_COSMOS_AMINO(3),
  /**
   * <pre>
   * SIGNATURE_VALUE_TYPE_EVM_PERSONAL_SIGN should be used when the value
   * has been encoded following the EVM personal_sign specification
   * </pre>
   *
   * <code>SIGNATURE_VALUE_TYPE_EVM_PERSONAL_SIGN = 4;</code>
   */
  SIGNATURE_VALUE_TYPE_EVM_PERSONAL_SIGN(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * SIGNATURE_VALUE_TYPE_UNSPECIFIED specifies an unknown signing mode
   * and will be rejected
   * </pre>
   *
   * <code>SIGNATURE_VALUE_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int SIGNATURE_VALUE_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * SIGNATURE_VALUE_TYPE_RAW should be used when the value has been
   * signed as a raw byte array
   * </pre>
   *
   * <code>SIGNATURE_VALUE_TYPE_RAW = 1;</code>
   */
  public static final int SIGNATURE_VALUE_TYPE_RAW_VALUE = 1;
  /**
   * <pre>
   * SIGNATURE_VALUE_TYPE_COSMOS_DIRECT should be used when the signed
   * value has been encoded as a Protobuf transaction containing the owner
   * address inside its memo field
   * </pre>
   *
   * <code>SIGNATURE_VALUE_TYPE_COSMOS_DIRECT = 2;</code>
   */
  public static final int SIGNATURE_VALUE_TYPE_COSMOS_DIRECT_VALUE = 2;
  /**
   * <pre>
   * SIGNATURE_VALUE_TYPE_COSMOS_AMINO should be used when the value has
   * been encoded as an Amino transaction containing the owner address inside
   * its memo field
   * </pre>
   *
   * <code>SIGNATURE_VALUE_TYPE_COSMOS_AMINO = 3;</code>
   */
  public static final int SIGNATURE_VALUE_TYPE_COSMOS_AMINO_VALUE = 3;
  /**
   * <pre>
   * SIGNATURE_VALUE_TYPE_EVM_PERSONAL_SIGN should be used when the value
   * has been encoded following the EVM personal_sign specification
   * </pre>
   *
   * <code>SIGNATURE_VALUE_TYPE_EVM_PERSONAL_SIGN = 4;</code>
   */
  public static final int SIGNATURE_VALUE_TYPE_EVM_PERSONAL_SIGN_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SignatureValueType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SignatureValueType forNumber(int value) {
    switch (value) {
      case 0: return SIGNATURE_VALUE_TYPE_UNSPECIFIED;
      case 1: return SIGNATURE_VALUE_TYPE_RAW;
      case 2: return SIGNATURE_VALUE_TYPE_COSMOS_DIRECT;
      case 3: return SIGNATURE_VALUE_TYPE_COSMOS_AMINO;
      case 4: return SIGNATURE_VALUE_TYPE_EVM_PERSONAL_SIGN;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SignatureValueType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SignatureValueType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SignatureValueType>() {
          public SignatureValueType findValueByNumber(int number) {
            return SignatureValueType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.desmos.profiles.v3.ModelsChainLinksProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final SignatureValueType[] VALUES = values();

  public static SignatureValueType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SignatureValueType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:desmos.profiles.v3.SignatureValueType)
}

