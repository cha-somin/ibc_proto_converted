// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desmos/relationships/v1/models.proto

package com.desmos.relationships.v1;

public interface RelationshipOrBuilder extends
    // @@protoc_insertion_point(interface_extends:desmos.relationships.v1.Relationship)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Creator represents the creator of the relationship
   * </pre>
   *
   * <code>string creator = 1 [json_name = "creator", (.gogoproto.moretags) = "yaml:&#92;"creator&#92;""];</code>
   * @return The creator.
   */
  java.lang.String getCreator();
  /**
   * <pre>
   * Creator represents the creator of the relationship
   * </pre>
   *
   * <code>string creator = 1 [json_name = "creator", (.gogoproto.moretags) = "yaml:&#92;"creator&#92;""];</code>
   * @return The bytes for creator.
   */
  com.google.protobuf.ByteString
      getCreatorBytes();

  /**
   * <pre>
   * Counterparty represents the other user involved in the relationship
   * </pre>
   *
   * <code>string counterparty = 2 [json_name = "counterparty", (.gogoproto.moretags) = "yaml:&#92;"counterparty&#92;""];</code>
   * @return The counterparty.
   */
  java.lang.String getCounterparty();
  /**
   * <pre>
   * Counterparty represents the other user involved in the relationship
   * </pre>
   *
   * <code>string counterparty = 2 [json_name = "counterparty", (.gogoproto.moretags) = "yaml:&#92;"counterparty&#92;""];</code>
   * @return The bytes for counterparty.
   */
  com.google.protobuf.ByteString
      getCounterpartyBytes();

  /**
   * <pre>
   * SubspaceID represents the id of the subspace for which the relationship is
   * valid
   * </pre>
   *
   * <code>uint64 subspace_id = 3 [json_name = "subspaceId", (.gogoproto.customname) = "SubspaceID", (.gogoproto.moretags) = "yaml:&#92;"subspace_id&#92;""];</code>
   * @return The subspaceId.
   */
  long getSubspaceId();
}
