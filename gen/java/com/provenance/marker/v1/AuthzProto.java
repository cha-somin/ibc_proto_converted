// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: provenance/marker/v1/authz.proto

package com.provenance.marker.v1;

public final class AuthzProto {
  private AuthzProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_provenance_marker_v1_MarkerTransferAuthorization_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_provenance_marker_v1_MarkerTransferAuthorization_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n provenance/marker/v1/authz.proto\022\024prov" +
      "enance.marker.v1\032\024gogoproto/gogo.proto\032\031" +
      "cosmos_proto/cosmos.proto\032\036cosmos/base/v" +
      "1beta1/coin.proto\"\303\001\n\033MarkerTransferAuth" +
      "orization\022r\n\016transfer_limit\030\001 \003(\0132\031.cosm" +
      "os.base.v1beta1.CoinB0\310\336\037\000\252\337\037(github.com" +
      "/cosmos/cosmos-sdk/types.CoinsR\rtransfer" +
      "Limit\022\035\n\nallow_list\030\002 \003(\tR\tallowList:\021\312\264" +
      "-\rAuthorizationB\314\001\n\030com.provenance.marke" +
      "r.v1B\nAuthzProtoP\001Z2github.com/provenanc" +
      "e-io/provenance/x/marker/types\242\002\003PMX\252\002\024P" +
      "rovenance.Marker.V1\312\002\024Provenance\\Marker\\" +
      "V1\342\002 Provenance\\Marker\\V1\\GPBMetadata\352\002\026" +
      "Provenance::Marker::V1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.gogoproto.GogoProto.getDescriptor(),
          com.cosmos_proto.CosmosProto.getDescriptor(),
          com.cosmos.base.v1beta1.CoinProto.getDescriptor(),
        });
    internal_static_provenance_marker_v1_MarkerTransferAuthorization_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_provenance_marker_v1_MarkerTransferAuthorization_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_provenance_marker_v1_MarkerTransferAuthorization_descriptor,
        new java.lang.String[] { "TransferLimit", "AllowList", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.cosmos_proto.CosmosProto.implementsInterface);
    registry.add(com.gogoproto.GogoProto.castrepeated);
    registry.add(com.gogoproto.GogoProto.nullable);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.gogoproto.GogoProto.getDescriptor();
    com.cosmos_proto.CosmosProto.getDescriptor();
    com.cosmos.base.v1beta1.CoinProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
