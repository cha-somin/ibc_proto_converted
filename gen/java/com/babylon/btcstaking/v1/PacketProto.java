// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: babylon/btcstaking/v1/packet.proto

package com.babylon.btcstaking.v1;

public final class PacketProto {
  private PacketProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SlashedFinalityProviderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.SlashedFinalityProvider)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
     * the PK follows encoding in BIP-340 spec in hex format
     * </pre>
     *
     * <code>string btc_pk_hex = 1 [json_name = "btcPkHex"];</code>
     * @return The btcPkHex.
     */
    java.lang.String getBtcPkHex();
    /**
     * <pre>
     * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
     * the PK follows encoding in BIP-340 spec in hex format
     * </pre>
     *
     * <code>string btc_pk_hex = 1 [json_name = "btcPkHex"];</code>
     * @return The bytes for btcPkHex.
     */
    com.google.protobuf.ByteString
        getBtcPkHexBytes();

    /**
     * <pre>
     * recovered_fp_btc_sk is the finality provider's BTC SK extracted due to slashing
     * this allows the consumer to verify the BTC delegation is indeed slashed
     * </pre>
     *
     * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
     * @return The recoveredFpBtcSk.
     */
    java.lang.String getRecoveredFpBtcSk();
    /**
     * <pre>
     * recovered_fp_btc_sk is the finality provider's BTC SK extracted due to slashing
     * this allows the consumer to verify the BTC delegation is indeed slashed
     * </pre>
     *
     * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
     * @return The bytes for recoveredFpBtcSk.
     */
    com.google.protobuf.ByteString
        getRecoveredFpBtcSkBytes();
  }
  /**
   * <pre>
   * SlashedFinalityProvider carries a slashed finality provider on a consumer
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.SlashedFinalityProvider}
   */
  public static final class SlashedFinalityProvider extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.SlashedFinalityProvider)
      SlashedFinalityProviderOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SlashedFinalityProvider.newBuilder() to construct.
    private SlashedFinalityProvider(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SlashedFinalityProvider() {
      btcPkHex_ = "";
      recoveredFpBtcSk_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SlashedFinalityProvider();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_SlashedFinalityProvider_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_SlashedFinalityProvider_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider.class, com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider.Builder.class);
    }

    public static final int BTC_PK_HEX_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object btcPkHex_ = "";
    /**
     * <pre>
     * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
     * the PK follows encoding in BIP-340 spec in hex format
     * </pre>
     *
     * <code>string btc_pk_hex = 1 [json_name = "btcPkHex"];</code>
     * @return The btcPkHex.
     */
    @java.lang.Override
    public java.lang.String getBtcPkHex() {
      java.lang.Object ref = btcPkHex_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        btcPkHex_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
     * the PK follows encoding in BIP-340 spec in hex format
     * </pre>
     *
     * <code>string btc_pk_hex = 1 [json_name = "btcPkHex"];</code>
     * @return The bytes for btcPkHex.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getBtcPkHexBytes() {
      java.lang.Object ref = btcPkHex_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        btcPkHex_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RECOVERED_FP_BTC_SK_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object recoveredFpBtcSk_ = "";
    /**
     * <pre>
     * recovered_fp_btc_sk is the finality provider's BTC SK extracted due to slashing
     * this allows the consumer to verify the BTC delegation is indeed slashed
     * </pre>
     *
     * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
     * @return The recoveredFpBtcSk.
     */
    @java.lang.Override
    public java.lang.String getRecoveredFpBtcSk() {
      java.lang.Object ref = recoveredFpBtcSk_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        recoveredFpBtcSk_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * recovered_fp_btc_sk is the finality provider's BTC SK extracted due to slashing
     * this allows the consumer to verify the BTC delegation is indeed slashed
     * </pre>
     *
     * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
     * @return The bytes for recoveredFpBtcSk.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRecoveredFpBtcSkBytes() {
      java.lang.Object ref = recoveredFpBtcSk_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        recoveredFpBtcSk_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(btcPkHex_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, btcPkHex_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(recoveredFpBtcSk_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, recoveredFpBtcSk_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(btcPkHex_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, btcPkHex_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(recoveredFpBtcSk_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, recoveredFpBtcSk_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider other = (com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider) obj;

      if (!getBtcPkHex()
          .equals(other.getBtcPkHex())) return false;
      if (!getRecoveredFpBtcSk()
          .equals(other.getRecoveredFpBtcSk())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + BTC_PK_HEX_FIELD_NUMBER;
      hash = (53 * hash) + getBtcPkHex().hashCode();
      hash = (37 * hash) + RECOVERED_FP_BTC_SK_FIELD_NUMBER;
      hash = (53 * hash) + getRecoveredFpBtcSk().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SlashedFinalityProvider carries a slashed finality provider on a consumer
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.SlashedFinalityProvider}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.SlashedFinalityProvider)
        com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProviderOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_SlashedFinalityProvider_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_SlashedFinalityProvider_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider.class, com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        btcPkHex_ = "";
        recoveredFpBtcSk_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_SlashedFinalityProvider_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider build() {
        com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider buildPartial() {
        com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider result = new com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.btcPkHex_ = btcPkHex_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.recoveredFpBtcSk_ = recoveredFpBtcSk_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider) {
          return mergeFrom((com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider other) {
        if (other == com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider.getDefaultInstance()) return this;
        if (!other.getBtcPkHex().isEmpty()) {
          btcPkHex_ = other.btcPkHex_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (!other.getRecoveredFpBtcSk().isEmpty()) {
          recoveredFpBtcSk_ = other.recoveredFpBtcSk_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                btcPkHex_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                recoveredFpBtcSk_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object btcPkHex_ = "";
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 1 [json_name = "btcPkHex"];</code>
       * @return The btcPkHex.
       */
      public java.lang.String getBtcPkHex() {
        java.lang.Object ref = btcPkHex_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          btcPkHex_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 1 [json_name = "btcPkHex"];</code>
       * @return The bytes for btcPkHex.
       */
      public com.google.protobuf.ByteString
          getBtcPkHexBytes() {
        java.lang.Object ref = btcPkHex_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          btcPkHex_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 1 [json_name = "btcPkHex"];</code>
       * @param value The btcPkHex to set.
       * @return This builder for chaining.
       */
      public Builder setBtcPkHex(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        btcPkHex_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 1 [json_name = "btcPkHex"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBtcPkHex() {
        btcPkHex_ = getDefaultInstance().getBtcPkHex();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 1 [json_name = "btcPkHex"];</code>
       * @param value The bytes for btcPkHex to set.
       * @return This builder for chaining.
       */
      public Builder setBtcPkHexBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        btcPkHex_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object recoveredFpBtcSk_ = "";
      /**
       * <pre>
       * recovered_fp_btc_sk is the finality provider's BTC SK extracted due to slashing
       * this allows the consumer to verify the BTC delegation is indeed slashed
       * </pre>
       *
       * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
       * @return The recoveredFpBtcSk.
       */
      public java.lang.String getRecoveredFpBtcSk() {
        java.lang.Object ref = recoveredFpBtcSk_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          recoveredFpBtcSk_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * recovered_fp_btc_sk is the finality provider's BTC SK extracted due to slashing
       * this allows the consumer to verify the BTC delegation is indeed slashed
       * </pre>
       *
       * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
       * @return The bytes for recoveredFpBtcSk.
       */
      public com.google.protobuf.ByteString
          getRecoveredFpBtcSkBytes() {
        java.lang.Object ref = recoveredFpBtcSk_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          recoveredFpBtcSk_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * recovered_fp_btc_sk is the finality provider's BTC SK extracted due to slashing
       * this allows the consumer to verify the BTC delegation is indeed slashed
       * </pre>
       *
       * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
       * @param value The recoveredFpBtcSk to set.
       * @return This builder for chaining.
       */
      public Builder setRecoveredFpBtcSk(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        recoveredFpBtcSk_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * recovered_fp_btc_sk is the finality provider's BTC SK extracted due to slashing
       * this allows the consumer to verify the BTC delegation is indeed slashed
       * </pre>
       *
       * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
       * @return This builder for chaining.
       */
      public Builder clearRecoveredFpBtcSk() {
        recoveredFpBtcSk_ = getDefaultInstance().getRecoveredFpBtcSk();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * recovered_fp_btc_sk is the finality provider's BTC SK extracted due to slashing
       * this allows the consumer to verify the BTC delegation is indeed slashed
       * </pre>
       *
       * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
       * @param value The bytes for recoveredFpBtcSk to set.
       * @return This builder for chaining.
       */
      public Builder setRecoveredFpBtcSkBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        recoveredFpBtcSk_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.SlashedFinalityProvider)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.SlashedFinalityProvider)
    private static final com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider();
    }

    public static com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SlashedFinalityProvider>
        PARSER = new com.google.protobuf.AbstractParser<SlashedFinalityProvider>() {
      @java.lang.Override
      public SlashedFinalityProvider parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SlashedFinalityProvider> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SlashedFinalityProvider> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.SlashedFinalityProvider getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCStakingIBCPacketOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.BTCStakingIBCPacket)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     */
    java.util.List<com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider> 
        getNewFpList();
    /**
     * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     */
    com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider getNewFp(int index);
    /**
     * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     */
    int getNewFpCount();
    /**
     * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     */
    java.util.List<? extends com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder> 
        getNewFpOrBuilderList();
    /**
     * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     */
    com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder getNewFpOrBuilder(
        int index);

    /**
     * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     */
    java.util.List<com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation> 
        getActiveDelList();
    /**
     * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     */
    com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation getActiveDel(int index);
    /**
     * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     */
    int getActiveDelCount();
    /**
     * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     */
    java.util.List<? extends com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder> 
        getActiveDelOrBuilderList();
    /**
     * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     */
    com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder getActiveDelOrBuilder(
        int index);

    /**
     * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     */
    java.util.List<com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation> 
        getSlashedDelList();
    /**
     * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     */
    com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation getSlashedDel(int index);
    /**
     * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     */
    int getSlashedDelCount();
    /**
     * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     */
    java.util.List<? extends com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder> 
        getSlashedDelOrBuilderList();
    /**
     * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     */
    com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder getSlashedDelOrBuilder(
        int index);

    /**
     * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     */
    java.util.List<com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation> 
        getUnbondedDelList();
    /**
     * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     */
    com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation getUnbondedDel(int index);
    /**
     * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     */
    int getUnbondedDelCount();
    /**
     * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     */
    java.util.List<? extends com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder> 
        getUnbondedDelOrBuilderList();
    /**
     * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     */
    com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder getUnbondedDelOrBuilder(
        int index);
  }
  /**
   * <pre>
   * BTCStakingIBCPacket is an IBC packet sent from Babylon to a consumer
   * It carries a set of events related to BTC staking for a given consumer
   * It will be constructed and sent upon `EndBlock` of ZoneConcierge
   * (if there are any BTC staking events for a consumer)
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.BTCStakingIBCPacket}
   */
  public static final class BTCStakingIBCPacket extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.BTCStakingIBCPacket)
      BTCStakingIBCPacketOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BTCStakingIBCPacket.newBuilder() to construct.
    private BTCStakingIBCPacket(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BTCStakingIBCPacket() {
      newFp_ = java.util.Collections.emptyList();
      activeDel_ = java.util.Collections.emptyList();
      slashedDel_ = java.util.Collections.emptyList();
      unbondedDel_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BTCStakingIBCPacket();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCStakingIBCPacket_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCStakingIBCPacket_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket.class, com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket.Builder.class);
    }

    public static final int NEW_FP_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider> newFp_;
    /**
     * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     */
    @java.lang.Override
    public java.util.List<com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider> getNewFpList() {
      return newFp_;
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder> 
        getNewFpOrBuilderList() {
      return newFp_;
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     */
    @java.lang.Override
    public int getNewFpCount() {
      return newFp_.size();
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider getNewFp(int index) {
      return newFp_.get(index);
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder getNewFpOrBuilder(
        int index) {
      return newFp_.get(index);
    }

    public static final int ACTIVE_DEL_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation> activeDel_;
    /**
     * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     */
    @java.lang.Override
    public java.util.List<com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation> getActiveDelList() {
      return activeDel_;
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder> 
        getActiveDelOrBuilderList() {
      return activeDel_;
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     */
    @java.lang.Override
    public int getActiveDelCount() {
      return activeDel_.size();
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation getActiveDel(int index) {
      return activeDel_.get(index);
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder getActiveDelOrBuilder(
        int index) {
      return activeDel_.get(index);
    }

    public static final int SLASHED_DEL_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private java.util.List<com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation> slashedDel_;
    /**
     * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     */
    @java.lang.Override
    public java.util.List<com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation> getSlashedDelList() {
      return slashedDel_;
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder> 
        getSlashedDelOrBuilderList() {
      return slashedDel_;
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     */
    @java.lang.Override
    public int getSlashedDelCount() {
      return slashedDel_.size();
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation getSlashedDel(int index) {
      return slashedDel_.get(index);
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder getSlashedDelOrBuilder(
        int index) {
      return slashedDel_.get(index);
    }

    public static final int UNBONDED_DEL_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation> unbondedDel_;
    /**
     * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     */
    @java.lang.Override
    public java.util.List<com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation> getUnbondedDelList() {
      return unbondedDel_;
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder> 
        getUnbondedDelOrBuilderList() {
      return unbondedDel_;
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     */
    @java.lang.Override
    public int getUnbondedDelCount() {
      return unbondedDel_.size();
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation getUnbondedDel(int index) {
      return unbondedDel_.get(index);
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder getUnbondedDelOrBuilder(
        int index) {
      return unbondedDel_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < newFp_.size(); i++) {
        output.writeMessage(1, newFp_.get(i));
      }
      for (int i = 0; i < activeDel_.size(); i++) {
        output.writeMessage(2, activeDel_.get(i));
      }
      for (int i = 0; i < slashedDel_.size(); i++) {
        output.writeMessage(3, slashedDel_.get(i));
      }
      for (int i = 0; i < unbondedDel_.size(); i++) {
        output.writeMessage(4, unbondedDel_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < newFp_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, newFp_.get(i));
      }
      for (int i = 0; i < activeDel_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, activeDel_.get(i));
      }
      for (int i = 0; i < slashedDel_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, slashedDel_.get(i));
      }
      for (int i = 0; i < unbondedDel_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, unbondedDel_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket other = (com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket) obj;

      if (!getNewFpList()
          .equals(other.getNewFpList())) return false;
      if (!getActiveDelList()
          .equals(other.getActiveDelList())) return false;
      if (!getSlashedDelList()
          .equals(other.getSlashedDelList())) return false;
      if (!getUnbondedDelList()
          .equals(other.getUnbondedDelList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getNewFpCount() > 0) {
        hash = (37 * hash) + NEW_FP_FIELD_NUMBER;
        hash = (53 * hash) + getNewFpList().hashCode();
      }
      if (getActiveDelCount() > 0) {
        hash = (37 * hash) + ACTIVE_DEL_FIELD_NUMBER;
        hash = (53 * hash) + getActiveDelList().hashCode();
      }
      if (getSlashedDelCount() > 0) {
        hash = (37 * hash) + SLASHED_DEL_FIELD_NUMBER;
        hash = (53 * hash) + getSlashedDelList().hashCode();
      }
      if (getUnbondedDelCount() > 0) {
        hash = (37 * hash) + UNBONDED_DEL_FIELD_NUMBER;
        hash = (53 * hash) + getUnbondedDelList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * BTCStakingIBCPacket is an IBC packet sent from Babylon to a consumer
     * It carries a set of events related to BTC staking for a given consumer
     * It will be constructed and sent upon `EndBlock` of ZoneConcierge
     * (if there are any BTC staking events for a consumer)
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.BTCStakingIBCPacket}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.BTCStakingIBCPacket)
        com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacketOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCStakingIBCPacket_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCStakingIBCPacket_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket.class, com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (newFpBuilder_ == null) {
          newFp_ = java.util.Collections.emptyList();
        } else {
          newFp_ = null;
          newFpBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (activeDelBuilder_ == null) {
          activeDel_ = java.util.Collections.emptyList();
        } else {
          activeDel_ = null;
          activeDelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (slashedDelBuilder_ == null) {
          slashedDel_ = java.util.Collections.emptyList();
        } else {
          slashedDel_ = null;
          slashedDelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (unbondedDelBuilder_ == null) {
          unbondedDel_ = java.util.Collections.emptyList();
        } else {
          unbondedDel_ = null;
          unbondedDelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCStakingIBCPacket_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket build() {
        com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket buildPartial() {
        com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket result = new com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket result) {
        if (newFpBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            newFp_ = java.util.Collections.unmodifiableList(newFp_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.newFp_ = newFp_;
        } else {
          result.newFp_ = newFpBuilder_.build();
        }
        if (activeDelBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            activeDel_ = java.util.Collections.unmodifiableList(activeDel_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.activeDel_ = activeDel_;
        } else {
          result.activeDel_ = activeDelBuilder_.build();
        }
        if (slashedDelBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            slashedDel_ = java.util.Collections.unmodifiableList(slashedDel_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.slashedDel_ = slashedDel_;
        } else {
          result.slashedDel_ = slashedDelBuilder_.build();
        }
        if (unbondedDelBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            unbondedDel_ = java.util.Collections.unmodifiableList(unbondedDel_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.unbondedDel_ = unbondedDel_;
        } else {
          result.unbondedDel_ = unbondedDelBuilder_.build();
        }
      }

      private void buildPartial0(com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket) {
          return mergeFrom((com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket other) {
        if (other == com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket.getDefaultInstance()) return this;
        if (newFpBuilder_ == null) {
          if (!other.newFp_.isEmpty()) {
            if (newFp_.isEmpty()) {
              newFp_ = other.newFp_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureNewFpIsMutable();
              newFp_.addAll(other.newFp_);
            }
            onChanged();
          }
        } else {
          if (!other.newFp_.isEmpty()) {
            if (newFpBuilder_.isEmpty()) {
              newFpBuilder_.dispose();
              newFpBuilder_ = null;
              newFp_ = other.newFp_;
              bitField0_ = (bitField0_ & ~0x00000001);
              newFpBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getNewFpFieldBuilder() : null;
            } else {
              newFpBuilder_.addAllMessages(other.newFp_);
            }
          }
        }
        if (activeDelBuilder_ == null) {
          if (!other.activeDel_.isEmpty()) {
            if (activeDel_.isEmpty()) {
              activeDel_ = other.activeDel_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureActiveDelIsMutable();
              activeDel_.addAll(other.activeDel_);
            }
            onChanged();
          }
        } else {
          if (!other.activeDel_.isEmpty()) {
            if (activeDelBuilder_.isEmpty()) {
              activeDelBuilder_.dispose();
              activeDelBuilder_ = null;
              activeDel_ = other.activeDel_;
              bitField0_ = (bitField0_ & ~0x00000002);
              activeDelBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getActiveDelFieldBuilder() : null;
            } else {
              activeDelBuilder_.addAllMessages(other.activeDel_);
            }
          }
        }
        if (slashedDelBuilder_ == null) {
          if (!other.slashedDel_.isEmpty()) {
            if (slashedDel_.isEmpty()) {
              slashedDel_ = other.slashedDel_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureSlashedDelIsMutable();
              slashedDel_.addAll(other.slashedDel_);
            }
            onChanged();
          }
        } else {
          if (!other.slashedDel_.isEmpty()) {
            if (slashedDelBuilder_.isEmpty()) {
              slashedDelBuilder_.dispose();
              slashedDelBuilder_ = null;
              slashedDel_ = other.slashedDel_;
              bitField0_ = (bitField0_ & ~0x00000004);
              slashedDelBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSlashedDelFieldBuilder() : null;
            } else {
              slashedDelBuilder_.addAllMessages(other.slashedDel_);
            }
          }
        }
        if (unbondedDelBuilder_ == null) {
          if (!other.unbondedDel_.isEmpty()) {
            if (unbondedDel_.isEmpty()) {
              unbondedDel_ = other.unbondedDel_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureUnbondedDelIsMutable();
              unbondedDel_.addAll(other.unbondedDel_);
            }
            onChanged();
          }
        } else {
          if (!other.unbondedDel_.isEmpty()) {
            if (unbondedDelBuilder_.isEmpty()) {
              unbondedDelBuilder_.dispose();
              unbondedDelBuilder_ = null;
              unbondedDel_ = other.unbondedDel_;
              bitField0_ = (bitField0_ & ~0x00000008);
              unbondedDelBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getUnbondedDelFieldBuilder() : null;
            } else {
              unbondedDelBuilder_.addAllMessages(other.unbondedDel_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider m =
                    input.readMessage(
                        com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.parser(),
                        extensionRegistry);
                if (newFpBuilder_ == null) {
                  ensureNewFpIsMutable();
                  newFp_.add(m);
                } else {
                  newFpBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation m =
                    input.readMessage(
                        com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.parser(),
                        extensionRegistry);
                if (activeDelBuilder_ == null) {
                  ensureActiveDelIsMutable();
                  activeDel_.add(m);
                } else {
                  activeDelBuilder_.addMessage(m);
                }
                break;
              } // case 18
              case 26: {
                com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation m =
                    input.readMessage(
                        com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.parser(),
                        extensionRegistry);
                if (slashedDelBuilder_ == null) {
                  ensureSlashedDelIsMutable();
                  slashedDel_.add(m);
                } else {
                  slashedDelBuilder_.addMessage(m);
                }
                break;
              } // case 26
              case 34: {
                com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation m =
                    input.readMessage(
                        com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.parser(),
                        extensionRegistry);
                if (unbondedDelBuilder_ == null) {
                  ensureUnbondedDelIsMutable();
                  unbondedDel_.add(m);
                } else {
                  unbondedDelBuilder_.addMessage(m);
                }
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider> newFp_ =
        java.util.Collections.emptyList();
      private void ensureNewFpIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          newFp_ = new java.util.ArrayList<com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider>(newFp_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider, com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder, com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder> newFpBuilder_;

      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider> getNewFpList() {
        if (newFpBuilder_ == null) {
          return java.util.Collections.unmodifiableList(newFp_);
        } else {
          return newFpBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public int getNewFpCount() {
        if (newFpBuilder_ == null) {
          return newFp_.size();
        } else {
          return newFpBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider getNewFp(int index) {
        if (newFpBuilder_ == null) {
          return newFp_.get(index);
        } else {
          return newFpBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public Builder setNewFp(
          int index, com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider value) {
        if (newFpBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNewFpIsMutable();
          newFp_.set(index, value);
          onChanged();
        } else {
          newFpBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public Builder setNewFp(
          int index, com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder builderForValue) {
        if (newFpBuilder_ == null) {
          ensureNewFpIsMutable();
          newFp_.set(index, builderForValue.build());
          onChanged();
        } else {
          newFpBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public Builder addNewFp(com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider value) {
        if (newFpBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNewFpIsMutable();
          newFp_.add(value);
          onChanged();
        } else {
          newFpBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public Builder addNewFp(
          int index, com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider value) {
        if (newFpBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureNewFpIsMutable();
          newFp_.add(index, value);
          onChanged();
        } else {
          newFpBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public Builder addNewFp(
          com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder builderForValue) {
        if (newFpBuilder_ == null) {
          ensureNewFpIsMutable();
          newFp_.add(builderForValue.build());
          onChanged();
        } else {
          newFpBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public Builder addNewFp(
          int index, com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder builderForValue) {
        if (newFpBuilder_ == null) {
          ensureNewFpIsMutable();
          newFp_.add(index, builderForValue.build());
          onChanged();
        } else {
          newFpBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public Builder addAllNewFp(
          java.lang.Iterable<? extends com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider> values) {
        if (newFpBuilder_ == null) {
          ensureNewFpIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, newFp_);
          onChanged();
        } else {
          newFpBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public Builder clearNewFp() {
        if (newFpBuilder_ == null) {
          newFp_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          newFpBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public Builder removeNewFp(int index) {
        if (newFpBuilder_ == null) {
          ensureNewFpIsMutable();
          newFp_.remove(index);
          onChanged();
        } else {
          newFpBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder getNewFpBuilder(
          int index) {
        return getNewFpFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder getNewFpOrBuilder(
          int index) {
        if (newFpBuilder_ == null) {
          return newFp_.get(index);  } else {
          return newFpBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public java.util.List<? extends com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder> 
           getNewFpOrBuilderList() {
        if (newFpBuilder_ != null) {
          return newFpBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(newFp_);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder addNewFpBuilder() {
        return getNewFpFieldBuilder().addBuilder(
            com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.getDefaultInstance());
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder addNewFpBuilder(
          int index) {
        return getNewFpFieldBuilder().addBuilder(
            index, com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.getDefaultInstance());
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder> 
           getNewFpBuilderList() {
        return getNewFpFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider, com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder, com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder> 
          getNewFpFieldBuilder() {
        if (newFpBuilder_ == null) {
          newFpBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider, com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder, com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder>(
                  newFp_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          newFp_ = null;
        }
        return newFpBuilder_;
      }

      private java.util.List<com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation> activeDel_ =
        java.util.Collections.emptyList();
      private void ensureActiveDelIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          activeDel_ = new java.util.ArrayList<com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation>(activeDel_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder> activeDelBuilder_;

      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation> getActiveDelList() {
        if (activeDelBuilder_ == null) {
          return java.util.Collections.unmodifiableList(activeDel_);
        } else {
          return activeDelBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public int getActiveDelCount() {
        if (activeDelBuilder_ == null) {
          return activeDel_.size();
        } else {
          return activeDelBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation getActiveDel(int index) {
        if (activeDelBuilder_ == null) {
          return activeDel_.get(index);
        } else {
          return activeDelBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public Builder setActiveDel(
          int index, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation value) {
        if (activeDelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureActiveDelIsMutable();
          activeDel_.set(index, value);
          onChanged();
        } else {
          activeDelBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public Builder setActiveDel(
          int index, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder builderForValue) {
        if (activeDelBuilder_ == null) {
          ensureActiveDelIsMutable();
          activeDel_.set(index, builderForValue.build());
          onChanged();
        } else {
          activeDelBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public Builder addActiveDel(com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation value) {
        if (activeDelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureActiveDelIsMutable();
          activeDel_.add(value);
          onChanged();
        } else {
          activeDelBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public Builder addActiveDel(
          int index, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation value) {
        if (activeDelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureActiveDelIsMutable();
          activeDel_.add(index, value);
          onChanged();
        } else {
          activeDelBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public Builder addActiveDel(
          com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder builderForValue) {
        if (activeDelBuilder_ == null) {
          ensureActiveDelIsMutable();
          activeDel_.add(builderForValue.build());
          onChanged();
        } else {
          activeDelBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public Builder addActiveDel(
          int index, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder builderForValue) {
        if (activeDelBuilder_ == null) {
          ensureActiveDelIsMutable();
          activeDel_.add(index, builderForValue.build());
          onChanged();
        } else {
          activeDelBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public Builder addAllActiveDel(
          java.lang.Iterable<? extends com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation> values) {
        if (activeDelBuilder_ == null) {
          ensureActiveDelIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, activeDel_);
          onChanged();
        } else {
          activeDelBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public Builder clearActiveDel() {
        if (activeDelBuilder_ == null) {
          activeDel_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          activeDelBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public Builder removeActiveDel(int index) {
        if (activeDelBuilder_ == null) {
          ensureActiveDelIsMutable();
          activeDel_.remove(index);
          onChanged();
        } else {
          activeDelBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder getActiveDelBuilder(
          int index) {
        return getActiveDelFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder getActiveDelOrBuilder(
          int index) {
        if (activeDelBuilder_ == null) {
          return activeDel_.get(index);  } else {
          return activeDelBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public java.util.List<? extends com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder> 
           getActiveDelOrBuilderList() {
        if (activeDelBuilder_ != null) {
          return activeDelBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(activeDel_);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder addActiveDelBuilder() {
        return getActiveDelFieldBuilder().addBuilder(
            com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.getDefaultInstance());
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder addActiveDelBuilder(
          int index) {
        return getActiveDelFieldBuilder().addBuilder(
            index, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.getDefaultInstance());
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder> 
           getActiveDelBuilderList() {
        return getActiveDelFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder> 
          getActiveDelFieldBuilder() {
        if (activeDelBuilder_ == null) {
          activeDelBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder>(
                  activeDel_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          activeDel_ = null;
        }
        return activeDelBuilder_;
      }

      private java.util.List<com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation> slashedDel_ =
        java.util.Collections.emptyList();
      private void ensureSlashedDelIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          slashedDel_ = new java.util.ArrayList<com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation>(slashedDel_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder> slashedDelBuilder_;

      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation> getSlashedDelList() {
        if (slashedDelBuilder_ == null) {
          return java.util.Collections.unmodifiableList(slashedDel_);
        } else {
          return slashedDelBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public int getSlashedDelCount() {
        if (slashedDelBuilder_ == null) {
          return slashedDel_.size();
        } else {
          return slashedDelBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation getSlashedDel(int index) {
        if (slashedDelBuilder_ == null) {
          return slashedDel_.get(index);
        } else {
          return slashedDelBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public Builder setSlashedDel(
          int index, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation value) {
        if (slashedDelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSlashedDelIsMutable();
          slashedDel_.set(index, value);
          onChanged();
        } else {
          slashedDelBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public Builder setSlashedDel(
          int index, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder builderForValue) {
        if (slashedDelBuilder_ == null) {
          ensureSlashedDelIsMutable();
          slashedDel_.set(index, builderForValue.build());
          onChanged();
        } else {
          slashedDelBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public Builder addSlashedDel(com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation value) {
        if (slashedDelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSlashedDelIsMutable();
          slashedDel_.add(value);
          onChanged();
        } else {
          slashedDelBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public Builder addSlashedDel(
          int index, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation value) {
        if (slashedDelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSlashedDelIsMutable();
          slashedDel_.add(index, value);
          onChanged();
        } else {
          slashedDelBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public Builder addSlashedDel(
          com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder builderForValue) {
        if (slashedDelBuilder_ == null) {
          ensureSlashedDelIsMutable();
          slashedDel_.add(builderForValue.build());
          onChanged();
        } else {
          slashedDelBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public Builder addSlashedDel(
          int index, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder builderForValue) {
        if (slashedDelBuilder_ == null) {
          ensureSlashedDelIsMutable();
          slashedDel_.add(index, builderForValue.build());
          onChanged();
        } else {
          slashedDelBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public Builder addAllSlashedDel(
          java.lang.Iterable<? extends com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation> values) {
        if (slashedDelBuilder_ == null) {
          ensureSlashedDelIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, slashedDel_);
          onChanged();
        } else {
          slashedDelBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public Builder clearSlashedDel() {
        if (slashedDelBuilder_ == null) {
          slashedDel_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          slashedDelBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public Builder removeSlashedDel(int index) {
        if (slashedDelBuilder_ == null) {
          ensureSlashedDelIsMutable();
          slashedDel_.remove(index);
          onChanged();
        } else {
          slashedDelBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder getSlashedDelBuilder(
          int index) {
        return getSlashedDelFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder getSlashedDelOrBuilder(
          int index) {
        if (slashedDelBuilder_ == null) {
          return slashedDel_.get(index);  } else {
          return slashedDelBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public java.util.List<? extends com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder> 
           getSlashedDelOrBuilderList() {
        if (slashedDelBuilder_ != null) {
          return slashedDelBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(slashedDel_);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder addSlashedDelBuilder() {
        return getSlashedDelFieldBuilder().addBuilder(
            com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.getDefaultInstance());
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder addSlashedDelBuilder(
          int index) {
        return getSlashedDelFieldBuilder().addBuilder(
            index, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.getDefaultInstance());
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder> 
           getSlashedDelBuilderList() {
        return getSlashedDelFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder> 
          getSlashedDelFieldBuilder() {
        if (slashedDelBuilder_ == null) {
          slashedDelBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder>(
                  slashedDel_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          slashedDel_ = null;
        }
        return slashedDelBuilder_;
      }

      private java.util.List<com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation> unbondedDel_ =
        java.util.Collections.emptyList();
      private void ensureUnbondedDelIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          unbondedDel_ = new java.util.ArrayList<com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation>(unbondedDel_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder> unbondedDelBuilder_;

      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation> getUnbondedDelList() {
        if (unbondedDelBuilder_ == null) {
          return java.util.Collections.unmodifiableList(unbondedDel_);
        } else {
          return unbondedDelBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public int getUnbondedDelCount() {
        if (unbondedDelBuilder_ == null) {
          return unbondedDel_.size();
        } else {
          return unbondedDelBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation getUnbondedDel(int index) {
        if (unbondedDelBuilder_ == null) {
          return unbondedDel_.get(index);
        } else {
          return unbondedDelBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public Builder setUnbondedDel(
          int index, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation value) {
        if (unbondedDelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUnbondedDelIsMutable();
          unbondedDel_.set(index, value);
          onChanged();
        } else {
          unbondedDelBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public Builder setUnbondedDel(
          int index, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder builderForValue) {
        if (unbondedDelBuilder_ == null) {
          ensureUnbondedDelIsMutable();
          unbondedDel_.set(index, builderForValue.build());
          onChanged();
        } else {
          unbondedDelBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public Builder addUnbondedDel(com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation value) {
        if (unbondedDelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUnbondedDelIsMutable();
          unbondedDel_.add(value);
          onChanged();
        } else {
          unbondedDelBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public Builder addUnbondedDel(
          int index, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation value) {
        if (unbondedDelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureUnbondedDelIsMutable();
          unbondedDel_.add(index, value);
          onChanged();
        } else {
          unbondedDelBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public Builder addUnbondedDel(
          com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder builderForValue) {
        if (unbondedDelBuilder_ == null) {
          ensureUnbondedDelIsMutable();
          unbondedDel_.add(builderForValue.build());
          onChanged();
        } else {
          unbondedDelBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public Builder addUnbondedDel(
          int index, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder builderForValue) {
        if (unbondedDelBuilder_ == null) {
          ensureUnbondedDelIsMutable();
          unbondedDel_.add(index, builderForValue.build());
          onChanged();
        } else {
          unbondedDelBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public Builder addAllUnbondedDel(
          java.lang.Iterable<? extends com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation> values) {
        if (unbondedDelBuilder_ == null) {
          ensureUnbondedDelIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, unbondedDel_);
          onChanged();
        } else {
          unbondedDelBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public Builder clearUnbondedDel() {
        if (unbondedDelBuilder_ == null) {
          unbondedDel_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          unbondedDelBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public Builder removeUnbondedDel(int index) {
        if (unbondedDelBuilder_ == null) {
          ensureUnbondedDelIsMutable();
          unbondedDel_.remove(index);
          onChanged();
        } else {
          unbondedDelBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder getUnbondedDelBuilder(
          int index) {
        return getUnbondedDelFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder getUnbondedDelOrBuilder(
          int index) {
        if (unbondedDelBuilder_ == null) {
          return unbondedDel_.get(index);  } else {
          return unbondedDelBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public java.util.List<? extends com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder> 
           getUnbondedDelOrBuilderList() {
        if (unbondedDelBuilder_ != null) {
          return unbondedDelBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(unbondedDel_);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder addUnbondedDelBuilder() {
        return getUnbondedDelFieldBuilder().addBuilder(
            com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.getDefaultInstance());
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder addUnbondedDelBuilder(
          int index) {
        return getUnbondedDelFieldBuilder().addBuilder(
            index, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.getDefaultInstance());
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder> 
           getUnbondedDelBuilderList() {
        return getUnbondedDelFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder> 
          getUnbondedDelFieldBuilder() {
        if (unbondedDelBuilder_ == null) {
          unbondedDelBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder>(
                  unbondedDel_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          unbondedDel_ = null;
        }
        return unbondedDelBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.BTCStakingIBCPacket)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.BTCStakingIBCPacket)
    private static final com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket();
    }

    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCStakingIBCPacket>
        PARSER = new com.google.protobuf.AbstractParser<BTCStakingIBCPacket>() {
      @java.lang.Override
      public BTCStakingIBCPacket parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCStakingIBCPacket> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCStakingIBCPacket> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.BTCStakingIBCPacket getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NewFinalityProviderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.NewFinalityProvider)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * description defines the description terms for the finality provider.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
     * @return Whether the description field is set.
     */
    boolean hasDescription();
    /**
     * <pre>
     * description defines the description terms for the finality provider.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
     * @return The description.
     */
    com.cosmos.staking.v1beta1.StakingProto.Description getDescription();
    /**
     * <pre>
     * description defines the description terms for the finality provider.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
     */
    com.cosmos.staking.v1beta1.StakingProto.DescriptionOrBuilder getDescriptionOrBuilder();

    /**
     * <pre>
     * commission defines the commission rate of the finality provider.
     * It forms as a string converted from "cosmossdk.io/math.LegacyDec"
     * </pre>
     *
     * <code>string commission = 2 [json_name = "commission"];</code>
     * @return The commission.
     */
    java.lang.String getCommission();
    /**
     * <pre>
     * commission defines the commission rate of the finality provider.
     * It forms as a string converted from "cosmossdk.io/math.LegacyDec"
     * </pre>
     *
     * <code>string commission = 2 [json_name = "commission"];</code>
     * @return The bytes for commission.
     */
    com.google.protobuf.ByteString
        getCommissionBytes();

    /**
     * <pre>
     * addr is the bech32 address identifier of the finality provider.
     * </pre>
     *
     * <code>string addr = 3 [json_name = "addr"];</code>
     * @return The addr.
     */
    java.lang.String getAddr();
    /**
     * <pre>
     * addr is the bech32 address identifier of the finality provider.
     * </pre>
     *
     * <code>string addr = 3 [json_name = "addr"];</code>
     * @return The bytes for addr.
     */
    com.google.protobuf.ByteString
        getAddrBytes();

    /**
     * <pre>
     * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
     * the PK follows encoding in BIP-340 spec in hex format
     * </pre>
     *
     * <code>string btc_pk_hex = 4 [json_name = "btcPkHex"];</code>
     * @return The btcPkHex.
     */
    java.lang.String getBtcPkHex();
    /**
     * <pre>
     * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
     * the PK follows encoding in BIP-340 spec in hex format
     * </pre>
     *
     * <code>string btc_pk_hex = 4 [json_name = "btcPkHex"];</code>
     * @return The bytes for btcPkHex.
     */
    com.google.protobuf.ByteString
        getBtcPkHexBytes();

    /**
     * <pre>
     * pop is the proof of possession of babylon_pk and btc_pk
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
     * @return Whether the pop field is set.
     */
    boolean hasPop();
    /**
     * <pre>
     * pop is the proof of possession of babylon_pk and btc_pk
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
     * @return The pop.
     */
    com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC getPop();
    /**
     * <pre>
     * pop is the proof of possession of babylon_pk and btc_pk
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
     */
    com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder getPopOrBuilder();

    /**
     * <pre>
     * consumer_id is the ID of the consumer the finality provider is operating on.
     * If it's missing / empty, it's assumed the finality provider is operating in Babylon.
     * </pre>
     *
     * <code>string consumer_id = 8 [json_name = "consumerId"];</code>
     * @return The consumerId.
     */
    java.lang.String getConsumerId();
    /**
     * <pre>
     * consumer_id is the ID of the consumer the finality provider is operating on.
     * If it's missing / empty, it's assumed the finality provider is operating in Babylon.
     * </pre>
     *
     * <code>string consumer_id = 8 [json_name = "consumerId"];</code>
     * @return The bytes for consumerId.
     */
    com.google.protobuf.ByteString
        getConsumerIdBytes();
  }
  /**
   * <pre>
   * NewFinalityProvider is an IBC packet sent from Babylon to consumer
   * upon a newly registered finality provider on this consumer
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.NewFinalityProvider}
   */
  public static final class NewFinalityProvider extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.NewFinalityProvider)
      NewFinalityProviderOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use NewFinalityProvider.newBuilder() to construct.
    private NewFinalityProvider(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private NewFinalityProvider() {
      commission_ = "";
      addr_ = "";
      btcPkHex_ = "";
      consumerId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new NewFinalityProvider();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_NewFinalityProvider_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_NewFinalityProvider_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.class, com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder.class);
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 1;
    private com.cosmos.staking.v1beta1.StakingProto.Description description_;
    /**
     * <pre>
     * description defines the description terms for the finality provider.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
     * @return Whether the description field is set.
     */
    @java.lang.Override
    public boolean hasDescription() {
      return description_ != null;
    }
    /**
     * <pre>
     * description defines the description terms for the finality provider.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
     * @return The description.
     */
    @java.lang.Override
    public com.cosmos.staking.v1beta1.StakingProto.Description getDescription() {
      return description_ == null ? com.cosmos.staking.v1beta1.StakingProto.Description.getDefaultInstance() : description_;
    }
    /**
     * <pre>
     * description defines the description terms for the finality provider.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
     */
    @java.lang.Override
    public com.cosmos.staking.v1beta1.StakingProto.DescriptionOrBuilder getDescriptionOrBuilder() {
      return description_ == null ? com.cosmos.staking.v1beta1.StakingProto.Description.getDefaultInstance() : description_;
    }

    public static final int COMMISSION_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object commission_ = "";
    /**
     * <pre>
     * commission defines the commission rate of the finality provider.
     * It forms as a string converted from "cosmossdk.io/math.LegacyDec"
     * </pre>
     *
     * <code>string commission = 2 [json_name = "commission"];</code>
     * @return The commission.
     */
    @java.lang.Override
    public java.lang.String getCommission() {
      java.lang.Object ref = commission_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        commission_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * commission defines the commission rate of the finality provider.
     * It forms as a string converted from "cosmossdk.io/math.LegacyDec"
     * </pre>
     *
     * <code>string commission = 2 [json_name = "commission"];</code>
     * @return The bytes for commission.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCommissionBytes() {
      java.lang.Object ref = commission_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        commission_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ADDR_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object addr_ = "";
    /**
     * <pre>
     * addr is the bech32 address identifier of the finality provider.
     * </pre>
     *
     * <code>string addr = 3 [json_name = "addr"];</code>
     * @return The addr.
     */
    @java.lang.Override
    public java.lang.String getAddr() {
      java.lang.Object ref = addr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        addr_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * addr is the bech32 address identifier of the finality provider.
     * </pre>
     *
     * <code>string addr = 3 [json_name = "addr"];</code>
     * @return The bytes for addr.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAddrBytes() {
      java.lang.Object ref = addr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        addr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BTC_PK_HEX_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object btcPkHex_ = "";
    /**
     * <pre>
     * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
     * the PK follows encoding in BIP-340 spec in hex format
     * </pre>
     *
     * <code>string btc_pk_hex = 4 [json_name = "btcPkHex"];</code>
     * @return The btcPkHex.
     */
    @java.lang.Override
    public java.lang.String getBtcPkHex() {
      java.lang.Object ref = btcPkHex_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        btcPkHex_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
     * the PK follows encoding in BIP-340 spec in hex format
     * </pre>
     *
     * <code>string btc_pk_hex = 4 [json_name = "btcPkHex"];</code>
     * @return The bytes for btcPkHex.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getBtcPkHexBytes() {
      java.lang.Object ref = btcPkHex_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        btcPkHex_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int POP_FIELD_NUMBER = 5;
    private com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC pop_;
    /**
     * <pre>
     * pop is the proof of possession of babylon_pk and btc_pk
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
     * @return Whether the pop field is set.
     */
    @java.lang.Override
    public boolean hasPop() {
      return pop_ != null;
    }
    /**
     * <pre>
     * pop is the proof of possession of babylon_pk and btc_pk
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
     * @return The pop.
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC getPop() {
      return pop_ == null ? com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance() : pop_;
    }
    /**
     * <pre>
     * pop is the proof of possession of babylon_pk and btc_pk
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder getPopOrBuilder() {
      return pop_ == null ? com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance() : pop_;
    }

    public static final int CONSUMER_ID_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private volatile java.lang.Object consumerId_ = "";
    /**
     * <pre>
     * consumer_id is the ID of the consumer the finality provider is operating on.
     * If it's missing / empty, it's assumed the finality provider is operating in Babylon.
     * </pre>
     *
     * <code>string consumer_id = 8 [json_name = "consumerId"];</code>
     * @return The consumerId.
     */
    @java.lang.Override
    public java.lang.String getConsumerId() {
      java.lang.Object ref = consumerId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        consumerId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * consumer_id is the ID of the consumer the finality provider is operating on.
     * If it's missing / empty, it's assumed the finality provider is operating in Babylon.
     * </pre>
     *
     * <code>string consumer_id = 8 [json_name = "consumerId"];</code>
     * @return The bytes for consumerId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getConsumerIdBytes() {
      java.lang.Object ref = consumerId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        consumerId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (description_ != null) {
        output.writeMessage(1, getDescription());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(commission_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, commission_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(addr_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, addr_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(btcPkHex_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, btcPkHex_);
      }
      if (pop_ != null) {
        output.writeMessage(5, getPop());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(consumerId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, consumerId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (description_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDescription());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(commission_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, commission_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(addr_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, addr_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(btcPkHex_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, btcPkHex_);
      }
      if (pop_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getPop());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(consumerId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, consumerId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider other = (com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider) obj;

      if (hasDescription() != other.hasDescription()) return false;
      if (hasDescription()) {
        if (!getDescription()
            .equals(other.getDescription())) return false;
      }
      if (!getCommission()
          .equals(other.getCommission())) return false;
      if (!getAddr()
          .equals(other.getAddr())) return false;
      if (!getBtcPkHex()
          .equals(other.getBtcPkHex())) return false;
      if (hasPop() != other.hasPop()) return false;
      if (hasPop()) {
        if (!getPop()
            .equals(other.getPop())) return false;
      }
      if (!getConsumerId()
          .equals(other.getConsumerId())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDescription()) {
        hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
        hash = (53 * hash) + getDescription().hashCode();
      }
      hash = (37 * hash) + COMMISSION_FIELD_NUMBER;
      hash = (53 * hash) + getCommission().hashCode();
      hash = (37 * hash) + ADDR_FIELD_NUMBER;
      hash = (53 * hash) + getAddr().hashCode();
      hash = (37 * hash) + BTC_PK_HEX_FIELD_NUMBER;
      hash = (53 * hash) + getBtcPkHex().hashCode();
      if (hasPop()) {
        hash = (37 * hash) + POP_FIELD_NUMBER;
        hash = (53 * hash) + getPop().hashCode();
      }
      hash = (37 * hash) + CONSUMER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getConsumerId().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * NewFinalityProvider is an IBC packet sent from Babylon to consumer
     * upon a newly registered finality provider on this consumer
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.NewFinalityProvider}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.NewFinalityProvider)
        com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_NewFinalityProvider_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_NewFinalityProvider_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.class, com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        description_ = null;
        if (descriptionBuilder_ != null) {
          descriptionBuilder_.dispose();
          descriptionBuilder_ = null;
        }
        commission_ = "";
        addr_ = "";
        btcPkHex_ = "";
        pop_ = null;
        if (popBuilder_ != null) {
          popBuilder_.dispose();
          popBuilder_ = null;
        }
        consumerId_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_NewFinalityProvider_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider build() {
        com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider buildPartial() {
        com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider result = new com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.description_ = descriptionBuilder_ == null
              ? description_
              : descriptionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.commission_ = commission_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.addr_ = addr_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.btcPkHex_ = btcPkHex_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.pop_ = popBuilder_ == null
              ? pop_
              : popBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.consumerId_ = consumerId_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider) {
          return mergeFrom((com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider other) {
        if (other == com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.getDefaultInstance()) return this;
        if (other.hasDescription()) {
          mergeDescription(other.getDescription());
        }
        if (!other.getCommission().isEmpty()) {
          commission_ = other.commission_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (!other.getAddr().isEmpty()) {
          addr_ = other.addr_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (!other.getBtcPkHex().isEmpty()) {
          btcPkHex_ = other.btcPkHex_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        if (other.hasPop()) {
          mergePop(other.getPop());
        }
        if (!other.getConsumerId().isEmpty()) {
          consumerId_ = other.consumerId_;
          bitField0_ |= 0x00000020;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getDescriptionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                commission_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                addr_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                btcPkHex_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getPopFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 66: {
                consumerId_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000020;
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.cosmos.staking.v1beta1.StakingProto.Description description_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.staking.v1beta1.StakingProto.Description, com.cosmos.staking.v1beta1.StakingProto.Description.Builder, com.cosmos.staking.v1beta1.StakingProto.DescriptionOrBuilder> descriptionBuilder_;
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
       * @return Whether the description field is set.
       */
      public boolean hasDescription() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
       * @return The description.
       */
      public com.cosmos.staking.v1beta1.StakingProto.Description getDescription() {
        if (descriptionBuilder_ == null) {
          return description_ == null ? com.cosmos.staking.v1beta1.StakingProto.Description.getDefaultInstance() : description_;
        } else {
          return descriptionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
       */
      public Builder setDescription(com.cosmos.staking.v1beta1.StakingProto.Description value) {
        if (descriptionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          description_ = value;
        } else {
          descriptionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
       */
      public Builder setDescription(
          com.cosmos.staking.v1beta1.StakingProto.Description.Builder builderForValue) {
        if (descriptionBuilder_ == null) {
          description_ = builderForValue.build();
        } else {
          descriptionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
       */
      public Builder mergeDescription(com.cosmos.staking.v1beta1.StakingProto.Description value) {
        if (descriptionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            description_ != null &&
            description_ != com.cosmos.staking.v1beta1.StakingProto.Description.getDefaultInstance()) {
            getDescriptionBuilder().mergeFrom(value);
          } else {
            description_ = value;
          }
        } else {
          descriptionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
       */
      public Builder clearDescription() {
        bitField0_ = (bitField0_ & ~0x00000001);
        description_ = null;
        if (descriptionBuilder_ != null) {
          descriptionBuilder_.dispose();
          descriptionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
       */
      public com.cosmos.staking.v1beta1.StakingProto.Description.Builder getDescriptionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getDescriptionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
       */
      public com.cosmos.staking.v1beta1.StakingProto.DescriptionOrBuilder getDescriptionOrBuilder() {
        if (descriptionBuilder_ != null) {
          return descriptionBuilder_.getMessageOrBuilder();
        } else {
          return description_ == null ?
              com.cosmos.staking.v1beta1.StakingProto.Description.getDefaultInstance() : description_;
        }
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 1 [json_name = "description"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.staking.v1beta1.StakingProto.Description, com.cosmos.staking.v1beta1.StakingProto.Description.Builder, com.cosmos.staking.v1beta1.StakingProto.DescriptionOrBuilder> 
          getDescriptionFieldBuilder() {
        if (descriptionBuilder_ == null) {
          descriptionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.staking.v1beta1.StakingProto.Description, com.cosmos.staking.v1beta1.StakingProto.Description.Builder, com.cosmos.staking.v1beta1.StakingProto.DescriptionOrBuilder>(
                  getDescription(),
                  getParentForChildren(),
                  isClean());
          description_ = null;
        }
        return descriptionBuilder_;
      }

      private java.lang.Object commission_ = "";
      /**
       * <pre>
       * commission defines the commission rate of the finality provider.
       * It forms as a string converted from "cosmossdk.io/math.LegacyDec"
       * </pre>
       *
       * <code>string commission = 2 [json_name = "commission"];</code>
       * @return The commission.
       */
      public java.lang.String getCommission() {
        java.lang.Object ref = commission_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          commission_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * commission defines the commission rate of the finality provider.
       * It forms as a string converted from "cosmossdk.io/math.LegacyDec"
       * </pre>
       *
       * <code>string commission = 2 [json_name = "commission"];</code>
       * @return The bytes for commission.
       */
      public com.google.protobuf.ByteString
          getCommissionBytes() {
        java.lang.Object ref = commission_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          commission_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * commission defines the commission rate of the finality provider.
       * It forms as a string converted from "cosmossdk.io/math.LegacyDec"
       * </pre>
       *
       * <code>string commission = 2 [json_name = "commission"];</code>
       * @param value The commission to set.
       * @return This builder for chaining.
       */
      public Builder setCommission(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        commission_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * commission defines the commission rate of the finality provider.
       * It forms as a string converted from "cosmossdk.io/math.LegacyDec"
       * </pre>
       *
       * <code>string commission = 2 [json_name = "commission"];</code>
       * @return This builder for chaining.
       */
      public Builder clearCommission() {
        commission_ = getDefaultInstance().getCommission();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * commission defines the commission rate of the finality provider.
       * It forms as a string converted from "cosmossdk.io/math.LegacyDec"
       * </pre>
       *
       * <code>string commission = 2 [json_name = "commission"];</code>
       * @param value The bytes for commission to set.
       * @return This builder for chaining.
       */
      public Builder setCommissionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        commission_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object addr_ = "";
      /**
       * <pre>
       * addr is the bech32 address identifier of the finality provider.
       * </pre>
       *
       * <code>string addr = 3 [json_name = "addr"];</code>
       * @return The addr.
       */
      public java.lang.String getAddr() {
        java.lang.Object ref = addr_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          addr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * addr is the bech32 address identifier of the finality provider.
       * </pre>
       *
       * <code>string addr = 3 [json_name = "addr"];</code>
       * @return The bytes for addr.
       */
      public com.google.protobuf.ByteString
          getAddrBytes() {
        java.lang.Object ref = addr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          addr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * addr is the bech32 address identifier of the finality provider.
       * </pre>
       *
       * <code>string addr = 3 [json_name = "addr"];</code>
       * @param value The addr to set.
       * @return This builder for chaining.
       */
      public Builder setAddr(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        addr_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * addr is the bech32 address identifier of the finality provider.
       * </pre>
       *
       * <code>string addr = 3 [json_name = "addr"];</code>
       * @return This builder for chaining.
       */
      public Builder clearAddr() {
        addr_ = getDefaultInstance().getAddr();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * addr is the bech32 address identifier of the finality provider.
       * </pre>
       *
       * <code>string addr = 3 [json_name = "addr"];</code>
       * @param value The bytes for addr to set.
       * @return This builder for chaining.
       */
      public Builder setAddrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        addr_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private java.lang.Object btcPkHex_ = "";
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 4 [json_name = "btcPkHex"];</code>
       * @return The btcPkHex.
       */
      public java.lang.String getBtcPkHex() {
        java.lang.Object ref = btcPkHex_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          btcPkHex_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 4 [json_name = "btcPkHex"];</code>
       * @return The bytes for btcPkHex.
       */
      public com.google.protobuf.ByteString
          getBtcPkHexBytes() {
        java.lang.Object ref = btcPkHex_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          btcPkHex_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 4 [json_name = "btcPkHex"];</code>
       * @param value The btcPkHex to set.
       * @return This builder for chaining.
       */
      public Builder setBtcPkHex(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        btcPkHex_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 4 [json_name = "btcPkHex"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBtcPkHex() {
        btcPkHex_ = getDefaultInstance().getBtcPkHex();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this finality provider
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 4 [json_name = "btcPkHex"];</code>
       * @param value The bytes for btcPkHex to set.
       * @return This builder for chaining.
       */
      public Builder setBtcPkHexBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        btcPkHex_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC pop_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder> popBuilder_;
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       * @return Whether the pop field is set.
       */
      public boolean hasPop() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       * @return The pop.
       */
      public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC getPop() {
        if (popBuilder_ == null) {
          return pop_ == null ? com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance() : pop_;
        } else {
          return popBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       */
      public Builder setPop(com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC value) {
        if (popBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pop_ = value;
        } else {
          popBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       */
      public Builder setPop(
          com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder builderForValue) {
        if (popBuilder_ == null) {
          pop_ = builderForValue.build();
        } else {
          popBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       */
      public Builder mergePop(com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC value) {
        if (popBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            pop_ != null &&
            pop_ != com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance()) {
            getPopBuilder().mergeFrom(value);
          } else {
            pop_ = value;
          }
        } else {
          popBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       */
      public Builder clearPop() {
        bitField0_ = (bitField0_ & ~0x00000010);
        pop_ = null;
        if (popBuilder_ != null) {
          popBuilder_.dispose();
          popBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       */
      public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder getPopBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getPopFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       */
      public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder getPopOrBuilder() {
        if (popBuilder_ != null) {
          return popBuilder_.getMessageOrBuilder();
        } else {
          return pop_ == null ?
              com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance() : pop_;
        }
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder> 
          getPopFieldBuilder() {
        if (popBuilder_ == null) {
          popBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder>(
                  getPop(),
                  getParentForChildren(),
                  isClean());
          pop_ = null;
        }
        return popBuilder_;
      }

      private java.lang.Object consumerId_ = "";
      /**
       * <pre>
       * consumer_id is the ID of the consumer the finality provider is operating on.
       * If it's missing / empty, it's assumed the finality provider is operating in Babylon.
       * </pre>
       *
       * <code>string consumer_id = 8 [json_name = "consumerId"];</code>
       * @return The consumerId.
       */
      public java.lang.String getConsumerId() {
        java.lang.Object ref = consumerId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          consumerId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * consumer_id is the ID of the consumer the finality provider is operating on.
       * If it's missing / empty, it's assumed the finality provider is operating in Babylon.
       * </pre>
       *
       * <code>string consumer_id = 8 [json_name = "consumerId"];</code>
       * @return The bytes for consumerId.
       */
      public com.google.protobuf.ByteString
          getConsumerIdBytes() {
        java.lang.Object ref = consumerId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          consumerId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * consumer_id is the ID of the consumer the finality provider is operating on.
       * If it's missing / empty, it's assumed the finality provider is operating in Babylon.
       * </pre>
       *
       * <code>string consumer_id = 8 [json_name = "consumerId"];</code>
       * @param value The consumerId to set.
       * @return This builder for chaining.
       */
      public Builder setConsumerId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        consumerId_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * consumer_id is the ID of the consumer the finality provider is operating on.
       * If it's missing / empty, it's assumed the finality provider is operating in Babylon.
       * </pre>
       *
       * <code>string consumer_id = 8 [json_name = "consumerId"];</code>
       * @return This builder for chaining.
       */
      public Builder clearConsumerId() {
        consumerId_ = getDefaultInstance().getConsumerId();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * consumer_id is the ID of the consumer the finality provider is operating on.
       * If it's missing / empty, it's assumed the finality provider is operating in Babylon.
       * </pre>
       *
       * <code>string consumer_id = 8 [json_name = "consumerId"];</code>
       * @param value The bytes for consumerId to set.
       * @return This builder for chaining.
       */
      public Builder setConsumerIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        consumerId_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.NewFinalityProvider)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.NewFinalityProvider)
    private static final com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider();
    }

    public static com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NewFinalityProvider>
        PARSER = new com.google.protobuf.AbstractParser<NewFinalityProvider>() {
      @java.lang.Override
      public NewFinalityProvider parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<NewFinalityProvider> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NewFinalityProvider> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ActiveBTCDelegationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.ActiveBTCDelegation)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * staker_addr is the address to receive rewards from BTC delegation.
     * </pre>
     *
     * <code>string staker_addr = 1 [json_name = "stakerAddr"];</code>
     * @return The stakerAddr.
     */
    java.lang.String getStakerAddr();
    /**
     * <pre>
     * staker_addr is the address to receive rewards from BTC delegation.
     * </pre>
     *
     * <code>string staker_addr = 1 [json_name = "stakerAddr"];</code>
     * @return The bytes for stakerAddr.
     */
    com.google.protobuf.ByteString
        getStakerAddrBytes();

    /**
     * <pre>
     * btc_pk_hex is the Bitcoin secp256k1 PK of this BTC delegation
     * the PK follows encoding in BIP-340 spec in hex format
     * </pre>
     *
     * <code>string btc_pk_hex = 2 [json_name = "btcPkHex"];</code>
     * @return The btcPkHex.
     */
    java.lang.String getBtcPkHex();
    /**
     * <pre>
     * btc_pk_hex is the Bitcoin secp256k1 PK of this BTC delegation
     * the PK follows encoding in BIP-340 spec in hex format
     * </pre>
     *
     * <code>string btc_pk_hex = 2 [json_name = "btcPkHex"];</code>
     * @return The bytes for btcPkHex.
     */
    com.google.protobuf.ByteString
        getBtcPkHexBytes();

    /**
     * <pre>
     * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
     * this BTC delegation delegates to
     * </pre>
     *
     * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
     * @return A list containing the fpBtcPkList.
     */
    java.util.List<java.lang.String>
        getFpBtcPkListList();
    /**
     * <pre>
     * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
     * this BTC delegation delegates to
     * </pre>
     *
     * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
     * @return The count of fpBtcPkList.
     */
    int getFpBtcPkListCount();
    /**
     * <pre>
     * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
     * this BTC delegation delegates to
     * </pre>
     *
     * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
     * @param index The index of the element to return.
     * @return The fpBtcPkList at the given index.
     */
    java.lang.String getFpBtcPkList(int index);
    /**
     * <pre>
     * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
     * this BTC delegation delegates to
     * </pre>
     *
     * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the fpBtcPkList at the given index.
     */
    com.google.protobuf.ByteString
        getFpBtcPkListBytes(int index);

    /**
     * <pre>
     * start_height is the start BTC height of the BTC delegation
     * it is the start BTC height of the timelock
     * </pre>
     *
     * <code>uint32 start_height = 4 [json_name = "startHeight"];</code>
     * @return The startHeight.
     */
    int getStartHeight();

    /**
     * <pre>
     * end_height is the end height of the BTC delegation
     * it is the end BTC height of the timelock - w
     * </pre>
     *
     * <code>uint32 end_height = 5 [json_name = "endHeight"];</code>
     * @return The endHeight.
     */
    int getEndHeight();

    /**
     * <pre>
     * total_sat is the total amount of BTC stakes in this delegation
     * quantified in satoshi
     * </pre>
     *
     * <code>uint64 total_sat = 6 [json_name = "totalSat"];</code>
     * @return The totalSat.
     */
    long getTotalSat();

    /**
     * <pre>
     * staking_tx is the staking tx
     * </pre>
     *
     * <code>bytes staking_tx = 7 [json_name = "stakingTx"];</code>
     * @return The stakingTx.
     */
    com.google.protobuf.ByteString getStakingTx();

    /**
     * <pre>
     * slashing_tx is the slashing tx
     * </pre>
     *
     * <code>bytes slashing_tx = 8 [json_name = "slashingTx"];</code>
     * @return The slashingTx.
     */
    com.google.protobuf.ByteString getSlashingTx();

    /**
     * <pre>
     * delegator_slashing_sig is the signature on the slashing tx
     * by the delegator (i.e., SK corresponding to btc_pk) as string hex.
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>bytes delegator_slashing_sig = 9 [json_name = "delegatorSlashingSig"];</code>
     * @return The delegatorSlashingSig.
     */
    com.google.protobuf.ByteString getDelegatorSlashingSig();

    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
     */
    java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> 
        getCovenantSigsList();
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getCovenantSigs(int index);
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
     */
    int getCovenantSigsCount();
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
     */
    java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
        getCovenantSigsOrBuilderList();
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder getCovenantSigsOrBuilder(
        int index);

    /**
     * <pre>
     * staking_output_idx is the index of the staking output in the staking tx
     * </pre>
     *
     * <code>uint32 staking_output_idx = 11 [json_name = "stakingOutputIdx"];</code>
     * @return The stakingOutputIdx.
     */
    int getStakingOutputIdx();

    /**
     * <pre>
     * unbonding_time used in unbonding output timelock path and in slashing transactions
     * change outputs
     * </pre>
     *
     * <code>uint32 unbonding_time = 12 [json_name = "unbondingTime"];</code>
     * @return The unbondingTime.
     */
    int getUnbondingTime();

    /**
     * <pre>
     * undelegation_info is the undelegation info of this delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
     * @return Whether the undelegationInfo field is set.
     */
    boolean hasUndelegationInfo();
    /**
     * <pre>
     * undelegation_info is the undelegation info of this delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
     * @return The undelegationInfo.
     */
    com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo getUndelegationInfo();
    /**
     * <pre>
     * undelegation_info is the undelegation info of this delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
     */
    com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfoOrBuilder getUndelegationInfoOrBuilder();

    /**
     * <pre>
     * params version used to validate delegation
     * </pre>
     *
     * <code>uint32 params_version = 14 [json_name = "paramsVersion"];</code>
     * @return The paramsVersion.
     */
    int getParamsVersion();
  }
  /**
   * <pre>
   * ActiveBTCDelegation is an IBC packet sent from Babylon to consumer
   * upon a BTC delegation newly receives covenant signatures and thus becomes active
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.ActiveBTCDelegation}
   */
  public static final class ActiveBTCDelegation extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.ActiveBTCDelegation)
      ActiveBTCDelegationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ActiveBTCDelegation.newBuilder() to construct.
    private ActiveBTCDelegation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ActiveBTCDelegation() {
      stakerAddr_ = "";
      btcPkHex_ = "";
      fpBtcPkList_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      stakingTx_ = com.google.protobuf.ByteString.EMPTY;
      slashingTx_ = com.google.protobuf.ByteString.EMPTY;
      delegatorSlashingSig_ = com.google.protobuf.ByteString.EMPTY;
      covenantSigs_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ActiveBTCDelegation();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_ActiveBTCDelegation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_ActiveBTCDelegation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.class, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder.class);
    }

    public static final int STAKER_ADDR_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object stakerAddr_ = "";
    /**
     * <pre>
     * staker_addr is the address to receive rewards from BTC delegation.
     * </pre>
     *
     * <code>string staker_addr = 1 [json_name = "stakerAddr"];</code>
     * @return The stakerAddr.
     */
    @java.lang.Override
    public java.lang.String getStakerAddr() {
      java.lang.Object ref = stakerAddr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stakerAddr_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * staker_addr is the address to receive rewards from BTC delegation.
     * </pre>
     *
     * <code>string staker_addr = 1 [json_name = "stakerAddr"];</code>
     * @return The bytes for stakerAddr.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStakerAddrBytes() {
      java.lang.Object ref = stakerAddr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stakerAddr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BTC_PK_HEX_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object btcPkHex_ = "";
    /**
     * <pre>
     * btc_pk_hex is the Bitcoin secp256k1 PK of this BTC delegation
     * the PK follows encoding in BIP-340 spec in hex format
     * </pre>
     *
     * <code>string btc_pk_hex = 2 [json_name = "btcPkHex"];</code>
     * @return The btcPkHex.
     */
    @java.lang.Override
    public java.lang.String getBtcPkHex() {
      java.lang.Object ref = btcPkHex_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        btcPkHex_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * btc_pk_hex is the Bitcoin secp256k1 PK of this BTC delegation
     * the PK follows encoding in BIP-340 spec in hex format
     * </pre>
     *
     * <code>string btc_pk_hex = 2 [json_name = "btcPkHex"];</code>
     * @return The bytes for btcPkHex.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getBtcPkHexBytes() {
      java.lang.Object ref = btcPkHex_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        btcPkHex_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FP_BTC_PK_LIST_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList fpBtcPkList_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
     * this BTC delegation delegates to
     * </pre>
     *
     * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
     * @return A list containing the fpBtcPkList.
     */
    public com.google.protobuf.ProtocolStringList
        getFpBtcPkListList() {
      return fpBtcPkList_;
    }
    /**
     * <pre>
     * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
     * this BTC delegation delegates to
     * </pre>
     *
     * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
     * @return The count of fpBtcPkList.
     */
    public int getFpBtcPkListCount() {
      return fpBtcPkList_.size();
    }
    /**
     * <pre>
     * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
     * this BTC delegation delegates to
     * </pre>
     *
     * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
     * @param index The index of the element to return.
     * @return The fpBtcPkList at the given index.
     */
    public java.lang.String getFpBtcPkList(int index) {
      return fpBtcPkList_.get(index);
    }
    /**
     * <pre>
     * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
     * this BTC delegation delegates to
     * </pre>
     *
     * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the fpBtcPkList at the given index.
     */
    public com.google.protobuf.ByteString
        getFpBtcPkListBytes(int index) {
      return fpBtcPkList_.getByteString(index);
    }

    public static final int START_HEIGHT_FIELD_NUMBER = 4;
    private int startHeight_ = 0;
    /**
     * <pre>
     * start_height is the start BTC height of the BTC delegation
     * it is the start BTC height of the timelock
     * </pre>
     *
     * <code>uint32 start_height = 4 [json_name = "startHeight"];</code>
     * @return The startHeight.
     */
    @java.lang.Override
    public int getStartHeight() {
      return startHeight_;
    }

    public static final int END_HEIGHT_FIELD_NUMBER = 5;
    private int endHeight_ = 0;
    /**
     * <pre>
     * end_height is the end height of the BTC delegation
     * it is the end BTC height of the timelock - w
     * </pre>
     *
     * <code>uint32 end_height = 5 [json_name = "endHeight"];</code>
     * @return The endHeight.
     */
    @java.lang.Override
    public int getEndHeight() {
      return endHeight_;
    }

    public static final int TOTAL_SAT_FIELD_NUMBER = 6;
    private long totalSat_ = 0L;
    /**
     * <pre>
     * total_sat is the total amount of BTC stakes in this delegation
     * quantified in satoshi
     * </pre>
     *
     * <code>uint64 total_sat = 6 [json_name = "totalSat"];</code>
     * @return The totalSat.
     */
    @java.lang.Override
    public long getTotalSat() {
      return totalSat_;
    }

    public static final int STAKING_TX_FIELD_NUMBER = 7;
    private com.google.protobuf.ByteString stakingTx_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * staking_tx is the staking tx
     * </pre>
     *
     * <code>bytes staking_tx = 7 [json_name = "stakingTx"];</code>
     * @return The stakingTx.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getStakingTx() {
      return stakingTx_;
    }

    public static final int SLASHING_TX_FIELD_NUMBER = 8;
    private com.google.protobuf.ByteString slashingTx_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * slashing_tx is the slashing tx
     * </pre>
     *
     * <code>bytes slashing_tx = 8 [json_name = "slashingTx"];</code>
     * @return The slashingTx.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSlashingTx() {
      return slashingTx_;
    }

    public static final int DELEGATOR_SLASHING_SIG_FIELD_NUMBER = 9;
    private com.google.protobuf.ByteString delegatorSlashingSig_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * delegator_slashing_sig is the signature on the slashing tx
     * by the delegator (i.e., SK corresponding to btc_pk) as string hex.
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>bytes delegator_slashing_sig = 9 [json_name = "delegatorSlashingSig"];</code>
     * @return The delegatorSlashingSig.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getDelegatorSlashingSig() {
      return delegatorSlashingSig_;
    }

    public static final int COVENANT_SIGS_FIELD_NUMBER = 10;
    @SuppressWarnings("serial")
    private java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> covenantSigs_;
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
     */
    @java.lang.Override
    public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> getCovenantSigsList() {
      return covenantSigs_;
    }
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
        getCovenantSigsOrBuilderList() {
      return covenantSigs_;
    }
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
     */
    @java.lang.Override
    public int getCovenantSigsCount() {
      return covenantSigs_.size();
    }
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getCovenantSigs(int index) {
      return covenantSigs_.get(index);
    }
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder getCovenantSigsOrBuilder(
        int index) {
      return covenantSigs_.get(index);
    }

    public static final int STAKING_OUTPUT_IDX_FIELD_NUMBER = 11;
    private int stakingOutputIdx_ = 0;
    /**
     * <pre>
     * staking_output_idx is the index of the staking output in the staking tx
     * </pre>
     *
     * <code>uint32 staking_output_idx = 11 [json_name = "stakingOutputIdx"];</code>
     * @return The stakingOutputIdx.
     */
    @java.lang.Override
    public int getStakingOutputIdx() {
      return stakingOutputIdx_;
    }

    public static final int UNBONDING_TIME_FIELD_NUMBER = 12;
    private int unbondingTime_ = 0;
    /**
     * <pre>
     * unbonding_time used in unbonding output timelock path and in slashing transactions
     * change outputs
     * </pre>
     *
     * <code>uint32 unbonding_time = 12 [json_name = "unbondingTime"];</code>
     * @return The unbondingTime.
     */
    @java.lang.Override
    public int getUnbondingTime() {
      return unbondingTime_;
    }

    public static final int UNDELEGATION_INFO_FIELD_NUMBER = 13;
    private com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo undelegationInfo_;
    /**
     * <pre>
     * undelegation_info is the undelegation info of this delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
     * @return Whether the undelegationInfo field is set.
     */
    @java.lang.Override
    public boolean hasUndelegationInfo() {
      return undelegationInfo_ != null;
    }
    /**
     * <pre>
     * undelegation_info is the undelegation info of this delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
     * @return The undelegationInfo.
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo getUndelegationInfo() {
      return undelegationInfo_ == null ? com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.getDefaultInstance() : undelegationInfo_;
    }
    /**
     * <pre>
     * undelegation_info is the undelegation info of this delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfoOrBuilder getUndelegationInfoOrBuilder() {
      return undelegationInfo_ == null ? com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.getDefaultInstance() : undelegationInfo_;
    }

    public static final int PARAMS_VERSION_FIELD_NUMBER = 14;
    private int paramsVersion_ = 0;
    /**
     * <pre>
     * params version used to validate delegation
     * </pre>
     *
     * <code>uint32 params_version = 14 [json_name = "paramsVersion"];</code>
     * @return The paramsVersion.
     */
    @java.lang.Override
    public int getParamsVersion() {
      return paramsVersion_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stakerAddr_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stakerAddr_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(btcPkHex_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, btcPkHex_);
      }
      for (int i = 0; i < fpBtcPkList_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, fpBtcPkList_.getRaw(i));
      }
      if (startHeight_ != 0) {
        output.writeUInt32(4, startHeight_);
      }
      if (endHeight_ != 0) {
        output.writeUInt32(5, endHeight_);
      }
      if (totalSat_ != 0L) {
        output.writeUInt64(6, totalSat_);
      }
      if (!stakingTx_.isEmpty()) {
        output.writeBytes(7, stakingTx_);
      }
      if (!slashingTx_.isEmpty()) {
        output.writeBytes(8, slashingTx_);
      }
      if (!delegatorSlashingSig_.isEmpty()) {
        output.writeBytes(9, delegatorSlashingSig_);
      }
      for (int i = 0; i < covenantSigs_.size(); i++) {
        output.writeMessage(10, covenantSigs_.get(i));
      }
      if (stakingOutputIdx_ != 0) {
        output.writeUInt32(11, stakingOutputIdx_);
      }
      if (unbondingTime_ != 0) {
        output.writeUInt32(12, unbondingTime_);
      }
      if (undelegationInfo_ != null) {
        output.writeMessage(13, getUndelegationInfo());
      }
      if (paramsVersion_ != 0) {
        output.writeUInt32(14, paramsVersion_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stakerAddr_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stakerAddr_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(btcPkHex_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, btcPkHex_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < fpBtcPkList_.size(); i++) {
          dataSize += computeStringSizeNoTag(fpBtcPkList_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getFpBtcPkListList().size();
      }
      if (startHeight_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, startHeight_);
      }
      if (endHeight_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, endHeight_);
      }
      if (totalSat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, totalSat_);
      }
      if (!stakingTx_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, stakingTx_);
      }
      if (!slashingTx_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, slashingTx_);
      }
      if (!delegatorSlashingSig_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(9, delegatorSlashingSig_);
      }
      for (int i = 0; i < covenantSigs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, covenantSigs_.get(i));
      }
      if (stakingOutputIdx_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, stakingOutputIdx_);
      }
      if (unbondingTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, unbondingTime_);
      }
      if (undelegationInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getUndelegationInfo());
      }
      if (paramsVersion_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, paramsVersion_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation other = (com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation) obj;

      if (!getStakerAddr()
          .equals(other.getStakerAddr())) return false;
      if (!getBtcPkHex()
          .equals(other.getBtcPkHex())) return false;
      if (!getFpBtcPkListList()
          .equals(other.getFpBtcPkListList())) return false;
      if (getStartHeight()
          != other.getStartHeight()) return false;
      if (getEndHeight()
          != other.getEndHeight()) return false;
      if (getTotalSat()
          != other.getTotalSat()) return false;
      if (!getStakingTx()
          .equals(other.getStakingTx())) return false;
      if (!getSlashingTx()
          .equals(other.getSlashingTx())) return false;
      if (!getDelegatorSlashingSig()
          .equals(other.getDelegatorSlashingSig())) return false;
      if (!getCovenantSigsList()
          .equals(other.getCovenantSigsList())) return false;
      if (getStakingOutputIdx()
          != other.getStakingOutputIdx()) return false;
      if (getUnbondingTime()
          != other.getUnbondingTime()) return false;
      if (hasUndelegationInfo() != other.hasUndelegationInfo()) return false;
      if (hasUndelegationInfo()) {
        if (!getUndelegationInfo()
            .equals(other.getUndelegationInfo())) return false;
      }
      if (getParamsVersion()
          != other.getParamsVersion()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STAKER_ADDR_FIELD_NUMBER;
      hash = (53 * hash) + getStakerAddr().hashCode();
      hash = (37 * hash) + BTC_PK_HEX_FIELD_NUMBER;
      hash = (53 * hash) + getBtcPkHex().hashCode();
      if (getFpBtcPkListCount() > 0) {
        hash = (37 * hash) + FP_BTC_PK_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getFpBtcPkListList().hashCode();
      }
      hash = (37 * hash) + START_HEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + getStartHeight();
      hash = (37 * hash) + END_HEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + getEndHeight();
      hash = (37 * hash) + TOTAL_SAT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTotalSat());
      hash = (37 * hash) + STAKING_TX_FIELD_NUMBER;
      hash = (53 * hash) + getStakingTx().hashCode();
      hash = (37 * hash) + SLASHING_TX_FIELD_NUMBER;
      hash = (53 * hash) + getSlashingTx().hashCode();
      hash = (37 * hash) + DELEGATOR_SLASHING_SIG_FIELD_NUMBER;
      hash = (53 * hash) + getDelegatorSlashingSig().hashCode();
      if (getCovenantSigsCount() > 0) {
        hash = (37 * hash) + COVENANT_SIGS_FIELD_NUMBER;
        hash = (53 * hash) + getCovenantSigsList().hashCode();
      }
      hash = (37 * hash) + STAKING_OUTPUT_IDX_FIELD_NUMBER;
      hash = (53 * hash) + getStakingOutputIdx();
      hash = (37 * hash) + UNBONDING_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getUnbondingTime();
      if (hasUndelegationInfo()) {
        hash = (37 * hash) + UNDELEGATION_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getUndelegationInfo().hashCode();
      }
      hash = (37 * hash) + PARAMS_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getParamsVersion();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * ActiveBTCDelegation is an IBC packet sent from Babylon to consumer
     * upon a BTC delegation newly receives covenant signatures and thus becomes active
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.ActiveBTCDelegation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.ActiveBTCDelegation)
        com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_ActiveBTCDelegation_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_ActiveBTCDelegation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.class, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        stakerAddr_ = "";
        btcPkHex_ = "";
        fpBtcPkList_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        startHeight_ = 0;
        endHeight_ = 0;
        totalSat_ = 0L;
        stakingTx_ = com.google.protobuf.ByteString.EMPTY;
        slashingTx_ = com.google.protobuf.ByteString.EMPTY;
        delegatorSlashingSig_ = com.google.protobuf.ByteString.EMPTY;
        if (covenantSigsBuilder_ == null) {
          covenantSigs_ = java.util.Collections.emptyList();
        } else {
          covenantSigs_ = null;
          covenantSigsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        stakingOutputIdx_ = 0;
        unbondingTime_ = 0;
        undelegationInfo_ = null;
        if (undelegationInfoBuilder_ != null) {
          undelegationInfoBuilder_.dispose();
          undelegationInfoBuilder_ = null;
        }
        paramsVersion_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_ActiveBTCDelegation_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation build() {
        com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation buildPartial() {
        com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation result = new com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation result) {
        if (covenantSigsBuilder_ == null) {
          if (((bitField0_ & 0x00000200) != 0)) {
            covenantSigs_ = java.util.Collections.unmodifiableList(covenantSigs_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.covenantSigs_ = covenantSigs_;
        } else {
          result.covenantSigs_ = covenantSigsBuilder_.build();
        }
      }

      private void buildPartial0(com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.stakerAddr_ = stakerAddr_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.btcPkHex_ = btcPkHex_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          fpBtcPkList_.makeImmutable();
          result.fpBtcPkList_ = fpBtcPkList_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.startHeight_ = startHeight_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.endHeight_ = endHeight_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.totalSat_ = totalSat_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.stakingTx_ = stakingTx_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.slashingTx_ = slashingTx_;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.delegatorSlashingSig_ = delegatorSlashingSig_;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.stakingOutputIdx_ = stakingOutputIdx_;
        }
        if (((from_bitField0_ & 0x00000800) != 0)) {
          result.unbondingTime_ = unbondingTime_;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.undelegationInfo_ = undelegationInfoBuilder_ == null
              ? undelegationInfo_
              : undelegationInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.paramsVersion_ = paramsVersion_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation) {
          return mergeFrom((com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation other) {
        if (other == com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.getDefaultInstance()) return this;
        if (!other.getStakerAddr().isEmpty()) {
          stakerAddr_ = other.stakerAddr_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (!other.getBtcPkHex().isEmpty()) {
          btcPkHex_ = other.btcPkHex_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (!other.fpBtcPkList_.isEmpty()) {
          if (fpBtcPkList_.isEmpty()) {
            fpBtcPkList_ = other.fpBtcPkList_;
            bitField0_ |= 0x00000004;
          } else {
            ensureFpBtcPkListIsMutable();
            fpBtcPkList_.addAll(other.fpBtcPkList_);
          }
          onChanged();
        }
        if (other.getStartHeight() != 0) {
          setStartHeight(other.getStartHeight());
        }
        if (other.getEndHeight() != 0) {
          setEndHeight(other.getEndHeight());
        }
        if (other.getTotalSat() != 0L) {
          setTotalSat(other.getTotalSat());
        }
        if (other.getStakingTx() != com.google.protobuf.ByteString.EMPTY) {
          setStakingTx(other.getStakingTx());
        }
        if (other.getSlashingTx() != com.google.protobuf.ByteString.EMPTY) {
          setSlashingTx(other.getSlashingTx());
        }
        if (other.getDelegatorSlashingSig() != com.google.protobuf.ByteString.EMPTY) {
          setDelegatorSlashingSig(other.getDelegatorSlashingSig());
        }
        if (covenantSigsBuilder_ == null) {
          if (!other.covenantSigs_.isEmpty()) {
            if (covenantSigs_.isEmpty()) {
              covenantSigs_ = other.covenantSigs_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureCovenantSigsIsMutable();
              covenantSigs_.addAll(other.covenantSigs_);
            }
            onChanged();
          }
        } else {
          if (!other.covenantSigs_.isEmpty()) {
            if (covenantSigsBuilder_.isEmpty()) {
              covenantSigsBuilder_.dispose();
              covenantSigsBuilder_ = null;
              covenantSigs_ = other.covenantSigs_;
              bitField0_ = (bitField0_ & ~0x00000200);
              covenantSigsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCovenantSigsFieldBuilder() : null;
            } else {
              covenantSigsBuilder_.addAllMessages(other.covenantSigs_);
            }
          }
        }
        if (other.getStakingOutputIdx() != 0) {
          setStakingOutputIdx(other.getStakingOutputIdx());
        }
        if (other.getUnbondingTime() != 0) {
          setUnbondingTime(other.getUnbondingTime());
        }
        if (other.hasUndelegationInfo()) {
          mergeUndelegationInfo(other.getUndelegationInfo());
        }
        if (other.getParamsVersion() != 0) {
          setParamsVersion(other.getParamsVersion());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                stakerAddr_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                btcPkHex_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureFpBtcPkListIsMutable();
                fpBtcPkList_.add(s);
                break;
              } // case 26
              case 32: {
                startHeight_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                endHeight_ = input.readUInt32();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                totalSat_ = input.readUInt64();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 58: {
                stakingTx_ = input.readBytes();
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              case 66: {
                slashingTx_ = input.readBytes();
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              case 74: {
                delegatorSlashingSig_ = input.readBytes();
                bitField0_ |= 0x00000100;
                break;
              } // case 74
              case 82: {
                com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures m =
                    input.readMessage(
                        com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.parser(),
                        extensionRegistry);
                if (covenantSigsBuilder_ == null) {
                  ensureCovenantSigsIsMutable();
                  covenantSigs_.add(m);
                } else {
                  covenantSigsBuilder_.addMessage(m);
                }
                break;
              } // case 82
              case 88: {
                stakingOutputIdx_ = input.readUInt32();
                bitField0_ |= 0x00000400;
                break;
              } // case 88
              case 96: {
                unbondingTime_ = input.readUInt32();
                bitField0_ |= 0x00000800;
                break;
              } // case 96
              case 106: {
                input.readMessage(
                    getUndelegationInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00001000;
                break;
              } // case 106
              case 112: {
                paramsVersion_ = input.readUInt32();
                bitField0_ |= 0x00002000;
                break;
              } // case 112
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object stakerAddr_ = "";
      /**
       * <pre>
       * staker_addr is the address to receive rewards from BTC delegation.
       * </pre>
       *
       * <code>string staker_addr = 1 [json_name = "stakerAddr"];</code>
       * @return The stakerAddr.
       */
      public java.lang.String getStakerAddr() {
        java.lang.Object ref = stakerAddr_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stakerAddr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * staker_addr is the address to receive rewards from BTC delegation.
       * </pre>
       *
       * <code>string staker_addr = 1 [json_name = "stakerAddr"];</code>
       * @return The bytes for stakerAddr.
       */
      public com.google.protobuf.ByteString
          getStakerAddrBytes() {
        java.lang.Object ref = stakerAddr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stakerAddr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * staker_addr is the address to receive rewards from BTC delegation.
       * </pre>
       *
       * <code>string staker_addr = 1 [json_name = "stakerAddr"];</code>
       * @param value The stakerAddr to set.
       * @return This builder for chaining.
       */
      public Builder setStakerAddr(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        stakerAddr_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staker_addr is the address to receive rewards from BTC delegation.
       * </pre>
       *
       * <code>string staker_addr = 1 [json_name = "stakerAddr"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStakerAddr() {
        stakerAddr_ = getDefaultInstance().getStakerAddr();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staker_addr is the address to receive rewards from BTC delegation.
       * </pre>
       *
       * <code>string staker_addr = 1 [json_name = "stakerAddr"];</code>
       * @param value The bytes for stakerAddr to set.
       * @return This builder for chaining.
       */
      public Builder setStakerAddrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        stakerAddr_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object btcPkHex_ = "";
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this BTC delegation
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 2 [json_name = "btcPkHex"];</code>
       * @return The btcPkHex.
       */
      public java.lang.String getBtcPkHex() {
        java.lang.Object ref = btcPkHex_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          btcPkHex_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this BTC delegation
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 2 [json_name = "btcPkHex"];</code>
       * @return The bytes for btcPkHex.
       */
      public com.google.protobuf.ByteString
          getBtcPkHexBytes() {
        java.lang.Object ref = btcPkHex_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          btcPkHex_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this BTC delegation
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 2 [json_name = "btcPkHex"];</code>
       * @param value The btcPkHex to set.
       * @return This builder for chaining.
       */
      public Builder setBtcPkHex(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        btcPkHex_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this BTC delegation
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 2 [json_name = "btcPkHex"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBtcPkHex() {
        btcPkHex_ = getDefaultInstance().getBtcPkHex();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btc_pk_hex is the Bitcoin secp256k1 PK of this BTC delegation
       * the PK follows encoding in BIP-340 spec in hex format
       * </pre>
       *
       * <code>string btc_pk_hex = 2 [json_name = "btcPkHex"];</code>
       * @param value The bytes for btcPkHex to set.
       * @return This builder for chaining.
       */
      public Builder setBtcPkHexBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        btcPkHex_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList fpBtcPkList_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureFpBtcPkListIsMutable() {
        if (!fpBtcPkList_.isModifiable()) {
          fpBtcPkList_ = new com.google.protobuf.LazyStringArrayList(fpBtcPkList_);
        }
        bitField0_ |= 0x00000004;
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * </pre>
       *
       * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
       * @return A list containing the fpBtcPkList.
       */
      public com.google.protobuf.ProtocolStringList
          getFpBtcPkListList() {
        fpBtcPkList_.makeImmutable();
        return fpBtcPkList_;
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * </pre>
       *
       * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
       * @return The count of fpBtcPkList.
       */
      public int getFpBtcPkListCount() {
        return fpBtcPkList_.size();
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * </pre>
       *
       * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
       * @param index The index of the element to return.
       * @return The fpBtcPkList at the given index.
       */
      public java.lang.String getFpBtcPkList(int index) {
        return fpBtcPkList_.get(index);
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * </pre>
       *
       * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
       * @param index The index of the value to return.
       * @return The bytes of the fpBtcPkList at the given index.
       */
      public com.google.protobuf.ByteString
          getFpBtcPkListBytes(int index) {
        return fpBtcPkList_.getByteString(index);
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * </pre>
       *
       * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
       * @param index The index to set the value at.
       * @param value The fpBtcPkList to set.
       * @return This builder for chaining.
       */
      public Builder setFpBtcPkList(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureFpBtcPkListIsMutable();
        fpBtcPkList_.set(index, value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * </pre>
       *
       * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
       * @param value The fpBtcPkList to add.
       * @return This builder for chaining.
       */
      public Builder addFpBtcPkList(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureFpBtcPkListIsMutable();
        fpBtcPkList_.add(value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * </pre>
       *
       * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
       * @param values The fpBtcPkList to add.
       * @return This builder for chaining.
       */
      public Builder addAllFpBtcPkList(
          java.lang.Iterable<java.lang.String> values) {
        ensureFpBtcPkListIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, fpBtcPkList_);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * </pre>
       *
       * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
       * @return This builder for chaining.
       */
      public Builder clearFpBtcPkList() {
        fpBtcPkList_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * </pre>
       *
       * <code>repeated string fp_btc_pk_list = 3 [json_name = "fpBtcPkList"];</code>
       * @param value The bytes of the fpBtcPkList to add.
       * @return This builder for chaining.
       */
      public Builder addFpBtcPkListBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureFpBtcPkListIsMutable();
        fpBtcPkList_.add(value);
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private int startHeight_ ;
      /**
       * <pre>
       * start_height is the start BTC height of the BTC delegation
       * it is the start BTC height of the timelock
       * </pre>
       *
       * <code>uint32 start_height = 4 [json_name = "startHeight"];</code>
       * @return The startHeight.
       */
      @java.lang.Override
      public int getStartHeight() {
        return startHeight_;
      }
      /**
       * <pre>
       * start_height is the start BTC height of the BTC delegation
       * it is the start BTC height of the timelock
       * </pre>
       *
       * <code>uint32 start_height = 4 [json_name = "startHeight"];</code>
       * @param value The startHeight to set.
       * @return This builder for chaining.
       */
      public Builder setStartHeight(int value) {

        startHeight_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * start_height is the start BTC height of the BTC delegation
       * it is the start BTC height of the timelock
       * </pre>
       *
       * <code>uint32 start_height = 4 [json_name = "startHeight"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStartHeight() {
        bitField0_ = (bitField0_ & ~0x00000008);
        startHeight_ = 0;
        onChanged();
        return this;
      }

      private int endHeight_ ;
      /**
       * <pre>
       * end_height is the end height of the BTC delegation
       * it is the end BTC height of the timelock - w
       * </pre>
       *
       * <code>uint32 end_height = 5 [json_name = "endHeight"];</code>
       * @return The endHeight.
       */
      @java.lang.Override
      public int getEndHeight() {
        return endHeight_;
      }
      /**
       * <pre>
       * end_height is the end height of the BTC delegation
       * it is the end BTC height of the timelock - w
       * </pre>
       *
       * <code>uint32 end_height = 5 [json_name = "endHeight"];</code>
       * @param value The endHeight to set.
       * @return This builder for chaining.
       */
      public Builder setEndHeight(int value) {

        endHeight_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * end_height is the end height of the BTC delegation
       * it is the end BTC height of the timelock - w
       * </pre>
       *
       * <code>uint32 end_height = 5 [json_name = "endHeight"];</code>
       * @return This builder for chaining.
       */
      public Builder clearEndHeight() {
        bitField0_ = (bitField0_ & ~0x00000010);
        endHeight_ = 0;
        onChanged();
        return this;
      }

      private long totalSat_ ;
      /**
       * <pre>
       * total_sat is the total amount of BTC stakes in this delegation
       * quantified in satoshi
       * </pre>
       *
       * <code>uint64 total_sat = 6 [json_name = "totalSat"];</code>
       * @return The totalSat.
       */
      @java.lang.Override
      public long getTotalSat() {
        return totalSat_;
      }
      /**
       * <pre>
       * total_sat is the total amount of BTC stakes in this delegation
       * quantified in satoshi
       * </pre>
       *
       * <code>uint64 total_sat = 6 [json_name = "totalSat"];</code>
       * @param value The totalSat to set.
       * @return This builder for chaining.
       */
      public Builder setTotalSat(long value) {

        totalSat_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * total_sat is the total amount of BTC stakes in this delegation
       * quantified in satoshi
       * </pre>
       *
       * <code>uint64 total_sat = 6 [json_name = "totalSat"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTotalSat() {
        bitField0_ = (bitField0_ & ~0x00000020);
        totalSat_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString stakingTx_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * staking_tx is the staking tx
       * </pre>
       *
       * <code>bytes staking_tx = 7 [json_name = "stakingTx"];</code>
       * @return The stakingTx.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getStakingTx() {
        return stakingTx_;
      }
      /**
       * <pre>
       * staking_tx is the staking tx
       * </pre>
       *
       * <code>bytes staking_tx = 7 [json_name = "stakingTx"];</code>
       * @param value The stakingTx to set.
       * @return This builder for chaining.
       */
      public Builder setStakingTx(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        stakingTx_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staking_tx is the staking tx
       * </pre>
       *
       * <code>bytes staking_tx = 7 [json_name = "stakingTx"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStakingTx() {
        bitField0_ = (bitField0_ & ~0x00000040);
        stakingTx_ = getDefaultInstance().getStakingTx();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString slashingTx_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * slashing_tx is the slashing tx
       * </pre>
       *
       * <code>bytes slashing_tx = 8 [json_name = "slashingTx"];</code>
       * @return The slashingTx.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSlashingTx() {
        return slashingTx_;
      }
      /**
       * <pre>
       * slashing_tx is the slashing tx
       * </pre>
       *
       * <code>bytes slashing_tx = 8 [json_name = "slashingTx"];</code>
       * @param value The slashingTx to set.
       * @return This builder for chaining.
       */
      public Builder setSlashingTx(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        slashingTx_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * slashing_tx is the slashing tx
       * </pre>
       *
       * <code>bytes slashing_tx = 8 [json_name = "slashingTx"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSlashingTx() {
        bitField0_ = (bitField0_ & ~0x00000080);
        slashingTx_ = getDefaultInstance().getSlashingTx();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString delegatorSlashingSig_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * delegator_slashing_sig is the signature on the slashing tx
       * by the delegator (i.e., SK corresponding to btc_pk) as string hex.
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>bytes delegator_slashing_sig = 9 [json_name = "delegatorSlashingSig"];</code>
       * @return The delegatorSlashingSig.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getDelegatorSlashingSig() {
        return delegatorSlashingSig_;
      }
      /**
       * <pre>
       * delegator_slashing_sig is the signature on the slashing tx
       * by the delegator (i.e., SK corresponding to btc_pk) as string hex.
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>bytes delegator_slashing_sig = 9 [json_name = "delegatorSlashingSig"];</code>
       * @param value The delegatorSlashingSig to set.
       * @return This builder for chaining.
       */
      public Builder setDelegatorSlashingSig(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        delegatorSlashingSig_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * delegator_slashing_sig is the signature on the slashing tx
       * by the delegator (i.e., SK corresponding to btc_pk) as string hex.
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>bytes delegator_slashing_sig = 9 [json_name = "delegatorSlashingSig"];</code>
       * @return This builder for chaining.
       */
      public Builder clearDelegatorSlashingSig() {
        bitField0_ = (bitField0_ & ~0x00000100);
        delegatorSlashingSig_ = getDefaultInstance().getDelegatorSlashingSig();
        onChanged();
        return this;
      }

      private java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> covenantSigs_ =
        java.util.Collections.emptyList();
      private void ensureCovenantSigsIsMutable() {
        if (!((bitField0_ & 0x00000200) != 0)) {
          covenantSigs_ = new java.util.ArrayList<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures>(covenantSigs_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> covenantSigsBuilder_;

      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> getCovenantSigsList() {
        if (covenantSigsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(covenantSigs_);
        } else {
          return covenantSigsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public int getCovenantSigsCount() {
        if (covenantSigsBuilder_ == null) {
          return covenantSigs_.size();
        } else {
          return covenantSigsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getCovenantSigs(int index) {
        if (covenantSigsBuilder_ == null) {
          return covenantSigs_.get(index);
        } else {
          return covenantSigsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public Builder setCovenantSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures value) {
        if (covenantSigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantSigsIsMutable();
          covenantSigs_.set(index, value);
          onChanged();
        } else {
          covenantSigsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public Builder setCovenantSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder builderForValue) {
        if (covenantSigsBuilder_ == null) {
          ensureCovenantSigsIsMutable();
          covenantSigs_.set(index, builderForValue.build());
          onChanged();
        } else {
          covenantSigsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public Builder addCovenantSigs(com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures value) {
        if (covenantSigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantSigsIsMutable();
          covenantSigs_.add(value);
          onChanged();
        } else {
          covenantSigsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public Builder addCovenantSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures value) {
        if (covenantSigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantSigsIsMutable();
          covenantSigs_.add(index, value);
          onChanged();
        } else {
          covenantSigsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public Builder addCovenantSigs(
          com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder builderForValue) {
        if (covenantSigsBuilder_ == null) {
          ensureCovenantSigsIsMutable();
          covenantSigs_.add(builderForValue.build());
          onChanged();
        } else {
          covenantSigsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public Builder addCovenantSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder builderForValue) {
        if (covenantSigsBuilder_ == null) {
          ensureCovenantSigsIsMutable();
          covenantSigs_.add(index, builderForValue.build());
          onChanged();
        } else {
          covenantSigsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public Builder addAllCovenantSigs(
          java.lang.Iterable<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> values) {
        if (covenantSigsBuilder_ == null) {
          ensureCovenantSigsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, covenantSigs_);
          onChanged();
        } else {
          covenantSigsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public Builder clearCovenantSigs() {
        if (covenantSigsBuilder_ == null) {
          covenantSigs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          covenantSigsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public Builder removeCovenantSigs(int index) {
        if (covenantSigsBuilder_ == null) {
          ensureCovenantSigsIsMutable();
          covenantSigs_.remove(index);
          onChanged();
        } else {
          covenantSigsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder getCovenantSigsBuilder(
          int index) {
        return getCovenantSigsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder getCovenantSigsOrBuilder(
          int index) {
        if (covenantSigsBuilder_ == null) {
          return covenantSigs_.get(index);  } else {
          return covenantSigsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
           getCovenantSigsOrBuilderList() {
        if (covenantSigsBuilder_ != null) {
          return covenantSigsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(covenantSigs_);
        }
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder addCovenantSigsBuilder() {
        return getCovenantSigsFieldBuilder().addBuilder(
            com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.getDefaultInstance());
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder addCovenantSigsBuilder(
          int index) {
        return getCovenantSigsFieldBuilder().addBuilder(
            index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.getDefaultInstance());
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 10 [json_name = "covenantSigs"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder> 
           getCovenantSigsBuilderList() {
        return getCovenantSigsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
          getCovenantSigsFieldBuilder() {
        if (covenantSigsBuilder_ == null) {
          covenantSigsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder>(
                  covenantSigs_,
                  ((bitField0_ & 0x00000200) != 0),
                  getParentForChildren(),
                  isClean());
          covenantSigs_ = null;
        }
        return covenantSigsBuilder_;
      }

      private int stakingOutputIdx_ ;
      /**
       * <pre>
       * staking_output_idx is the index of the staking output in the staking tx
       * </pre>
       *
       * <code>uint32 staking_output_idx = 11 [json_name = "stakingOutputIdx"];</code>
       * @return The stakingOutputIdx.
       */
      @java.lang.Override
      public int getStakingOutputIdx() {
        return stakingOutputIdx_;
      }
      /**
       * <pre>
       * staking_output_idx is the index of the staking output in the staking tx
       * </pre>
       *
       * <code>uint32 staking_output_idx = 11 [json_name = "stakingOutputIdx"];</code>
       * @param value The stakingOutputIdx to set.
       * @return This builder for chaining.
       */
      public Builder setStakingOutputIdx(int value) {

        stakingOutputIdx_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staking_output_idx is the index of the staking output in the staking tx
       * </pre>
       *
       * <code>uint32 staking_output_idx = 11 [json_name = "stakingOutputIdx"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStakingOutputIdx() {
        bitField0_ = (bitField0_ & ~0x00000400);
        stakingOutputIdx_ = 0;
        onChanged();
        return this;
      }

      private int unbondingTime_ ;
      /**
       * <pre>
       * unbonding_time used in unbonding output timelock path and in slashing transactions
       * change outputs
       * </pre>
       *
       * <code>uint32 unbonding_time = 12 [json_name = "unbondingTime"];</code>
       * @return The unbondingTime.
       */
      @java.lang.Override
      public int getUnbondingTime() {
        return unbondingTime_;
      }
      /**
       * <pre>
       * unbonding_time used in unbonding output timelock path and in slashing transactions
       * change outputs
       * </pre>
       *
       * <code>uint32 unbonding_time = 12 [json_name = "unbondingTime"];</code>
       * @param value The unbondingTime to set.
       * @return This builder for chaining.
       */
      public Builder setUnbondingTime(int value) {

        unbondingTime_ = value;
        bitField0_ |= 0x00000800;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * unbonding_time used in unbonding output timelock path and in slashing transactions
       * change outputs
       * </pre>
       *
       * <code>uint32 unbonding_time = 12 [json_name = "unbondingTime"];</code>
       * @return This builder for chaining.
       */
      public Builder clearUnbondingTime() {
        bitField0_ = (bitField0_ & ~0x00000800);
        unbondingTime_ = 0;
        onChanged();
        return this;
      }

      private com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo undelegationInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo, com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.Builder, com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfoOrBuilder> undelegationInfoBuilder_;
      /**
       * <pre>
       * undelegation_info is the undelegation info of this delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
       * @return Whether the undelegationInfo field is set.
       */
      public boolean hasUndelegationInfo() {
        return ((bitField0_ & 0x00001000) != 0);
      }
      /**
       * <pre>
       * undelegation_info is the undelegation info of this delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
       * @return The undelegationInfo.
       */
      public com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo getUndelegationInfo() {
        if (undelegationInfoBuilder_ == null) {
          return undelegationInfo_ == null ? com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.getDefaultInstance() : undelegationInfo_;
        } else {
          return undelegationInfoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * undelegation_info is the undelegation info of this delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
       */
      public Builder setUndelegationInfo(com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo value) {
        if (undelegationInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          undelegationInfo_ = value;
        } else {
          undelegationInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * undelegation_info is the undelegation info of this delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
       */
      public Builder setUndelegationInfo(
          com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.Builder builderForValue) {
        if (undelegationInfoBuilder_ == null) {
          undelegationInfo_ = builderForValue.build();
        } else {
          undelegationInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * undelegation_info is the undelegation info of this delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
       */
      public Builder mergeUndelegationInfo(com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo value) {
        if (undelegationInfoBuilder_ == null) {
          if (((bitField0_ & 0x00001000) != 0) &&
            undelegationInfo_ != null &&
            undelegationInfo_ != com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.getDefaultInstance()) {
            getUndelegationInfoBuilder().mergeFrom(value);
          } else {
            undelegationInfo_ = value;
          }
        } else {
          undelegationInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * undelegation_info is the undelegation info of this delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
       */
      public Builder clearUndelegationInfo() {
        bitField0_ = (bitField0_ & ~0x00001000);
        undelegationInfo_ = null;
        if (undelegationInfoBuilder_ != null) {
          undelegationInfoBuilder_.dispose();
          undelegationInfoBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * undelegation_info is the undelegation info of this delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.Builder getUndelegationInfoBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getUndelegationInfoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * undelegation_info is the undelegation info of this delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfoOrBuilder getUndelegationInfoOrBuilder() {
        if (undelegationInfoBuilder_ != null) {
          return undelegationInfoBuilder_.getMessageOrBuilder();
        } else {
          return undelegationInfo_ == null ?
              com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.getDefaultInstance() : undelegationInfo_;
        }
      }
      /**
       * <pre>
       * undelegation_info is the undelegation info of this delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegationInfo undelegation_info = 13 [json_name = "undelegationInfo"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo, com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.Builder, com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfoOrBuilder> 
          getUndelegationInfoFieldBuilder() {
        if (undelegationInfoBuilder_ == null) {
          undelegationInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo, com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.Builder, com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfoOrBuilder>(
                  getUndelegationInfo(),
                  getParentForChildren(),
                  isClean());
          undelegationInfo_ = null;
        }
        return undelegationInfoBuilder_;
      }

      private int paramsVersion_ ;
      /**
       * <pre>
       * params version used to validate delegation
       * </pre>
       *
       * <code>uint32 params_version = 14 [json_name = "paramsVersion"];</code>
       * @return The paramsVersion.
       */
      @java.lang.Override
      public int getParamsVersion() {
        return paramsVersion_;
      }
      /**
       * <pre>
       * params version used to validate delegation
       * </pre>
       *
       * <code>uint32 params_version = 14 [json_name = "paramsVersion"];</code>
       * @param value The paramsVersion to set.
       * @return This builder for chaining.
       */
      public Builder setParamsVersion(int value) {

        paramsVersion_ = value;
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * params version used to validate delegation
       * </pre>
       *
       * <code>uint32 params_version = 14 [json_name = "paramsVersion"];</code>
       * @return This builder for chaining.
       */
      public Builder clearParamsVersion() {
        bitField0_ = (bitField0_ & ~0x00002000);
        paramsVersion_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.ActiveBTCDelegation)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.ActiveBTCDelegation)
    private static final com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation();
    }

    public static com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ActiveBTCDelegation>
        PARSER = new com.google.protobuf.AbstractParser<ActiveBTCDelegation>() {
      @java.lang.Override
      public ActiveBTCDelegation parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ActiveBTCDelegation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ActiveBTCDelegation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCUndelegationInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.BTCUndelegationInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * unbonding_tx is the transaction which will transfer the funds from staking
     * output to unbonding output. Unbonding output will usually have lower timelock
     * than staking output.
     * </pre>
     *
     * <code>bytes unbonding_tx = 1 [json_name = "unbondingTx"];</code>
     * @return The unbondingTx.
     */
    com.google.protobuf.ByteString getUnbondingTx();

    /**
     * <pre>
     * slashing_tx is the slashing tx for unbonding transactions
     * It is partially signed by SK corresponding to btc_pk, but not signed by
     * finality provider or covenant yet.
     * </pre>
     *
     * <code>bytes slashing_tx = 2 [json_name = "slashingTx"];</code>
     * @return The slashingTx.
     */
    com.google.protobuf.ByteString getSlashingTx();

    /**
     * <pre>
     * delegator_slashing_sig is the signature on the slashing tx
     * by the delegator (i.e., SK corresponding to btc_pk).
     * It will be a part of the witness for the unbonding tx output.
     * </pre>
     *
     * <code>bytes delegator_slashing_sig = 3 [json_name = "delegatorSlashingSig"];</code>
     * @return The delegatorSlashingSig.
     */
    com.google.protobuf.ByteString getDelegatorSlashingSig();

    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
     */
    java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> 
        getCovenantSlashingSigsList();
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getCovenantSlashingSigs(int index);
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
     */
    int getCovenantSlashingSigsCount();
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
     */
    java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
        getCovenantSlashingSigsOrBuilderList();
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder getCovenantSlashingSigsOrBuilder(
        int index);

    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
     */
    java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo> 
        getCovenantUnbondingSigListList();
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo getCovenantUnbondingSigList(int index);
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
     */
    int getCovenantUnbondingSigListCount();
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
     */
    java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder> 
        getCovenantUnbondingSigListOrBuilderList();
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder getCovenantUnbondingSigListOrBuilder(
        int index);

    /**
     * <pre>
     * delegator_unbonding_info is the information about transaction which spent
     * the staking output
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
     * @return Whether the delegatorUnbondingInfo field is set.
     */
    boolean hasDelegatorUnbondingInfo();
    /**
     * <pre>
     * delegator_unbonding_info is the information about transaction which spent
     * the staking output
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
     * @return The delegatorUnbondingInfo.
     */
    com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo getDelegatorUnbondingInfo();
    /**
     * <pre>
     * delegator_unbonding_info is the information about transaction which spent
     * the staking output
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfoOrBuilder getDelegatorUnbondingInfoOrBuilder();
  }
  /**
   * <pre>
   * BTCUndelegationInfo provides all necessary info about the undeleagation
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.BTCUndelegationInfo}
   */
  public static final class BTCUndelegationInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.BTCUndelegationInfo)
      BTCUndelegationInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BTCUndelegationInfo.newBuilder() to construct.
    private BTCUndelegationInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BTCUndelegationInfo() {
      unbondingTx_ = com.google.protobuf.ByteString.EMPTY;
      slashingTx_ = com.google.protobuf.ByteString.EMPTY;
      delegatorSlashingSig_ = com.google.protobuf.ByteString.EMPTY;
      covenantSlashingSigs_ = java.util.Collections.emptyList();
      covenantUnbondingSigList_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BTCUndelegationInfo();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCUndelegationInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCUndelegationInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.class, com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.Builder.class);
    }

    public static final int UNBONDING_TX_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString unbondingTx_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * unbonding_tx is the transaction which will transfer the funds from staking
     * output to unbonding output. Unbonding output will usually have lower timelock
     * than staking output.
     * </pre>
     *
     * <code>bytes unbonding_tx = 1 [json_name = "unbondingTx"];</code>
     * @return The unbondingTx.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getUnbondingTx() {
      return unbondingTx_;
    }

    public static final int SLASHING_TX_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString slashingTx_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * slashing_tx is the slashing tx for unbonding transactions
     * It is partially signed by SK corresponding to btc_pk, but not signed by
     * finality provider or covenant yet.
     * </pre>
     *
     * <code>bytes slashing_tx = 2 [json_name = "slashingTx"];</code>
     * @return The slashingTx.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSlashingTx() {
      return slashingTx_;
    }

    public static final int DELEGATOR_SLASHING_SIG_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString delegatorSlashingSig_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * delegator_slashing_sig is the signature on the slashing tx
     * by the delegator (i.e., SK corresponding to btc_pk).
     * It will be a part of the witness for the unbonding tx output.
     * </pre>
     *
     * <code>bytes delegator_slashing_sig = 3 [json_name = "delegatorSlashingSig"];</code>
     * @return The delegatorSlashingSig.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getDelegatorSlashingSig() {
      return delegatorSlashingSig_;
    }

    public static final int COVENANT_SLASHING_SIGS_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> covenantSlashingSigs_;
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
     */
    @java.lang.Override
    public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> getCovenantSlashingSigsList() {
      return covenantSlashingSigs_;
    }
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
        getCovenantSlashingSigsOrBuilderList() {
      return covenantSlashingSigs_;
    }
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
     */
    @java.lang.Override
    public int getCovenantSlashingSigsCount() {
      return covenantSlashingSigs_.size();
    }
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getCovenantSlashingSigs(int index) {
      return covenantSlashingSigs_.get(index);
    }
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder getCovenantSlashingSigsOrBuilder(
        int index) {
      return covenantSlashingSigs_.get(index);
    }

    public static final int COVENANT_UNBONDING_SIG_LIST_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo> covenantUnbondingSigList_;
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
     */
    @java.lang.Override
    public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo> getCovenantUnbondingSigListList() {
      return covenantUnbondingSigList_;
    }
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder> 
        getCovenantUnbondingSigListOrBuilderList() {
      return covenantUnbondingSigList_;
    }
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
     */
    @java.lang.Override
    public int getCovenantUnbondingSigListCount() {
      return covenantUnbondingSigList_.size();
    }
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo getCovenantUnbondingSigList(int index) {
      return covenantUnbondingSigList_.get(index);
    }
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder getCovenantUnbondingSigListOrBuilder(
        int index) {
      return covenantUnbondingSigList_.get(index);
    }

    public static final int DELEGATOR_UNBONDING_INFO_FIELD_NUMBER = 6;
    private com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo delegatorUnbondingInfo_;
    /**
     * <pre>
     * delegator_unbonding_info is the information about transaction which spent
     * the staking output
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
     * @return Whether the delegatorUnbondingInfo field is set.
     */
    @java.lang.Override
    public boolean hasDelegatorUnbondingInfo() {
      return delegatorUnbondingInfo_ != null;
    }
    /**
     * <pre>
     * delegator_unbonding_info is the information about transaction which spent
     * the staking output
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
     * @return The delegatorUnbondingInfo.
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo getDelegatorUnbondingInfo() {
      return delegatorUnbondingInfo_ == null ? com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo.getDefaultInstance() : delegatorUnbondingInfo_;
    }
    /**
     * <pre>
     * delegator_unbonding_info is the information about transaction which spent
     * the staking output
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfoOrBuilder getDelegatorUnbondingInfoOrBuilder() {
      return delegatorUnbondingInfo_ == null ? com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo.getDefaultInstance() : delegatorUnbondingInfo_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!unbondingTx_.isEmpty()) {
        output.writeBytes(1, unbondingTx_);
      }
      if (!slashingTx_.isEmpty()) {
        output.writeBytes(2, slashingTx_);
      }
      if (!delegatorSlashingSig_.isEmpty()) {
        output.writeBytes(3, delegatorSlashingSig_);
      }
      for (int i = 0; i < covenantSlashingSigs_.size(); i++) {
        output.writeMessage(4, covenantSlashingSigs_.get(i));
      }
      for (int i = 0; i < covenantUnbondingSigList_.size(); i++) {
        output.writeMessage(5, covenantUnbondingSigList_.get(i));
      }
      if (delegatorUnbondingInfo_ != null) {
        output.writeMessage(6, getDelegatorUnbondingInfo());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!unbondingTx_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, unbondingTx_);
      }
      if (!slashingTx_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, slashingTx_);
      }
      if (!delegatorSlashingSig_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, delegatorSlashingSig_);
      }
      for (int i = 0; i < covenantSlashingSigs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, covenantSlashingSigs_.get(i));
      }
      for (int i = 0; i < covenantUnbondingSigList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, covenantUnbondingSigList_.get(i));
      }
      if (delegatorUnbondingInfo_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getDelegatorUnbondingInfo());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo other = (com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo) obj;

      if (!getUnbondingTx()
          .equals(other.getUnbondingTx())) return false;
      if (!getSlashingTx()
          .equals(other.getSlashingTx())) return false;
      if (!getDelegatorSlashingSig()
          .equals(other.getDelegatorSlashingSig())) return false;
      if (!getCovenantSlashingSigsList()
          .equals(other.getCovenantSlashingSigsList())) return false;
      if (!getCovenantUnbondingSigListList()
          .equals(other.getCovenantUnbondingSigListList())) return false;
      if (hasDelegatorUnbondingInfo() != other.hasDelegatorUnbondingInfo()) return false;
      if (hasDelegatorUnbondingInfo()) {
        if (!getDelegatorUnbondingInfo()
            .equals(other.getDelegatorUnbondingInfo())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UNBONDING_TX_FIELD_NUMBER;
      hash = (53 * hash) + getUnbondingTx().hashCode();
      hash = (37 * hash) + SLASHING_TX_FIELD_NUMBER;
      hash = (53 * hash) + getSlashingTx().hashCode();
      hash = (37 * hash) + DELEGATOR_SLASHING_SIG_FIELD_NUMBER;
      hash = (53 * hash) + getDelegatorSlashingSig().hashCode();
      if (getCovenantSlashingSigsCount() > 0) {
        hash = (37 * hash) + COVENANT_SLASHING_SIGS_FIELD_NUMBER;
        hash = (53 * hash) + getCovenantSlashingSigsList().hashCode();
      }
      if (getCovenantUnbondingSigListCount() > 0) {
        hash = (37 * hash) + COVENANT_UNBONDING_SIG_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getCovenantUnbondingSigListList().hashCode();
      }
      if (hasDelegatorUnbondingInfo()) {
        hash = (37 * hash) + DELEGATOR_UNBONDING_INFO_FIELD_NUMBER;
        hash = (53 * hash) + getDelegatorUnbondingInfo().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * BTCUndelegationInfo provides all necessary info about the undeleagation
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.BTCUndelegationInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.BTCUndelegationInfo)
        com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCUndelegationInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCUndelegationInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.class, com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        unbondingTx_ = com.google.protobuf.ByteString.EMPTY;
        slashingTx_ = com.google.protobuf.ByteString.EMPTY;
        delegatorSlashingSig_ = com.google.protobuf.ByteString.EMPTY;
        if (covenantSlashingSigsBuilder_ == null) {
          covenantSlashingSigs_ = java.util.Collections.emptyList();
        } else {
          covenantSlashingSigs_ = null;
          covenantSlashingSigsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (covenantUnbondingSigListBuilder_ == null) {
          covenantUnbondingSigList_ = java.util.Collections.emptyList();
        } else {
          covenantUnbondingSigList_ = null;
          covenantUnbondingSigListBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        delegatorUnbondingInfo_ = null;
        if (delegatorUnbondingInfoBuilder_ != null) {
          delegatorUnbondingInfoBuilder_.dispose();
          delegatorUnbondingInfoBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCUndelegationInfo_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo build() {
        com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo buildPartial() {
        com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo result = new com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo result) {
        if (covenantSlashingSigsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            covenantSlashingSigs_ = java.util.Collections.unmodifiableList(covenantSlashingSigs_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.covenantSlashingSigs_ = covenantSlashingSigs_;
        } else {
          result.covenantSlashingSigs_ = covenantSlashingSigsBuilder_.build();
        }
        if (covenantUnbondingSigListBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            covenantUnbondingSigList_ = java.util.Collections.unmodifiableList(covenantUnbondingSigList_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.covenantUnbondingSigList_ = covenantUnbondingSigList_;
        } else {
          result.covenantUnbondingSigList_ = covenantUnbondingSigListBuilder_.build();
        }
      }

      private void buildPartial0(com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.unbondingTx_ = unbondingTx_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.slashingTx_ = slashingTx_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.delegatorSlashingSig_ = delegatorSlashingSig_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.delegatorUnbondingInfo_ = delegatorUnbondingInfoBuilder_ == null
              ? delegatorUnbondingInfo_
              : delegatorUnbondingInfoBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo) {
          return mergeFrom((com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo other) {
        if (other == com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo.getDefaultInstance()) return this;
        if (other.getUnbondingTx() != com.google.protobuf.ByteString.EMPTY) {
          setUnbondingTx(other.getUnbondingTx());
        }
        if (other.getSlashingTx() != com.google.protobuf.ByteString.EMPTY) {
          setSlashingTx(other.getSlashingTx());
        }
        if (other.getDelegatorSlashingSig() != com.google.protobuf.ByteString.EMPTY) {
          setDelegatorSlashingSig(other.getDelegatorSlashingSig());
        }
        if (covenantSlashingSigsBuilder_ == null) {
          if (!other.covenantSlashingSigs_.isEmpty()) {
            if (covenantSlashingSigs_.isEmpty()) {
              covenantSlashingSigs_ = other.covenantSlashingSigs_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureCovenantSlashingSigsIsMutable();
              covenantSlashingSigs_.addAll(other.covenantSlashingSigs_);
            }
            onChanged();
          }
        } else {
          if (!other.covenantSlashingSigs_.isEmpty()) {
            if (covenantSlashingSigsBuilder_.isEmpty()) {
              covenantSlashingSigsBuilder_.dispose();
              covenantSlashingSigsBuilder_ = null;
              covenantSlashingSigs_ = other.covenantSlashingSigs_;
              bitField0_ = (bitField0_ & ~0x00000008);
              covenantSlashingSigsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCovenantSlashingSigsFieldBuilder() : null;
            } else {
              covenantSlashingSigsBuilder_.addAllMessages(other.covenantSlashingSigs_);
            }
          }
        }
        if (covenantUnbondingSigListBuilder_ == null) {
          if (!other.covenantUnbondingSigList_.isEmpty()) {
            if (covenantUnbondingSigList_.isEmpty()) {
              covenantUnbondingSigList_ = other.covenantUnbondingSigList_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCovenantUnbondingSigListIsMutable();
              covenantUnbondingSigList_.addAll(other.covenantUnbondingSigList_);
            }
            onChanged();
          }
        } else {
          if (!other.covenantUnbondingSigList_.isEmpty()) {
            if (covenantUnbondingSigListBuilder_.isEmpty()) {
              covenantUnbondingSigListBuilder_.dispose();
              covenantUnbondingSigListBuilder_ = null;
              covenantUnbondingSigList_ = other.covenantUnbondingSigList_;
              bitField0_ = (bitField0_ & ~0x00000010);
              covenantUnbondingSigListBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCovenantUnbondingSigListFieldBuilder() : null;
            } else {
              covenantUnbondingSigListBuilder_.addAllMessages(other.covenantUnbondingSigList_);
            }
          }
        }
        if (other.hasDelegatorUnbondingInfo()) {
          mergeDelegatorUnbondingInfo(other.getDelegatorUnbondingInfo());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                unbondingTx_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                slashingTx_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                delegatorSlashingSig_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures m =
                    input.readMessage(
                        com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.parser(),
                        extensionRegistry);
                if (covenantSlashingSigsBuilder_ == null) {
                  ensureCovenantSlashingSigsIsMutable();
                  covenantSlashingSigs_.add(m);
                } else {
                  covenantSlashingSigsBuilder_.addMessage(m);
                }
                break;
              } // case 34
              case 42: {
                com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo m =
                    input.readMessage(
                        com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.parser(),
                        extensionRegistry);
                if (covenantUnbondingSigListBuilder_ == null) {
                  ensureCovenantUnbondingSigListIsMutable();
                  covenantUnbondingSigList_.add(m);
                } else {
                  covenantUnbondingSigListBuilder_.addMessage(m);
                }
                break;
              } // case 42
              case 50: {
                input.readMessage(
                    getDelegatorUnbondingInfoFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString unbondingTx_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * unbonding_tx is the transaction which will transfer the funds from staking
       * output to unbonding output. Unbonding output will usually have lower timelock
       * than staking output.
       * </pre>
       *
       * <code>bytes unbonding_tx = 1 [json_name = "unbondingTx"];</code>
       * @return The unbondingTx.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getUnbondingTx() {
        return unbondingTx_;
      }
      /**
       * <pre>
       * unbonding_tx is the transaction which will transfer the funds from staking
       * output to unbonding output. Unbonding output will usually have lower timelock
       * than staking output.
       * </pre>
       *
       * <code>bytes unbonding_tx = 1 [json_name = "unbondingTx"];</code>
       * @param value The unbondingTx to set.
       * @return This builder for chaining.
       */
      public Builder setUnbondingTx(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        unbondingTx_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * unbonding_tx is the transaction which will transfer the funds from staking
       * output to unbonding output. Unbonding output will usually have lower timelock
       * than staking output.
       * </pre>
       *
       * <code>bytes unbonding_tx = 1 [json_name = "unbondingTx"];</code>
       * @return This builder for chaining.
       */
      public Builder clearUnbondingTx() {
        bitField0_ = (bitField0_ & ~0x00000001);
        unbondingTx_ = getDefaultInstance().getUnbondingTx();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString slashingTx_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * slashing_tx is the slashing tx for unbonding transactions
       * It is partially signed by SK corresponding to btc_pk, but not signed by
       * finality provider or covenant yet.
       * </pre>
       *
       * <code>bytes slashing_tx = 2 [json_name = "slashingTx"];</code>
       * @return The slashingTx.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSlashingTx() {
        return slashingTx_;
      }
      /**
       * <pre>
       * slashing_tx is the slashing tx for unbonding transactions
       * It is partially signed by SK corresponding to btc_pk, but not signed by
       * finality provider or covenant yet.
       * </pre>
       *
       * <code>bytes slashing_tx = 2 [json_name = "slashingTx"];</code>
       * @param value The slashingTx to set.
       * @return This builder for chaining.
       */
      public Builder setSlashingTx(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        slashingTx_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * slashing_tx is the slashing tx for unbonding transactions
       * It is partially signed by SK corresponding to btc_pk, but not signed by
       * finality provider or covenant yet.
       * </pre>
       *
       * <code>bytes slashing_tx = 2 [json_name = "slashingTx"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSlashingTx() {
        bitField0_ = (bitField0_ & ~0x00000002);
        slashingTx_ = getDefaultInstance().getSlashingTx();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString delegatorSlashingSig_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * delegator_slashing_sig is the signature on the slashing tx
       * by the delegator (i.e., SK corresponding to btc_pk).
       * It will be a part of the witness for the unbonding tx output.
       * </pre>
       *
       * <code>bytes delegator_slashing_sig = 3 [json_name = "delegatorSlashingSig"];</code>
       * @return The delegatorSlashingSig.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getDelegatorSlashingSig() {
        return delegatorSlashingSig_;
      }
      /**
       * <pre>
       * delegator_slashing_sig is the signature on the slashing tx
       * by the delegator (i.e., SK corresponding to btc_pk).
       * It will be a part of the witness for the unbonding tx output.
       * </pre>
       *
       * <code>bytes delegator_slashing_sig = 3 [json_name = "delegatorSlashingSig"];</code>
       * @param value The delegatorSlashingSig to set.
       * @return This builder for chaining.
       */
      public Builder setDelegatorSlashingSig(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        delegatorSlashingSig_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * delegator_slashing_sig is the signature on the slashing tx
       * by the delegator (i.e., SK corresponding to btc_pk).
       * It will be a part of the witness for the unbonding tx output.
       * </pre>
       *
       * <code>bytes delegator_slashing_sig = 3 [json_name = "delegatorSlashingSig"];</code>
       * @return This builder for chaining.
       */
      public Builder clearDelegatorSlashingSig() {
        bitField0_ = (bitField0_ & ~0x00000004);
        delegatorSlashingSig_ = getDefaultInstance().getDelegatorSlashingSig();
        onChanged();
        return this;
      }

      private java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> covenantSlashingSigs_ =
        java.util.Collections.emptyList();
      private void ensureCovenantSlashingSigsIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          covenantSlashingSigs_ = new java.util.ArrayList<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures>(covenantSlashingSigs_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> covenantSlashingSigsBuilder_;

      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> getCovenantSlashingSigsList() {
        if (covenantSlashingSigsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(covenantSlashingSigs_);
        } else {
          return covenantSlashingSigsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public int getCovenantSlashingSigsCount() {
        if (covenantSlashingSigsBuilder_ == null) {
          return covenantSlashingSigs_.size();
        } else {
          return covenantSlashingSigsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getCovenantSlashingSigs(int index) {
        if (covenantSlashingSigsBuilder_ == null) {
          return covenantSlashingSigs_.get(index);
        } else {
          return covenantSlashingSigsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder setCovenantSlashingSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures value) {
        if (covenantSlashingSigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantSlashingSigsIsMutable();
          covenantSlashingSigs_.set(index, value);
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder setCovenantSlashingSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder builderForValue) {
        if (covenantSlashingSigsBuilder_ == null) {
          ensureCovenantSlashingSigsIsMutable();
          covenantSlashingSigs_.set(index, builderForValue.build());
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder addCovenantSlashingSigs(com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures value) {
        if (covenantSlashingSigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantSlashingSigsIsMutable();
          covenantSlashingSigs_.add(value);
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder addCovenantSlashingSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures value) {
        if (covenantSlashingSigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantSlashingSigsIsMutable();
          covenantSlashingSigs_.add(index, value);
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder addCovenantSlashingSigs(
          com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder builderForValue) {
        if (covenantSlashingSigsBuilder_ == null) {
          ensureCovenantSlashingSigsIsMutable();
          covenantSlashingSigs_.add(builderForValue.build());
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder addCovenantSlashingSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder builderForValue) {
        if (covenantSlashingSigsBuilder_ == null) {
          ensureCovenantSlashingSigsIsMutable();
          covenantSlashingSigs_.add(index, builderForValue.build());
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder addAllCovenantSlashingSigs(
          java.lang.Iterable<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> values) {
        if (covenantSlashingSigsBuilder_ == null) {
          ensureCovenantSlashingSigsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, covenantSlashingSigs_);
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder clearCovenantSlashingSigs() {
        if (covenantSlashingSigsBuilder_ == null) {
          covenantSlashingSigs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder removeCovenantSlashingSigs(int index) {
        if (covenantSlashingSigsBuilder_ == null) {
          ensureCovenantSlashingSigsIsMutable();
          covenantSlashingSigs_.remove(index);
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder getCovenantSlashingSigsBuilder(
          int index) {
        return getCovenantSlashingSigsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder getCovenantSlashingSigsOrBuilder(
          int index) {
        if (covenantSlashingSigsBuilder_ == null) {
          return covenantSlashingSigs_.get(index);  } else {
          return covenantSlashingSigsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
           getCovenantSlashingSigsOrBuilderList() {
        if (covenantSlashingSigsBuilder_ != null) {
          return covenantSlashingSigsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(covenantSlashingSigs_);
        }
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder addCovenantSlashingSigsBuilder() {
        return getCovenantSlashingSigsFieldBuilder().addBuilder(
            com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.getDefaultInstance());
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder addCovenantSlashingSigsBuilder(
          int index) {
        return getCovenantSlashingSigsFieldBuilder().addBuilder(
            index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.getDefaultInstance());
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 4 [json_name = "covenantSlashingSigs"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder> 
           getCovenantSlashingSigsBuilderList() {
        return getCovenantSlashingSigsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
          getCovenantSlashingSigsFieldBuilder() {
        if (covenantSlashingSigsBuilder_ == null) {
          covenantSlashingSigsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder>(
                  covenantSlashingSigs_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          covenantSlashingSigs_ = null;
        }
        return covenantSlashingSigsBuilder_;
      }

      private java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo> covenantUnbondingSigList_ =
        java.util.Collections.emptyList();
      private void ensureCovenantUnbondingSigListIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          covenantUnbondingSigList_ = new java.util.ArrayList<com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo>(covenantUnbondingSigList_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder> covenantUnbondingSigListBuilder_;

      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo> getCovenantUnbondingSigListList() {
        if (covenantUnbondingSigListBuilder_ == null) {
          return java.util.Collections.unmodifiableList(covenantUnbondingSigList_);
        } else {
          return covenantUnbondingSigListBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public int getCovenantUnbondingSigListCount() {
        if (covenantUnbondingSigListBuilder_ == null) {
          return covenantUnbondingSigList_.size();
        } else {
          return covenantUnbondingSigListBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo getCovenantUnbondingSigList(int index) {
        if (covenantUnbondingSigListBuilder_ == null) {
          return covenantUnbondingSigList_.get(index);
        } else {
          return covenantUnbondingSigListBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder setCovenantUnbondingSigList(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo value) {
        if (covenantUnbondingSigListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantUnbondingSigListIsMutable();
          covenantUnbondingSigList_.set(index, value);
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder setCovenantUnbondingSigList(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder builderForValue) {
        if (covenantUnbondingSigListBuilder_ == null) {
          ensureCovenantUnbondingSigListIsMutable();
          covenantUnbondingSigList_.set(index, builderForValue.build());
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder addCovenantUnbondingSigList(com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo value) {
        if (covenantUnbondingSigListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantUnbondingSigListIsMutable();
          covenantUnbondingSigList_.add(value);
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder addCovenantUnbondingSigList(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo value) {
        if (covenantUnbondingSigListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantUnbondingSigListIsMutable();
          covenantUnbondingSigList_.add(index, value);
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder addCovenantUnbondingSigList(
          com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder builderForValue) {
        if (covenantUnbondingSigListBuilder_ == null) {
          ensureCovenantUnbondingSigListIsMutable();
          covenantUnbondingSigList_.add(builderForValue.build());
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder addCovenantUnbondingSigList(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder builderForValue) {
        if (covenantUnbondingSigListBuilder_ == null) {
          ensureCovenantUnbondingSigListIsMutable();
          covenantUnbondingSigList_.add(index, builderForValue.build());
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder addAllCovenantUnbondingSigList(
          java.lang.Iterable<? extends com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo> values) {
        if (covenantUnbondingSigListBuilder_ == null) {
          ensureCovenantUnbondingSigListIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, covenantUnbondingSigList_);
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder clearCovenantUnbondingSigList() {
        if (covenantUnbondingSigListBuilder_ == null) {
          covenantUnbondingSigList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder removeCovenantUnbondingSigList(int index) {
        if (covenantUnbondingSigListBuilder_ == null) {
          ensureCovenantUnbondingSigListIsMutable();
          covenantUnbondingSigList_.remove(index);
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder getCovenantUnbondingSigListBuilder(
          int index) {
        return getCovenantUnbondingSigListFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder getCovenantUnbondingSigListOrBuilder(
          int index) {
        if (covenantUnbondingSigListBuilder_ == null) {
          return covenantUnbondingSigList_.get(index);  } else {
          return covenantUnbondingSigListBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder> 
           getCovenantUnbondingSigListOrBuilderList() {
        if (covenantUnbondingSigListBuilder_ != null) {
          return covenantUnbondingSigListBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(covenantUnbondingSigList_);
        }
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder addCovenantUnbondingSigListBuilder() {
        return getCovenantUnbondingSigListFieldBuilder().addBuilder(
            com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder addCovenantUnbondingSigListBuilder(
          int index) {
        return getCovenantUnbondingSigListFieldBuilder().addBuilder(
            index, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 5 [json_name = "covenantUnbondingSigList"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder> 
           getCovenantUnbondingSigListBuilderList() {
        return getCovenantUnbondingSigListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder> 
          getCovenantUnbondingSigListFieldBuilder() {
        if (covenantUnbondingSigListBuilder_ == null) {
          covenantUnbondingSigListBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder>(
                  covenantUnbondingSigList_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          covenantUnbondingSigList_ = null;
        }
        return covenantUnbondingSigListBuilder_;
      }

      private com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo delegatorUnbondingInfo_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo, com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo.Builder, com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfoOrBuilder> delegatorUnbondingInfoBuilder_;
      /**
       * <pre>
       * delegator_unbonding_info is the information about transaction which spent
       * the staking output
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
       * @return Whether the delegatorUnbondingInfo field is set.
       */
      public boolean hasDelegatorUnbondingInfo() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * delegator_unbonding_info is the information about transaction which spent
       * the staking output
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
       * @return The delegatorUnbondingInfo.
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo getDelegatorUnbondingInfo() {
        if (delegatorUnbondingInfoBuilder_ == null) {
          return delegatorUnbondingInfo_ == null ? com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo.getDefaultInstance() : delegatorUnbondingInfo_;
        } else {
          return delegatorUnbondingInfoBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * delegator_unbonding_info is the information about transaction which spent
       * the staking output
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
       */
      public Builder setDelegatorUnbondingInfo(com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo value) {
        if (delegatorUnbondingInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          delegatorUnbondingInfo_ = value;
        } else {
          delegatorUnbondingInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * delegator_unbonding_info is the information about transaction which spent
       * the staking output
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
       */
      public Builder setDelegatorUnbondingInfo(
          com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo.Builder builderForValue) {
        if (delegatorUnbondingInfoBuilder_ == null) {
          delegatorUnbondingInfo_ = builderForValue.build();
        } else {
          delegatorUnbondingInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * delegator_unbonding_info is the information about transaction which spent
       * the staking output
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
       */
      public Builder mergeDelegatorUnbondingInfo(com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo value) {
        if (delegatorUnbondingInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0) &&
            delegatorUnbondingInfo_ != null &&
            delegatorUnbondingInfo_ != com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo.getDefaultInstance()) {
            getDelegatorUnbondingInfoBuilder().mergeFrom(value);
          } else {
            delegatorUnbondingInfo_ = value;
          }
        } else {
          delegatorUnbondingInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * delegator_unbonding_info is the information about transaction which spent
       * the staking output
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
       */
      public Builder clearDelegatorUnbondingInfo() {
        bitField0_ = (bitField0_ & ~0x00000020);
        delegatorUnbondingInfo_ = null;
        if (delegatorUnbondingInfoBuilder_ != null) {
          delegatorUnbondingInfoBuilder_.dispose();
          delegatorUnbondingInfoBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * delegator_unbonding_info is the information about transaction which spent
       * the staking output
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo.Builder getDelegatorUnbondingInfoBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getDelegatorUnbondingInfoFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * delegator_unbonding_info is the information about transaction which spent
       * the staking output
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfoOrBuilder getDelegatorUnbondingInfoOrBuilder() {
        if (delegatorUnbondingInfoBuilder_ != null) {
          return delegatorUnbondingInfoBuilder_.getMessageOrBuilder();
        } else {
          return delegatorUnbondingInfo_ == null ?
              com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo.getDefaultInstance() : delegatorUnbondingInfo_;
        }
      }
      /**
       * <pre>
       * delegator_unbonding_info is the information about transaction which spent
       * the staking output
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.DelegatorUnbondingInfo delegator_unbonding_info = 6 [json_name = "delegatorUnbondingInfo"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo, com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo.Builder, com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfoOrBuilder> 
          getDelegatorUnbondingInfoFieldBuilder() {
        if (delegatorUnbondingInfoBuilder_ == null) {
          delegatorUnbondingInfoBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo, com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfo.Builder, com.babylon.btcstaking.v1.BtcstakingProto.DelegatorUnbondingInfoOrBuilder>(
                  getDelegatorUnbondingInfo(),
                  getParentForChildren(),
                  isClean());
          delegatorUnbondingInfo_ = null;
        }
        return delegatorUnbondingInfoBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.BTCUndelegationInfo)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.BTCUndelegationInfo)
    private static final com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo();
    }

    public static com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCUndelegationInfo>
        PARSER = new com.google.protobuf.AbstractParser<BTCUndelegationInfo>() {
      @java.lang.Override
      public BTCUndelegationInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCUndelegationInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCUndelegationInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.BTCUndelegationInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SlashedBTCDelegationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.SlashedBTCDelegation)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
     * </pre>
     *
     * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
     * @return The stakingTxHash.
     */
    java.lang.String getStakingTxHash();
    /**
     * <pre>
     * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
     * </pre>
     *
     * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
     * @return The bytes for stakingTxHash.
     */
    com.google.protobuf.ByteString
        getStakingTxHashBytes();

    /**
     * <pre>
     * recovered_fp_btc_sk is the extracted BTC SK of the finality provider on
     * this consumer
     * this allows the consumer to verify the BTC delegation is indeed slashed
     * </pre>
     *
     * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
     * @return The recoveredFpBtcSk.
     */
    java.lang.String getRecoveredFpBtcSk();
    /**
     * <pre>
     * recovered_fp_btc_sk is the extracted BTC SK of the finality provider on
     * this consumer
     * this allows the consumer to verify the BTC delegation is indeed slashed
     * </pre>
     *
     * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
     * @return The bytes for recoveredFpBtcSk.
     */
    com.google.protobuf.ByteString
        getRecoveredFpBtcSkBytes();
  }
  /**
   * <pre>
   * SlashedBTCDelegation is an IBC packet sent from Babylon to consumer
   * about a slashed BTC delegation restaked to &gt;=1 of this consumer's 
   * finality provider
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.SlashedBTCDelegation}
   */
  public static final class SlashedBTCDelegation extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.SlashedBTCDelegation)
      SlashedBTCDelegationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SlashedBTCDelegation.newBuilder() to construct.
    private SlashedBTCDelegation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SlashedBTCDelegation() {
      stakingTxHash_ = "";
      recoveredFpBtcSk_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SlashedBTCDelegation();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_SlashedBTCDelegation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_SlashedBTCDelegation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.class, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder.class);
    }

    public static final int STAKING_TX_HASH_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object stakingTxHash_ = "";
    /**
     * <pre>
     * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
     * </pre>
     *
     * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
     * @return The stakingTxHash.
     */
    @java.lang.Override
    public java.lang.String getStakingTxHash() {
      java.lang.Object ref = stakingTxHash_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stakingTxHash_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
     * </pre>
     *
     * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
     * @return The bytes for stakingTxHash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStakingTxHashBytes() {
      java.lang.Object ref = stakingTxHash_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stakingTxHash_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RECOVERED_FP_BTC_SK_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object recoveredFpBtcSk_ = "";
    /**
     * <pre>
     * recovered_fp_btc_sk is the extracted BTC SK of the finality provider on
     * this consumer
     * this allows the consumer to verify the BTC delegation is indeed slashed
     * </pre>
     *
     * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
     * @return The recoveredFpBtcSk.
     */
    @java.lang.Override
    public java.lang.String getRecoveredFpBtcSk() {
      java.lang.Object ref = recoveredFpBtcSk_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        recoveredFpBtcSk_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * recovered_fp_btc_sk is the extracted BTC SK of the finality provider on
     * this consumer
     * this allows the consumer to verify the BTC delegation is indeed slashed
     * </pre>
     *
     * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
     * @return The bytes for recoveredFpBtcSk.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getRecoveredFpBtcSkBytes() {
      java.lang.Object ref = recoveredFpBtcSk_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        recoveredFpBtcSk_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stakingTxHash_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stakingTxHash_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(recoveredFpBtcSk_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, recoveredFpBtcSk_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stakingTxHash_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stakingTxHash_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(recoveredFpBtcSk_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, recoveredFpBtcSk_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation other = (com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation) obj;

      if (!getStakingTxHash()
          .equals(other.getStakingTxHash())) return false;
      if (!getRecoveredFpBtcSk()
          .equals(other.getRecoveredFpBtcSk())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STAKING_TX_HASH_FIELD_NUMBER;
      hash = (53 * hash) + getStakingTxHash().hashCode();
      hash = (37 * hash) + RECOVERED_FP_BTC_SK_FIELD_NUMBER;
      hash = (53 * hash) + getRecoveredFpBtcSk().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SlashedBTCDelegation is an IBC packet sent from Babylon to consumer
     * about a slashed BTC delegation restaked to &gt;=1 of this consumer's 
     * finality provider
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.SlashedBTCDelegation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.SlashedBTCDelegation)
        com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_SlashedBTCDelegation_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_SlashedBTCDelegation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.class, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        stakingTxHash_ = "";
        recoveredFpBtcSk_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_SlashedBTCDelegation_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation build() {
        com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation buildPartial() {
        com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation result = new com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.stakingTxHash_ = stakingTxHash_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.recoveredFpBtcSk_ = recoveredFpBtcSk_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation) {
          return mergeFrom((com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation other) {
        if (other == com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.getDefaultInstance()) return this;
        if (!other.getStakingTxHash().isEmpty()) {
          stakingTxHash_ = other.stakingTxHash_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (!other.getRecoveredFpBtcSk().isEmpty()) {
          recoveredFpBtcSk_ = other.recoveredFpBtcSk_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                stakingTxHash_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                recoveredFpBtcSk_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object stakingTxHash_ = "";
      /**
       * <pre>
       * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @return The stakingTxHash.
       */
      public java.lang.String getStakingTxHash() {
        java.lang.Object ref = stakingTxHash_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stakingTxHash_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @return The bytes for stakingTxHash.
       */
      public com.google.protobuf.ByteString
          getStakingTxHashBytes() {
        java.lang.Object ref = stakingTxHash_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stakingTxHash_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @param value The stakingTxHash to set.
       * @return This builder for chaining.
       */
      public Builder setStakingTxHash(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        stakingTxHash_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStakingTxHash() {
        stakingTxHash_ = getDefaultInstance().getStakingTxHash();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @param value The bytes for stakingTxHash to set.
       * @return This builder for chaining.
       */
      public Builder setStakingTxHashBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        stakingTxHash_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object recoveredFpBtcSk_ = "";
      /**
       * <pre>
       * recovered_fp_btc_sk is the extracted BTC SK of the finality provider on
       * this consumer
       * this allows the consumer to verify the BTC delegation is indeed slashed
       * </pre>
       *
       * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
       * @return The recoveredFpBtcSk.
       */
      public java.lang.String getRecoveredFpBtcSk() {
        java.lang.Object ref = recoveredFpBtcSk_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          recoveredFpBtcSk_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * recovered_fp_btc_sk is the extracted BTC SK of the finality provider on
       * this consumer
       * this allows the consumer to verify the BTC delegation is indeed slashed
       * </pre>
       *
       * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
       * @return The bytes for recoveredFpBtcSk.
       */
      public com.google.protobuf.ByteString
          getRecoveredFpBtcSkBytes() {
        java.lang.Object ref = recoveredFpBtcSk_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          recoveredFpBtcSk_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * recovered_fp_btc_sk is the extracted BTC SK of the finality provider on
       * this consumer
       * this allows the consumer to verify the BTC delegation is indeed slashed
       * </pre>
       *
       * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
       * @param value The recoveredFpBtcSk to set.
       * @return This builder for chaining.
       */
      public Builder setRecoveredFpBtcSk(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        recoveredFpBtcSk_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * recovered_fp_btc_sk is the extracted BTC SK of the finality provider on
       * this consumer
       * this allows the consumer to verify the BTC delegation is indeed slashed
       * </pre>
       *
       * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
       * @return This builder for chaining.
       */
      public Builder clearRecoveredFpBtcSk() {
        recoveredFpBtcSk_ = getDefaultInstance().getRecoveredFpBtcSk();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * recovered_fp_btc_sk is the extracted BTC SK of the finality provider on
       * this consumer
       * this allows the consumer to verify the BTC delegation is indeed slashed
       * </pre>
       *
       * <code>string recovered_fp_btc_sk = 2 [json_name = "recoveredFpBtcSk"];</code>
       * @param value The bytes for recoveredFpBtcSk to set.
       * @return This builder for chaining.
       */
      public Builder setRecoveredFpBtcSkBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        recoveredFpBtcSk_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.SlashedBTCDelegation)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.SlashedBTCDelegation)
    private static final com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation();
    }

    public static com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SlashedBTCDelegation>
        PARSER = new com.google.protobuf.AbstractParser<SlashedBTCDelegation>() {
      @java.lang.Override
      public SlashedBTCDelegation parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SlashedBTCDelegation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SlashedBTCDelegation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface UnbondedBTCDelegationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.UnbondedBTCDelegation)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
     * </pre>
     *
     * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
     * @return The stakingTxHash.
     */
    java.lang.String getStakingTxHash();
    /**
     * <pre>
     * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
     * </pre>
     *
     * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
     * @return The bytes for stakingTxHash.
     */
    com.google.protobuf.ByteString
        getStakingTxHashBytes();

    /**
     * <pre>
     * unbonding_tx_sig is the signature on the unbonding tx signed by the BTC delegator
     * It proves that the BTC delegator wants to unbond
     * </pre>
     *
     * <code>bytes unbonding_tx_sig = 2 [json_name = "unbondingTxSig"];</code>
     * @return The unbondingTxSig.
     */
    com.google.protobuf.ByteString getUnbondingTxSig();

    /**
     * <pre>
     * stake_spending_tx is the stake spending tx
     * </pre>
     *
     * <code>bytes stake_spending_tx = 3 [json_name = "stakeSpendingTx"];</code>
     * @return The stakeSpendingTx.
     */
    com.google.protobuf.ByteString getStakeSpendingTx();

    /**
     * <pre>
     * proof is the inclusion proof for the stake spending tx
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
     * @return Whether the proof field is set.
     */
    boolean hasProof();
    /**
     * <pre>
     * proof is the inclusion proof for the stake spending tx
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
     * @return The proof.
     */
    com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof getProof();
    /**
     * <pre>
     * proof is the inclusion proof for the stake spending tx
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.InclusionProofOrBuilder getProofOrBuilder();
  }
  /**
   * <pre>
   * UnbondedBTCDelegation is an IBC packet sent from Babylon to consumer
   * upon an early unbonded BTC delegation
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.UnbondedBTCDelegation}
   */
  public static final class UnbondedBTCDelegation extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.UnbondedBTCDelegation)
      UnbondedBTCDelegationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use UnbondedBTCDelegation.newBuilder() to construct.
    private UnbondedBTCDelegation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private UnbondedBTCDelegation() {
      stakingTxHash_ = "";
      unbondingTxSig_ = com.google.protobuf.ByteString.EMPTY;
      stakeSpendingTx_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new UnbondedBTCDelegation();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_UnbondedBTCDelegation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_UnbondedBTCDelegation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.class, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder.class);
    }

    public static final int STAKING_TX_HASH_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object stakingTxHash_ = "";
    /**
     * <pre>
     * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
     * </pre>
     *
     * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
     * @return The stakingTxHash.
     */
    @java.lang.Override
    public java.lang.String getStakingTxHash() {
      java.lang.Object ref = stakingTxHash_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stakingTxHash_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
     * </pre>
     *
     * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
     * @return The bytes for stakingTxHash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStakingTxHashBytes() {
      java.lang.Object ref = stakingTxHash_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stakingTxHash_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int UNBONDING_TX_SIG_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString unbondingTxSig_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * unbonding_tx_sig is the signature on the unbonding tx signed by the BTC delegator
     * It proves that the BTC delegator wants to unbond
     * </pre>
     *
     * <code>bytes unbonding_tx_sig = 2 [json_name = "unbondingTxSig"];</code>
     * @return The unbondingTxSig.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getUnbondingTxSig() {
      return unbondingTxSig_;
    }

    public static final int STAKE_SPENDING_TX_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString stakeSpendingTx_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * stake_spending_tx is the stake spending tx
     * </pre>
     *
     * <code>bytes stake_spending_tx = 3 [json_name = "stakeSpendingTx"];</code>
     * @return The stakeSpendingTx.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getStakeSpendingTx() {
      return stakeSpendingTx_;
    }

    public static final int PROOF_FIELD_NUMBER = 4;
    private com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof proof_;
    /**
     * <pre>
     * proof is the inclusion proof for the stake spending tx
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
     * @return Whether the proof field is set.
     */
    @java.lang.Override
    public boolean hasProof() {
      return proof_ != null;
    }
    /**
     * <pre>
     * proof is the inclusion proof for the stake spending tx
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
     * @return The proof.
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof getProof() {
      return proof_ == null ? com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof.getDefaultInstance() : proof_;
    }
    /**
     * <pre>
     * proof is the inclusion proof for the stake spending tx
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.InclusionProofOrBuilder getProofOrBuilder() {
      return proof_ == null ? com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof.getDefaultInstance() : proof_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stakingTxHash_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stakingTxHash_);
      }
      if (!unbondingTxSig_.isEmpty()) {
        output.writeBytes(2, unbondingTxSig_);
      }
      if (!stakeSpendingTx_.isEmpty()) {
        output.writeBytes(3, stakeSpendingTx_);
      }
      if (proof_ != null) {
        output.writeMessage(4, getProof());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stakingTxHash_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stakingTxHash_);
      }
      if (!unbondingTxSig_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, unbondingTxSig_);
      }
      if (!stakeSpendingTx_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, stakeSpendingTx_);
      }
      if (proof_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getProof());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation other = (com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation) obj;

      if (!getStakingTxHash()
          .equals(other.getStakingTxHash())) return false;
      if (!getUnbondingTxSig()
          .equals(other.getUnbondingTxSig())) return false;
      if (!getStakeSpendingTx()
          .equals(other.getStakeSpendingTx())) return false;
      if (hasProof() != other.hasProof()) return false;
      if (hasProof()) {
        if (!getProof()
            .equals(other.getProof())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STAKING_TX_HASH_FIELD_NUMBER;
      hash = (53 * hash) + getStakingTxHash().hashCode();
      hash = (37 * hash) + UNBONDING_TX_SIG_FIELD_NUMBER;
      hash = (53 * hash) + getUnbondingTxSig().hashCode();
      hash = (37 * hash) + STAKE_SPENDING_TX_FIELD_NUMBER;
      hash = (53 * hash) + getStakeSpendingTx().hashCode();
      if (hasProof()) {
        hash = (37 * hash) + PROOF_FIELD_NUMBER;
        hash = (53 * hash) + getProof().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * UnbondedBTCDelegation is an IBC packet sent from Babylon to consumer
     * upon an early unbonded BTC delegation
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.UnbondedBTCDelegation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.UnbondedBTCDelegation)
        com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_UnbondedBTCDelegation_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_UnbondedBTCDelegation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.class, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        stakingTxHash_ = "";
        unbondingTxSig_ = com.google.protobuf.ByteString.EMPTY;
        stakeSpendingTx_ = com.google.protobuf.ByteString.EMPTY;
        proof_ = null;
        if (proofBuilder_ != null) {
          proofBuilder_.dispose();
          proofBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_UnbondedBTCDelegation_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation build() {
        com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation buildPartial() {
        com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation result = new com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.stakingTxHash_ = stakingTxHash_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.unbondingTxSig_ = unbondingTxSig_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.stakeSpendingTx_ = stakeSpendingTx_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.proof_ = proofBuilder_ == null
              ? proof_
              : proofBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation) {
          return mergeFrom((com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation other) {
        if (other == com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.getDefaultInstance()) return this;
        if (!other.getStakingTxHash().isEmpty()) {
          stakingTxHash_ = other.stakingTxHash_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.getUnbondingTxSig() != com.google.protobuf.ByteString.EMPTY) {
          setUnbondingTxSig(other.getUnbondingTxSig());
        }
        if (other.getStakeSpendingTx() != com.google.protobuf.ByteString.EMPTY) {
          setStakeSpendingTx(other.getStakeSpendingTx());
        }
        if (other.hasProof()) {
          mergeProof(other.getProof());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                stakingTxHash_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                unbondingTxSig_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                stakeSpendingTx_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getProofFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object stakingTxHash_ = "";
      /**
       * <pre>
       * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @return The stakingTxHash.
       */
      public java.lang.String getStakingTxHash() {
        java.lang.Object ref = stakingTxHash_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stakingTxHash_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @return The bytes for stakingTxHash.
       */
      public com.google.protobuf.ByteString
          getStakingTxHashBytes() {
        java.lang.Object ref = stakingTxHash_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stakingTxHash_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @param value The stakingTxHash to set.
       * @return This builder for chaining.
       */
      public Builder setStakingTxHash(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        stakingTxHash_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStakingTxHash() {
        stakingTxHash_ = getDefaultInstance().getStakingTxHash();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staking tx hash of the BTC delegation. It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @param value The bytes for stakingTxHash to set.
       * @return This builder for chaining.
       */
      public Builder setStakingTxHashBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        stakingTxHash_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString unbondingTxSig_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * unbonding_tx_sig is the signature on the unbonding tx signed by the BTC delegator
       * It proves that the BTC delegator wants to unbond
       * </pre>
       *
       * <code>bytes unbonding_tx_sig = 2 [json_name = "unbondingTxSig"];</code>
       * @return The unbondingTxSig.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getUnbondingTxSig() {
        return unbondingTxSig_;
      }
      /**
       * <pre>
       * unbonding_tx_sig is the signature on the unbonding tx signed by the BTC delegator
       * It proves that the BTC delegator wants to unbond
       * </pre>
       *
       * <code>bytes unbonding_tx_sig = 2 [json_name = "unbondingTxSig"];</code>
       * @param value The unbondingTxSig to set.
       * @return This builder for chaining.
       */
      public Builder setUnbondingTxSig(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        unbondingTxSig_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * unbonding_tx_sig is the signature on the unbonding tx signed by the BTC delegator
       * It proves that the BTC delegator wants to unbond
       * </pre>
       *
       * <code>bytes unbonding_tx_sig = 2 [json_name = "unbondingTxSig"];</code>
       * @return This builder for chaining.
       */
      public Builder clearUnbondingTxSig() {
        bitField0_ = (bitField0_ & ~0x00000002);
        unbondingTxSig_ = getDefaultInstance().getUnbondingTxSig();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString stakeSpendingTx_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * stake_spending_tx is the stake spending tx
       * </pre>
       *
       * <code>bytes stake_spending_tx = 3 [json_name = "stakeSpendingTx"];</code>
       * @return The stakeSpendingTx.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getStakeSpendingTx() {
        return stakeSpendingTx_;
      }
      /**
       * <pre>
       * stake_spending_tx is the stake spending tx
       * </pre>
       *
       * <code>bytes stake_spending_tx = 3 [json_name = "stakeSpendingTx"];</code>
       * @param value The stakeSpendingTx to set.
       * @return This builder for chaining.
       */
      public Builder setStakeSpendingTx(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        stakeSpendingTx_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * stake_spending_tx is the stake spending tx
       * </pre>
       *
       * <code>bytes stake_spending_tx = 3 [json_name = "stakeSpendingTx"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStakeSpendingTx() {
        bitField0_ = (bitField0_ & ~0x00000004);
        stakeSpendingTx_ = getDefaultInstance().getStakeSpendingTx();
        onChanged();
        return this;
      }

      private com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof proof_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof, com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof.Builder, com.babylon.btcstaking.v1.BtcstakingProto.InclusionProofOrBuilder> proofBuilder_;
      /**
       * <pre>
       * proof is the inclusion proof for the stake spending tx
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
       * @return Whether the proof field is set.
       */
      public boolean hasProof() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * proof is the inclusion proof for the stake spending tx
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
       * @return The proof.
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof getProof() {
        if (proofBuilder_ == null) {
          return proof_ == null ? com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof.getDefaultInstance() : proof_;
        } else {
          return proofBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * proof is the inclusion proof for the stake spending tx
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
       */
      public Builder setProof(com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof value) {
        if (proofBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          proof_ = value;
        } else {
          proofBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * proof is the inclusion proof for the stake spending tx
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
       */
      public Builder setProof(
          com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof.Builder builderForValue) {
        if (proofBuilder_ == null) {
          proof_ = builderForValue.build();
        } else {
          proofBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * proof is the inclusion proof for the stake spending tx
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
       */
      public Builder mergeProof(com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof value) {
        if (proofBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            proof_ != null &&
            proof_ != com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof.getDefaultInstance()) {
            getProofBuilder().mergeFrom(value);
          } else {
            proof_ = value;
          }
        } else {
          proofBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * proof is the inclusion proof for the stake spending tx
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
       */
      public Builder clearProof() {
        bitField0_ = (bitField0_ & ~0x00000008);
        proof_ = null;
        if (proofBuilder_ != null) {
          proofBuilder_.dispose();
          proofBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * proof is the inclusion proof for the stake spending tx
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof.Builder getProofBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getProofFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * proof is the inclusion proof for the stake spending tx
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.InclusionProofOrBuilder getProofOrBuilder() {
        if (proofBuilder_ != null) {
          return proofBuilder_.getMessageOrBuilder();
        } else {
          return proof_ == null ?
              com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof.getDefaultInstance() : proof_;
        }
      }
      /**
       * <pre>
       * proof is the inclusion proof for the stake spending tx
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.InclusionProof proof = 4 [json_name = "proof"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof, com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof.Builder, com.babylon.btcstaking.v1.BtcstakingProto.InclusionProofOrBuilder> 
          getProofFieldBuilder() {
        if (proofBuilder_ == null) {
          proofBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof, com.babylon.btcstaking.v1.BtcstakingProto.InclusionProof.Builder, com.babylon.btcstaking.v1.BtcstakingProto.InclusionProofOrBuilder>(
                  getProof(),
                  getParentForChildren(),
                  isClean());
          proof_ = null;
        }
        return proofBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.UnbondedBTCDelegation)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.UnbondedBTCDelegation)
    private static final com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation();
    }

    public static com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UnbondedBTCDelegation>
        PARSER = new com.google.protobuf.AbstractParser<UnbondedBTCDelegation>() {
      @java.lang.Override
      public UnbondedBTCDelegation parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UnbondedBTCDelegation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UnbondedBTCDelegation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCStakingConsumerEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.BTCStakingConsumerEvent)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * NewFinalityProvider represents the event of a new finality provider being created.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     * @return Whether the newFp field is set.
     */
    boolean hasNewFp();
    /**
     * <pre>
     * NewFinalityProvider represents the event of a new finality provider being created.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     * @return The newFp.
     */
    com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider getNewFp();
    /**
     * <pre>
     * NewFinalityProvider represents the event of a new finality provider being created.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     */
    com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder getNewFpOrBuilder();

    /**
     * <pre>
     * ActiveBTCDelegation represents the event of an active BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     * @return Whether the activeDel field is set.
     */
    boolean hasActiveDel();
    /**
     * <pre>
     * ActiveBTCDelegation represents the event of an active BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     * @return The activeDel.
     */
    com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation getActiveDel();
    /**
     * <pre>
     * ActiveBTCDelegation represents the event of an active BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     */
    com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder getActiveDelOrBuilder();

    /**
     * <pre>
     * SlashedBTCDelegation represents the event of a slashed BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     * @return Whether the slashedDel field is set.
     */
    boolean hasSlashedDel();
    /**
     * <pre>
     * SlashedBTCDelegation represents the event of a slashed BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     * @return The slashedDel.
     */
    com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation getSlashedDel();
    /**
     * <pre>
     * SlashedBTCDelegation represents the event of a slashed BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     */
    com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder getSlashedDelOrBuilder();

    /**
     * <pre>
     * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     * @return Whether the unbondedDel field is set.
     */
    boolean hasUnbondedDel();
    /**
     * <pre>
     * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     * @return The unbondedDel.
     */
    com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation getUnbondedDel();
    /**
     * <pre>
     * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     */
    com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder getUnbondedDelOrBuilder();

    com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent.EventCase getEventCase();
  }
  /**
   * <pre>
   * BTCStakingConsumerEvent defines the structure for storing BTC staking events
   * which will be later sent to consumer chains as IBC packets.
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.BTCStakingConsumerEvent}
   */
  public static final class BTCStakingConsumerEvent extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.BTCStakingConsumerEvent)
      BTCStakingConsumerEventOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BTCStakingConsumerEvent.newBuilder() to construct.
    private BTCStakingConsumerEvent(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BTCStakingConsumerEvent() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BTCStakingConsumerEvent();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCStakingConsumerEvent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCStakingConsumerEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent.class, com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent.Builder.class);
    }

    private int eventCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object event_;
    public enum EventCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      NEW_FP(1),
      ACTIVE_DEL(2),
      SLASHED_DEL(3),
      UNBONDED_DEL(4),
      EVENT_NOT_SET(0);
      private final int value;
      private EventCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static EventCase valueOf(int value) {
        return forNumber(value);
      }

      public static EventCase forNumber(int value) {
        switch (value) {
          case 1: return NEW_FP;
          case 2: return ACTIVE_DEL;
          case 3: return SLASHED_DEL;
          case 4: return UNBONDED_DEL;
          case 0: return EVENT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public EventCase
    getEventCase() {
      return EventCase.forNumber(
          eventCase_);
    }

    public static final int NEW_FP_FIELD_NUMBER = 1;
    /**
     * <pre>
     * NewFinalityProvider represents the event of a new finality provider being created.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     * @return Whether the newFp field is set.
     */
    @java.lang.Override
    public boolean hasNewFp() {
      return eventCase_ == 1;
    }
    /**
     * <pre>
     * NewFinalityProvider represents the event of a new finality provider being created.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     * @return The newFp.
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider getNewFp() {
      if (eventCase_ == 1) {
         return (com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider) event_;
      }
      return com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.getDefaultInstance();
    }
    /**
     * <pre>
     * NewFinalityProvider represents the event of a new finality provider being created.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder getNewFpOrBuilder() {
      if (eventCase_ == 1) {
         return (com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider) event_;
      }
      return com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.getDefaultInstance();
    }

    public static final int ACTIVE_DEL_FIELD_NUMBER = 2;
    /**
     * <pre>
     * ActiveBTCDelegation represents the event of an active BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     * @return Whether the activeDel field is set.
     */
    @java.lang.Override
    public boolean hasActiveDel() {
      return eventCase_ == 2;
    }
    /**
     * <pre>
     * ActiveBTCDelegation represents the event of an active BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     * @return The activeDel.
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation getActiveDel() {
      if (eventCase_ == 2) {
         return (com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation) event_;
      }
      return com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.getDefaultInstance();
    }
    /**
     * <pre>
     * ActiveBTCDelegation represents the event of an active BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder getActiveDelOrBuilder() {
      if (eventCase_ == 2) {
         return (com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation) event_;
      }
      return com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.getDefaultInstance();
    }

    public static final int SLASHED_DEL_FIELD_NUMBER = 3;
    /**
     * <pre>
     * SlashedBTCDelegation represents the event of a slashed BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     * @return Whether the slashedDel field is set.
     */
    @java.lang.Override
    public boolean hasSlashedDel() {
      return eventCase_ == 3;
    }
    /**
     * <pre>
     * SlashedBTCDelegation represents the event of a slashed BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     * @return The slashedDel.
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation getSlashedDel() {
      if (eventCase_ == 3) {
         return (com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation) event_;
      }
      return com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.getDefaultInstance();
    }
    /**
     * <pre>
     * SlashedBTCDelegation represents the event of a slashed BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder getSlashedDelOrBuilder() {
      if (eventCase_ == 3) {
         return (com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation) event_;
      }
      return com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.getDefaultInstance();
    }

    public static final int UNBONDED_DEL_FIELD_NUMBER = 4;
    /**
     * <pre>
     * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     * @return Whether the unbondedDel field is set.
     */
    @java.lang.Override
    public boolean hasUnbondedDel() {
      return eventCase_ == 4;
    }
    /**
     * <pre>
     * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     * @return The unbondedDel.
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation getUnbondedDel() {
      if (eventCase_ == 4) {
         return (com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation) event_;
      }
      return com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.getDefaultInstance();
    }
    /**
     * <pre>
     * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder getUnbondedDelOrBuilder() {
      if (eventCase_ == 4) {
         return (com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation) event_;
      }
      return com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (eventCase_ == 1) {
        output.writeMessage(1, (com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider) event_);
      }
      if (eventCase_ == 2) {
        output.writeMessage(2, (com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation) event_);
      }
      if (eventCase_ == 3) {
        output.writeMessage(3, (com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation) event_);
      }
      if (eventCase_ == 4) {
        output.writeMessage(4, (com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation) event_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (eventCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider) event_);
      }
      if (eventCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation) event_);
      }
      if (eventCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation) event_);
      }
      if (eventCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation) event_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent other = (com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent) obj;

      if (!getEventCase().equals(other.getEventCase())) return false;
      switch (eventCase_) {
        case 1:
          if (!getNewFp()
              .equals(other.getNewFp())) return false;
          break;
        case 2:
          if (!getActiveDel()
              .equals(other.getActiveDel())) return false;
          break;
        case 3:
          if (!getSlashedDel()
              .equals(other.getSlashedDel())) return false;
          break;
        case 4:
          if (!getUnbondedDel()
              .equals(other.getUnbondedDel())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (eventCase_) {
        case 1:
          hash = (37 * hash) + NEW_FP_FIELD_NUMBER;
          hash = (53 * hash) + getNewFp().hashCode();
          break;
        case 2:
          hash = (37 * hash) + ACTIVE_DEL_FIELD_NUMBER;
          hash = (53 * hash) + getActiveDel().hashCode();
          break;
        case 3:
          hash = (37 * hash) + SLASHED_DEL_FIELD_NUMBER;
          hash = (53 * hash) + getSlashedDel().hashCode();
          break;
        case 4:
          hash = (37 * hash) + UNBONDED_DEL_FIELD_NUMBER;
          hash = (53 * hash) + getUnbondedDel().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * BTCStakingConsumerEvent defines the structure for storing BTC staking events
     * which will be later sent to consumer chains as IBC packets.
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.BTCStakingConsumerEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.BTCStakingConsumerEvent)
        com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEventOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCStakingConsumerEvent_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCStakingConsumerEvent_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent.class, com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (newFpBuilder_ != null) {
          newFpBuilder_.clear();
        }
        if (activeDelBuilder_ != null) {
          activeDelBuilder_.clear();
        }
        if (slashedDelBuilder_ != null) {
          slashedDelBuilder_.clear();
        }
        if (unbondedDelBuilder_ != null) {
          unbondedDelBuilder_.clear();
        }
        eventCase_ = 0;
        event_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.PacketProto.internal_static_babylon_btcstaking_v1_BTCStakingConsumerEvent_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent build() {
        com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent buildPartial() {
        com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent result = new com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent result) {
        result.eventCase_ = eventCase_;
        result.event_ = this.event_;
        if (eventCase_ == 1 &&
            newFpBuilder_ != null) {
          result.event_ = newFpBuilder_.build();
        }
        if (eventCase_ == 2 &&
            activeDelBuilder_ != null) {
          result.event_ = activeDelBuilder_.build();
        }
        if (eventCase_ == 3 &&
            slashedDelBuilder_ != null) {
          result.event_ = slashedDelBuilder_.build();
        }
        if (eventCase_ == 4 &&
            unbondedDelBuilder_ != null) {
          result.event_ = unbondedDelBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent) {
          return mergeFrom((com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent other) {
        if (other == com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent.getDefaultInstance()) return this;
        switch (other.getEventCase()) {
          case NEW_FP: {
            mergeNewFp(other.getNewFp());
            break;
          }
          case ACTIVE_DEL: {
            mergeActiveDel(other.getActiveDel());
            break;
          }
          case SLASHED_DEL: {
            mergeSlashedDel(other.getSlashedDel());
            break;
          }
          case UNBONDED_DEL: {
            mergeUnbondedDel(other.getUnbondedDel());
            break;
          }
          case EVENT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getNewFpFieldBuilder().getBuilder(),
                    extensionRegistry);
                eventCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getActiveDelFieldBuilder().getBuilder(),
                    extensionRegistry);
                eventCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getSlashedDelFieldBuilder().getBuilder(),
                    extensionRegistry);
                eventCase_ = 3;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getUnbondedDelFieldBuilder().getBuilder(),
                    extensionRegistry);
                eventCase_ = 4;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int eventCase_ = 0;
      private java.lang.Object event_;
      public EventCase
          getEventCase() {
        return EventCase.forNumber(
            eventCase_);
      }

      public Builder clearEvent() {
        eventCase_ = 0;
        event_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider, com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder, com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder> newFpBuilder_;
      /**
       * <pre>
       * NewFinalityProvider represents the event of a new finality provider being created.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       * @return Whether the newFp field is set.
       */
      @java.lang.Override
      public boolean hasNewFp() {
        return eventCase_ == 1;
      }
      /**
       * <pre>
       * NewFinalityProvider represents the event of a new finality provider being created.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       * @return The newFp.
       */
      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider getNewFp() {
        if (newFpBuilder_ == null) {
          if (eventCase_ == 1) {
            return (com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider) event_;
          }
          return com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.getDefaultInstance();
        } else {
          if (eventCase_ == 1) {
            return newFpBuilder_.getMessage();
          }
          return com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * NewFinalityProvider represents the event of a new finality provider being created.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public Builder setNewFp(com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider value) {
        if (newFpBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          newFpBuilder_.setMessage(value);
        }
        eventCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * NewFinalityProvider represents the event of a new finality provider being created.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public Builder setNewFp(
          com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder builderForValue) {
        if (newFpBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          newFpBuilder_.setMessage(builderForValue.build());
        }
        eventCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * NewFinalityProvider represents the event of a new finality provider being created.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public Builder mergeNewFp(com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider value) {
        if (newFpBuilder_ == null) {
          if (eventCase_ == 1 &&
              event_ != com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.getDefaultInstance()) {
            event_ = com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.newBuilder((com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider) event_)
                .mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          if (eventCase_ == 1) {
            newFpBuilder_.mergeFrom(value);
          } else {
            newFpBuilder_.setMessage(value);
          }
        }
        eventCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * NewFinalityProvider represents the event of a new finality provider being created.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public Builder clearNewFp() {
        if (newFpBuilder_ == null) {
          if (eventCase_ == 1) {
            eventCase_ = 0;
            event_ = null;
            onChanged();
          }
        } else {
          if (eventCase_ == 1) {
            eventCase_ = 0;
            event_ = null;
          }
          newFpBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * NewFinalityProvider represents the event of a new finality provider being created.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder getNewFpBuilder() {
        return getNewFpFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * NewFinalityProvider represents the event of a new finality provider being created.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder getNewFpOrBuilder() {
        if ((eventCase_ == 1) && (newFpBuilder_ != null)) {
          return newFpBuilder_.getMessageOrBuilder();
        } else {
          if (eventCase_ == 1) {
            return (com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider) event_;
          }
          return com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * NewFinalityProvider represents the event of a new finality provider being created.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.NewFinalityProvider new_fp = 1 [json_name = "newFp"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider, com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder, com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder> 
          getNewFpFieldBuilder() {
        if (newFpBuilder_ == null) {
          if (!(eventCase_ == 1)) {
            event_ = com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.getDefaultInstance();
          }
          newFpBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider, com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider.Builder, com.babylon.btcstaking.v1.PacketProto.NewFinalityProviderOrBuilder>(
                  (com.babylon.btcstaking.v1.PacketProto.NewFinalityProvider) event_,
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        eventCase_ = 1;
        onChanged();
        return newFpBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder> activeDelBuilder_;
      /**
       * <pre>
       * ActiveBTCDelegation represents the event of an active BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       * @return Whether the activeDel field is set.
       */
      @java.lang.Override
      public boolean hasActiveDel() {
        return eventCase_ == 2;
      }
      /**
       * <pre>
       * ActiveBTCDelegation represents the event of an active BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       * @return The activeDel.
       */
      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation getActiveDel() {
        if (activeDelBuilder_ == null) {
          if (eventCase_ == 2) {
            return (com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation) event_;
          }
          return com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.getDefaultInstance();
        } else {
          if (eventCase_ == 2) {
            return activeDelBuilder_.getMessage();
          }
          return com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * ActiveBTCDelegation represents the event of an active BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public Builder setActiveDel(com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation value) {
        if (activeDelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          activeDelBuilder_.setMessage(value);
        }
        eventCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * ActiveBTCDelegation represents the event of an active BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public Builder setActiveDel(
          com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder builderForValue) {
        if (activeDelBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          activeDelBuilder_.setMessage(builderForValue.build());
        }
        eventCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * ActiveBTCDelegation represents the event of an active BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public Builder mergeActiveDel(com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation value) {
        if (activeDelBuilder_ == null) {
          if (eventCase_ == 2 &&
              event_ != com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.getDefaultInstance()) {
            event_ = com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.newBuilder((com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation) event_)
                .mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          if (eventCase_ == 2) {
            activeDelBuilder_.mergeFrom(value);
          } else {
            activeDelBuilder_.setMessage(value);
          }
        }
        eventCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * ActiveBTCDelegation represents the event of an active BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public Builder clearActiveDel() {
        if (activeDelBuilder_ == null) {
          if (eventCase_ == 2) {
            eventCase_ = 0;
            event_ = null;
            onChanged();
          }
        } else {
          if (eventCase_ == 2) {
            eventCase_ = 0;
            event_ = null;
          }
          activeDelBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * ActiveBTCDelegation represents the event of an active BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder getActiveDelBuilder() {
        return getActiveDelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * ActiveBTCDelegation represents the event of an active BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder getActiveDelOrBuilder() {
        if ((eventCase_ == 2) && (activeDelBuilder_ != null)) {
          return activeDelBuilder_.getMessageOrBuilder();
        } else {
          if (eventCase_ == 2) {
            return (com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation) event_;
          }
          return com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * ActiveBTCDelegation represents the event of an active BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ActiveBTCDelegation active_del = 2 [json_name = "activeDel"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder> 
          getActiveDelFieldBuilder() {
        if (activeDelBuilder_ == null) {
          if (!(eventCase_ == 2)) {
            event_ = com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.getDefaultInstance();
          }
          activeDelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegationOrBuilder>(
                  (com.babylon.btcstaking.v1.PacketProto.ActiveBTCDelegation) event_,
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        eventCase_ = 2;
        onChanged();
        return activeDelBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder> slashedDelBuilder_;
      /**
       * <pre>
       * SlashedBTCDelegation represents the event of a slashed BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       * @return Whether the slashedDel field is set.
       */
      @java.lang.Override
      public boolean hasSlashedDel() {
        return eventCase_ == 3;
      }
      /**
       * <pre>
       * SlashedBTCDelegation represents the event of a slashed BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       * @return The slashedDel.
       */
      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation getSlashedDel() {
        if (slashedDelBuilder_ == null) {
          if (eventCase_ == 3) {
            return (com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation) event_;
          }
          return com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.getDefaultInstance();
        } else {
          if (eventCase_ == 3) {
            return slashedDelBuilder_.getMessage();
          }
          return com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * SlashedBTCDelegation represents the event of a slashed BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public Builder setSlashedDel(com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation value) {
        if (slashedDelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          slashedDelBuilder_.setMessage(value);
        }
        eventCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * SlashedBTCDelegation represents the event of a slashed BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public Builder setSlashedDel(
          com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder builderForValue) {
        if (slashedDelBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          slashedDelBuilder_.setMessage(builderForValue.build());
        }
        eventCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * SlashedBTCDelegation represents the event of a slashed BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public Builder mergeSlashedDel(com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation value) {
        if (slashedDelBuilder_ == null) {
          if (eventCase_ == 3 &&
              event_ != com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.getDefaultInstance()) {
            event_ = com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.newBuilder((com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation) event_)
                .mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          if (eventCase_ == 3) {
            slashedDelBuilder_.mergeFrom(value);
          } else {
            slashedDelBuilder_.setMessage(value);
          }
        }
        eventCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * SlashedBTCDelegation represents the event of a slashed BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public Builder clearSlashedDel() {
        if (slashedDelBuilder_ == null) {
          if (eventCase_ == 3) {
            eventCase_ = 0;
            event_ = null;
            onChanged();
          }
        } else {
          if (eventCase_ == 3) {
            eventCase_ = 0;
            event_ = null;
          }
          slashedDelBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * SlashedBTCDelegation represents the event of a slashed BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder getSlashedDelBuilder() {
        return getSlashedDelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * SlashedBTCDelegation represents the event of a slashed BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder getSlashedDelOrBuilder() {
        if ((eventCase_ == 3) && (slashedDelBuilder_ != null)) {
          return slashedDelBuilder_.getMessageOrBuilder();
        } else {
          if (eventCase_ == 3) {
            return (com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation) event_;
          }
          return com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * SlashedBTCDelegation represents the event of a slashed BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.SlashedBTCDelegation slashed_del = 3 [json_name = "slashedDel"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder> 
          getSlashedDelFieldBuilder() {
        if (slashedDelBuilder_ == null) {
          if (!(eventCase_ == 3)) {
            event_ = com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.getDefaultInstance();
          }
          slashedDelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegationOrBuilder>(
                  (com.babylon.btcstaking.v1.PacketProto.SlashedBTCDelegation) event_,
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        eventCase_ = 3;
        onChanged();
        return slashedDelBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder> unbondedDelBuilder_;
      /**
       * <pre>
       * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       * @return Whether the unbondedDel field is set.
       */
      @java.lang.Override
      public boolean hasUnbondedDel() {
        return eventCase_ == 4;
      }
      /**
       * <pre>
       * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       * @return The unbondedDel.
       */
      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation getUnbondedDel() {
        if (unbondedDelBuilder_ == null) {
          if (eventCase_ == 4) {
            return (com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation) event_;
          }
          return com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.getDefaultInstance();
        } else {
          if (eventCase_ == 4) {
            return unbondedDelBuilder_.getMessage();
          }
          return com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public Builder setUnbondedDel(com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation value) {
        if (unbondedDelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          unbondedDelBuilder_.setMessage(value);
        }
        eventCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public Builder setUnbondedDel(
          com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder builderForValue) {
        if (unbondedDelBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          unbondedDelBuilder_.setMessage(builderForValue.build());
        }
        eventCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public Builder mergeUnbondedDel(com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation value) {
        if (unbondedDelBuilder_ == null) {
          if (eventCase_ == 4 &&
              event_ != com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.getDefaultInstance()) {
            event_ = com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.newBuilder((com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation) event_)
                .mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          if (eventCase_ == 4) {
            unbondedDelBuilder_.mergeFrom(value);
          } else {
            unbondedDelBuilder_.setMessage(value);
          }
        }
        eventCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public Builder clearUnbondedDel() {
        if (unbondedDelBuilder_ == null) {
          if (eventCase_ == 4) {
            eventCase_ = 0;
            event_ = null;
            onChanged();
          }
        } else {
          if (eventCase_ == 4) {
            eventCase_ = 0;
            event_ = null;
          }
          unbondedDelBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder getUnbondedDelBuilder() {
        return getUnbondedDelFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      @java.lang.Override
      public com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder getUnbondedDelOrBuilder() {
        if ((eventCase_ == 4) && (unbondedDelBuilder_ != null)) {
          return unbondedDelBuilder_.getMessageOrBuilder();
        } else {
          if (eventCase_ == 4) {
            return (com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation) event_;
          }
          return com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * UnbondedBTCDelegation represents the event of an unbonded BTC delegation.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.UnbondedBTCDelegation unbonded_del = 4 [json_name = "unbondedDel"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder> 
          getUnbondedDelFieldBuilder() {
        if (unbondedDelBuilder_ == null) {
          if (!(eventCase_ == 4)) {
            event_ = com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.getDefaultInstance();
          }
          unbondedDelBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation.Builder, com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegationOrBuilder>(
                  (com.babylon.btcstaking.v1.PacketProto.UnbondedBTCDelegation) event_,
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        eventCase_ = 4;
        onChanged();
        return unbondedDelBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.BTCStakingConsumerEvent)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.BTCStakingConsumerEvent)
    private static final com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent();
    }

    public static com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCStakingConsumerEvent>
        PARSER = new com.google.protobuf.AbstractParser<BTCStakingConsumerEvent>() {
      @java.lang.Override
      public BTCStakingConsumerEvent parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCStakingConsumerEvent> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCStakingConsumerEvent> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.PacketProto.BTCStakingConsumerEvent getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_SlashedFinalityProvider_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_SlashedFinalityProvider_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_BTCStakingIBCPacket_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_BTCStakingIBCPacket_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_NewFinalityProvider_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_NewFinalityProvider_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_ActiveBTCDelegation_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_ActiveBTCDelegation_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_BTCUndelegationInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_BTCUndelegationInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_SlashedBTCDelegation_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_SlashedBTCDelegation_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_UnbondedBTCDelegation_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_UnbondedBTCDelegation_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_BTCStakingConsumerEvent_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_BTCStakingConsumerEvent_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\"babylon/btcstaking/v1/packet.proto\022\025ba" +
      "bylon.btcstaking.v1\032$cosmos/staking/v1be" +
      "ta1/staking.proto\032\037babylon/btcstaking/v1" +
      "/pop.proto\032&babylon/btcstaking/v1/btcsta" +
      "king.proto\"f\n\027SlashedFinalityProvider\022\034\n" +
      "\nbtc_pk_hex\030\001 \001(\tR\010btcPkHex\022-\n\023recovered" +
      "_fp_btc_sk\030\002 \001(\tR\020recoveredFpBtcSk\"\302\002\n\023B" +
      "TCStakingIBCPacket\022A\n\006new_fp\030\001 \003(\0132*.bab" +
      "ylon.btcstaking.v1.NewFinalityProviderR\005" +
      "newFp\022I\n\nactive_del\030\002 \003(\0132*.babylon.btcs" +
      "taking.v1.ActiveBTCDelegationR\tactiveDel" +
      "\022L\n\013slashed_del\030\003 \003(\0132+.babylon.btcstaki" +
      "ng.v1.SlashedBTCDelegationR\nslashedDel\022O" +
      "\n\014unbonded_del\030\004 \003(\0132,.babylon.btcstakin" +
      "g.v1.UnbondedBTCDelegationR\013unbondedDel\"" +
      "\216\002\n\023NewFinalityProvider\022E\n\013description\030\001" +
      " \001(\0132#.cosmos.staking.v1beta1.Descriptio" +
      "nR\013description\022\036\n\ncommission\030\002 \001(\tR\ncomm" +
      "ission\022\022\n\004addr\030\003 \001(\tR\004addr\022\034\n\nbtc_pk_hex" +
      "\030\004 \001(\tR\010btcPkHex\022=\n\003pop\030\005 \001(\0132+.babylon." +
      "btcstaking.v1.ProofOfPossessionBTCR\003pop\022" +
      "\037\n\013consumer_id\030\010 \001(\tR\nconsumerId\"\372\004\n\023Act" +
      "iveBTCDelegation\022\037\n\013staker_addr\030\001 \001(\tR\ns" +
      "takerAddr\022\034\n\nbtc_pk_hex\030\002 \001(\tR\010btcPkHex\022" +
      "#\n\016fp_btc_pk_list\030\003 \003(\tR\013fpBtcPkList\022!\n\014" +
      "start_height\030\004 \001(\rR\013startHeight\022\035\n\nend_h" +
      "eight\030\005 \001(\rR\tendHeight\022\033\n\ttotal_sat\030\006 \001(" +
      "\004R\010totalSat\022\035\n\nstaking_tx\030\007 \001(\014R\tstaking" +
      "Tx\022\037\n\013slashing_tx\030\010 \001(\014R\nslashingTx\0224\n\026d" +
      "elegator_slashing_sig\030\t \001(\014R\024delegatorSl" +
      "ashingSig\022U\n\rcovenant_sigs\030\n \003(\01320.babyl" +
      "on.btcstaking.v1.CovenantAdaptorSignatur" +
      "esR\014covenantSigs\022,\n\022staking_output_idx\030\013" +
      " \001(\rR\020stakingOutputIdx\022%\n\016unbonding_time" +
      "\030\014 \001(\rR\runbondingTime\022W\n\021undelegation_in" +
      "fo\030\r \001(\0132*.babylon.btcstaking.v1.BTCUnde" +
      "legationInfoR\020undelegationInfo\022%\n\016params" +
      "_version\030\016 \001(\rR\rparamsVersion\"\305\003\n\023BTCUnd" +
      "elegationInfo\022!\n\014unbonding_tx\030\001 \001(\014R\013unb" +
      "ondingTx\022\037\n\013slashing_tx\030\002 \001(\014R\nslashingT" +
      "x\0224\n\026delegator_slashing_sig\030\003 \001(\014R\024deleg" +
      "atorSlashingSig\022f\n\026covenant_slashing_sig" +
      "s\030\004 \003(\01320.babylon.btcstaking.v1.Covenant" +
      "AdaptorSignaturesR\024covenantSlashingSigs\022" +
      "c\n\033covenant_unbonding_sig_list\030\005 \003(\0132$.b" +
      "abylon.btcstaking.v1.SignatureInfoR\030cove" +
      "nantUnbondingSigList\022g\n\030delegator_unbond" +
      "ing_info\030\006 \001(\0132-.babylon.btcstaking.v1.D" +
      "elegatorUnbondingInfoR\026delegatorUnbondin" +
      "gInfo\"m\n\024SlashedBTCDelegation\022&\n\017staking" +
      "_tx_hash\030\001 \001(\tR\rstakingTxHash\022-\n\023recover" +
      "ed_fp_btc_sk\030\002 \001(\tR\020recoveredFpBtcSk\"\322\001\n" +
      "\025UnbondedBTCDelegation\022&\n\017staking_tx_has" +
      "h\030\001 \001(\tR\rstakingTxHash\022(\n\020unbonding_tx_s" +
      "ig\030\002 \001(\014R\016unbondingTxSig\022*\n\021stake_spendi" +
      "ng_tx\030\003 \001(\014R\017stakeSpendingTx\022;\n\005proof\030\004 " +
      "\001(\0132%.babylon.btcstaking.v1.InclusionPro" +
      "ofR\005proof\"\327\002\n\027BTCStakingConsumerEvent\022C\n" +
      "\006new_fp\030\001 \001(\0132*.babylon.btcstaking.v1.Ne" +
      "wFinalityProviderH\000R\005newFp\022K\n\nactive_del" +
      "\030\002 \001(\0132*.babylon.btcstaking.v1.ActiveBTC" +
      "DelegationH\000R\tactiveDel\022N\n\013slashed_del\030\003" +
      " \001(\0132+.babylon.btcstaking.v1.SlashedBTCD" +
      "elegationH\000R\nslashedDel\022Q\n\014unbonded_del\030" +
      "\004 \001(\0132,.babylon.btcstaking.v1.UnbondedBT" +
      "CDelegationH\000R\013unbondedDelB\007\n\005eventB\322\001\n\031" +
      "com.babylon.btcstaking.v1B\013PacketProtoZ4" +
      "github.com/babylonlabs-io/babylon/x/btcs" +
      "taking/types\242\002\003BBX\252\002\025Babylon.Btcstaking." +
      "V1\312\002\025Babylon\\Btcstaking\\V1\342\002!Babylon\\Btc" +
      "staking\\V1\\GPBMetadata\352\002\027Babylon::Btcsta" +
      "king::V1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.cosmos.staking.v1beta1.StakingProto.getDescriptor(),
          com.babylon.btcstaking.v1.PopProto.getDescriptor(),
          com.babylon.btcstaking.v1.BtcstakingProto.getDescriptor(),
        });
    internal_static_babylon_btcstaking_v1_SlashedFinalityProvider_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_babylon_btcstaking_v1_SlashedFinalityProvider_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_SlashedFinalityProvider_descriptor,
        new java.lang.String[] { "BtcPkHex", "RecoveredFpBtcSk", });
    internal_static_babylon_btcstaking_v1_BTCStakingIBCPacket_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_babylon_btcstaking_v1_BTCStakingIBCPacket_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_BTCStakingIBCPacket_descriptor,
        new java.lang.String[] { "NewFp", "ActiveDel", "SlashedDel", "UnbondedDel", });
    internal_static_babylon_btcstaking_v1_NewFinalityProvider_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_babylon_btcstaking_v1_NewFinalityProvider_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_NewFinalityProvider_descriptor,
        new java.lang.String[] { "Description", "Commission", "Addr", "BtcPkHex", "Pop", "ConsumerId", });
    internal_static_babylon_btcstaking_v1_ActiveBTCDelegation_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_babylon_btcstaking_v1_ActiveBTCDelegation_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_ActiveBTCDelegation_descriptor,
        new java.lang.String[] { "StakerAddr", "BtcPkHex", "FpBtcPkList", "StartHeight", "EndHeight", "TotalSat", "StakingTx", "SlashingTx", "DelegatorSlashingSig", "CovenantSigs", "StakingOutputIdx", "UnbondingTime", "UndelegationInfo", "ParamsVersion", });
    internal_static_babylon_btcstaking_v1_BTCUndelegationInfo_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_babylon_btcstaking_v1_BTCUndelegationInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_BTCUndelegationInfo_descriptor,
        new java.lang.String[] { "UnbondingTx", "SlashingTx", "DelegatorSlashingSig", "CovenantSlashingSigs", "CovenantUnbondingSigList", "DelegatorUnbondingInfo", });
    internal_static_babylon_btcstaking_v1_SlashedBTCDelegation_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_babylon_btcstaking_v1_SlashedBTCDelegation_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_SlashedBTCDelegation_descriptor,
        new java.lang.String[] { "StakingTxHash", "RecoveredFpBtcSk", });
    internal_static_babylon_btcstaking_v1_UnbondedBTCDelegation_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_babylon_btcstaking_v1_UnbondedBTCDelegation_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_UnbondedBTCDelegation_descriptor,
        new java.lang.String[] { "StakingTxHash", "UnbondingTxSig", "StakeSpendingTx", "Proof", });
    internal_static_babylon_btcstaking_v1_BTCStakingConsumerEvent_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_babylon_btcstaking_v1_BTCStakingConsumerEvent_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_BTCStakingConsumerEvent_descriptor,
        new java.lang.String[] { "NewFp", "ActiveDel", "SlashedDel", "UnbondedDel", "Event", });
    com.cosmos.staking.v1beta1.StakingProto.getDescriptor();
    com.babylon.btcstaking.v1.PopProto.getDescriptor();
    com.babylon.btcstaking.v1.BtcstakingProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
