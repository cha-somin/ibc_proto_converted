// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: babylon/btcstaking/v1/btcstaking.proto

package com.babylon.btcstaking.v1;

public final class BtcstakingProto {
  private BtcstakingProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * BTCDelegationStatus is the status of a delegation. The state transition path is
   * PENDING -&gt; ACTIVE -&gt; UNBONDED with two possibilities:
   * 1. the typical path when timelock of staking transaction expires.
   * 2. the path when staker requests early undelegation through MsgBTCUndelegate message.
   * </pre>
   *
   * Protobuf enum {@code babylon.btcstaking.v1.BTCDelegationStatus}
   */
  public enum BTCDelegationStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * PENDING defines a delegation that is waiting for covenant signatures to become active.
     * </pre>
     *
     * <code>PENDING = 0;</code>
     */
    PENDING(0),
    /**
     * <pre>
     * ACTIVE defines a delegation that has voting power
     * </pre>
     *
     * <code>ACTIVE = 1;</code>
     */
    ACTIVE(1),
    /**
     * <pre>
     * UNBONDED defines a delegation no longer has voting power:
     * - either reaching the end of staking transaction timelock
     * - or receiving unbonding tx with signatures from staker and covenant committee
     * </pre>
     *
     * <code>UNBONDED = 2;</code>
     */
    UNBONDED(2),
    /**
     * <pre>
     * ANY is any of the above status
     * </pre>
     *
     * <code>ANY = 3;</code>
     */
    ANY(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * PENDING defines a delegation that is waiting for covenant signatures to become active.
     * </pre>
     *
     * <code>PENDING = 0;</code>
     */
    public static final int PENDING_VALUE = 0;
    /**
     * <pre>
     * ACTIVE defines a delegation that has voting power
     * </pre>
     *
     * <code>ACTIVE = 1;</code>
     */
    public static final int ACTIVE_VALUE = 1;
    /**
     * <pre>
     * UNBONDED defines a delegation no longer has voting power:
     * - either reaching the end of staking transaction timelock
     * - or receiving unbonding tx with signatures from staker and covenant committee
     * </pre>
     *
     * <code>UNBONDED = 2;</code>
     */
    public static final int UNBONDED_VALUE = 2;
    /**
     * <pre>
     * ANY is any of the above status
     * </pre>
     *
     * <code>ANY = 3;</code>
     */
    public static final int ANY_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static BTCDelegationStatus valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static BTCDelegationStatus forNumber(int value) {
      switch (value) {
        case 0: return PENDING;
        case 1: return ACTIVE;
        case 2: return UNBONDED;
        case 3: return ANY;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<BTCDelegationStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        BTCDelegationStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<BTCDelegationStatus>() {
            public BTCDelegationStatus findValueByNumber(int number) {
              return BTCDelegationStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.BtcstakingProto.getDescriptor().getEnumTypes().get(0);
    }

    private static final BTCDelegationStatus[] VALUES = values();

    public static BTCDelegationStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private BTCDelegationStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:babylon.btcstaking.v1.BTCDelegationStatus)
  }

  public interface FinalityProviderOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.FinalityProvider)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * addr is the bech32 address identifier of the finality provider.
     * </pre>
     *
     * <code>string addr = 1 [json_name = "addr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @return The addr.
     */
    java.lang.String getAddr();
    /**
     * <pre>
     * addr is the bech32 address identifier of the finality provider.
     * </pre>
     *
     * <code>string addr = 1 [json_name = "addr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @return The bytes for addr.
     */
    com.google.protobuf.ByteString
        getAddrBytes();

    /**
     * <pre>
     * description defines the description terms for the finality provider.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
     * @return Whether the description field is set.
     */
    boolean hasDescription();
    /**
     * <pre>
     * description defines the description terms for the finality provider.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
     * @return The description.
     */
    com.cosmos.staking.v1beta1.StakingProto.Description getDescription();
    /**
     * <pre>
     * description defines the description terms for the finality provider.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
     */
    com.cosmos.staking.v1beta1.StakingProto.DescriptionOrBuilder getDescriptionOrBuilder();

    /**
     * <pre>
     * commission defines the commission rate of the finality provider.
     * </pre>
     *
     * <code>string commission = 3 [json_name = "commission", (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];</code>
     * @return The commission.
     */
    java.lang.String getCommission();
    /**
     * <pre>
     * commission defines the commission rate of the finality provider.
     * </pre>
     *
     * <code>string commission = 3 [json_name = "commission", (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];</code>
     * @return The bytes for commission.
     */
    com.google.protobuf.ByteString
        getCommissionBytes();

    /**
     * <pre>
     * btc_pk is the Bitcoin secp256k1 PK of this finality provider
     * the PK follows encoding in BIP-340 spec
     * </pre>
     *
     * <code>bytes btc_pk = 4 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return The btcPk.
     */
    com.google.protobuf.ByteString getBtcPk();

    /**
     * <pre>
     * pop is the proof of possession of the btc_pk, where the BTC
     * private key signs the bech32 bbn addr of the finality provider.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
     * @return Whether the pop field is set.
     */
    boolean hasPop();
    /**
     * <pre>
     * pop is the proof of possession of the btc_pk, where the BTC
     * private key signs the bech32 bbn addr of the finality provider.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
     * @return The pop.
     */
    com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC getPop();
    /**
     * <pre>
     * pop is the proof of possession of the btc_pk, where the BTC
     * private key signs the bech32 bbn addr of the finality provider.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
     */
    com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder getPopOrBuilder();

    /**
     * <pre>
     * slashed_babylon_height indicates the Babylon height when
     * the finality provider is slashed.
     * if it's 0 then the finality provider is not slashed
     * </pre>
     *
     * <code>uint64 slashed_babylon_height = 6 [json_name = "slashedBabylonHeight"];</code>
     * @return The slashedBabylonHeight.
     */
    long getSlashedBabylonHeight();

    /**
     * <pre>
     * slashed_btc_height indicates the BTC height when
     * the finality provider is slashed.
     * if it's 0 then the finality provider is not slashed
     * </pre>
     *
     * <code>uint64 slashed_btc_height = 7 [json_name = "slashedBtcHeight"];</code>
     * @return The slashedBtcHeight.
     */
    long getSlashedBtcHeight();

    /**
     * <pre>
     * sluggish defines whether the finality provider is detected sluggish
     * </pre>
     *
     * <code>bool sluggish = 8 [json_name = "sluggish"];</code>
     * @return The sluggish.
     */
    boolean getSluggish();
  }
  /**
   * <pre>
   * FinalityProvider defines a finality provider
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.FinalityProvider}
   */
  public static final class FinalityProvider extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.FinalityProvider)
      FinalityProviderOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FinalityProvider.newBuilder() to construct.
    private FinalityProvider(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FinalityProvider() {
      addr_ = "";
      commission_ = "";
      btcPk_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FinalityProvider();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_FinalityProvider_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_FinalityProvider_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider.class, com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider.Builder.class);
    }

    public static final int ADDR_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object addr_ = "";
    /**
     * <pre>
     * addr is the bech32 address identifier of the finality provider.
     * </pre>
     *
     * <code>string addr = 1 [json_name = "addr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @return The addr.
     */
    @java.lang.Override
    public java.lang.String getAddr() {
      java.lang.Object ref = addr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        addr_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * addr is the bech32 address identifier of the finality provider.
     * </pre>
     *
     * <code>string addr = 1 [json_name = "addr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @return The bytes for addr.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getAddrBytes() {
      java.lang.Object ref = addr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        addr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DESCRIPTION_FIELD_NUMBER = 2;
    private com.cosmos.staking.v1beta1.StakingProto.Description description_;
    /**
     * <pre>
     * description defines the description terms for the finality provider.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
     * @return Whether the description field is set.
     */
    @java.lang.Override
    public boolean hasDescription() {
      return description_ != null;
    }
    /**
     * <pre>
     * description defines the description terms for the finality provider.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
     * @return The description.
     */
    @java.lang.Override
    public com.cosmos.staking.v1beta1.StakingProto.Description getDescription() {
      return description_ == null ? com.cosmos.staking.v1beta1.StakingProto.Description.getDefaultInstance() : description_;
    }
    /**
     * <pre>
     * description defines the description terms for the finality provider.
     * </pre>
     *
     * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
     */
    @java.lang.Override
    public com.cosmos.staking.v1beta1.StakingProto.DescriptionOrBuilder getDescriptionOrBuilder() {
      return description_ == null ? com.cosmos.staking.v1beta1.StakingProto.Description.getDefaultInstance() : description_;
    }

    public static final int COMMISSION_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object commission_ = "";
    /**
     * <pre>
     * commission defines the commission rate of the finality provider.
     * </pre>
     *
     * <code>string commission = 3 [json_name = "commission", (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];</code>
     * @return The commission.
     */
    @java.lang.Override
    public java.lang.String getCommission() {
      java.lang.Object ref = commission_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        commission_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * commission defines the commission rate of the finality provider.
     * </pre>
     *
     * <code>string commission = 3 [json_name = "commission", (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];</code>
     * @return The bytes for commission.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getCommissionBytes() {
      java.lang.Object ref = commission_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        commission_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BTC_PK_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString btcPk_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * btc_pk is the Bitcoin secp256k1 PK of this finality provider
     * the PK follows encoding in BIP-340 spec
     * </pre>
     *
     * <code>bytes btc_pk = 4 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return The btcPk.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getBtcPk() {
      return btcPk_;
    }

    public static final int POP_FIELD_NUMBER = 5;
    private com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC pop_;
    /**
     * <pre>
     * pop is the proof of possession of the btc_pk, where the BTC
     * private key signs the bech32 bbn addr of the finality provider.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
     * @return Whether the pop field is set.
     */
    @java.lang.Override
    public boolean hasPop() {
      return pop_ != null;
    }
    /**
     * <pre>
     * pop is the proof of possession of the btc_pk, where the BTC
     * private key signs the bech32 bbn addr of the finality provider.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
     * @return The pop.
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC getPop() {
      return pop_ == null ? com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance() : pop_;
    }
    /**
     * <pre>
     * pop is the proof of possession of the btc_pk, where the BTC
     * private key signs the bech32 bbn addr of the finality provider.
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder getPopOrBuilder() {
      return pop_ == null ? com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance() : pop_;
    }

    public static final int SLASHED_BABYLON_HEIGHT_FIELD_NUMBER = 6;
    private long slashedBabylonHeight_ = 0L;
    /**
     * <pre>
     * slashed_babylon_height indicates the Babylon height when
     * the finality provider is slashed.
     * if it's 0 then the finality provider is not slashed
     * </pre>
     *
     * <code>uint64 slashed_babylon_height = 6 [json_name = "slashedBabylonHeight"];</code>
     * @return The slashedBabylonHeight.
     */
    @java.lang.Override
    public long getSlashedBabylonHeight() {
      return slashedBabylonHeight_;
    }

    public static final int SLASHED_BTC_HEIGHT_FIELD_NUMBER = 7;
    private long slashedBtcHeight_ = 0L;
    /**
     * <pre>
     * slashed_btc_height indicates the BTC height when
     * the finality provider is slashed.
     * if it's 0 then the finality provider is not slashed
     * </pre>
     *
     * <code>uint64 slashed_btc_height = 7 [json_name = "slashedBtcHeight"];</code>
     * @return The slashedBtcHeight.
     */
    @java.lang.Override
    public long getSlashedBtcHeight() {
      return slashedBtcHeight_;
    }

    public static final int SLUGGISH_FIELD_NUMBER = 8;
    private boolean sluggish_ = false;
    /**
     * <pre>
     * sluggish defines whether the finality provider is detected sluggish
     * </pre>
     *
     * <code>bool sluggish = 8 [json_name = "sluggish"];</code>
     * @return The sluggish.
     */
    @java.lang.Override
    public boolean getSluggish() {
      return sluggish_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(addr_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, addr_);
      }
      if (description_ != null) {
        output.writeMessage(2, getDescription());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(commission_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, commission_);
      }
      if (!btcPk_.isEmpty()) {
        output.writeBytes(4, btcPk_);
      }
      if (pop_ != null) {
        output.writeMessage(5, getPop());
      }
      if (slashedBabylonHeight_ != 0L) {
        output.writeUInt64(6, slashedBabylonHeight_);
      }
      if (slashedBtcHeight_ != 0L) {
        output.writeUInt64(7, slashedBtcHeight_);
      }
      if (sluggish_ != false) {
        output.writeBool(8, sluggish_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(addr_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, addr_);
      }
      if (description_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getDescription());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(commission_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, commission_);
      }
      if (!btcPk_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, btcPk_);
      }
      if (pop_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getPop());
      }
      if (slashedBabylonHeight_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, slashedBabylonHeight_);
      }
      if (slashedBtcHeight_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(7, slashedBtcHeight_);
      }
      if (sluggish_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, sluggish_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider other = (com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider) obj;

      if (!getAddr()
          .equals(other.getAddr())) return false;
      if (hasDescription() != other.hasDescription()) return false;
      if (hasDescription()) {
        if (!getDescription()
            .equals(other.getDescription())) return false;
      }
      if (!getCommission()
          .equals(other.getCommission())) return false;
      if (!getBtcPk()
          .equals(other.getBtcPk())) return false;
      if (hasPop() != other.hasPop()) return false;
      if (hasPop()) {
        if (!getPop()
            .equals(other.getPop())) return false;
      }
      if (getSlashedBabylonHeight()
          != other.getSlashedBabylonHeight()) return false;
      if (getSlashedBtcHeight()
          != other.getSlashedBtcHeight()) return false;
      if (getSluggish()
          != other.getSluggish()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ADDR_FIELD_NUMBER;
      hash = (53 * hash) + getAddr().hashCode();
      if (hasDescription()) {
        hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
        hash = (53 * hash) + getDescription().hashCode();
      }
      hash = (37 * hash) + COMMISSION_FIELD_NUMBER;
      hash = (53 * hash) + getCommission().hashCode();
      hash = (37 * hash) + BTC_PK_FIELD_NUMBER;
      hash = (53 * hash) + getBtcPk().hashCode();
      if (hasPop()) {
        hash = (37 * hash) + POP_FIELD_NUMBER;
        hash = (53 * hash) + getPop().hashCode();
      }
      hash = (37 * hash) + SLASHED_BABYLON_HEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSlashedBabylonHeight());
      hash = (37 * hash) + SLASHED_BTC_HEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSlashedBtcHeight());
      hash = (37 * hash) + SLUGGISH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getSluggish());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * FinalityProvider defines a finality provider
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.FinalityProvider}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.FinalityProvider)
        com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_FinalityProvider_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_FinalityProvider_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider.class, com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        addr_ = "";
        description_ = null;
        if (descriptionBuilder_ != null) {
          descriptionBuilder_.dispose();
          descriptionBuilder_ = null;
        }
        commission_ = "";
        btcPk_ = com.google.protobuf.ByteString.EMPTY;
        pop_ = null;
        if (popBuilder_ != null) {
          popBuilder_.dispose();
          popBuilder_ = null;
        }
        slashedBabylonHeight_ = 0L;
        slashedBtcHeight_ = 0L;
        sluggish_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_FinalityProvider_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider build() {
        com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider buildPartial() {
        com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider result = new com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.addr_ = addr_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.description_ = descriptionBuilder_ == null
              ? description_
              : descriptionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.commission_ = commission_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.btcPk_ = btcPk_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.pop_ = popBuilder_ == null
              ? pop_
              : popBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.slashedBabylonHeight_ = slashedBabylonHeight_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.slashedBtcHeight_ = slashedBtcHeight_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.sluggish_ = sluggish_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider) {
          return mergeFrom((com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider other) {
        if (other == com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider.getDefaultInstance()) return this;
        if (!other.getAddr().isEmpty()) {
          addr_ = other.addr_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.hasDescription()) {
          mergeDescription(other.getDescription());
        }
        if (!other.getCommission().isEmpty()) {
          commission_ = other.commission_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.getBtcPk() != com.google.protobuf.ByteString.EMPTY) {
          setBtcPk(other.getBtcPk());
        }
        if (other.hasPop()) {
          mergePop(other.getPop());
        }
        if (other.getSlashedBabylonHeight() != 0L) {
          setSlashedBabylonHeight(other.getSlashedBabylonHeight());
        }
        if (other.getSlashedBtcHeight() != 0L) {
          setSlashedBtcHeight(other.getSlashedBtcHeight());
        }
        if (other.getSluggish() != false) {
          setSluggish(other.getSluggish());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                addr_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getDescriptionFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                commission_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                btcPk_ = input.readBytes();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getPopFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 48: {
                slashedBabylonHeight_ = input.readUInt64();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                slashedBtcHeight_ = input.readUInt64();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 64: {
                sluggish_ = input.readBool();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object addr_ = "";
      /**
       * <pre>
       * addr is the bech32 address identifier of the finality provider.
       * </pre>
       *
       * <code>string addr = 1 [json_name = "addr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @return The addr.
       */
      public java.lang.String getAddr() {
        java.lang.Object ref = addr_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          addr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * addr is the bech32 address identifier of the finality provider.
       * </pre>
       *
       * <code>string addr = 1 [json_name = "addr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @return The bytes for addr.
       */
      public com.google.protobuf.ByteString
          getAddrBytes() {
        java.lang.Object ref = addr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          addr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * addr is the bech32 address identifier of the finality provider.
       * </pre>
       *
       * <code>string addr = 1 [json_name = "addr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @param value The addr to set.
       * @return This builder for chaining.
       */
      public Builder setAddr(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        addr_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * addr is the bech32 address identifier of the finality provider.
       * </pre>
       *
       * <code>string addr = 1 [json_name = "addr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @return This builder for chaining.
       */
      public Builder clearAddr() {
        addr_ = getDefaultInstance().getAddr();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * addr is the bech32 address identifier of the finality provider.
       * </pre>
       *
       * <code>string addr = 1 [json_name = "addr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @param value The bytes for addr to set.
       * @return This builder for chaining.
       */
      public Builder setAddrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        addr_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.cosmos.staking.v1beta1.StakingProto.Description description_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.staking.v1beta1.StakingProto.Description, com.cosmos.staking.v1beta1.StakingProto.Description.Builder, com.cosmos.staking.v1beta1.StakingProto.DescriptionOrBuilder> descriptionBuilder_;
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
       * @return Whether the description field is set.
       */
      public boolean hasDescription() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
       * @return The description.
       */
      public com.cosmos.staking.v1beta1.StakingProto.Description getDescription() {
        if (descriptionBuilder_ == null) {
          return description_ == null ? com.cosmos.staking.v1beta1.StakingProto.Description.getDefaultInstance() : description_;
        } else {
          return descriptionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
       */
      public Builder setDescription(com.cosmos.staking.v1beta1.StakingProto.Description value) {
        if (descriptionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          description_ = value;
        } else {
          descriptionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
       */
      public Builder setDescription(
          com.cosmos.staking.v1beta1.StakingProto.Description.Builder builderForValue) {
        if (descriptionBuilder_ == null) {
          description_ = builderForValue.build();
        } else {
          descriptionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
       */
      public Builder mergeDescription(com.cosmos.staking.v1beta1.StakingProto.Description value) {
        if (descriptionBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            description_ != null &&
            description_ != com.cosmos.staking.v1beta1.StakingProto.Description.getDefaultInstance()) {
            getDescriptionBuilder().mergeFrom(value);
          } else {
            description_ = value;
          }
        } else {
          descriptionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
       */
      public Builder clearDescription() {
        bitField0_ = (bitField0_ & ~0x00000002);
        description_ = null;
        if (descriptionBuilder_ != null) {
          descriptionBuilder_.dispose();
          descriptionBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
       */
      public com.cosmos.staking.v1beta1.StakingProto.Description.Builder getDescriptionBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getDescriptionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
       */
      public com.cosmos.staking.v1beta1.StakingProto.DescriptionOrBuilder getDescriptionOrBuilder() {
        if (descriptionBuilder_ != null) {
          return descriptionBuilder_.getMessageOrBuilder();
        } else {
          return description_ == null ?
              com.cosmos.staking.v1beta1.StakingProto.Description.getDefaultInstance() : description_;
        }
      }
      /**
       * <pre>
       * description defines the description terms for the finality provider.
       * </pre>
       *
       * <code>.cosmos.staking.v1beta1.Description description = 2 [json_name = "description"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.staking.v1beta1.StakingProto.Description, com.cosmos.staking.v1beta1.StakingProto.Description.Builder, com.cosmos.staking.v1beta1.StakingProto.DescriptionOrBuilder> 
          getDescriptionFieldBuilder() {
        if (descriptionBuilder_ == null) {
          descriptionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.staking.v1beta1.StakingProto.Description, com.cosmos.staking.v1beta1.StakingProto.Description.Builder, com.cosmos.staking.v1beta1.StakingProto.DescriptionOrBuilder>(
                  getDescription(),
                  getParentForChildren(),
                  isClean());
          description_ = null;
        }
        return descriptionBuilder_;
      }

      private java.lang.Object commission_ = "";
      /**
       * <pre>
       * commission defines the commission rate of the finality provider.
       * </pre>
       *
       * <code>string commission = 3 [json_name = "commission", (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];</code>
       * @return The commission.
       */
      public java.lang.String getCommission() {
        java.lang.Object ref = commission_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          commission_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * commission defines the commission rate of the finality provider.
       * </pre>
       *
       * <code>string commission = 3 [json_name = "commission", (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];</code>
       * @return The bytes for commission.
       */
      public com.google.protobuf.ByteString
          getCommissionBytes() {
        java.lang.Object ref = commission_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          commission_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * commission defines the commission rate of the finality provider.
       * </pre>
       *
       * <code>string commission = 3 [json_name = "commission", (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];</code>
       * @param value The commission to set.
       * @return This builder for chaining.
       */
      public Builder setCommission(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        commission_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * commission defines the commission rate of the finality provider.
       * </pre>
       *
       * <code>string commission = 3 [json_name = "commission", (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];</code>
       * @return This builder for chaining.
       */
      public Builder clearCommission() {
        commission_ = getDefaultInstance().getCommission();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * commission defines the commission rate of the finality provider.
       * </pre>
       *
       * <code>string commission = 3 [json_name = "commission", (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.cosmos_proto.scalar) = "cosmos.Dec"];</code>
       * @param value The bytes for commission to set.
       * @return This builder for chaining.
       */
      public Builder setCommissionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        commission_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString btcPk_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * btc_pk is the Bitcoin secp256k1 PK of this finality provider
       * the PK follows encoding in BIP-340 spec
       * </pre>
       *
       * <code>bytes btc_pk = 4 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return The btcPk.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getBtcPk() {
        return btcPk_;
      }
      /**
       * <pre>
       * btc_pk is the Bitcoin secp256k1 PK of this finality provider
       * the PK follows encoding in BIP-340 spec
       * </pre>
       *
       * <code>bytes btc_pk = 4 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @param value The btcPk to set.
       * @return This builder for chaining.
       */
      public Builder setBtcPk(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        btcPk_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btc_pk is the Bitcoin secp256k1 PK of this finality provider
       * the PK follows encoding in BIP-340 spec
       * </pre>
       *
       * <code>bytes btc_pk = 4 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBtcPk() {
        bitField0_ = (bitField0_ & ~0x00000008);
        btcPk_ = getDefaultInstance().getBtcPk();
        onChanged();
        return this;
      }

      private com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC pop_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder> popBuilder_;
      /**
       * <pre>
       * pop is the proof of possession of the btc_pk, where the BTC
       * private key signs the bech32 bbn addr of the finality provider.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       * @return Whether the pop field is set.
       */
      public boolean hasPop() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * pop is the proof of possession of the btc_pk, where the BTC
       * private key signs the bech32 bbn addr of the finality provider.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       * @return The pop.
       */
      public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC getPop() {
        if (popBuilder_ == null) {
          return pop_ == null ? com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance() : pop_;
        } else {
          return popBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * pop is the proof of possession of the btc_pk, where the BTC
       * private key signs the bech32 bbn addr of the finality provider.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       */
      public Builder setPop(com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC value) {
        if (popBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pop_ = value;
        } else {
          popBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pop is the proof of possession of the btc_pk, where the BTC
       * private key signs the bech32 bbn addr of the finality provider.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       */
      public Builder setPop(
          com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder builderForValue) {
        if (popBuilder_ == null) {
          pop_ = builderForValue.build();
        } else {
          popBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pop is the proof of possession of the btc_pk, where the BTC
       * private key signs the bech32 bbn addr of the finality provider.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       */
      public Builder mergePop(com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC value) {
        if (popBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            pop_ != null &&
            pop_ != com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance()) {
            getPopBuilder().mergeFrom(value);
          } else {
            pop_ = value;
          }
        } else {
          popBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pop is the proof of possession of the btc_pk, where the BTC
       * private key signs the bech32 bbn addr of the finality provider.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       */
      public Builder clearPop() {
        bitField0_ = (bitField0_ & ~0x00000010);
        pop_ = null;
        if (popBuilder_ != null) {
          popBuilder_.dispose();
          popBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pop is the proof of possession of the btc_pk, where the BTC
       * private key signs the bech32 bbn addr of the finality provider.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       */
      public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder getPopBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getPopFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * pop is the proof of possession of the btc_pk, where the BTC
       * private key signs the bech32 bbn addr of the finality provider.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       */
      public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder getPopOrBuilder() {
        if (popBuilder_ != null) {
          return popBuilder_.getMessageOrBuilder();
        } else {
          return pop_ == null ?
              com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance() : pop_;
        }
      }
      /**
       * <pre>
       * pop is the proof of possession of the btc_pk, where the BTC
       * private key signs the bech32 bbn addr of the finality provider.
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 5 [json_name = "pop"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder> 
          getPopFieldBuilder() {
        if (popBuilder_ == null) {
          popBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder>(
                  getPop(),
                  getParentForChildren(),
                  isClean());
          pop_ = null;
        }
        return popBuilder_;
      }

      private long slashedBabylonHeight_ ;
      /**
       * <pre>
       * slashed_babylon_height indicates the Babylon height when
       * the finality provider is slashed.
       * if it's 0 then the finality provider is not slashed
       * </pre>
       *
       * <code>uint64 slashed_babylon_height = 6 [json_name = "slashedBabylonHeight"];</code>
       * @return The slashedBabylonHeight.
       */
      @java.lang.Override
      public long getSlashedBabylonHeight() {
        return slashedBabylonHeight_;
      }
      /**
       * <pre>
       * slashed_babylon_height indicates the Babylon height when
       * the finality provider is slashed.
       * if it's 0 then the finality provider is not slashed
       * </pre>
       *
       * <code>uint64 slashed_babylon_height = 6 [json_name = "slashedBabylonHeight"];</code>
       * @param value The slashedBabylonHeight to set.
       * @return This builder for chaining.
       */
      public Builder setSlashedBabylonHeight(long value) {

        slashedBabylonHeight_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * slashed_babylon_height indicates the Babylon height when
       * the finality provider is slashed.
       * if it's 0 then the finality provider is not slashed
       * </pre>
       *
       * <code>uint64 slashed_babylon_height = 6 [json_name = "slashedBabylonHeight"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSlashedBabylonHeight() {
        bitField0_ = (bitField0_ & ~0x00000020);
        slashedBabylonHeight_ = 0L;
        onChanged();
        return this;
      }

      private long slashedBtcHeight_ ;
      /**
       * <pre>
       * slashed_btc_height indicates the BTC height when
       * the finality provider is slashed.
       * if it's 0 then the finality provider is not slashed
       * </pre>
       *
       * <code>uint64 slashed_btc_height = 7 [json_name = "slashedBtcHeight"];</code>
       * @return The slashedBtcHeight.
       */
      @java.lang.Override
      public long getSlashedBtcHeight() {
        return slashedBtcHeight_;
      }
      /**
       * <pre>
       * slashed_btc_height indicates the BTC height when
       * the finality provider is slashed.
       * if it's 0 then the finality provider is not slashed
       * </pre>
       *
       * <code>uint64 slashed_btc_height = 7 [json_name = "slashedBtcHeight"];</code>
       * @param value The slashedBtcHeight to set.
       * @return This builder for chaining.
       */
      public Builder setSlashedBtcHeight(long value) {

        slashedBtcHeight_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * slashed_btc_height indicates the BTC height when
       * the finality provider is slashed.
       * if it's 0 then the finality provider is not slashed
       * </pre>
       *
       * <code>uint64 slashed_btc_height = 7 [json_name = "slashedBtcHeight"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSlashedBtcHeight() {
        bitField0_ = (bitField0_ & ~0x00000040);
        slashedBtcHeight_ = 0L;
        onChanged();
        return this;
      }

      private boolean sluggish_ ;
      /**
       * <pre>
       * sluggish defines whether the finality provider is detected sluggish
       * </pre>
       *
       * <code>bool sluggish = 8 [json_name = "sluggish"];</code>
       * @return The sluggish.
       */
      @java.lang.Override
      public boolean getSluggish() {
        return sluggish_;
      }
      /**
       * <pre>
       * sluggish defines whether the finality provider is detected sluggish
       * </pre>
       *
       * <code>bool sluggish = 8 [json_name = "sluggish"];</code>
       * @param value The sluggish to set.
       * @return This builder for chaining.
       */
      public Builder setSluggish(boolean value) {

        sluggish_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * sluggish defines whether the finality provider is detected sluggish
       * </pre>
       *
       * <code>bool sluggish = 8 [json_name = "sluggish"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSluggish() {
        bitField0_ = (bitField0_ & ~0x00000080);
        sluggish_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.FinalityProvider)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.FinalityProvider)
    private static final com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider();
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FinalityProvider>
        PARSER = new com.google.protobuf.AbstractParser<FinalityProvider>() {
      @java.lang.Override
      public FinalityProvider parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<FinalityProvider> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FinalityProvider> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.FinalityProvider getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FinalityProviderWithMetaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.FinalityProviderWithMeta)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * btc_pk is the Bitcoin secp256k1 PK of thisfinality provider
     * the PK follows encoding in BIP-340 spec
     * </pre>
     *
     * <code>bytes btc_pk = 1 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return The btcPk.
     */
    com.google.protobuf.ByteString getBtcPk();

    /**
     * <pre>
     * height is the queried Babylon height
     * </pre>
     *
     * <code>uint64 height = 2 [json_name = "height"];</code>
     * @return The height.
     */
    long getHeight();

    /**
     * <pre>
     * voting_power is the voting power of this finality provider at the given height
     * </pre>
     *
     * <code>uint64 voting_power = 3 [json_name = "votingPower"];</code>
     * @return The votingPower.
     */
    long getVotingPower();

    /**
     * <pre>
     * slashed_babylon_height indicates the Babylon height when
     * the finality provider is slashed.
     * if it's 0 then the finality provider is not slashed
     * </pre>
     *
     * <code>uint64 slashed_babylon_height = 4 [json_name = "slashedBabylonHeight"];</code>
     * @return The slashedBabylonHeight.
     */
    long getSlashedBabylonHeight();

    /**
     * <pre>
     * slashed_btc_height indicates the BTC height when
     * the finality provider is slashed.
     * if it's 0 then the finality provider is not slashed
     * </pre>
     *
     * <code>uint64 slashed_btc_height = 5 [json_name = "slashedBtcHeight"];</code>
     * @return The slashedBtcHeight.
     */
    long getSlashedBtcHeight();

    /**
     * <pre>
     * sluggish defines whether the finality provider is detected sluggish
     * </pre>
     *
     * <code>bool sluggish = 6 [json_name = "sluggish"];</code>
     * @return The sluggish.
     */
    boolean getSluggish();
  }
  /**
   * <pre>
   * FinalityProviderWithMeta wraps the FinalityProvider with metadata.
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.FinalityProviderWithMeta}
   */
  public static final class FinalityProviderWithMeta extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.FinalityProviderWithMeta)
      FinalityProviderWithMetaOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FinalityProviderWithMeta.newBuilder() to construct.
    private FinalityProviderWithMeta(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FinalityProviderWithMeta() {
      btcPk_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FinalityProviderWithMeta();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_FinalityProviderWithMeta_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_FinalityProviderWithMeta_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta.class, com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta.Builder.class);
    }

    public static final int BTC_PK_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString btcPk_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * btc_pk is the Bitcoin secp256k1 PK of thisfinality provider
     * the PK follows encoding in BIP-340 spec
     * </pre>
     *
     * <code>bytes btc_pk = 1 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return The btcPk.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getBtcPk() {
      return btcPk_;
    }

    public static final int HEIGHT_FIELD_NUMBER = 2;
    private long height_ = 0L;
    /**
     * <pre>
     * height is the queried Babylon height
     * </pre>
     *
     * <code>uint64 height = 2 [json_name = "height"];</code>
     * @return The height.
     */
    @java.lang.Override
    public long getHeight() {
      return height_;
    }

    public static final int VOTING_POWER_FIELD_NUMBER = 3;
    private long votingPower_ = 0L;
    /**
     * <pre>
     * voting_power is the voting power of this finality provider at the given height
     * </pre>
     *
     * <code>uint64 voting_power = 3 [json_name = "votingPower"];</code>
     * @return The votingPower.
     */
    @java.lang.Override
    public long getVotingPower() {
      return votingPower_;
    }

    public static final int SLASHED_BABYLON_HEIGHT_FIELD_NUMBER = 4;
    private long slashedBabylonHeight_ = 0L;
    /**
     * <pre>
     * slashed_babylon_height indicates the Babylon height when
     * the finality provider is slashed.
     * if it's 0 then the finality provider is not slashed
     * </pre>
     *
     * <code>uint64 slashed_babylon_height = 4 [json_name = "slashedBabylonHeight"];</code>
     * @return The slashedBabylonHeight.
     */
    @java.lang.Override
    public long getSlashedBabylonHeight() {
      return slashedBabylonHeight_;
    }

    public static final int SLASHED_BTC_HEIGHT_FIELD_NUMBER = 5;
    private long slashedBtcHeight_ = 0L;
    /**
     * <pre>
     * slashed_btc_height indicates the BTC height when
     * the finality provider is slashed.
     * if it's 0 then the finality provider is not slashed
     * </pre>
     *
     * <code>uint64 slashed_btc_height = 5 [json_name = "slashedBtcHeight"];</code>
     * @return The slashedBtcHeight.
     */
    @java.lang.Override
    public long getSlashedBtcHeight() {
      return slashedBtcHeight_;
    }

    public static final int SLUGGISH_FIELD_NUMBER = 6;
    private boolean sluggish_ = false;
    /**
     * <pre>
     * sluggish defines whether the finality provider is detected sluggish
     * </pre>
     *
     * <code>bool sluggish = 6 [json_name = "sluggish"];</code>
     * @return The sluggish.
     */
    @java.lang.Override
    public boolean getSluggish() {
      return sluggish_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!btcPk_.isEmpty()) {
        output.writeBytes(1, btcPk_);
      }
      if (height_ != 0L) {
        output.writeUInt64(2, height_);
      }
      if (votingPower_ != 0L) {
        output.writeUInt64(3, votingPower_);
      }
      if (slashedBabylonHeight_ != 0L) {
        output.writeUInt64(4, slashedBabylonHeight_);
      }
      if (slashedBtcHeight_ != 0L) {
        output.writeUInt64(5, slashedBtcHeight_);
      }
      if (sluggish_ != false) {
        output.writeBool(6, sluggish_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!btcPk_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, btcPk_);
      }
      if (height_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, height_);
      }
      if (votingPower_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, votingPower_);
      }
      if (slashedBabylonHeight_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, slashedBabylonHeight_);
      }
      if (slashedBtcHeight_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, slashedBtcHeight_);
      }
      if (sluggish_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, sluggish_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta other = (com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta) obj;

      if (!getBtcPk()
          .equals(other.getBtcPk())) return false;
      if (getHeight()
          != other.getHeight()) return false;
      if (getVotingPower()
          != other.getVotingPower()) return false;
      if (getSlashedBabylonHeight()
          != other.getSlashedBabylonHeight()) return false;
      if (getSlashedBtcHeight()
          != other.getSlashedBtcHeight()) return false;
      if (getSluggish()
          != other.getSluggish()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + BTC_PK_FIELD_NUMBER;
      hash = (53 * hash) + getBtcPk().hashCode();
      hash = (37 * hash) + HEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getHeight());
      hash = (37 * hash) + VOTING_POWER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getVotingPower());
      hash = (37 * hash) + SLASHED_BABYLON_HEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSlashedBabylonHeight());
      hash = (37 * hash) + SLASHED_BTC_HEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getSlashedBtcHeight());
      hash = (37 * hash) + SLUGGISH_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getSluggish());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * FinalityProviderWithMeta wraps the FinalityProvider with metadata.
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.FinalityProviderWithMeta}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.FinalityProviderWithMeta)
        com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMetaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_FinalityProviderWithMeta_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_FinalityProviderWithMeta_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta.class, com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        btcPk_ = com.google.protobuf.ByteString.EMPTY;
        height_ = 0L;
        votingPower_ = 0L;
        slashedBabylonHeight_ = 0L;
        slashedBtcHeight_ = 0L;
        sluggish_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_FinalityProviderWithMeta_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta build() {
        com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta buildPartial() {
        com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta result = new com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.btcPk_ = btcPk_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.height_ = height_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.votingPower_ = votingPower_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.slashedBabylonHeight_ = slashedBabylonHeight_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.slashedBtcHeight_ = slashedBtcHeight_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.sluggish_ = sluggish_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta) {
          return mergeFrom((com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta other) {
        if (other == com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta.getDefaultInstance()) return this;
        if (other.getBtcPk() != com.google.protobuf.ByteString.EMPTY) {
          setBtcPk(other.getBtcPk());
        }
        if (other.getHeight() != 0L) {
          setHeight(other.getHeight());
        }
        if (other.getVotingPower() != 0L) {
          setVotingPower(other.getVotingPower());
        }
        if (other.getSlashedBabylonHeight() != 0L) {
          setSlashedBabylonHeight(other.getSlashedBabylonHeight());
        }
        if (other.getSlashedBtcHeight() != 0L) {
          setSlashedBtcHeight(other.getSlashedBtcHeight());
        }
        if (other.getSluggish() != false) {
          setSluggish(other.getSluggish());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                btcPk_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                height_ = input.readUInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                votingPower_ = input.readUInt64();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                slashedBabylonHeight_ = input.readUInt64();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                slashedBtcHeight_ = input.readUInt64();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                sluggish_ = input.readBool();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString btcPk_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * btc_pk is the Bitcoin secp256k1 PK of thisfinality provider
       * the PK follows encoding in BIP-340 spec
       * </pre>
       *
       * <code>bytes btc_pk = 1 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return The btcPk.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getBtcPk() {
        return btcPk_;
      }
      /**
       * <pre>
       * btc_pk is the Bitcoin secp256k1 PK of thisfinality provider
       * the PK follows encoding in BIP-340 spec
       * </pre>
       *
       * <code>bytes btc_pk = 1 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @param value The btcPk to set.
       * @return This builder for chaining.
       */
      public Builder setBtcPk(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        btcPk_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btc_pk is the Bitcoin secp256k1 PK of thisfinality provider
       * the PK follows encoding in BIP-340 spec
       * </pre>
       *
       * <code>bytes btc_pk = 1 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBtcPk() {
        bitField0_ = (bitField0_ & ~0x00000001);
        btcPk_ = getDefaultInstance().getBtcPk();
        onChanged();
        return this;
      }

      private long height_ ;
      /**
       * <pre>
       * height is the queried Babylon height
       * </pre>
       *
       * <code>uint64 height = 2 [json_name = "height"];</code>
       * @return The height.
       */
      @java.lang.Override
      public long getHeight() {
        return height_;
      }
      /**
       * <pre>
       * height is the queried Babylon height
       * </pre>
       *
       * <code>uint64 height = 2 [json_name = "height"];</code>
       * @param value The height to set.
       * @return This builder for chaining.
       */
      public Builder setHeight(long value) {

        height_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * height is the queried Babylon height
       * </pre>
       *
       * <code>uint64 height = 2 [json_name = "height"];</code>
       * @return This builder for chaining.
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000002);
        height_ = 0L;
        onChanged();
        return this;
      }

      private long votingPower_ ;
      /**
       * <pre>
       * voting_power is the voting power of this finality provider at the given height
       * </pre>
       *
       * <code>uint64 voting_power = 3 [json_name = "votingPower"];</code>
       * @return The votingPower.
       */
      @java.lang.Override
      public long getVotingPower() {
        return votingPower_;
      }
      /**
       * <pre>
       * voting_power is the voting power of this finality provider at the given height
       * </pre>
       *
       * <code>uint64 voting_power = 3 [json_name = "votingPower"];</code>
       * @param value The votingPower to set.
       * @return This builder for chaining.
       */
      public Builder setVotingPower(long value) {

        votingPower_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * voting_power is the voting power of this finality provider at the given height
       * </pre>
       *
       * <code>uint64 voting_power = 3 [json_name = "votingPower"];</code>
       * @return This builder for chaining.
       */
      public Builder clearVotingPower() {
        bitField0_ = (bitField0_ & ~0x00000004);
        votingPower_ = 0L;
        onChanged();
        return this;
      }

      private long slashedBabylonHeight_ ;
      /**
       * <pre>
       * slashed_babylon_height indicates the Babylon height when
       * the finality provider is slashed.
       * if it's 0 then the finality provider is not slashed
       * </pre>
       *
       * <code>uint64 slashed_babylon_height = 4 [json_name = "slashedBabylonHeight"];</code>
       * @return The slashedBabylonHeight.
       */
      @java.lang.Override
      public long getSlashedBabylonHeight() {
        return slashedBabylonHeight_;
      }
      /**
       * <pre>
       * slashed_babylon_height indicates the Babylon height when
       * the finality provider is slashed.
       * if it's 0 then the finality provider is not slashed
       * </pre>
       *
       * <code>uint64 slashed_babylon_height = 4 [json_name = "slashedBabylonHeight"];</code>
       * @param value The slashedBabylonHeight to set.
       * @return This builder for chaining.
       */
      public Builder setSlashedBabylonHeight(long value) {

        slashedBabylonHeight_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * slashed_babylon_height indicates the Babylon height when
       * the finality provider is slashed.
       * if it's 0 then the finality provider is not slashed
       * </pre>
       *
       * <code>uint64 slashed_babylon_height = 4 [json_name = "slashedBabylonHeight"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSlashedBabylonHeight() {
        bitField0_ = (bitField0_ & ~0x00000008);
        slashedBabylonHeight_ = 0L;
        onChanged();
        return this;
      }

      private long slashedBtcHeight_ ;
      /**
       * <pre>
       * slashed_btc_height indicates the BTC height when
       * the finality provider is slashed.
       * if it's 0 then the finality provider is not slashed
       * </pre>
       *
       * <code>uint64 slashed_btc_height = 5 [json_name = "slashedBtcHeight"];</code>
       * @return The slashedBtcHeight.
       */
      @java.lang.Override
      public long getSlashedBtcHeight() {
        return slashedBtcHeight_;
      }
      /**
       * <pre>
       * slashed_btc_height indicates the BTC height when
       * the finality provider is slashed.
       * if it's 0 then the finality provider is not slashed
       * </pre>
       *
       * <code>uint64 slashed_btc_height = 5 [json_name = "slashedBtcHeight"];</code>
       * @param value The slashedBtcHeight to set.
       * @return This builder for chaining.
       */
      public Builder setSlashedBtcHeight(long value) {

        slashedBtcHeight_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * slashed_btc_height indicates the BTC height when
       * the finality provider is slashed.
       * if it's 0 then the finality provider is not slashed
       * </pre>
       *
       * <code>uint64 slashed_btc_height = 5 [json_name = "slashedBtcHeight"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSlashedBtcHeight() {
        bitField0_ = (bitField0_ & ~0x00000010);
        slashedBtcHeight_ = 0L;
        onChanged();
        return this;
      }

      private boolean sluggish_ ;
      /**
       * <pre>
       * sluggish defines whether the finality provider is detected sluggish
       * </pre>
       *
       * <code>bool sluggish = 6 [json_name = "sluggish"];</code>
       * @return The sluggish.
       */
      @java.lang.Override
      public boolean getSluggish() {
        return sluggish_;
      }
      /**
       * <pre>
       * sluggish defines whether the finality provider is detected sluggish
       * </pre>
       *
       * <code>bool sluggish = 6 [json_name = "sluggish"];</code>
       * @param value The sluggish to set.
       * @return This builder for chaining.
       */
      public Builder setSluggish(boolean value) {

        sluggish_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * sluggish defines whether the finality provider is detected sluggish
       * </pre>
       *
       * <code>bool sluggish = 6 [json_name = "sluggish"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSluggish() {
        bitField0_ = (bitField0_ & ~0x00000020);
        sluggish_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.FinalityProviderWithMeta)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.FinalityProviderWithMeta)
    private static final com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta();
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FinalityProviderWithMeta>
        PARSER = new com.google.protobuf.AbstractParser<FinalityProviderWithMeta>() {
      @java.lang.Override
      public FinalityProviderWithMeta parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<FinalityProviderWithMeta> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FinalityProviderWithMeta> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.FinalityProviderWithMeta getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCDelegationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.BTCDelegation)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * staker_addr is the address to receive rewards from BTC delegation.
     * </pre>
     *
     * <code>string staker_addr = 1 [json_name = "stakerAddr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @return The stakerAddr.
     */
    java.lang.String getStakerAddr();
    /**
     * <pre>
     * staker_addr is the address to receive rewards from BTC delegation.
     * </pre>
     *
     * <code>string staker_addr = 1 [json_name = "stakerAddr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @return The bytes for stakerAddr.
     */
    com.google.protobuf.ByteString
        getStakerAddrBytes();

    /**
     * <pre>
     * btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
     * the PK follows encoding in BIP-340 spec
     * </pre>
     *
     * <code>bytes btc_pk = 2 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return The btcPk.
     */
    com.google.protobuf.ByteString getBtcPk();

    /**
     * <pre>
     * pop is the proof of possession of babylon_pk and btc_pk
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
     * @return Whether the pop field is set.
     */
    boolean hasPop();
    /**
     * <pre>
     * pop is the proof of possession of babylon_pk and btc_pk
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
     * @return The pop.
     */
    com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC getPop();
    /**
     * <pre>
     * pop is the proof of possession of babylon_pk and btc_pk
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
     */
    com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder getPopOrBuilder();

    /**
     * <pre>
     * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
     * this BTC delegation delegates to
     * If there is more than 1 PKs, then this means the delegation is restaked
     * to multiple finality providers
     * </pre>
     *
     * <code>repeated bytes fp_btc_pk_list = 4 [json_name = "fpBtcPkList", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return A list containing the fpBtcPkList.
     */
    java.util.List<com.google.protobuf.ByteString> getFpBtcPkListList();
    /**
     * <pre>
     * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
     * this BTC delegation delegates to
     * If there is more than 1 PKs, then this means the delegation is restaked
     * to multiple finality providers
     * </pre>
     *
     * <code>repeated bytes fp_btc_pk_list = 4 [json_name = "fpBtcPkList", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return The count of fpBtcPkList.
     */
    int getFpBtcPkListCount();
    /**
     * <pre>
     * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
     * this BTC delegation delegates to
     * If there is more than 1 PKs, then this means the delegation is restaked
     * to multiple finality providers
     * </pre>
     *
     * <code>repeated bytes fp_btc_pk_list = 4 [json_name = "fpBtcPkList", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @param index The index of the element to return.
     * @return The fpBtcPkList at the given index.
     */
    com.google.protobuf.ByteString getFpBtcPkList(int index);

    /**
     * <pre>
     * start_height is the start BTC height of the BTC delegation
     * it is the start BTC height of the timelock
     * </pre>
     *
     * <code>uint64 start_height = 5 [json_name = "startHeight"];</code>
     * @return The startHeight.
     */
    long getStartHeight();

    /**
     * <pre>
     * end_height is the end height of the BTC delegation
     * it is the end BTC height of the timelock - w
     * </pre>
     *
     * <code>uint64 end_height = 6 [json_name = "endHeight"];</code>
     * @return The endHeight.
     */
    long getEndHeight();

    /**
     * <pre>
     * total_sat is the total amount of BTC stakes in this delegation
     * quantified in satoshi
     * </pre>
     *
     * <code>uint64 total_sat = 7 [json_name = "totalSat"];</code>
     * @return The totalSat.
     */
    long getTotalSat();

    /**
     * <pre>
     * staking_tx is the staking tx
     * </pre>
     *
     * <code>bytes staking_tx = 8 [json_name = "stakingTx"];</code>
     * @return The stakingTx.
     */
    com.google.protobuf.ByteString getStakingTx();

    /**
     * <pre>
     * staking_output_idx is the index of the staking output in the staking tx
     * </pre>
     *
     * <code>uint32 staking_output_idx = 9 [json_name = "stakingOutputIdx"];</code>
     * @return The stakingOutputIdx.
     */
    int getStakingOutputIdx();

    /**
     * <pre>
     * slashing_tx is the slashing tx
     * It is partially signed by SK corresponding to btc_pk, but not signed by
     * finality provider or covenant yet.
     * </pre>
     *
     * <code>bytes slashing_tx = 10 [json_name = "slashingTx", (.gogoproto.customtype) = "BTCSlashingTx"];</code>
     * @return The slashingTx.
     */
    com.google.protobuf.ByteString getSlashingTx();

    /**
     * <pre>
     * delegator_sig is the signature on the slashing tx
     * by the delegator (i.e., SK corresponding to btc_pk).
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>bytes delegator_sig = 11 [json_name = "delegatorSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
     * @return The delegatorSig.
     */
    com.google.protobuf.ByteString getDelegatorSig();

    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
     */
    java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> 
        getCovenantSigsList();
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getCovenantSigs(int index);
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
     */
    int getCovenantSigsCount();
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
     */
    java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
        getCovenantSigsOrBuilderList();
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder getCovenantSigsOrBuilder(
        int index);

    /**
     * <pre>
     * unbonding_time describes how long the funds will be locked either in unbonding output
     * or slashing change output
     * </pre>
     *
     * <code>uint32 unbonding_time = 13 [json_name = "unbondingTime"];</code>
     * @return The unbondingTime.
     */
    int getUnbondingTime();

    /**
     * <pre>
     * btc_undelegation is the information about the early unbonding path of the BTC delegation
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
     * @return Whether the btcUndelegation field is set.
     */
    boolean hasBtcUndelegation();
    /**
     * <pre>
     * btc_undelegation is the information about the early unbonding path of the BTC delegation
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
     * @return The btcUndelegation.
     */
    com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation getBtcUndelegation();
    /**
     * <pre>
     * btc_undelegation is the information about the early unbonding path of the BTC delegation
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegationOrBuilder getBtcUndelegationOrBuilder();

    /**
     * <pre>
     * version of the params used to validate the delegation
     * </pre>
     *
     * <code>uint32 params_version = 15 [json_name = "paramsVersion"];</code>
     * @return The paramsVersion.
     */
    int getParamsVersion();
  }
  /**
   * <pre>
   * BTCDelegation defines a BTC delegation
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.BTCDelegation}
   */
  public static final class BTCDelegation extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.BTCDelegation)
      BTCDelegationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BTCDelegation.newBuilder() to construct.
    private BTCDelegation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BTCDelegation() {
      stakerAddr_ = "";
      btcPk_ = com.google.protobuf.ByteString.EMPTY;
      fpBtcPkList_ = java.util.Collections.emptyList();
      stakingTx_ = com.google.protobuf.ByteString.EMPTY;
      slashingTx_ = com.google.protobuf.ByteString.EMPTY;
      delegatorSig_ = com.google.protobuf.ByteString.EMPTY;
      covenantSigs_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BTCDelegation();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.class, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.Builder.class);
    }

    public static final int STAKER_ADDR_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object stakerAddr_ = "";
    /**
     * <pre>
     * staker_addr is the address to receive rewards from BTC delegation.
     * </pre>
     *
     * <code>string staker_addr = 1 [json_name = "stakerAddr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @return The stakerAddr.
     */
    @java.lang.Override
    public java.lang.String getStakerAddr() {
      java.lang.Object ref = stakerAddr_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stakerAddr_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * staker_addr is the address to receive rewards from BTC delegation.
     * </pre>
     *
     * <code>string staker_addr = 1 [json_name = "stakerAddr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @return The bytes for stakerAddr.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStakerAddrBytes() {
      java.lang.Object ref = stakerAddr_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stakerAddr_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BTC_PK_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString btcPk_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
     * the PK follows encoding in BIP-340 spec
     * </pre>
     *
     * <code>bytes btc_pk = 2 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return The btcPk.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getBtcPk() {
      return btcPk_;
    }

    public static final int POP_FIELD_NUMBER = 3;
    private com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC pop_;
    /**
     * <pre>
     * pop is the proof of possession of babylon_pk and btc_pk
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
     * @return Whether the pop field is set.
     */
    @java.lang.Override
    public boolean hasPop() {
      return pop_ != null;
    }
    /**
     * <pre>
     * pop is the proof of possession of babylon_pk and btc_pk
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
     * @return The pop.
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC getPop() {
      return pop_ == null ? com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance() : pop_;
    }
    /**
     * <pre>
     * pop is the proof of possession of babylon_pk and btc_pk
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder getPopOrBuilder() {
      return pop_ == null ? com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance() : pop_;
    }

    public static final int FP_BTC_PK_LIST_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<com.google.protobuf.ByteString> fpBtcPkList_;
    /**
     * <pre>
     * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
     * this BTC delegation delegates to
     * If there is more than 1 PKs, then this means the delegation is restaked
     * to multiple finality providers
     * </pre>
     *
     * <code>repeated bytes fp_btc_pk_list = 4 [json_name = "fpBtcPkList", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return A list containing the fpBtcPkList.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.ByteString>
        getFpBtcPkListList() {
      return fpBtcPkList_;
    }
    /**
     * <pre>
     * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
     * this BTC delegation delegates to
     * If there is more than 1 PKs, then this means the delegation is restaked
     * to multiple finality providers
     * </pre>
     *
     * <code>repeated bytes fp_btc_pk_list = 4 [json_name = "fpBtcPkList", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return The count of fpBtcPkList.
     */
    public int getFpBtcPkListCount() {
      return fpBtcPkList_.size();
    }
    /**
     * <pre>
     * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
     * this BTC delegation delegates to
     * If there is more than 1 PKs, then this means the delegation is restaked
     * to multiple finality providers
     * </pre>
     *
     * <code>repeated bytes fp_btc_pk_list = 4 [json_name = "fpBtcPkList", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @param index The index of the element to return.
     * @return The fpBtcPkList at the given index.
     */
    public com.google.protobuf.ByteString getFpBtcPkList(int index) {
      return fpBtcPkList_.get(index);
    }

    public static final int START_HEIGHT_FIELD_NUMBER = 5;
    private long startHeight_ = 0L;
    /**
     * <pre>
     * start_height is the start BTC height of the BTC delegation
     * it is the start BTC height of the timelock
     * </pre>
     *
     * <code>uint64 start_height = 5 [json_name = "startHeight"];</code>
     * @return The startHeight.
     */
    @java.lang.Override
    public long getStartHeight() {
      return startHeight_;
    }

    public static final int END_HEIGHT_FIELD_NUMBER = 6;
    private long endHeight_ = 0L;
    /**
     * <pre>
     * end_height is the end height of the BTC delegation
     * it is the end BTC height of the timelock - w
     * </pre>
     *
     * <code>uint64 end_height = 6 [json_name = "endHeight"];</code>
     * @return The endHeight.
     */
    @java.lang.Override
    public long getEndHeight() {
      return endHeight_;
    }

    public static final int TOTAL_SAT_FIELD_NUMBER = 7;
    private long totalSat_ = 0L;
    /**
     * <pre>
     * total_sat is the total amount of BTC stakes in this delegation
     * quantified in satoshi
     * </pre>
     *
     * <code>uint64 total_sat = 7 [json_name = "totalSat"];</code>
     * @return The totalSat.
     */
    @java.lang.Override
    public long getTotalSat() {
      return totalSat_;
    }

    public static final int STAKING_TX_FIELD_NUMBER = 8;
    private com.google.protobuf.ByteString stakingTx_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * staking_tx is the staking tx
     * </pre>
     *
     * <code>bytes staking_tx = 8 [json_name = "stakingTx"];</code>
     * @return The stakingTx.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getStakingTx() {
      return stakingTx_;
    }

    public static final int STAKING_OUTPUT_IDX_FIELD_NUMBER = 9;
    private int stakingOutputIdx_ = 0;
    /**
     * <pre>
     * staking_output_idx is the index of the staking output in the staking tx
     * </pre>
     *
     * <code>uint32 staking_output_idx = 9 [json_name = "stakingOutputIdx"];</code>
     * @return The stakingOutputIdx.
     */
    @java.lang.Override
    public int getStakingOutputIdx() {
      return stakingOutputIdx_;
    }

    public static final int SLASHING_TX_FIELD_NUMBER = 10;
    private com.google.protobuf.ByteString slashingTx_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * slashing_tx is the slashing tx
     * It is partially signed by SK corresponding to btc_pk, but not signed by
     * finality provider or covenant yet.
     * </pre>
     *
     * <code>bytes slashing_tx = 10 [json_name = "slashingTx", (.gogoproto.customtype) = "BTCSlashingTx"];</code>
     * @return The slashingTx.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSlashingTx() {
      return slashingTx_;
    }

    public static final int DELEGATOR_SIG_FIELD_NUMBER = 11;
    private com.google.protobuf.ByteString delegatorSig_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * delegator_sig is the signature on the slashing tx
     * by the delegator (i.e., SK corresponding to btc_pk).
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>bytes delegator_sig = 11 [json_name = "delegatorSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
     * @return The delegatorSig.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getDelegatorSig() {
      return delegatorSig_;
    }

    public static final int COVENANT_SIGS_FIELD_NUMBER = 12;
    @SuppressWarnings("serial")
    private java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> covenantSigs_;
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
     */
    @java.lang.Override
    public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> getCovenantSigsList() {
      return covenantSigs_;
    }
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
        getCovenantSigsOrBuilderList() {
      return covenantSigs_;
    }
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
     */
    @java.lang.Override
    public int getCovenantSigsCount() {
      return covenantSigs_.size();
    }
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getCovenantSigs(int index) {
      return covenantSigs_.get(index);
    }
    /**
     * <pre>
     * covenant_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder getCovenantSigsOrBuilder(
        int index) {
      return covenantSigs_.get(index);
    }

    public static final int UNBONDING_TIME_FIELD_NUMBER = 13;
    private int unbondingTime_ = 0;
    /**
     * <pre>
     * unbonding_time describes how long the funds will be locked either in unbonding output
     * or slashing change output
     * </pre>
     *
     * <code>uint32 unbonding_time = 13 [json_name = "unbondingTime"];</code>
     * @return The unbondingTime.
     */
    @java.lang.Override
    public int getUnbondingTime() {
      return unbondingTime_;
    }

    public static final int BTC_UNDELEGATION_FIELD_NUMBER = 14;
    private com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation btcUndelegation_;
    /**
     * <pre>
     * btc_undelegation is the information about the early unbonding path of the BTC delegation
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
     * @return Whether the btcUndelegation field is set.
     */
    @java.lang.Override
    public boolean hasBtcUndelegation() {
      return btcUndelegation_ != null;
    }
    /**
     * <pre>
     * btc_undelegation is the information about the early unbonding path of the BTC delegation
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
     * @return The btcUndelegation.
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation getBtcUndelegation() {
      return btcUndelegation_ == null ? com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.getDefaultInstance() : btcUndelegation_;
    }
    /**
     * <pre>
     * btc_undelegation is the information about the early unbonding path of the BTC delegation
     * </pre>
     *
     * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegationOrBuilder getBtcUndelegationOrBuilder() {
      return btcUndelegation_ == null ? com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.getDefaultInstance() : btcUndelegation_;
    }

    public static final int PARAMS_VERSION_FIELD_NUMBER = 15;
    private int paramsVersion_ = 0;
    /**
     * <pre>
     * version of the params used to validate the delegation
     * </pre>
     *
     * <code>uint32 params_version = 15 [json_name = "paramsVersion"];</code>
     * @return The paramsVersion.
     */
    @java.lang.Override
    public int getParamsVersion() {
      return paramsVersion_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stakerAddr_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stakerAddr_);
      }
      if (!btcPk_.isEmpty()) {
        output.writeBytes(2, btcPk_);
      }
      if (pop_ != null) {
        output.writeMessage(3, getPop());
      }
      for (int i = 0; i < fpBtcPkList_.size(); i++) {
        output.writeBytes(4, fpBtcPkList_.get(i));
      }
      if (startHeight_ != 0L) {
        output.writeUInt64(5, startHeight_);
      }
      if (endHeight_ != 0L) {
        output.writeUInt64(6, endHeight_);
      }
      if (totalSat_ != 0L) {
        output.writeUInt64(7, totalSat_);
      }
      if (!stakingTx_.isEmpty()) {
        output.writeBytes(8, stakingTx_);
      }
      if (stakingOutputIdx_ != 0) {
        output.writeUInt32(9, stakingOutputIdx_);
      }
      if (!slashingTx_.isEmpty()) {
        output.writeBytes(10, slashingTx_);
      }
      if (!delegatorSig_.isEmpty()) {
        output.writeBytes(11, delegatorSig_);
      }
      for (int i = 0; i < covenantSigs_.size(); i++) {
        output.writeMessage(12, covenantSigs_.get(i));
      }
      if (unbondingTime_ != 0) {
        output.writeUInt32(13, unbondingTime_);
      }
      if (btcUndelegation_ != null) {
        output.writeMessage(14, getBtcUndelegation());
      }
      if (paramsVersion_ != 0) {
        output.writeUInt32(15, paramsVersion_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stakerAddr_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stakerAddr_);
      }
      if (!btcPk_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, btcPk_);
      }
      if (pop_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getPop());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < fpBtcPkList_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(fpBtcPkList_.get(i));
        }
        size += dataSize;
        size += 1 * getFpBtcPkListList().size();
      }
      if (startHeight_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, startHeight_);
      }
      if (endHeight_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, endHeight_);
      }
      if (totalSat_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(7, totalSat_);
      }
      if (!stakingTx_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(8, stakingTx_);
      }
      if (stakingOutputIdx_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, stakingOutputIdx_);
      }
      if (!slashingTx_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(10, slashingTx_);
      }
      if (!delegatorSig_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(11, delegatorSig_);
      }
      for (int i = 0; i < covenantSigs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, covenantSigs_.get(i));
      }
      if (unbondingTime_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, unbondingTime_);
      }
      if (btcUndelegation_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, getBtcUndelegation());
      }
      if (paramsVersion_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, paramsVersion_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation other = (com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation) obj;

      if (!getStakerAddr()
          .equals(other.getStakerAddr())) return false;
      if (!getBtcPk()
          .equals(other.getBtcPk())) return false;
      if (hasPop() != other.hasPop()) return false;
      if (hasPop()) {
        if (!getPop()
            .equals(other.getPop())) return false;
      }
      if (!getFpBtcPkListList()
          .equals(other.getFpBtcPkListList())) return false;
      if (getStartHeight()
          != other.getStartHeight()) return false;
      if (getEndHeight()
          != other.getEndHeight()) return false;
      if (getTotalSat()
          != other.getTotalSat()) return false;
      if (!getStakingTx()
          .equals(other.getStakingTx())) return false;
      if (getStakingOutputIdx()
          != other.getStakingOutputIdx()) return false;
      if (!getSlashingTx()
          .equals(other.getSlashingTx())) return false;
      if (!getDelegatorSig()
          .equals(other.getDelegatorSig())) return false;
      if (!getCovenantSigsList()
          .equals(other.getCovenantSigsList())) return false;
      if (getUnbondingTime()
          != other.getUnbondingTime()) return false;
      if (hasBtcUndelegation() != other.hasBtcUndelegation()) return false;
      if (hasBtcUndelegation()) {
        if (!getBtcUndelegation()
            .equals(other.getBtcUndelegation())) return false;
      }
      if (getParamsVersion()
          != other.getParamsVersion()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STAKER_ADDR_FIELD_NUMBER;
      hash = (53 * hash) + getStakerAddr().hashCode();
      hash = (37 * hash) + BTC_PK_FIELD_NUMBER;
      hash = (53 * hash) + getBtcPk().hashCode();
      if (hasPop()) {
        hash = (37 * hash) + POP_FIELD_NUMBER;
        hash = (53 * hash) + getPop().hashCode();
      }
      if (getFpBtcPkListCount() > 0) {
        hash = (37 * hash) + FP_BTC_PK_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getFpBtcPkListList().hashCode();
      }
      hash = (37 * hash) + START_HEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStartHeight());
      hash = (37 * hash) + END_HEIGHT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getEndHeight());
      hash = (37 * hash) + TOTAL_SAT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTotalSat());
      hash = (37 * hash) + STAKING_TX_FIELD_NUMBER;
      hash = (53 * hash) + getStakingTx().hashCode();
      hash = (37 * hash) + STAKING_OUTPUT_IDX_FIELD_NUMBER;
      hash = (53 * hash) + getStakingOutputIdx();
      hash = (37 * hash) + SLASHING_TX_FIELD_NUMBER;
      hash = (53 * hash) + getSlashingTx().hashCode();
      hash = (37 * hash) + DELEGATOR_SIG_FIELD_NUMBER;
      hash = (53 * hash) + getDelegatorSig().hashCode();
      if (getCovenantSigsCount() > 0) {
        hash = (37 * hash) + COVENANT_SIGS_FIELD_NUMBER;
        hash = (53 * hash) + getCovenantSigsList().hashCode();
      }
      hash = (37 * hash) + UNBONDING_TIME_FIELD_NUMBER;
      hash = (53 * hash) + getUnbondingTime();
      if (hasBtcUndelegation()) {
        hash = (37 * hash) + BTC_UNDELEGATION_FIELD_NUMBER;
        hash = (53 * hash) + getBtcUndelegation().hashCode();
      }
      hash = (37 * hash) + PARAMS_VERSION_FIELD_NUMBER;
      hash = (53 * hash) + getParamsVersion();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * BTCDelegation defines a BTC delegation
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.BTCDelegation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.BTCDelegation)
        com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegation_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.class, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        stakerAddr_ = "";
        btcPk_ = com.google.protobuf.ByteString.EMPTY;
        pop_ = null;
        if (popBuilder_ != null) {
          popBuilder_.dispose();
          popBuilder_ = null;
        }
        fpBtcPkList_ = java.util.Collections.emptyList();
        startHeight_ = 0L;
        endHeight_ = 0L;
        totalSat_ = 0L;
        stakingTx_ = com.google.protobuf.ByteString.EMPTY;
        stakingOutputIdx_ = 0;
        slashingTx_ = com.google.protobuf.ByteString.EMPTY;
        delegatorSig_ = com.google.protobuf.ByteString.EMPTY;
        if (covenantSigsBuilder_ == null) {
          covenantSigs_ = java.util.Collections.emptyList();
        } else {
          covenantSigs_ = null;
          covenantSigsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        unbondingTime_ = 0;
        btcUndelegation_ = null;
        if (btcUndelegationBuilder_ != null) {
          btcUndelegationBuilder_.dispose();
          btcUndelegationBuilder_ = null;
        }
        paramsVersion_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegation_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation build() {
        com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation buildPartial() {
        com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation result = new com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation result) {
        if (((bitField0_ & 0x00000008) != 0)) {
          fpBtcPkList_ = java.util.Collections.unmodifiableList(fpBtcPkList_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.fpBtcPkList_ = fpBtcPkList_;
        if (covenantSigsBuilder_ == null) {
          if (((bitField0_ & 0x00000800) != 0)) {
            covenantSigs_ = java.util.Collections.unmodifiableList(covenantSigs_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.covenantSigs_ = covenantSigs_;
        } else {
          result.covenantSigs_ = covenantSigsBuilder_.build();
        }
      }

      private void buildPartial0(com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.stakerAddr_ = stakerAddr_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.btcPk_ = btcPk_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.pop_ = popBuilder_ == null
              ? pop_
              : popBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.startHeight_ = startHeight_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.endHeight_ = endHeight_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.totalSat_ = totalSat_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.stakingTx_ = stakingTx_;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.stakingOutputIdx_ = stakingOutputIdx_;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.slashingTx_ = slashingTx_;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.delegatorSig_ = delegatorSig_;
        }
        if (((from_bitField0_ & 0x00001000) != 0)) {
          result.unbondingTime_ = unbondingTime_;
        }
        if (((from_bitField0_ & 0x00002000) != 0)) {
          result.btcUndelegation_ = btcUndelegationBuilder_ == null
              ? btcUndelegation_
              : btcUndelegationBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) != 0)) {
          result.paramsVersion_ = paramsVersion_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation) {
          return mergeFrom((com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation other) {
        if (other == com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.getDefaultInstance()) return this;
        if (!other.getStakerAddr().isEmpty()) {
          stakerAddr_ = other.stakerAddr_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.getBtcPk() != com.google.protobuf.ByteString.EMPTY) {
          setBtcPk(other.getBtcPk());
        }
        if (other.hasPop()) {
          mergePop(other.getPop());
        }
        if (!other.fpBtcPkList_.isEmpty()) {
          if (fpBtcPkList_.isEmpty()) {
            fpBtcPkList_ = other.fpBtcPkList_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureFpBtcPkListIsMutable();
            fpBtcPkList_.addAll(other.fpBtcPkList_);
          }
          onChanged();
        }
        if (other.getStartHeight() != 0L) {
          setStartHeight(other.getStartHeight());
        }
        if (other.getEndHeight() != 0L) {
          setEndHeight(other.getEndHeight());
        }
        if (other.getTotalSat() != 0L) {
          setTotalSat(other.getTotalSat());
        }
        if (other.getStakingTx() != com.google.protobuf.ByteString.EMPTY) {
          setStakingTx(other.getStakingTx());
        }
        if (other.getStakingOutputIdx() != 0) {
          setStakingOutputIdx(other.getStakingOutputIdx());
        }
        if (other.getSlashingTx() != com.google.protobuf.ByteString.EMPTY) {
          setSlashingTx(other.getSlashingTx());
        }
        if (other.getDelegatorSig() != com.google.protobuf.ByteString.EMPTY) {
          setDelegatorSig(other.getDelegatorSig());
        }
        if (covenantSigsBuilder_ == null) {
          if (!other.covenantSigs_.isEmpty()) {
            if (covenantSigs_.isEmpty()) {
              covenantSigs_ = other.covenantSigs_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureCovenantSigsIsMutable();
              covenantSigs_.addAll(other.covenantSigs_);
            }
            onChanged();
          }
        } else {
          if (!other.covenantSigs_.isEmpty()) {
            if (covenantSigsBuilder_.isEmpty()) {
              covenantSigsBuilder_.dispose();
              covenantSigsBuilder_ = null;
              covenantSigs_ = other.covenantSigs_;
              bitField0_ = (bitField0_ & ~0x00000800);
              covenantSigsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCovenantSigsFieldBuilder() : null;
            } else {
              covenantSigsBuilder_.addAllMessages(other.covenantSigs_);
            }
          }
        }
        if (other.getUnbondingTime() != 0) {
          setUnbondingTime(other.getUnbondingTime());
        }
        if (other.hasBtcUndelegation()) {
          mergeBtcUndelegation(other.getBtcUndelegation());
        }
        if (other.getParamsVersion() != 0) {
          setParamsVersion(other.getParamsVersion());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                stakerAddr_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                btcPk_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getPopFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                com.google.protobuf.ByteString v = input.readBytes();
                ensureFpBtcPkListIsMutable();
                fpBtcPkList_.add(v);
                break;
              } // case 34
              case 40: {
                startHeight_ = input.readUInt64();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                endHeight_ = input.readUInt64();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 56: {
                totalSat_ = input.readUInt64();
                bitField0_ |= 0x00000040;
                break;
              } // case 56
              case 66: {
                stakingTx_ = input.readBytes();
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              case 72: {
                stakingOutputIdx_ = input.readUInt32();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              case 82: {
                slashingTx_ = input.readBytes();
                bitField0_ |= 0x00000200;
                break;
              } // case 82
              case 90: {
                delegatorSig_ = input.readBytes();
                bitField0_ |= 0x00000400;
                break;
              } // case 90
              case 98: {
                com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures m =
                    input.readMessage(
                        com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.parser(),
                        extensionRegistry);
                if (covenantSigsBuilder_ == null) {
                  ensureCovenantSigsIsMutable();
                  covenantSigs_.add(m);
                } else {
                  covenantSigsBuilder_.addMessage(m);
                }
                break;
              } // case 98
              case 104: {
                unbondingTime_ = input.readUInt32();
                bitField0_ |= 0x00001000;
                break;
              } // case 104
              case 114: {
                input.readMessage(
                    getBtcUndelegationFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00002000;
                break;
              } // case 114
              case 120: {
                paramsVersion_ = input.readUInt32();
                bitField0_ |= 0x00004000;
                break;
              } // case 120
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object stakerAddr_ = "";
      /**
       * <pre>
       * staker_addr is the address to receive rewards from BTC delegation.
       * </pre>
       *
       * <code>string staker_addr = 1 [json_name = "stakerAddr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @return The stakerAddr.
       */
      public java.lang.String getStakerAddr() {
        java.lang.Object ref = stakerAddr_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stakerAddr_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * staker_addr is the address to receive rewards from BTC delegation.
       * </pre>
       *
       * <code>string staker_addr = 1 [json_name = "stakerAddr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @return The bytes for stakerAddr.
       */
      public com.google.protobuf.ByteString
          getStakerAddrBytes() {
        java.lang.Object ref = stakerAddr_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stakerAddr_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * staker_addr is the address to receive rewards from BTC delegation.
       * </pre>
       *
       * <code>string staker_addr = 1 [json_name = "stakerAddr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @param value The stakerAddr to set.
       * @return This builder for chaining.
       */
      public Builder setStakerAddr(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        stakerAddr_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staker_addr is the address to receive rewards from BTC delegation.
       * </pre>
       *
       * <code>string staker_addr = 1 [json_name = "stakerAddr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStakerAddr() {
        stakerAddr_ = getDefaultInstance().getStakerAddr();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staker_addr is the address to receive rewards from BTC delegation.
       * </pre>
       *
       * <code>string staker_addr = 1 [json_name = "stakerAddr", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
       * @param value The bytes for stakerAddr to set.
       * @return This builder for chaining.
       */
      public Builder setStakerAddrBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        stakerAddr_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString btcPk_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
       * the PK follows encoding in BIP-340 spec
       * </pre>
       *
       * <code>bytes btc_pk = 2 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return The btcPk.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getBtcPk() {
        return btcPk_;
      }
      /**
       * <pre>
       * btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
       * the PK follows encoding in BIP-340 spec
       * </pre>
       *
       * <code>bytes btc_pk = 2 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @param value The btcPk to set.
       * @return This builder for chaining.
       */
      public Builder setBtcPk(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        btcPk_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btc_pk is the Bitcoin secp256k1 PK of this BTC delegation
       * the PK follows encoding in BIP-340 spec
       * </pre>
       *
       * <code>bytes btc_pk = 2 [json_name = "btcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return This builder for chaining.
       */
      public Builder clearBtcPk() {
        bitField0_ = (bitField0_ & ~0x00000002);
        btcPk_ = getDefaultInstance().getBtcPk();
        onChanged();
        return this;
      }

      private com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC pop_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder> popBuilder_;
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
       * @return Whether the pop field is set.
       */
      public boolean hasPop() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
       * @return The pop.
       */
      public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC getPop() {
        if (popBuilder_ == null) {
          return pop_ == null ? com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance() : pop_;
        } else {
          return popBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
       */
      public Builder setPop(com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC value) {
        if (popBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          pop_ = value;
        } else {
          popBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
       */
      public Builder setPop(
          com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder builderForValue) {
        if (popBuilder_ == null) {
          pop_ = builderForValue.build();
        } else {
          popBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
       */
      public Builder mergePop(com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC value) {
        if (popBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            pop_ != null &&
            pop_ != com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance()) {
            getPopBuilder().mergeFrom(value);
          } else {
            pop_ = value;
          }
        } else {
          popBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
       */
      public Builder clearPop() {
        bitField0_ = (bitField0_ & ~0x00000004);
        pop_ = null;
        if (popBuilder_ != null) {
          popBuilder_.dispose();
          popBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
       */
      public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder getPopBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getPopFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
       */
      public com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder getPopOrBuilder() {
        if (popBuilder_ != null) {
          return popBuilder_.getMessageOrBuilder();
        } else {
          return pop_ == null ?
              com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.getDefaultInstance() : pop_;
        }
      }
      /**
       * <pre>
       * pop is the proof of possession of babylon_pk and btc_pk
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.ProofOfPossessionBTC pop = 3 [json_name = "pop"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder> 
          getPopFieldBuilder() {
        if (popBuilder_ == null) {
          popBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTC.Builder, com.babylon.btcstaking.v1.PopProto.ProofOfPossessionBTCOrBuilder>(
                  getPop(),
                  getParentForChildren(),
                  isClean());
          pop_ = null;
        }
        return popBuilder_;
      }

      private java.util.List<com.google.protobuf.ByteString> fpBtcPkList_ = java.util.Collections.emptyList();
      private void ensureFpBtcPkListIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          fpBtcPkList_ = new java.util.ArrayList<com.google.protobuf.ByteString>(fpBtcPkList_);
          bitField0_ |= 0x00000008;
        }
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * If there is more than 1 PKs, then this means the delegation is restaked
       * to multiple finality providers
       * </pre>
       *
       * <code>repeated bytes fp_btc_pk_list = 4 [json_name = "fpBtcPkList", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return A list containing the fpBtcPkList.
       */
      public java.util.List<com.google.protobuf.ByteString>
          getFpBtcPkListList() {
        return ((bitField0_ & 0x00000008) != 0) ?
                 java.util.Collections.unmodifiableList(fpBtcPkList_) : fpBtcPkList_;
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * If there is more than 1 PKs, then this means the delegation is restaked
       * to multiple finality providers
       * </pre>
       *
       * <code>repeated bytes fp_btc_pk_list = 4 [json_name = "fpBtcPkList", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return The count of fpBtcPkList.
       */
      public int getFpBtcPkListCount() {
        return fpBtcPkList_.size();
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * If there is more than 1 PKs, then this means the delegation is restaked
       * to multiple finality providers
       * </pre>
       *
       * <code>repeated bytes fp_btc_pk_list = 4 [json_name = "fpBtcPkList", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @param index The index of the element to return.
       * @return The fpBtcPkList at the given index.
       */
      public com.google.protobuf.ByteString getFpBtcPkList(int index) {
        return fpBtcPkList_.get(index);
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * If there is more than 1 PKs, then this means the delegation is restaked
       * to multiple finality providers
       * </pre>
       *
       * <code>repeated bytes fp_btc_pk_list = 4 [json_name = "fpBtcPkList", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @param index The index to set the value at.
       * @param value The fpBtcPkList to set.
       * @return This builder for chaining.
       */
      public Builder setFpBtcPkList(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureFpBtcPkListIsMutable();
        fpBtcPkList_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * If there is more than 1 PKs, then this means the delegation is restaked
       * to multiple finality providers
       * </pre>
       *
       * <code>repeated bytes fp_btc_pk_list = 4 [json_name = "fpBtcPkList", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @param value The fpBtcPkList to add.
       * @return This builder for chaining.
       */
      public Builder addFpBtcPkList(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureFpBtcPkListIsMutable();
        fpBtcPkList_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * If there is more than 1 PKs, then this means the delegation is restaked
       * to multiple finality providers
       * </pre>
       *
       * <code>repeated bytes fp_btc_pk_list = 4 [json_name = "fpBtcPkList", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @param values The fpBtcPkList to add.
       * @return This builder for chaining.
       */
      public Builder addAllFpBtcPkList(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureFpBtcPkListIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, fpBtcPkList_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * fp_btc_pk_list is the list of BIP-340 PKs of the finality providers that
       * this BTC delegation delegates to
       * If there is more than 1 PKs, then this means the delegation is restaked
       * to multiple finality providers
       * </pre>
       *
       * <code>repeated bytes fp_btc_pk_list = 4 [json_name = "fpBtcPkList", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return This builder for chaining.
       */
      public Builder clearFpBtcPkList() {
        fpBtcPkList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private long startHeight_ ;
      /**
       * <pre>
       * start_height is the start BTC height of the BTC delegation
       * it is the start BTC height of the timelock
       * </pre>
       *
       * <code>uint64 start_height = 5 [json_name = "startHeight"];</code>
       * @return The startHeight.
       */
      @java.lang.Override
      public long getStartHeight() {
        return startHeight_;
      }
      /**
       * <pre>
       * start_height is the start BTC height of the BTC delegation
       * it is the start BTC height of the timelock
       * </pre>
       *
       * <code>uint64 start_height = 5 [json_name = "startHeight"];</code>
       * @param value The startHeight to set.
       * @return This builder for chaining.
       */
      public Builder setStartHeight(long value) {

        startHeight_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * start_height is the start BTC height of the BTC delegation
       * it is the start BTC height of the timelock
       * </pre>
       *
       * <code>uint64 start_height = 5 [json_name = "startHeight"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStartHeight() {
        bitField0_ = (bitField0_ & ~0x00000010);
        startHeight_ = 0L;
        onChanged();
        return this;
      }

      private long endHeight_ ;
      /**
       * <pre>
       * end_height is the end height of the BTC delegation
       * it is the end BTC height of the timelock - w
       * </pre>
       *
       * <code>uint64 end_height = 6 [json_name = "endHeight"];</code>
       * @return The endHeight.
       */
      @java.lang.Override
      public long getEndHeight() {
        return endHeight_;
      }
      /**
       * <pre>
       * end_height is the end height of the BTC delegation
       * it is the end BTC height of the timelock - w
       * </pre>
       *
       * <code>uint64 end_height = 6 [json_name = "endHeight"];</code>
       * @param value The endHeight to set.
       * @return This builder for chaining.
       */
      public Builder setEndHeight(long value) {

        endHeight_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * end_height is the end height of the BTC delegation
       * it is the end BTC height of the timelock - w
       * </pre>
       *
       * <code>uint64 end_height = 6 [json_name = "endHeight"];</code>
       * @return This builder for chaining.
       */
      public Builder clearEndHeight() {
        bitField0_ = (bitField0_ & ~0x00000020);
        endHeight_ = 0L;
        onChanged();
        return this;
      }

      private long totalSat_ ;
      /**
       * <pre>
       * total_sat is the total amount of BTC stakes in this delegation
       * quantified in satoshi
       * </pre>
       *
       * <code>uint64 total_sat = 7 [json_name = "totalSat"];</code>
       * @return The totalSat.
       */
      @java.lang.Override
      public long getTotalSat() {
        return totalSat_;
      }
      /**
       * <pre>
       * total_sat is the total amount of BTC stakes in this delegation
       * quantified in satoshi
       * </pre>
       *
       * <code>uint64 total_sat = 7 [json_name = "totalSat"];</code>
       * @param value The totalSat to set.
       * @return This builder for chaining.
       */
      public Builder setTotalSat(long value) {

        totalSat_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * total_sat is the total amount of BTC stakes in this delegation
       * quantified in satoshi
       * </pre>
       *
       * <code>uint64 total_sat = 7 [json_name = "totalSat"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTotalSat() {
        bitField0_ = (bitField0_ & ~0x00000040);
        totalSat_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString stakingTx_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * staking_tx is the staking tx
       * </pre>
       *
       * <code>bytes staking_tx = 8 [json_name = "stakingTx"];</code>
       * @return The stakingTx.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getStakingTx() {
        return stakingTx_;
      }
      /**
       * <pre>
       * staking_tx is the staking tx
       * </pre>
       *
       * <code>bytes staking_tx = 8 [json_name = "stakingTx"];</code>
       * @param value The stakingTx to set.
       * @return This builder for chaining.
       */
      public Builder setStakingTx(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        stakingTx_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staking_tx is the staking tx
       * </pre>
       *
       * <code>bytes staking_tx = 8 [json_name = "stakingTx"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStakingTx() {
        bitField0_ = (bitField0_ & ~0x00000080);
        stakingTx_ = getDefaultInstance().getStakingTx();
        onChanged();
        return this;
      }

      private int stakingOutputIdx_ ;
      /**
       * <pre>
       * staking_output_idx is the index of the staking output in the staking tx
       * </pre>
       *
       * <code>uint32 staking_output_idx = 9 [json_name = "stakingOutputIdx"];</code>
       * @return The stakingOutputIdx.
       */
      @java.lang.Override
      public int getStakingOutputIdx() {
        return stakingOutputIdx_;
      }
      /**
       * <pre>
       * staking_output_idx is the index of the staking output in the staking tx
       * </pre>
       *
       * <code>uint32 staking_output_idx = 9 [json_name = "stakingOutputIdx"];</code>
       * @param value The stakingOutputIdx to set.
       * @return This builder for chaining.
       */
      public Builder setStakingOutputIdx(int value) {

        stakingOutputIdx_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staking_output_idx is the index of the staking output in the staking tx
       * </pre>
       *
       * <code>uint32 staking_output_idx = 9 [json_name = "stakingOutputIdx"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStakingOutputIdx() {
        bitField0_ = (bitField0_ & ~0x00000100);
        stakingOutputIdx_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString slashingTx_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * slashing_tx is the slashing tx
       * It is partially signed by SK corresponding to btc_pk, but not signed by
       * finality provider or covenant yet.
       * </pre>
       *
       * <code>bytes slashing_tx = 10 [json_name = "slashingTx", (.gogoproto.customtype) = "BTCSlashingTx"];</code>
       * @return The slashingTx.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSlashingTx() {
        return slashingTx_;
      }
      /**
       * <pre>
       * slashing_tx is the slashing tx
       * It is partially signed by SK corresponding to btc_pk, but not signed by
       * finality provider or covenant yet.
       * </pre>
       *
       * <code>bytes slashing_tx = 10 [json_name = "slashingTx", (.gogoproto.customtype) = "BTCSlashingTx"];</code>
       * @param value The slashingTx to set.
       * @return This builder for chaining.
       */
      public Builder setSlashingTx(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        slashingTx_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * slashing_tx is the slashing tx
       * It is partially signed by SK corresponding to btc_pk, but not signed by
       * finality provider or covenant yet.
       * </pre>
       *
       * <code>bytes slashing_tx = 10 [json_name = "slashingTx", (.gogoproto.customtype) = "BTCSlashingTx"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSlashingTx() {
        bitField0_ = (bitField0_ & ~0x00000200);
        slashingTx_ = getDefaultInstance().getSlashingTx();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString delegatorSig_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * delegator_sig is the signature on the slashing tx
       * by the delegator (i.e., SK corresponding to btc_pk).
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>bytes delegator_sig = 11 [json_name = "delegatorSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
       * @return The delegatorSig.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getDelegatorSig() {
        return delegatorSig_;
      }
      /**
       * <pre>
       * delegator_sig is the signature on the slashing tx
       * by the delegator (i.e., SK corresponding to btc_pk).
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>bytes delegator_sig = 11 [json_name = "delegatorSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
       * @param value The delegatorSig to set.
       * @return This builder for chaining.
       */
      public Builder setDelegatorSig(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        delegatorSig_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * delegator_sig is the signature on the slashing tx
       * by the delegator (i.e., SK corresponding to btc_pk).
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>bytes delegator_sig = 11 [json_name = "delegatorSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
       * @return This builder for chaining.
       */
      public Builder clearDelegatorSig() {
        bitField0_ = (bitField0_ & ~0x00000400);
        delegatorSig_ = getDefaultInstance().getDelegatorSig();
        onChanged();
        return this;
      }

      private java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> covenantSigs_ =
        java.util.Collections.emptyList();
      private void ensureCovenantSigsIsMutable() {
        if (!((bitField0_ & 0x00000800) != 0)) {
          covenantSigs_ = new java.util.ArrayList<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures>(covenantSigs_);
          bitField0_ |= 0x00000800;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> covenantSigsBuilder_;

      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> getCovenantSigsList() {
        if (covenantSigsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(covenantSigs_);
        } else {
          return covenantSigsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public int getCovenantSigsCount() {
        if (covenantSigsBuilder_ == null) {
          return covenantSigs_.size();
        } else {
          return covenantSigsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getCovenantSigs(int index) {
        if (covenantSigsBuilder_ == null) {
          return covenantSigs_.get(index);
        } else {
          return covenantSigsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public Builder setCovenantSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures value) {
        if (covenantSigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantSigsIsMutable();
          covenantSigs_.set(index, value);
          onChanged();
        } else {
          covenantSigsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public Builder setCovenantSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder builderForValue) {
        if (covenantSigsBuilder_ == null) {
          ensureCovenantSigsIsMutable();
          covenantSigs_.set(index, builderForValue.build());
          onChanged();
        } else {
          covenantSigsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public Builder addCovenantSigs(com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures value) {
        if (covenantSigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantSigsIsMutable();
          covenantSigs_.add(value);
          onChanged();
        } else {
          covenantSigsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public Builder addCovenantSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures value) {
        if (covenantSigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantSigsIsMutable();
          covenantSigs_.add(index, value);
          onChanged();
        } else {
          covenantSigsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public Builder addCovenantSigs(
          com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder builderForValue) {
        if (covenantSigsBuilder_ == null) {
          ensureCovenantSigsIsMutable();
          covenantSigs_.add(builderForValue.build());
          onChanged();
        } else {
          covenantSigsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public Builder addCovenantSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder builderForValue) {
        if (covenantSigsBuilder_ == null) {
          ensureCovenantSigsIsMutable();
          covenantSigs_.add(index, builderForValue.build());
          onChanged();
        } else {
          covenantSigsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public Builder addAllCovenantSigs(
          java.lang.Iterable<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> values) {
        if (covenantSigsBuilder_ == null) {
          ensureCovenantSigsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, covenantSigs_);
          onChanged();
        } else {
          covenantSigsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public Builder clearCovenantSigs() {
        if (covenantSigsBuilder_ == null) {
          covenantSigs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
        } else {
          covenantSigsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public Builder removeCovenantSigs(int index) {
        if (covenantSigsBuilder_ == null) {
          ensureCovenantSigsIsMutable();
          covenantSigs_.remove(index);
          onChanged();
        } else {
          covenantSigsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder getCovenantSigsBuilder(
          int index) {
        return getCovenantSigsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder getCovenantSigsOrBuilder(
          int index) {
        if (covenantSigsBuilder_ == null) {
          return covenantSigs_.get(index);  } else {
          return covenantSigsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
           getCovenantSigsOrBuilderList() {
        if (covenantSigsBuilder_ != null) {
          return covenantSigsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(covenantSigs_);
        }
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder addCovenantSigsBuilder() {
        return getCovenantSigsFieldBuilder().addBuilder(
            com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.getDefaultInstance());
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder addCovenantSigsBuilder(
          int index) {
        return getCovenantSigsFieldBuilder().addBuilder(
            index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.getDefaultInstance());
      }
      /**
       * <pre>
       * covenant_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_sigs = 12 [json_name = "covenantSigs"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder> 
           getCovenantSigsBuilderList() {
        return getCovenantSigsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
          getCovenantSigsFieldBuilder() {
        if (covenantSigsBuilder_ == null) {
          covenantSigsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder>(
                  covenantSigs_,
                  ((bitField0_ & 0x00000800) != 0),
                  getParentForChildren(),
                  isClean());
          covenantSigs_ = null;
        }
        return covenantSigsBuilder_;
      }

      private int unbondingTime_ ;
      /**
       * <pre>
       * unbonding_time describes how long the funds will be locked either in unbonding output
       * or slashing change output
       * </pre>
       *
       * <code>uint32 unbonding_time = 13 [json_name = "unbondingTime"];</code>
       * @return The unbondingTime.
       */
      @java.lang.Override
      public int getUnbondingTime() {
        return unbondingTime_;
      }
      /**
       * <pre>
       * unbonding_time describes how long the funds will be locked either in unbonding output
       * or slashing change output
       * </pre>
       *
       * <code>uint32 unbonding_time = 13 [json_name = "unbondingTime"];</code>
       * @param value The unbondingTime to set.
       * @return This builder for chaining.
       */
      public Builder setUnbondingTime(int value) {

        unbondingTime_ = value;
        bitField0_ |= 0x00001000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * unbonding_time describes how long the funds will be locked either in unbonding output
       * or slashing change output
       * </pre>
       *
       * <code>uint32 unbonding_time = 13 [json_name = "unbondingTime"];</code>
       * @return This builder for chaining.
       */
      public Builder clearUnbondingTime() {
        bitField0_ = (bitField0_ & ~0x00001000);
        unbondingTime_ = 0;
        onChanged();
        return this;
      }

      private com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation btcUndelegation_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation, com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.Builder, com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegationOrBuilder> btcUndelegationBuilder_;
      /**
       * <pre>
       * btc_undelegation is the information about the early unbonding path of the BTC delegation
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
       * @return Whether the btcUndelegation field is set.
       */
      public boolean hasBtcUndelegation() {
        return ((bitField0_ & 0x00002000) != 0);
      }
      /**
       * <pre>
       * btc_undelegation is the information about the early unbonding path of the BTC delegation
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
       * @return The btcUndelegation.
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation getBtcUndelegation() {
        if (btcUndelegationBuilder_ == null) {
          return btcUndelegation_ == null ? com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.getDefaultInstance() : btcUndelegation_;
        } else {
          return btcUndelegationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * btc_undelegation is the information about the early unbonding path of the BTC delegation
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
       */
      public Builder setBtcUndelegation(com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation value) {
        if (btcUndelegationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          btcUndelegation_ = value;
        } else {
          btcUndelegationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btc_undelegation is the information about the early unbonding path of the BTC delegation
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
       */
      public Builder setBtcUndelegation(
          com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.Builder builderForValue) {
        if (btcUndelegationBuilder_ == null) {
          btcUndelegation_ = builderForValue.build();
        } else {
          btcUndelegationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btc_undelegation is the information about the early unbonding path of the BTC delegation
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
       */
      public Builder mergeBtcUndelegation(com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation value) {
        if (btcUndelegationBuilder_ == null) {
          if (((bitField0_ & 0x00002000) != 0) &&
            btcUndelegation_ != null &&
            btcUndelegation_ != com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.getDefaultInstance()) {
            getBtcUndelegationBuilder().mergeFrom(value);
          } else {
            btcUndelegation_ = value;
          }
        } else {
          btcUndelegationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btc_undelegation is the information about the early unbonding path of the BTC delegation
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
       */
      public Builder clearBtcUndelegation() {
        bitField0_ = (bitField0_ & ~0x00002000);
        btcUndelegation_ = null;
        if (btcUndelegationBuilder_ != null) {
          btcUndelegationBuilder_.dispose();
          btcUndelegationBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * btc_undelegation is the information about the early unbonding path of the BTC delegation
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.Builder getBtcUndelegationBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getBtcUndelegationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * btc_undelegation is the information about the early unbonding path of the BTC delegation
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegationOrBuilder getBtcUndelegationOrBuilder() {
        if (btcUndelegationBuilder_ != null) {
          return btcUndelegationBuilder_.getMessageOrBuilder();
        } else {
          return btcUndelegation_ == null ?
              com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.getDefaultInstance() : btcUndelegation_;
        }
      }
      /**
       * <pre>
       * btc_undelegation is the information about the early unbonding path of the BTC delegation
       * </pre>
       *
       * <code>.babylon.btcstaking.v1.BTCUndelegation btc_undelegation = 14 [json_name = "btcUndelegation"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation, com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.Builder, com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegationOrBuilder> 
          getBtcUndelegationFieldBuilder() {
        if (btcUndelegationBuilder_ == null) {
          btcUndelegationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation, com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.Builder, com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegationOrBuilder>(
                  getBtcUndelegation(),
                  getParentForChildren(),
                  isClean());
          btcUndelegation_ = null;
        }
        return btcUndelegationBuilder_;
      }

      private int paramsVersion_ ;
      /**
       * <pre>
       * version of the params used to validate the delegation
       * </pre>
       *
       * <code>uint32 params_version = 15 [json_name = "paramsVersion"];</code>
       * @return The paramsVersion.
       */
      @java.lang.Override
      public int getParamsVersion() {
        return paramsVersion_;
      }
      /**
       * <pre>
       * version of the params used to validate the delegation
       * </pre>
       *
       * <code>uint32 params_version = 15 [json_name = "paramsVersion"];</code>
       * @param value The paramsVersion to set.
       * @return This builder for chaining.
       */
      public Builder setParamsVersion(int value) {

        paramsVersion_ = value;
        bitField0_ |= 0x00004000;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * version of the params used to validate the delegation
       * </pre>
       *
       * <code>uint32 params_version = 15 [json_name = "paramsVersion"];</code>
       * @return This builder for chaining.
       */
      public Builder clearParamsVersion() {
        bitField0_ = (bitField0_ & ~0x00004000);
        paramsVersion_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.BTCDelegation)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.BTCDelegation)
    private static final com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation();
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCDelegation>
        PARSER = new com.google.protobuf.AbstractParser<BTCDelegation>() {
      @java.lang.Override
      public BTCDelegation parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCDelegation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCDelegation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCUndelegationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.BTCUndelegation)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * unbonding_tx is the transaction which will transfer the funds from staking
     * output to unbonding output. Unbonding output will usually have lower timelock
     * than staking output.
     * </pre>
     *
     * <code>bytes unbonding_tx = 1 [json_name = "unbondingTx"];</code>
     * @return The unbondingTx.
     */
    com.google.protobuf.ByteString getUnbondingTx();

    /**
     * <pre>
     * slashing_tx is the slashing tx for unbonding transactions
     * It is partially signed by SK corresponding to btc_pk, but not signed by
     * finality provider or covenant yet.
     * </pre>
     *
     * <code>bytes slashing_tx = 2 [json_name = "slashingTx", (.gogoproto.customtype) = "BTCSlashingTx"];</code>
     * @return The slashingTx.
     */
    com.google.protobuf.ByteString getSlashingTx();

    /**
     * <pre>
     * delegator_unbonding_sig is the signature on the unbonding tx
     * by the delegator (i.e., SK corresponding to btc_pk).
     * It effectively proves that the delegator wants to unbond and thus
     * Babylon will consider this BTC delegation unbonded. Delegator's BTC
     * on Bitcoin will be unbonded after timelock
     * </pre>
     *
     * <code>bytes delegator_unbonding_sig = 3 [json_name = "delegatorUnbondingSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
     * @return The delegatorUnbondingSig.
     */
    com.google.protobuf.ByteString getDelegatorUnbondingSig();

    /**
     * <pre>
     * delegator_slashing_sig is the signature on the slashing tx
     * by the delegator (i.e., SK corresponding to btc_pk).
     * It will be a part of the witness for the unbonding tx output.
     * </pre>
     *
     * <code>bytes delegator_slashing_sig = 4 [json_name = "delegatorSlashingSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
     * @return The delegatorSlashingSig.
     */
    com.google.protobuf.ByteString getDelegatorSlashingSig();

    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
     */
    java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> 
        getCovenantSlashingSigsList();
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getCovenantSlashingSigs(int index);
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
     */
    int getCovenantSlashingSigsCount();
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
     */
    java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
        getCovenantSlashingSigsOrBuilderList();
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder getCovenantSlashingSigsOrBuilder(
        int index);

    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
     */
    java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo> 
        getCovenantUnbondingSigListList();
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo getCovenantUnbondingSigList(int index);
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
     */
    int getCovenantUnbondingSigListCount();
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
     */
    java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder> 
        getCovenantUnbondingSigListOrBuilderList();
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder getCovenantUnbondingSigListOrBuilder(
        int index);
  }
  /**
   * <pre>
   * BTCUndelegation contains the information about the early unbonding path of the BTC delegation
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.BTCUndelegation}
   */
  public static final class BTCUndelegation extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.BTCUndelegation)
      BTCUndelegationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BTCUndelegation.newBuilder() to construct.
    private BTCUndelegation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BTCUndelegation() {
      unbondingTx_ = com.google.protobuf.ByteString.EMPTY;
      slashingTx_ = com.google.protobuf.ByteString.EMPTY;
      delegatorUnbondingSig_ = com.google.protobuf.ByteString.EMPTY;
      delegatorSlashingSig_ = com.google.protobuf.ByteString.EMPTY;
      covenantSlashingSigs_ = java.util.Collections.emptyList();
      covenantUnbondingSigList_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BTCUndelegation();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCUndelegation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCUndelegation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.class, com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.Builder.class);
    }

    public static final int UNBONDING_TX_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString unbondingTx_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * unbonding_tx is the transaction which will transfer the funds from staking
     * output to unbonding output. Unbonding output will usually have lower timelock
     * than staking output.
     * </pre>
     *
     * <code>bytes unbonding_tx = 1 [json_name = "unbondingTx"];</code>
     * @return The unbondingTx.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getUnbondingTx() {
      return unbondingTx_;
    }

    public static final int SLASHING_TX_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString slashingTx_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * slashing_tx is the slashing tx for unbonding transactions
     * It is partially signed by SK corresponding to btc_pk, but not signed by
     * finality provider or covenant yet.
     * </pre>
     *
     * <code>bytes slashing_tx = 2 [json_name = "slashingTx", (.gogoproto.customtype) = "BTCSlashingTx"];</code>
     * @return The slashingTx.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSlashingTx() {
      return slashingTx_;
    }

    public static final int DELEGATOR_UNBONDING_SIG_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString delegatorUnbondingSig_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * delegator_unbonding_sig is the signature on the unbonding tx
     * by the delegator (i.e., SK corresponding to btc_pk).
     * It effectively proves that the delegator wants to unbond and thus
     * Babylon will consider this BTC delegation unbonded. Delegator's BTC
     * on Bitcoin will be unbonded after timelock
     * </pre>
     *
     * <code>bytes delegator_unbonding_sig = 3 [json_name = "delegatorUnbondingSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
     * @return The delegatorUnbondingSig.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getDelegatorUnbondingSig() {
      return delegatorUnbondingSig_;
    }

    public static final int DELEGATOR_SLASHING_SIG_FIELD_NUMBER = 4;
    private com.google.protobuf.ByteString delegatorSlashingSig_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * delegator_slashing_sig is the signature on the slashing tx
     * by the delegator (i.e., SK corresponding to btc_pk).
     * It will be a part of the witness for the unbonding tx output.
     * </pre>
     *
     * <code>bytes delegator_slashing_sig = 4 [json_name = "delegatorSlashingSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
     * @return The delegatorSlashingSig.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getDelegatorSlashingSig() {
      return delegatorSlashingSig_;
    }

    public static final int COVENANT_SLASHING_SIGS_FIELD_NUMBER = 5;
    @SuppressWarnings("serial")
    private java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> covenantSlashingSigs_;
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
     */
    @java.lang.Override
    public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> getCovenantSlashingSigsList() {
      return covenantSlashingSigs_;
    }
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
        getCovenantSlashingSigsOrBuilderList() {
      return covenantSlashingSigs_;
    }
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
     */
    @java.lang.Override
    public int getCovenantSlashingSigsCount() {
      return covenantSlashingSigs_.size();
    }
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getCovenantSlashingSigs(int index) {
      return covenantSlashingSigs_.get(index);
    }
    /**
     * <pre>
     * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
     * by each covenant member
     * It will be a part of the witness for the staking tx output.
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder getCovenantSlashingSigsOrBuilder(
        int index) {
      return covenantSlashingSigs_.get(index);
    }

    public static final int COVENANT_UNBONDING_SIG_LIST_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo> covenantUnbondingSigList_;
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
     */
    @java.lang.Override
    public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo> getCovenantUnbondingSigListList() {
      return covenantUnbondingSigList_;
    }
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder> 
        getCovenantUnbondingSigListOrBuilderList() {
      return covenantUnbondingSigList_;
    }
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
     */
    @java.lang.Override
    public int getCovenantUnbondingSigListCount() {
      return covenantUnbondingSigList_.size();
    }
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo getCovenantUnbondingSigList(int index) {
      return covenantUnbondingSigList_.get(index);
    }
    /**
     * <pre>
     * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
     * by covenant members
     * It must be provided after processing undelegate message by Babylon
     * </pre>
     *
     * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder getCovenantUnbondingSigListOrBuilder(
        int index) {
      return covenantUnbondingSigList_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!unbondingTx_.isEmpty()) {
        output.writeBytes(1, unbondingTx_);
      }
      if (!slashingTx_.isEmpty()) {
        output.writeBytes(2, slashingTx_);
      }
      if (!delegatorUnbondingSig_.isEmpty()) {
        output.writeBytes(3, delegatorUnbondingSig_);
      }
      if (!delegatorSlashingSig_.isEmpty()) {
        output.writeBytes(4, delegatorSlashingSig_);
      }
      for (int i = 0; i < covenantSlashingSigs_.size(); i++) {
        output.writeMessage(5, covenantSlashingSigs_.get(i));
      }
      for (int i = 0; i < covenantUnbondingSigList_.size(); i++) {
        output.writeMessage(6, covenantUnbondingSigList_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!unbondingTx_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, unbondingTx_);
      }
      if (!slashingTx_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, slashingTx_);
      }
      if (!delegatorUnbondingSig_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, delegatorUnbondingSig_);
      }
      if (!delegatorSlashingSig_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, delegatorSlashingSig_);
      }
      for (int i = 0; i < covenantSlashingSigs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, covenantSlashingSigs_.get(i));
      }
      for (int i = 0; i < covenantUnbondingSigList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, covenantUnbondingSigList_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation other = (com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation) obj;

      if (!getUnbondingTx()
          .equals(other.getUnbondingTx())) return false;
      if (!getSlashingTx()
          .equals(other.getSlashingTx())) return false;
      if (!getDelegatorUnbondingSig()
          .equals(other.getDelegatorUnbondingSig())) return false;
      if (!getDelegatorSlashingSig()
          .equals(other.getDelegatorSlashingSig())) return false;
      if (!getCovenantSlashingSigsList()
          .equals(other.getCovenantSlashingSigsList())) return false;
      if (!getCovenantUnbondingSigListList()
          .equals(other.getCovenantUnbondingSigListList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UNBONDING_TX_FIELD_NUMBER;
      hash = (53 * hash) + getUnbondingTx().hashCode();
      hash = (37 * hash) + SLASHING_TX_FIELD_NUMBER;
      hash = (53 * hash) + getSlashingTx().hashCode();
      hash = (37 * hash) + DELEGATOR_UNBONDING_SIG_FIELD_NUMBER;
      hash = (53 * hash) + getDelegatorUnbondingSig().hashCode();
      hash = (37 * hash) + DELEGATOR_SLASHING_SIG_FIELD_NUMBER;
      hash = (53 * hash) + getDelegatorSlashingSig().hashCode();
      if (getCovenantSlashingSigsCount() > 0) {
        hash = (37 * hash) + COVENANT_SLASHING_SIGS_FIELD_NUMBER;
        hash = (53 * hash) + getCovenantSlashingSigsList().hashCode();
      }
      if (getCovenantUnbondingSigListCount() > 0) {
        hash = (37 * hash) + COVENANT_UNBONDING_SIG_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getCovenantUnbondingSigListList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * BTCUndelegation contains the information about the early unbonding path of the BTC delegation
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.BTCUndelegation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.BTCUndelegation)
        com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCUndelegation_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCUndelegation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.class, com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        unbondingTx_ = com.google.protobuf.ByteString.EMPTY;
        slashingTx_ = com.google.protobuf.ByteString.EMPTY;
        delegatorUnbondingSig_ = com.google.protobuf.ByteString.EMPTY;
        delegatorSlashingSig_ = com.google.protobuf.ByteString.EMPTY;
        if (covenantSlashingSigsBuilder_ == null) {
          covenantSlashingSigs_ = java.util.Collections.emptyList();
        } else {
          covenantSlashingSigs_ = null;
          covenantSlashingSigsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (covenantUnbondingSigListBuilder_ == null) {
          covenantUnbondingSigList_ = java.util.Collections.emptyList();
        } else {
          covenantUnbondingSigList_ = null;
          covenantUnbondingSigListBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCUndelegation_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation build() {
        com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation buildPartial() {
        com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation result = new com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation result) {
        if (covenantSlashingSigsBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0)) {
            covenantSlashingSigs_ = java.util.Collections.unmodifiableList(covenantSlashingSigs_);
            bitField0_ = (bitField0_ & ~0x00000010);
          }
          result.covenantSlashingSigs_ = covenantSlashingSigs_;
        } else {
          result.covenantSlashingSigs_ = covenantSlashingSigsBuilder_.build();
        }
        if (covenantUnbondingSigListBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0)) {
            covenantUnbondingSigList_ = java.util.Collections.unmodifiableList(covenantUnbondingSigList_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.covenantUnbondingSigList_ = covenantUnbondingSigList_;
        } else {
          result.covenantUnbondingSigList_ = covenantUnbondingSigListBuilder_.build();
        }
      }

      private void buildPartial0(com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.unbondingTx_ = unbondingTx_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.slashingTx_ = slashingTx_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.delegatorUnbondingSig_ = delegatorUnbondingSig_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.delegatorSlashingSig_ = delegatorSlashingSig_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation) {
          return mergeFrom((com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation other) {
        if (other == com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation.getDefaultInstance()) return this;
        if (other.getUnbondingTx() != com.google.protobuf.ByteString.EMPTY) {
          setUnbondingTx(other.getUnbondingTx());
        }
        if (other.getSlashingTx() != com.google.protobuf.ByteString.EMPTY) {
          setSlashingTx(other.getSlashingTx());
        }
        if (other.getDelegatorUnbondingSig() != com.google.protobuf.ByteString.EMPTY) {
          setDelegatorUnbondingSig(other.getDelegatorUnbondingSig());
        }
        if (other.getDelegatorSlashingSig() != com.google.protobuf.ByteString.EMPTY) {
          setDelegatorSlashingSig(other.getDelegatorSlashingSig());
        }
        if (covenantSlashingSigsBuilder_ == null) {
          if (!other.covenantSlashingSigs_.isEmpty()) {
            if (covenantSlashingSigs_.isEmpty()) {
              covenantSlashingSigs_ = other.covenantSlashingSigs_;
              bitField0_ = (bitField0_ & ~0x00000010);
            } else {
              ensureCovenantSlashingSigsIsMutable();
              covenantSlashingSigs_.addAll(other.covenantSlashingSigs_);
            }
            onChanged();
          }
        } else {
          if (!other.covenantSlashingSigs_.isEmpty()) {
            if (covenantSlashingSigsBuilder_.isEmpty()) {
              covenantSlashingSigsBuilder_.dispose();
              covenantSlashingSigsBuilder_ = null;
              covenantSlashingSigs_ = other.covenantSlashingSigs_;
              bitField0_ = (bitField0_ & ~0x00000010);
              covenantSlashingSigsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCovenantSlashingSigsFieldBuilder() : null;
            } else {
              covenantSlashingSigsBuilder_.addAllMessages(other.covenantSlashingSigs_);
            }
          }
        }
        if (covenantUnbondingSigListBuilder_ == null) {
          if (!other.covenantUnbondingSigList_.isEmpty()) {
            if (covenantUnbondingSigList_.isEmpty()) {
              covenantUnbondingSigList_ = other.covenantUnbondingSigList_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureCovenantUnbondingSigListIsMutable();
              covenantUnbondingSigList_.addAll(other.covenantUnbondingSigList_);
            }
            onChanged();
          }
        } else {
          if (!other.covenantUnbondingSigList_.isEmpty()) {
            if (covenantUnbondingSigListBuilder_.isEmpty()) {
              covenantUnbondingSigListBuilder_.dispose();
              covenantUnbondingSigListBuilder_ = null;
              covenantUnbondingSigList_ = other.covenantUnbondingSigList_;
              bitField0_ = (bitField0_ & ~0x00000020);
              covenantUnbondingSigListBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCovenantUnbondingSigListFieldBuilder() : null;
            } else {
              covenantUnbondingSigListBuilder_.addAllMessages(other.covenantUnbondingSigList_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                unbondingTx_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                slashingTx_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                delegatorUnbondingSig_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                delegatorSlashingSig_ = input.readBytes();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures m =
                    input.readMessage(
                        com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.parser(),
                        extensionRegistry);
                if (covenantSlashingSigsBuilder_ == null) {
                  ensureCovenantSlashingSigsIsMutable();
                  covenantSlashingSigs_.add(m);
                } else {
                  covenantSlashingSigsBuilder_.addMessage(m);
                }
                break;
              } // case 42
              case 50: {
                com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo m =
                    input.readMessage(
                        com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.parser(),
                        extensionRegistry);
                if (covenantUnbondingSigListBuilder_ == null) {
                  ensureCovenantUnbondingSigListIsMutable();
                  covenantUnbondingSigList_.add(m);
                } else {
                  covenantUnbondingSigListBuilder_.addMessage(m);
                }
                break;
              } // case 50
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString unbondingTx_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * unbonding_tx is the transaction which will transfer the funds from staking
       * output to unbonding output. Unbonding output will usually have lower timelock
       * than staking output.
       * </pre>
       *
       * <code>bytes unbonding_tx = 1 [json_name = "unbondingTx"];</code>
       * @return The unbondingTx.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getUnbondingTx() {
        return unbondingTx_;
      }
      /**
       * <pre>
       * unbonding_tx is the transaction which will transfer the funds from staking
       * output to unbonding output. Unbonding output will usually have lower timelock
       * than staking output.
       * </pre>
       *
       * <code>bytes unbonding_tx = 1 [json_name = "unbondingTx"];</code>
       * @param value The unbondingTx to set.
       * @return This builder for chaining.
       */
      public Builder setUnbondingTx(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        unbondingTx_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * unbonding_tx is the transaction which will transfer the funds from staking
       * output to unbonding output. Unbonding output will usually have lower timelock
       * than staking output.
       * </pre>
       *
       * <code>bytes unbonding_tx = 1 [json_name = "unbondingTx"];</code>
       * @return This builder for chaining.
       */
      public Builder clearUnbondingTx() {
        bitField0_ = (bitField0_ & ~0x00000001);
        unbondingTx_ = getDefaultInstance().getUnbondingTx();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString slashingTx_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * slashing_tx is the slashing tx for unbonding transactions
       * It is partially signed by SK corresponding to btc_pk, but not signed by
       * finality provider or covenant yet.
       * </pre>
       *
       * <code>bytes slashing_tx = 2 [json_name = "slashingTx", (.gogoproto.customtype) = "BTCSlashingTx"];</code>
       * @return The slashingTx.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSlashingTx() {
        return slashingTx_;
      }
      /**
       * <pre>
       * slashing_tx is the slashing tx for unbonding transactions
       * It is partially signed by SK corresponding to btc_pk, but not signed by
       * finality provider or covenant yet.
       * </pre>
       *
       * <code>bytes slashing_tx = 2 [json_name = "slashingTx", (.gogoproto.customtype) = "BTCSlashingTx"];</code>
       * @param value The slashingTx to set.
       * @return This builder for chaining.
       */
      public Builder setSlashingTx(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        slashingTx_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * slashing_tx is the slashing tx for unbonding transactions
       * It is partially signed by SK corresponding to btc_pk, but not signed by
       * finality provider or covenant yet.
       * </pre>
       *
       * <code>bytes slashing_tx = 2 [json_name = "slashingTx", (.gogoproto.customtype) = "BTCSlashingTx"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSlashingTx() {
        bitField0_ = (bitField0_ & ~0x00000002);
        slashingTx_ = getDefaultInstance().getSlashingTx();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString delegatorUnbondingSig_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * delegator_unbonding_sig is the signature on the unbonding tx
       * by the delegator (i.e., SK corresponding to btc_pk).
       * It effectively proves that the delegator wants to unbond and thus
       * Babylon will consider this BTC delegation unbonded. Delegator's BTC
       * on Bitcoin will be unbonded after timelock
       * </pre>
       *
       * <code>bytes delegator_unbonding_sig = 3 [json_name = "delegatorUnbondingSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
       * @return The delegatorUnbondingSig.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getDelegatorUnbondingSig() {
        return delegatorUnbondingSig_;
      }
      /**
       * <pre>
       * delegator_unbonding_sig is the signature on the unbonding tx
       * by the delegator (i.e., SK corresponding to btc_pk).
       * It effectively proves that the delegator wants to unbond and thus
       * Babylon will consider this BTC delegation unbonded. Delegator's BTC
       * on Bitcoin will be unbonded after timelock
       * </pre>
       *
       * <code>bytes delegator_unbonding_sig = 3 [json_name = "delegatorUnbondingSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
       * @param value The delegatorUnbondingSig to set.
       * @return This builder for chaining.
       */
      public Builder setDelegatorUnbondingSig(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        delegatorUnbondingSig_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * delegator_unbonding_sig is the signature on the unbonding tx
       * by the delegator (i.e., SK corresponding to btc_pk).
       * It effectively proves that the delegator wants to unbond and thus
       * Babylon will consider this BTC delegation unbonded. Delegator's BTC
       * on Bitcoin will be unbonded after timelock
       * </pre>
       *
       * <code>bytes delegator_unbonding_sig = 3 [json_name = "delegatorUnbondingSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
       * @return This builder for chaining.
       */
      public Builder clearDelegatorUnbondingSig() {
        bitField0_ = (bitField0_ & ~0x00000004);
        delegatorUnbondingSig_ = getDefaultInstance().getDelegatorUnbondingSig();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString delegatorSlashingSig_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * delegator_slashing_sig is the signature on the slashing tx
       * by the delegator (i.e., SK corresponding to btc_pk).
       * It will be a part of the witness for the unbonding tx output.
       * </pre>
       *
       * <code>bytes delegator_slashing_sig = 4 [json_name = "delegatorSlashingSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
       * @return The delegatorSlashingSig.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getDelegatorSlashingSig() {
        return delegatorSlashingSig_;
      }
      /**
       * <pre>
       * delegator_slashing_sig is the signature on the slashing tx
       * by the delegator (i.e., SK corresponding to btc_pk).
       * It will be a part of the witness for the unbonding tx output.
       * </pre>
       *
       * <code>bytes delegator_slashing_sig = 4 [json_name = "delegatorSlashingSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
       * @param value The delegatorSlashingSig to set.
       * @return This builder for chaining.
       */
      public Builder setDelegatorSlashingSig(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        delegatorSlashingSig_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * delegator_slashing_sig is the signature on the slashing tx
       * by the delegator (i.e., SK corresponding to btc_pk).
       * It will be a part of the witness for the unbonding tx output.
       * </pre>
       *
       * <code>bytes delegator_slashing_sig = 4 [json_name = "delegatorSlashingSig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
       * @return This builder for chaining.
       */
      public Builder clearDelegatorSlashingSig() {
        bitField0_ = (bitField0_ & ~0x00000008);
        delegatorSlashingSig_ = getDefaultInstance().getDelegatorSlashingSig();
        onChanged();
        return this;
      }

      private java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> covenantSlashingSigs_ =
        java.util.Collections.emptyList();
      private void ensureCovenantSlashingSigsIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          covenantSlashingSigs_ = new java.util.ArrayList<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures>(covenantSlashingSigs_);
          bitField0_ |= 0x00000010;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> covenantSlashingSigsBuilder_;

      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> getCovenantSlashingSigsList() {
        if (covenantSlashingSigsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(covenantSlashingSigs_);
        } else {
          return covenantSlashingSigsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public int getCovenantSlashingSigsCount() {
        if (covenantSlashingSigsBuilder_ == null) {
          return covenantSlashingSigs_.size();
        } else {
          return covenantSlashingSigsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getCovenantSlashingSigs(int index) {
        if (covenantSlashingSigsBuilder_ == null) {
          return covenantSlashingSigs_.get(index);
        } else {
          return covenantSlashingSigsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder setCovenantSlashingSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures value) {
        if (covenantSlashingSigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantSlashingSigsIsMutable();
          covenantSlashingSigs_.set(index, value);
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder setCovenantSlashingSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder builderForValue) {
        if (covenantSlashingSigsBuilder_ == null) {
          ensureCovenantSlashingSigsIsMutable();
          covenantSlashingSigs_.set(index, builderForValue.build());
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder addCovenantSlashingSigs(com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures value) {
        if (covenantSlashingSigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantSlashingSigsIsMutable();
          covenantSlashingSigs_.add(value);
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder addCovenantSlashingSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures value) {
        if (covenantSlashingSigsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantSlashingSigsIsMutable();
          covenantSlashingSigs_.add(index, value);
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder addCovenantSlashingSigs(
          com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder builderForValue) {
        if (covenantSlashingSigsBuilder_ == null) {
          ensureCovenantSlashingSigsIsMutable();
          covenantSlashingSigs_.add(builderForValue.build());
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder addCovenantSlashingSigs(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder builderForValue) {
        if (covenantSlashingSigsBuilder_ == null) {
          ensureCovenantSlashingSigsIsMutable();
          covenantSlashingSigs_.add(index, builderForValue.build());
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder addAllCovenantSlashingSigs(
          java.lang.Iterable<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures> values) {
        if (covenantSlashingSigsBuilder_ == null) {
          ensureCovenantSlashingSigsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, covenantSlashingSigs_);
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder clearCovenantSlashingSigs() {
        if (covenantSlashingSigsBuilder_ == null) {
          covenantSlashingSigs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000010);
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public Builder removeCovenantSlashingSigs(int index) {
        if (covenantSlashingSigsBuilder_ == null) {
          ensureCovenantSlashingSigsIsMutable();
          covenantSlashingSigs_.remove(index);
          onChanged();
        } else {
          covenantSlashingSigsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder getCovenantSlashingSigsBuilder(
          int index) {
        return getCovenantSlashingSigsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder getCovenantSlashingSigsOrBuilder(
          int index) {
        if (covenantSlashingSigsBuilder_ == null) {
          return covenantSlashingSigs_.get(index);  } else {
          return covenantSlashingSigsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
           getCovenantSlashingSigsOrBuilderList() {
        if (covenantSlashingSigsBuilder_ != null) {
          return covenantSlashingSigsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(covenantSlashingSigs_);
        }
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder addCovenantSlashingSigsBuilder() {
        return getCovenantSlashingSigsFieldBuilder().addBuilder(
            com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.getDefaultInstance());
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder addCovenantSlashingSigsBuilder(
          int index) {
        return getCovenantSlashingSigsFieldBuilder().addBuilder(
            index, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.getDefaultInstance());
      }
      /**
       * <pre>
       * covenant_slashing_sigs is a list of adaptor signatures on the slashing tx
       * by each covenant member
       * It will be a part of the witness for the staking tx output.
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.CovenantAdaptorSignatures covenant_slashing_sigs = 5 [json_name = "covenantSlashingSigs"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder> 
           getCovenantSlashingSigsBuilderList() {
        return getCovenantSlashingSigsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder> 
          getCovenantSlashingSigsFieldBuilder() {
        if (covenantSlashingSigsBuilder_ == null) {
          covenantSlashingSigsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder>(
                  covenantSlashingSigs_,
                  ((bitField0_ & 0x00000010) != 0),
                  getParentForChildren(),
                  isClean());
          covenantSlashingSigs_ = null;
        }
        return covenantSlashingSigsBuilder_;
      }

      private java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo> covenantUnbondingSigList_ =
        java.util.Collections.emptyList();
      private void ensureCovenantUnbondingSigListIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          covenantUnbondingSigList_ = new java.util.ArrayList<com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo>(covenantUnbondingSigList_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder> covenantUnbondingSigListBuilder_;

      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo> getCovenantUnbondingSigListList() {
        if (covenantUnbondingSigListBuilder_ == null) {
          return java.util.Collections.unmodifiableList(covenantUnbondingSigList_);
        } else {
          return covenantUnbondingSigListBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public int getCovenantUnbondingSigListCount() {
        if (covenantUnbondingSigListBuilder_ == null) {
          return covenantUnbondingSigList_.size();
        } else {
          return covenantUnbondingSigListBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo getCovenantUnbondingSigList(int index) {
        if (covenantUnbondingSigListBuilder_ == null) {
          return covenantUnbondingSigList_.get(index);
        } else {
          return covenantUnbondingSigListBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder setCovenantUnbondingSigList(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo value) {
        if (covenantUnbondingSigListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantUnbondingSigListIsMutable();
          covenantUnbondingSigList_.set(index, value);
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder setCovenantUnbondingSigList(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder builderForValue) {
        if (covenantUnbondingSigListBuilder_ == null) {
          ensureCovenantUnbondingSigListIsMutable();
          covenantUnbondingSigList_.set(index, builderForValue.build());
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder addCovenantUnbondingSigList(com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo value) {
        if (covenantUnbondingSigListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantUnbondingSigListIsMutable();
          covenantUnbondingSigList_.add(value);
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder addCovenantUnbondingSigList(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo value) {
        if (covenantUnbondingSigListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCovenantUnbondingSigListIsMutable();
          covenantUnbondingSigList_.add(index, value);
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder addCovenantUnbondingSigList(
          com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder builderForValue) {
        if (covenantUnbondingSigListBuilder_ == null) {
          ensureCovenantUnbondingSigListIsMutable();
          covenantUnbondingSigList_.add(builderForValue.build());
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder addCovenantUnbondingSigList(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder builderForValue) {
        if (covenantUnbondingSigListBuilder_ == null) {
          ensureCovenantUnbondingSigListIsMutable();
          covenantUnbondingSigList_.add(index, builderForValue.build());
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder addAllCovenantUnbondingSigList(
          java.lang.Iterable<? extends com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo> values) {
        if (covenantUnbondingSigListBuilder_ == null) {
          ensureCovenantUnbondingSigListIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, covenantUnbondingSigList_);
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder clearCovenantUnbondingSigList() {
        if (covenantUnbondingSigListBuilder_ == null) {
          covenantUnbondingSigList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public Builder removeCovenantUnbondingSigList(int index) {
        if (covenantUnbondingSigListBuilder_ == null) {
          ensureCovenantUnbondingSigListIsMutable();
          covenantUnbondingSigList_.remove(index);
          onChanged();
        } else {
          covenantUnbondingSigListBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder getCovenantUnbondingSigListBuilder(
          int index) {
        return getCovenantUnbondingSigListFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder getCovenantUnbondingSigListOrBuilder(
          int index) {
        if (covenantUnbondingSigListBuilder_ == null) {
          return covenantUnbondingSigList_.get(index);  } else {
          return covenantUnbondingSigListBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder> 
           getCovenantUnbondingSigListOrBuilderList() {
        if (covenantUnbondingSigListBuilder_ != null) {
          return covenantUnbondingSigListBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(covenantUnbondingSigList_);
        }
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder addCovenantUnbondingSigListBuilder() {
        return getCovenantUnbondingSigListFieldBuilder().addBuilder(
            com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder addCovenantUnbondingSigListBuilder(
          int index) {
        return getCovenantUnbondingSigListFieldBuilder().addBuilder(
            index, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.getDefaultInstance());
      }
      /**
       * <pre>
       * covenant_unbonding_sig_list is the list of signatures on the unbonding tx
       * by covenant members
       * It must be provided after processing undelegate message by Babylon
       * </pre>
       *
       * <code>repeated .babylon.btcstaking.v1.SignatureInfo covenant_unbonding_sig_list = 6 [json_name = "covenantUnbondingSigList"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder> 
           getCovenantUnbondingSigListBuilderList() {
        return getCovenantUnbondingSigListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder> 
          getCovenantUnbondingSigListFieldBuilder() {
        if (covenantUnbondingSigListBuilder_ == null) {
          covenantUnbondingSigListBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder>(
                  covenantUnbondingSigList_,
                  ((bitField0_ & 0x00000020) != 0),
                  getParentForChildren(),
                  isClean());
          covenantUnbondingSigList_ = null;
        }
        return covenantUnbondingSigListBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.BTCUndelegation)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.BTCUndelegation)
    private static final com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation();
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCUndelegation>
        PARSER = new com.google.protobuf.AbstractParser<BTCUndelegation>() {
      @java.lang.Override
      public BTCUndelegation parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCUndelegation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCUndelegation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.BTCUndelegation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCDelegatorDelegationsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.BTCDelegatorDelegations)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
     */
    java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation> 
        getDelsList();
    /**
     * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation getDels(int index);
    /**
     * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
     */
    int getDelsCount();
    /**
     * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
     */
    java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegationOrBuilder> 
        getDelsOrBuilderList();
    /**
     * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
     */
    com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegationOrBuilder getDelsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * BTCDelegatorDelegations is a collection of BTC delegations from the same delegator.
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.BTCDelegatorDelegations}
   */
  public static final class BTCDelegatorDelegations extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.BTCDelegatorDelegations)
      BTCDelegatorDelegationsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BTCDelegatorDelegations.newBuilder() to construct.
    private BTCDelegatorDelegations(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BTCDelegatorDelegations() {
      dels_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BTCDelegatorDelegations();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegatorDelegations_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegatorDelegations_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations.class, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations.Builder.class);
    }

    public static final int DELS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation> dels_;
    /**
     * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
     */
    @java.lang.Override
    public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation> getDelsList() {
      return dels_;
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegationOrBuilder> 
        getDelsOrBuilderList() {
      return dels_;
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
     */
    @java.lang.Override
    public int getDelsCount() {
      return dels_.size();
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation getDels(int index) {
      return dels_.get(index);
    }
    /**
     * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
     */
    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegationOrBuilder getDelsOrBuilder(
        int index) {
      return dels_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < dels_.size(); i++) {
        output.writeMessage(1, dels_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < dels_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, dels_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations other = (com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations) obj;

      if (!getDelsList()
          .equals(other.getDelsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDelsCount() > 0) {
        hash = (37 * hash) + DELS_FIELD_NUMBER;
        hash = (53 * hash) + getDelsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * BTCDelegatorDelegations is a collection of BTC delegations from the same delegator.
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.BTCDelegatorDelegations}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.BTCDelegatorDelegations)
        com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegatorDelegations_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegatorDelegations_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations.class, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (delsBuilder_ == null) {
          dels_ = java.util.Collections.emptyList();
        } else {
          dels_ = null;
          delsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegatorDelegations_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations build() {
        com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations buildPartial() {
        com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations result = new com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations result) {
        if (delsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            dels_ = java.util.Collections.unmodifiableList(dels_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.dels_ = dels_;
        } else {
          result.dels_ = delsBuilder_.build();
        }
      }

      private void buildPartial0(com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations) {
          return mergeFrom((com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations other) {
        if (other == com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations.getDefaultInstance()) return this;
        if (delsBuilder_ == null) {
          if (!other.dels_.isEmpty()) {
            if (dels_.isEmpty()) {
              dels_ = other.dels_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDelsIsMutable();
              dels_.addAll(other.dels_);
            }
            onChanged();
          }
        } else {
          if (!other.dels_.isEmpty()) {
            if (delsBuilder_.isEmpty()) {
              delsBuilder_.dispose();
              delsBuilder_ = null;
              dels_ = other.dels_;
              bitField0_ = (bitField0_ & ~0x00000001);
              delsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getDelsFieldBuilder() : null;
            } else {
              delsBuilder_.addAllMessages(other.dels_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation m =
                    input.readMessage(
                        com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.parser(),
                        extensionRegistry);
                if (delsBuilder_ == null) {
                  ensureDelsIsMutable();
                  dels_.add(m);
                } else {
                  delsBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation> dels_ =
        java.util.Collections.emptyList();
      private void ensureDelsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          dels_ = new java.util.ArrayList<com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation>(dels_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.Builder, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegationOrBuilder> delsBuilder_;

      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation> getDelsList() {
        if (delsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(dels_);
        } else {
          return delsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public int getDelsCount() {
        if (delsBuilder_ == null) {
          return dels_.size();
        } else {
          return delsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation getDels(int index) {
        if (delsBuilder_ == null) {
          return dels_.get(index);
        } else {
          return delsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public Builder setDels(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation value) {
        if (delsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDelsIsMutable();
          dels_.set(index, value);
          onChanged();
        } else {
          delsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public Builder setDels(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.Builder builderForValue) {
        if (delsBuilder_ == null) {
          ensureDelsIsMutable();
          dels_.set(index, builderForValue.build());
          onChanged();
        } else {
          delsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public Builder addDels(com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation value) {
        if (delsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDelsIsMutable();
          dels_.add(value);
          onChanged();
        } else {
          delsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public Builder addDels(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation value) {
        if (delsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDelsIsMutable();
          dels_.add(index, value);
          onChanged();
        } else {
          delsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public Builder addDels(
          com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.Builder builderForValue) {
        if (delsBuilder_ == null) {
          ensureDelsIsMutable();
          dels_.add(builderForValue.build());
          onChanged();
        } else {
          delsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public Builder addDels(
          int index, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.Builder builderForValue) {
        if (delsBuilder_ == null) {
          ensureDelsIsMutable();
          dels_.add(index, builderForValue.build());
          onChanged();
        } else {
          delsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public Builder addAllDels(
          java.lang.Iterable<? extends com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation> values) {
        if (delsBuilder_ == null) {
          ensureDelsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, dels_);
          onChanged();
        } else {
          delsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public Builder clearDels() {
        if (delsBuilder_ == null) {
          dels_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          delsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public Builder removeDels(int index) {
        if (delsBuilder_ == null) {
          ensureDelsIsMutable();
          dels_.remove(index);
          onChanged();
        } else {
          delsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.Builder getDelsBuilder(
          int index) {
        return getDelsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegationOrBuilder getDelsOrBuilder(
          int index) {
        if (delsBuilder_ == null) {
          return dels_.get(index);  } else {
          return delsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public java.util.List<? extends com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegationOrBuilder> 
           getDelsOrBuilderList() {
        if (delsBuilder_ != null) {
          return delsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(dels_);
        }
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.Builder addDelsBuilder() {
        return getDelsFieldBuilder().addBuilder(
            com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.getDefaultInstance());
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.Builder addDelsBuilder(
          int index) {
        return getDelsFieldBuilder().addBuilder(
            index, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.getDefaultInstance());
      }
      /**
       * <code>repeated .babylon.btcstaking.v1.BTCDelegation dels = 1 [json_name = "dels"];</code>
       */
      public java.util.List<com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.Builder> 
           getDelsBuilderList() {
        return getDelsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.Builder, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegationOrBuilder> 
          getDelsFieldBuilder() {
        if (delsBuilder_ == null) {
          delsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegation.Builder, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegationOrBuilder>(
                  dels_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          dels_ = null;
        }
        return delsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.BTCDelegatorDelegations)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.BTCDelegatorDelegations)
    private static final com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations();
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCDelegatorDelegations>
        PARSER = new com.google.protobuf.AbstractParser<BTCDelegatorDelegations>() {
      @java.lang.Override
      public BTCDelegatorDelegations parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCDelegatorDelegations> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCDelegatorDelegations> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegations getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCDelegatorDelegationIndexOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.BTCDelegatorDelegationIndex)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated bytes staking_tx_hash_list = 1 [json_name = "stakingTxHashList"];</code>
     * @return A list containing the stakingTxHashList.
     */
    java.util.List<com.google.protobuf.ByteString> getStakingTxHashListList();
    /**
     * <code>repeated bytes staking_tx_hash_list = 1 [json_name = "stakingTxHashList"];</code>
     * @return The count of stakingTxHashList.
     */
    int getStakingTxHashListCount();
    /**
     * <code>repeated bytes staking_tx_hash_list = 1 [json_name = "stakingTxHashList"];</code>
     * @param index The index of the element to return.
     * @return The stakingTxHashList at the given index.
     */
    com.google.protobuf.ByteString getStakingTxHashList(int index);
  }
  /**
   * <pre>
   * BTCDelegatorDelegationIndex is a list of staking tx hashes of BTC delegations from the same delegator.
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.BTCDelegatorDelegationIndex}
   */
  public static final class BTCDelegatorDelegationIndex extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.BTCDelegatorDelegationIndex)
      BTCDelegatorDelegationIndexOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BTCDelegatorDelegationIndex.newBuilder() to construct.
    private BTCDelegatorDelegationIndex(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BTCDelegatorDelegationIndex() {
      stakingTxHashList_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BTCDelegatorDelegationIndex();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegatorDelegationIndex_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegatorDelegationIndex_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex.class, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex.Builder.class);
    }

    public static final int STAKING_TX_HASH_LIST_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<com.google.protobuf.ByteString> stakingTxHashList_;
    /**
     * <code>repeated bytes staking_tx_hash_list = 1 [json_name = "stakingTxHashList"];</code>
     * @return A list containing the stakingTxHashList.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.ByteString>
        getStakingTxHashListList() {
      return stakingTxHashList_;
    }
    /**
     * <code>repeated bytes staking_tx_hash_list = 1 [json_name = "stakingTxHashList"];</code>
     * @return The count of stakingTxHashList.
     */
    public int getStakingTxHashListCount() {
      return stakingTxHashList_.size();
    }
    /**
     * <code>repeated bytes staking_tx_hash_list = 1 [json_name = "stakingTxHashList"];</code>
     * @param index The index of the element to return.
     * @return The stakingTxHashList at the given index.
     */
    public com.google.protobuf.ByteString getStakingTxHashList(int index) {
      return stakingTxHashList_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < stakingTxHashList_.size(); i++) {
        output.writeBytes(1, stakingTxHashList_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < stakingTxHashList_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(stakingTxHashList_.get(i));
        }
        size += dataSize;
        size += 1 * getStakingTxHashListList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex other = (com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex) obj;

      if (!getStakingTxHashListList()
          .equals(other.getStakingTxHashListList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getStakingTxHashListCount() > 0) {
        hash = (37 * hash) + STAKING_TX_HASH_LIST_FIELD_NUMBER;
        hash = (53 * hash) + getStakingTxHashListList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * BTCDelegatorDelegationIndex is a list of staking tx hashes of BTC delegations from the same delegator.
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.BTCDelegatorDelegationIndex}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.BTCDelegatorDelegationIndex)
        com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndexOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegatorDelegationIndex_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegatorDelegationIndex_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex.class, com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        stakingTxHashList_ = java.util.Collections.emptyList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_BTCDelegatorDelegationIndex_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex build() {
        com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex buildPartial() {
        com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex result = new com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex result) {
        if (((bitField0_ & 0x00000001) != 0)) {
          stakingTxHashList_ = java.util.Collections.unmodifiableList(stakingTxHashList_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.stakingTxHashList_ = stakingTxHashList_;
      }

      private void buildPartial0(com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex) {
          return mergeFrom((com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex other) {
        if (other == com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex.getDefaultInstance()) return this;
        if (!other.stakingTxHashList_.isEmpty()) {
          if (stakingTxHashList_.isEmpty()) {
            stakingTxHashList_ = other.stakingTxHashList_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureStakingTxHashListIsMutable();
            stakingTxHashList_.addAll(other.stakingTxHashList_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.google.protobuf.ByteString v = input.readBytes();
                ensureStakingTxHashListIsMutable();
                stakingTxHashList_.add(v);
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<com.google.protobuf.ByteString> stakingTxHashList_ = java.util.Collections.emptyList();
      private void ensureStakingTxHashListIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          stakingTxHashList_ = new java.util.ArrayList<com.google.protobuf.ByteString>(stakingTxHashList_);
          bitField0_ |= 0x00000001;
        }
      }
      /**
       * <code>repeated bytes staking_tx_hash_list = 1 [json_name = "stakingTxHashList"];</code>
       * @return A list containing the stakingTxHashList.
       */
      public java.util.List<com.google.protobuf.ByteString>
          getStakingTxHashListList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(stakingTxHashList_) : stakingTxHashList_;
      }
      /**
       * <code>repeated bytes staking_tx_hash_list = 1 [json_name = "stakingTxHashList"];</code>
       * @return The count of stakingTxHashList.
       */
      public int getStakingTxHashListCount() {
        return stakingTxHashList_.size();
      }
      /**
       * <code>repeated bytes staking_tx_hash_list = 1 [json_name = "stakingTxHashList"];</code>
       * @param index The index of the element to return.
       * @return The stakingTxHashList at the given index.
       */
      public com.google.protobuf.ByteString getStakingTxHashList(int index) {
        return stakingTxHashList_.get(index);
      }
      /**
       * <code>repeated bytes staking_tx_hash_list = 1 [json_name = "stakingTxHashList"];</code>
       * @param index The index to set the value at.
       * @param value The stakingTxHashList to set.
       * @return This builder for chaining.
       */
      public Builder setStakingTxHashList(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureStakingTxHashListIsMutable();
        stakingTxHashList_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes staking_tx_hash_list = 1 [json_name = "stakingTxHashList"];</code>
       * @param value The stakingTxHashList to add.
       * @return This builder for chaining.
       */
      public Builder addStakingTxHashList(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureStakingTxHashListIsMutable();
        stakingTxHashList_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes staking_tx_hash_list = 1 [json_name = "stakingTxHashList"];</code>
       * @param values The stakingTxHashList to add.
       * @return This builder for chaining.
       */
      public Builder addAllStakingTxHashList(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureStakingTxHashListIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, stakingTxHashList_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes staking_tx_hash_list = 1 [json_name = "stakingTxHashList"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStakingTxHashList() {
        stakingTxHashList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.BTCDelegatorDelegationIndex)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.BTCDelegatorDelegationIndex)
    private static final com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex();
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCDelegatorDelegationIndex>
        PARSER = new com.google.protobuf.AbstractParser<BTCDelegatorDelegationIndex>() {
      @java.lang.Override
      public BTCDelegatorDelegationIndex parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCDelegatorDelegationIndex> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCDelegatorDelegationIndex> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.BTCDelegatorDelegationIndex getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SignatureInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.SignatureInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bytes pk = 1 [json_name = "pk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return The pk.
     */
    com.google.protobuf.ByteString getPk();

    /**
     * <code>bytes sig = 2 [json_name = "sig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
     * @return The sig.
     */
    com.google.protobuf.ByteString getSig();
  }
  /**
   * <pre>
   * SignatureInfo is a BIP-340 signature together with its signer's BIP-340 PK
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.SignatureInfo}
   */
  public static final class SignatureInfo extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.SignatureInfo)
      SignatureInfoOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SignatureInfo.newBuilder() to construct.
    private SignatureInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SignatureInfo() {
      pk_ = com.google.protobuf.ByteString.EMPTY;
      sig_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SignatureInfo();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_SignatureInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_SignatureInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.class, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder.class);
    }

    public static final int PK_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString pk_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes pk = 1 [json_name = "pk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return The pk.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPk() {
      return pk_;
    }

    public static final int SIG_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString sig_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes sig = 2 [json_name = "sig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
     * @return The sig.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSig() {
      return sig_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!pk_.isEmpty()) {
        output.writeBytes(1, pk_);
      }
      if (!sig_.isEmpty()) {
        output.writeBytes(2, sig_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!pk_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, pk_);
      }
      if (!sig_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, sig_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo other = (com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo) obj;

      if (!getPk()
          .equals(other.getPk())) return false;
      if (!getSig()
          .equals(other.getSig())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PK_FIELD_NUMBER;
      hash = (53 * hash) + getPk().hashCode();
      hash = (37 * hash) + SIG_FIELD_NUMBER;
      hash = (53 * hash) + getSig().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SignatureInfo is a BIP-340 signature together with its signer's BIP-340 PK
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.SignatureInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.SignatureInfo)
        com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_SignatureInfo_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_SignatureInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.class, com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        pk_ = com.google.protobuf.ByteString.EMPTY;
        sig_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_SignatureInfo_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo build() {
        com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo buildPartial() {
        com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo result = new com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.pk_ = pk_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.sig_ = sig_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo) {
          return mergeFrom((com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo other) {
        if (other == com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo.getDefaultInstance()) return this;
        if (other.getPk() != com.google.protobuf.ByteString.EMPTY) {
          setPk(other.getPk());
        }
        if (other.getSig() != com.google.protobuf.ByteString.EMPTY) {
          setSig(other.getSig());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                pk_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                sig_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString pk_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes pk = 1 [json_name = "pk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return The pk.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPk() {
        return pk_;
      }
      /**
       * <code>bytes pk = 1 [json_name = "pk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @param value The pk to set.
       * @return This builder for chaining.
       */
      public Builder setPk(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        pk_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>bytes pk = 1 [json_name = "pk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return This builder for chaining.
       */
      public Builder clearPk() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pk_ = getDefaultInstance().getPk();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString sig_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes sig = 2 [json_name = "sig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
       * @return The sig.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSig() {
        return sig_;
      }
      /**
       * <code>bytes sig = 2 [json_name = "sig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
       * @param value The sig to set.
       * @return This builder for chaining.
       */
      public Builder setSig(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        sig_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>bytes sig = 2 [json_name = "sig", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340Signature"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSig() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sig_ = getDefaultInstance().getSig();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.SignatureInfo)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.SignatureInfo)
    private static final com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo();
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SignatureInfo>
        PARSER = new com.google.protobuf.AbstractParser<SignatureInfo>() {
      @java.lang.Override
      public SignatureInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SignatureInfo> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SignatureInfo> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.SignatureInfo getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CovenantAdaptorSignaturesOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.CovenantAdaptorSignatures)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * cov_pk is the public key of the covenant emulator, used as the public key of the adaptor signature
     * </pre>
     *
     * <code>bytes cov_pk = 1 [json_name = "covPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return The covPk.
     */
    com.google.protobuf.ByteString getCovPk();

    /**
     * <pre>
     * adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
     * </pre>
     *
     * <code>repeated bytes adaptor_sigs = 2 [json_name = "adaptorSigs"];</code>
     * @return A list containing the adaptorSigs.
     */
    java.util.List<com.google.protobuf.ByteString> getAdaptorSigsList();
    /**
     * <pre>
     * adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
     * </pre>
     *
     * <code>repeated bytes adaptor_sigs = 2 [json_name = "adaptorSigs"];</code>
     * @return The count of adaptorSigs.
     */
    int getAdaptorSigsCount();
    /**
     * <pre>
     * adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
     * </pre>
     *
     * <code>repeated bytes adaptor_sigs = 2 [json_name = "adaptorSigs"];</code>
     * @param index The index of the element to return.
     * @return The adaptorSigs at the given index.
     */
    com.google.protobuf.ByteString getAdaptorSigs(int index);
  }
  /**
   * <pre>
   * CovenantAdaptorSignatures is a list adaptor signatures signed by the
   * covenant with different finality provider's public keys as encryption keys
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.CovenantAdaptorSignatures}
   */
  public static final class CovenantAdaptorSignatures extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.CovenantAdaptorSignatures)
      CovenantAdaptorSignaturesOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CovenantAdaptorSignatures.newBuilder() to construct.
    private CovenantAdaptorSignatures(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CovenantAdaptorSignatures() {
      covPk_ = com.google.protobuf.ByteString.EMPTY;
      adaptorSigs_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CovenantAdaptorSignatures();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_CovenantAdaptorSignatures_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_CovenantAdaptorSignatures_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.class, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder.class);
    }

    public static final int COV_PK_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString covPk_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * cov_pk is the public key of the covenant emulator, used as the public key of the adaptor signature
     * </pre>
     *
     * <code>bytes cov_pk = 1 [json_name = "covPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return The covPk.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getCovPk() {
      return covPk_;
    }

    public static final int ADAPTOR_SIGS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<com.google.protobuf.ByteString> adaptorSigs_;
    /**
     * <pre>
     * adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
     * </pre>
     *
     * <code>repeated bytes adaptor_sigs = 2 [json_name = "adaptorSigs"];</code>
     * @return A list containing the adaptorSigs.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.ByteString>
        getAdaptorSigsList() {
      return adaptorSigs_;
    }
    /**
     * <pre>
     * adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
     * </pre>
     *
     * <code>repeated bytes adaptor_sigs = 2 [json_name = "adaptorSigs"];</code>
     * @return The count of adaptorSigs.
     */
    public int getAdaptorSigsCount() {
      return adaptorSigs_.size();
    }
    /**
     * <pre>
     * adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
     * </pre>
     *
     * <code>repeated bytes adaptor_sigs = 2 [json_name = "adaptorSigs"];</code>
     * @param index The index of the element to return.
     * @return The adaptorSigs at the given index.
     */
    public com.google.protobuf.ByteString getAdaptorSigs(int index) {
      return adaptorSigs_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!covPk_.isEmpty()) {
        output.writeBytes(1, covPk_);
      }
      for (int i = 0; i < adaptorSigs_.size(); i++) {
        output.writeBytes(2, adaptorSigs_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!covPk_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, covPk_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < adaptorSigs_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(adaptorSigs_.get(i));
        }
        size += dataSize;
        size += 1 * getAdaptorSigsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures other = (com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures) obj;

      if (!getCovPk()
          .equals(other.getCovPk())) return false;
      if (!getAdaptorSigsList()
          .equals(other.getAdaptorSigsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + COV_PK_FIELD_NUMBER;
      hash = (53 * hash) + getCovPk().hashCode();
      if (getAdaptorSigsCount() > 0) {
        hash = (37 * hash) + ADAPTOR_SIGS_FIELD_NUMBER;
        hash = (53 * hash) + getAdaptorSigsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * CovenantAdaptorSignatures is a list adaptor signatures signed by the
     * covenant with different finality provider's public keys as encryption keys
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.CovenantAdaptorSignatures}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.CovenantAdaptorSignatures)
        com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignaturesOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_CovenantAdaptorSignatures_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_CovenantAdaptorSignatures_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.class, com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        covPk_ = com.google.protobuf.ByteString.EMPTY;
        adaptorSigs_ = java.util.Collections.emptyList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_CovenantAdaptorSignatures_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures build() {
        com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures buildPartial() {
        com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures result = new com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures result) {
        if (((bitField0_ & 0x00000002) != 0)) {
          adaptorSigs_ = java.util.Collections.unmodifiableList(adaptorSigs_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.adaptorSigs_ = adaptorSigs_;
      }

      private void buildPartial0(com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.covPk_ = covPk_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures) {
          return mergeFrom((com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures other) {
        if (other == com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures.getDefaultInstance()) return this;
        if (other.getCovPk() != com.google.protobuf.ByteString.EMPTY) {
          setCovPk(other.getCovPk());
        }
        if (!other.adaptorSigs_.isEmpty()) {
          if (adaptorSigs_.isEmpty()) {
            adaptorSigs_ = other.adaptorSigs_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureAdaptorSigsIsMutable();
            adaptorSigs_.addAll(other.adaptorSigs_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                covPk_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                com.google.protobuf.ByteString v = input.readBytes();
                ensureAdaptorSigsIsMutable();
                adaptorSigs_.add(v);
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString covPk_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * cov_pk is the public key of the covenant emulator, used as the public key of the adaptor signature
       * </pre>
       *
       * <code>bytes cov_pk = 1 [json_name = "covPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return The covPk.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getCovPk() {
        return covPk_;
      }
      /**
       * <pre>
       * cov_pk is the public key of the covenant emulator, used as the public key of the adaptor signature
       * </pre>
       *
       * <code>bytes cov_pk = 1 [json_name = "covPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @param value The covPk to set.
       * @return This builder for chaining.
       */
      public Builder setCovPk(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        covPk_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * cov_pk is the public key of the covenant emulator, used as the public key of the adaptor signature
       * </pre>
       *
       * <code>bytes cov_pk = 1 [json_name = "covPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return This builder for chaining.
       */
      public Builder clearCovPk() {
        bitField0_ = (bitField0_ & ~0x00000001);
        covPk_ = getDefaultInstance().getCovPk();
        onChanged();
        return this;
      }

      private java.util.List<com.google.protobuf.ByteString> adaptorSigs_ = java.util.Collections.emptyList();
      private void ensureAdaptorSigsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          adaptorSigs_ = new java.util.ArrayList<com.google.protobuf.ByteString>(adaptorSigs_);
          bitField0_ |= 0x00000002;
        }
      }
      /**
       * <pre>
       * adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
       * </pre>
       *
       * <code>repeated bytes adaptor_sigs = 2 [json_name = "adaptorSigs"];</code>
       * @return A list containing the adaptorSigs.
       */
      public java.util.List<com.google.protobuf.ByteString>
          getAdaptorSigsList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(adaptorSigs_) : adaptorSigs_;
      }
      /**
       * <pre>
       * adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
       * </pre>
       *
       * <code>repeated bytes adaptor_sigs = 2 [json_name = "adaptorSigs"];</code>
       * @return The count of adaptorSigs.
       */
      public int getAdaptorSigsCount() {
        return adaptorSigs_.size();
      }
      /**
       * <pre>
       * adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
       * </pre>
       *
       * <code>repeated bytes adaptor_sigs = 2 [json_name = "adaptorSigs"];</code>
       * @param index The index of the element to return.
       * @return The adaptorSigs at the given index.
       */
      public com.google.protobuf.ByteString getAdaptorSigs(int index) {
        return adaptorSigs_.get(index);
      }
      /**
       * <pre>
       * adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
       * </pre>
       *
       * <code>repeated bytes adaptor_sigs = 2 [json_name = "adaptorSigs"];</code>
       * @param index The index to set the value at.
       * @param value The adaptorSigs to set.
       * @return This builder for chaining.
       */
      public Builder setAdaptorSigs(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureAdaptorSigsIsMutable();
        adaptorSigs_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
       * </pre>
       *
       * <code>repeated bytes adaptor_sigs = 2 [json_name = "adaptorSigs"];</code>
       * @param value The adaptorSigs to add.
       * @return This builder for chaining.
       */
      public Builder addAdaptorSigs(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        ensureAdaptorSigsIsMutable();
        adaptorSigs_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
       * </pre>
       *
       * <code>repeated bytes adaptor_sigs = 2 [json_name = "adaptorSigs"];</code>
       * @param values The adaptorSigs to add.
       * @return This builder for chaining.
       */
      public Builder addAllAdaptorSigs(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureAdaptorSigsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, adaptorSigs_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * adaptor_sigs is a list of adaptor signatures, each encrypted by a restaked BTC finality provider's public key
       * </pre>
       *
       * <code>repeated bytes adaptor_sigs = 2 [json_name = "adaptorSigs"];</code>
       * @return This builder for chaining.
       */
      public Builder clearAdaptorSigs() {
        adaptorSigs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.CovenantAdaptorSignatures)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.CovenantAdaptorSignatures)
    private static final com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures();
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CovenantAdaptorSignatures>
        PARSER = new com.google.protobuf.AbstractParser<CovenantAdaptorSignatures>() {
      @java.lang.Override
      public CovenantAdaptorSignatures parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CovenantAdaptorSignatures> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CovenantAdaptorSignatures> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.CovenantAdaptorSignatures getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SelectiveSlashingEvidenceOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.btcstaking.v1.SelectiveSlashingEvidence)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * staking_tx_hash is the hash of the staking tx.
     * It uniquely identifies a BTC delegation
     * </pre>
     *
     * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
     * @return The stakingTxHash.
     */
    java.lang.String getStakingTxHash();
    /**
     * <pre>
     * staking_tx_hash is the hash of the staking tx.
     * It uniquely identifies a BTC delegation
     * </pre>
     *
     * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
     * @return The bytes for stakingTxHash.
     */
    com.google.protobuf.ByteString
        getStakingTxHashBytes();

    /**
     * <pre>
     * fp_btc_pk is the BTC PK of the finality provider who
     * launches the selective slashing offence
     * </pre>
     *
     * <code>bytes fp_btc_pk = 2 [json_name = "fpBtcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return The fpBtcPk.
     */
    com.google.protobuf.ByteString getFpBtcPk();

    /**
     * <pre>
     * recovered_fp_btc_sk is the finality provider's BTC SK recovered from
     * the covenant adaptor/Schnorr signature pair. It is the consequence
     * of selective slashing.
     * </pre>
     *
     * <code>bytes recovered_fp_btc_sk = 3 [json_name = "recoveredFpBtcSk"];</code>
     * @return The recoveredFpBtcSk.
     */
    com.google.protobuf.ByteString getRecoveredFpBtcSk();
  }
  /**
   * <pre>
   * SelectiveSlashingEvidence is the evidence that the finality provider
   * selectively slashed a BTC delegation
   * NOTE: it's possible that a slashed finality provider exploits the
   * SelectiveSlashingEvidence endpoint while it is actually slashed due to
   * equivocation. But such behaviour does not affect the system's security
   * or gives any benefit for the adversary
   * </pre>
   *
   * Protobuf type {@code babylon.btcstaking.v1.SelectiveSlashingEvidence}
   */
  public static final class SelectiveSlashingEvidence extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.btcstaking.v1.SelectiveSlashingEvidence)
      SelectiveSlashingEvidenceOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SelectiveSlashingEvidence.newBuilder() to construct.
    private SelectiveSlashingEvidence(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SelectiveSlashingEvidence() {
      stakingTxHash_ = "";
      fpBtcPk_ = com.google.protobuf.ByteString.EMPTY;
      recoveredFpBtcSk_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SelectiveSlashingEvidence();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_SelectiveSlashingEvidence_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_SelectiveSlashingEvidence_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence.class, com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence.Builder.class);
    }

    public static final int STAKING_TX_HASH_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object stakingTxHash_ = "";
    /**
     * <pre>
     * staking_tx_hash is the hash of the staking tx.
     * It uniquely identifies a BTC delegation
     * </pre>
     *
     * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
     * @return The stakingTxHash.
     */
    @java.lang.Override
    public java.lang.String getStakingTxHash() {
      java.lang.Object ref = stakingTxHash_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stakingTxHash_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * staking_tx_hash is the hash of the staking tx.
     * It uniquely identifies a BTC delegation
     * </pre>
     *
     * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
     * @return The bytes for stakingTxHash.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getStakingTxHashBytes() {
      java.lang.Object ref = stakingTxHash_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stakingTxHash_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FP_BTC_PK_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString fpBtcPk_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * fp_btc_pk is the BTC PK of the finality provider who
     * launches the selective slashing offence
     * </pre>
     *
     * <code>bytes fp_btc_pk = 2 [json_name = "fpBtcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
     * @return The fpBtcPk.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getFpBtcPk() {
      return fpBtcPk_;
    }

    public static final int RECOVERED_FP_BTC_SK_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString recoveredFpBtcSk_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * recovered_fp_btc_sk is the finality provider's BTC SK recovered from
     * the covenant adaptor/Schnorr signature pair. It is the consequence
     * of selective slashing.
     * </pre>
     *
     * <code>bytes recovered_fp_btc_sk = 3 [json_name = "recoveredFpBtcSk"];</code>
     * @return The recoveredFpBtcSk.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getRecoveredFpBtcSk() {
      return recoveredFpBtcSk_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stakingTxHash_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stakingTxHash_);
      }
      if (!fpBtcPk_.isEmpty()) {
        output.writeBytes(2, fpBtcPk_);
      }
      if (!recoveredFpBtcSk_.isEmpty()) {
        output.writeBytes(3, recoveredFpBtcSk_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stakingTxHash_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stakingTxHash_);
      }
      if (!fpBtcPk_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, fpBtcPk_);
      }
      if (!recoveredFpBtcSk_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, recoveredFpBtcSk_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence)) {
        return super.equals(obj);
      }
      com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence other = (com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence) obj;

      if (!getStakingTxHash()
          .equals(other.getStakingTxHash())) return false;
      if (!getFpBtcPk()
          .equals(other.getFpBtcPk())) return false;
      if (!getRecoveredFpBtcSk()
          .equals(other.getRecoveredFpBtcSk())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + STAKING_TX_HASH_FIELD_NUMBER;
      hash = (53 * hash) + getStakingTxHash().hashCode();
      hash = (37 * hash) + FP_BTC_PK_FIELD_NUMBER;
      hash = (53 * hash) + getFpBtcPk().hashCode();
      hash = (37 * hash) + RECOVERED_FP_BTC_SK_FIELD_NUMBER;
      hash = (53 * hash) + getRecoveredFpBtcSk().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * SelectiveSlashingEvidence is the evidence that the finality provider
     * selectively slashed a BTC delegation
     * NOTE: it's possible that a slashed finality provider exploits the
     * SelectiveSlashingEvidence endpoint while it is actually slashed due to
     * equivocation. But such behaviour does not affect the system's security
     * or gives any benefit for the adversary
     * </pre>
     *
     * Protobuf type {@code babylon.btcstaking.v1.SelectiveSlashingEvidence}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.btcstaking.v1.SelectiveSlashingEvidence)
        com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidenceOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_SelectiveSlashingEvidence_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_SelectiveSlashingEvidence_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence.class, com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence.Builder.class);
      }

      // Construct using com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        stakingTxHash_ = "";
        fpBtcPk_ = com.google.protobuf.ByteString.EMPTY;
        recoveredFpBtcSk_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.internal_static_babylon_btcstaking_v1_SelectiveSlashingEvidence_descriptor;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence getDefaultInstanceForType() {
        return com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence build() {
        com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence buildPartial() {
        com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence result = new com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.stakingTxHash_ = stakingTxHash_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.fpBtcPk_ = fpBtcPk_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.recoveredFpBtcSk_ = recoveredFpBtcSk_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence) {
          return mergeFrom((com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence other) {
        if (other == com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence.getDefaultInstance()) return this;
        if (!other.getStakingTxHash().isEmpty()) {
          stakingTxHash_ = other.stakingTxHash_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (other.getFpBtcPk() != com.google.protobuf.ByteString.EMPTY) {
          setFpBtcPk(other.getFpBtcPk());
        }
        if (other.getRecoveredFpBtcSk() != com.google.protobuf.ByteString.EMPTY) {
          setRecoveredFpBtcSk(other.getRecoveredFpBtcSk());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                stakingTxHash_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                fpBtcPk_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                recoveredFpBtcSk_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object stakingTxHash_ = "";
      /**
       * <pre>
       * staking_tx_hash is the hash of the staking tx.
       * It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @return The stakingTxHash.
       */
      public java.lang.String getStakingTxHash() {
        java.lang.Object ref = stakingTxHash_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          stakingTxHash_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * staking_tx_hash is the hash of the staking tx.
       * It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @return The bytes for stakingTxHash.
       */
      public com.google.protobuf.ByteString
          getStakingTxHashBytes() {
        java.lang.Object ref = stakingTxHash_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          stakingTxHash_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * staking_tx_hash is the hash of the staking tx.
       * It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @param value The stakingTxHash to set.
       * @return This builder for chaining.
       */
      public Builder setStakingTxHash(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        stakingTxHash_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staking_tx_hash is the hash of the staking tx.
       * It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStakingTxHash() {
        stakingTxHash_ = getDefaultInstance().getStakingTxHash();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * staking_tx_hash is the hash of the staking tx.
       * It uniquely identifies a BTC delegation
       * </pre>
       *
       * <code>string staking_tx_hash = 1 [json_name = "stakingTxHash"];</code>
       * @param value The bytes for stakingTxHash to set.
       * @return This builder for chaining.
       */
      public Builder setStakingTxHashBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        stakingTxHash_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString fpBtcPk_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * fp_btc_pk is the BTC PK of the finality provider who
       * launches the selective slashing offence
       * </pre>
       *
       * <code>bytes fp_btc_pk = 2 [json_name = "fpBtcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return The fpBtcPk.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getFpBtcPk() {
        return fpBtcPk_;
      }
      /**
       * <pre>
       * fp_btc_pk is the BTC PK of the finality provider who
       * launches the selective slashing offence
       * </pre>
       *
       * <code>bytes fp_btc_pk = 2 [json_name = "fpBtcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @param value The fpBtcPk to set.
       * @return This builder for chaining.
       */
      public Builder setFpBtcPk(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        fpBtcPk_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * fp_btc_pk is the BTC PK of the finality provider who
       * launches the selective slashing offence
       * </pre>
       *
       * <code>bytes fp_btc_pk = 2 [json_name = "fpBtcPk", (.gogoproto.customtype) = "github.com/babylonchain/babylon/types.BIP340PubKey"];</code>
       * @return This builder for chaining.
       */
      public Builder clearFpBtcPk() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fpBtcPk_ = getDefaultInstance().getFpBtcPk();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString recoveredFpBtcSk_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * recovered_fp_btc_sk is the finality provider's BTC SK recovered from
       * the covenant adaptor/Schnorr signature pair. It is the consequence
       * of selective slashing.
       * </pre>
       *
       * <code>bytes recovered_fp_btc_sk = 3 [json_name = "recoveredFpBtcSk"];</code>
       * @return The recoveredFpBtcSk.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getRecoveredFpBtcSk() {
        return recoveredFpBtcSk_;
      }
      /**
       * <pre>
       * recovered_fp_btc_sk is the finality provider's BTC SK recovered from
       * the covenant adaptor/Schnorr signature pair. It is the consequence
       * of selective slashing.
       * </pre>
       *
       * <code>bytes recovered_fp_btc_sk = 3 [json_name = "recoveredFpBtcSk"];</code>
       * @param value The recoveredFpBtcSk to set.
       * @return This builder for chaining.
       */
      public Builder setRecoveredFpBtcSk(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        recoveredFpBtcSk_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * recovered_fp_btc_sk is the finality provider's BTC SK recovered from
       * the covenant adaptor/Schnorr signature pair. It is the consequence
       * of selective slashing.
       * </pre>
       *
       * <code>bytes recovered_fp_btc_sk = 3 [json_name = "recoveredFpBtcSk"];</code>
       * @return This builder for chaining.
       */
      public Builder clearRecoveredFpBtcSk() {
        bitField0_ = (bitField0_ & ~0x00000004);
        recoveredFpBtcSk_ = getDefaultInstance().getRecoveredFpBtcSk();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.btcstaking.v1.SelectiveSlashingEvidence)
    }

    // @@protoc_insertion_point(class_scope:babylon.btcstaking.v1.SelectiveSlashingEvidence)
    private static final com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence();
    }

    public static com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SelectiveSlashingEvidence>
        PARSER = new com.google.protobuf.AbstractParser<SelectiveSlashingEvidence>() {
      @java.lang.Override
      public SelectiveSlashingEvidence parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<SelectiveSlashingEvidence> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SelectiveSlashingEvidence> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.btcstaking.v1.BtcstakingProto.SelectiveSlashingEvidence getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_FinalityProvider_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_FinalityProvider_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_FinalityProviderWithMeta_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_FinalityProviderWithMeta_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_BTCDelegation_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_BTCDelegation_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_BTCUndelegation_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_BTCUndelegation_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_BTCDelegatorDelegations_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_BTCDelegatorDelegations_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_BTCDelegatorDelegationIndex_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_BTCDelegatorDelegationIndex_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_SignatureInfo_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_SignatureInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_CovenantAdaptorSignatures_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_CovenantAdaptorSignatures_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_btcstaking_v1_SelectiveSlashingEvidence_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_btcstaking_v1_SelectiveSlashingEvidence_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n&babylon/btcstaking/v1/btcstaking.proto" +
      "\022\025babylon.btcstaking.v1\032\024gogoproto/gogo." +
      "proto\032\031cosmos_proto/cosmos.proto\032$cosmos" +
      "/staking/v1beta1/staking.proto\032\037babylon/" +
      "btcstaking/v1/pop.proto\"\344\003\n\020FinalityProv" +
      "ider\022,\n\004addr\030\001 \001(\tB\030\322\264-\024cosmos.AddressSt" +
      "ringR\004addr\022E\n\013description\030\002 \001(\0132#.cosmos" +
      ".staking.v1beta1.DescriptionR\013descriptio" +
      "n\022M\n\ncommission\030\003 \001(\tB-\332\336\037\033cosmossdk.io/" +
      "math.LegacyDec\322\264-\ncosmos.DecR\ncommission" +
      "\022M\n\006btc_pk\030\004 \001(\014B6\332\336\0372github.com/babylon" +
      "chain/babylon/types.BIP340PubKeyR\005btcPk\022" +
      "=\n\003pop\030\005 \001(\0132+.babylon.btcstaking.v1.Pro" +
      "ofOfPossessionBTCR\003pop\0224\n\026slashed_babylo" +
      "n_height\030\006 \001(\004R\024slashedBabylonHeight\022,\n\022" +
      "slashed_btc_height\030\007 \001(\004R\020slashedBtcHeig" +
      "ht\022\032\n\010sluggish\030\010 \001(\010R\010sluggish\"\244\002\n\030Final" +
      "ityProviderWithMeta\022M\n\006btc_pk\030\001 \001(\014B6\332\336\037" +
      "2github.com/babylonchain/babylon/types.B" +
      "IP340PubKeyR\005btcPk\022\026\n\006height\030\002 \001(\004R\006heig" +
      "ht\022!\n\014voting_power\030\003 \001(\004R\013votingPower\0224\n" +
      "\026slashed_babylon_height\030\004 \001(\004R\024slashedBa" +
      "bylonHeight\022,\n\022slashed_btc_height\030\005 \001(\004R" +
      "\020slashedBtcHeight\022\032\n\010sluggish\030\006 \001(\010R\010slu" +
      "ggish\"\355\006\n\rBTCDelegation\0229\n\013staker_addr\030\001" +
      " \001(\tB\030\322\264-\024cosmos.AddressStringR\nstakerAd" +
      "dr\022M\n\006btc_pk\030\002 \001(\014B6\332\336\0372github.com/babyl" +
      "onchain/babylon/types.BIP340PubKeyR\005btcP" +
      "k\022=\n\003pop\030\003 \001(\0132+.babylon.btcstaking.v1.P" +
      "roofOfPossessionBTCR\003pop\022[\n\016fp_btc_pk_li" +
      "st\030\004 \003(\014B6\332\336\0372github.com/babylonchain/ba" +
      "bylon/types.BIP340PubKeyR\013fpBtcPkList\022!\n" +
      "\014start_height\030\005 \001(\004R\013startHeight\022\035\n\nend_" +
      "height\030\006 \001(\004R\tendHeight\022\033\n\ttotal_sat\030\007 \001" +
      "(\004R\010totalSat\022\035\n\nstaking_tx\030\010 \001(\014R\tstakin" +
      "gTx\022,\n\022staking_output_idx\030\t \001(\rR\020staking" +
      "OutputIdx\0222\n\013slashing_tx\030\n \001(\014B\021\332\336\037\rBTCS" +
      "lashingTxR\nslashingTx\022^\n\rdelegator_sig\030\013" +
      " \001(\014B9\332\336\0375github.com/babylonchain/babylo" +
      "n/types.BIP340SignatureR\014delegatorSig\022U\n" +
      "\rcovenant_sigs\030\014 \003(\01320.babylon.btcstakin" +
      "g.v1.CovenantAdaptorSignaturesR\014covenant" +
      "Sigs\022%\n\016unbonding_time\030\r \001(\rR\runbondingT" +
      "ime\022Q\n\020btc_undelegation\030\016 \001(\0132&.babylon." +
      "btcstaking.v1.BTCUndelegationR\017btcUndele" +
      "gation\022%\n\016params_version\030\017 \001(\rR\rparamsVe" +
      "rsion\"\231\004\n\017BTCUndelegation\022!\n\014unbonding_t" +
      "x\030\001 \001(\014R\013unbondingTx\0222\n\013slashing_tx\030\002 \001(" +
      "\014B\021\332\336\037\rBTCSlashingTxR\nslashingTx\022q\n\027dele" +
      "gator_unbonding_sig\030\003 \001(\014B9\332\336\0375github.co" +
      "m/babylonchain/babylon/types.BIP340Signa" +
      "tureR\025delegatorUnbondingSig\022o\n\026delegator" +
      "_slashing_sig\030\004 \001(\014B9\332\336\0375github.com/baby" +
      "lonchain/babylon/types.BIP340SignatureR\024" +
      "delegatorSlashingSig\022f\n\026covenant_slashin" +
      "g_sigs\030\005 \003(\01320.babylon.btcstaking.v1.Cov" +
      "enantAdaptorSignaturesR\024covenantSlashing" +
      "Sigs\022c\n\033covenant_unbonding_sig_list\030\006 \003(" +
      "\0132$.babylon.btcstaking.v1.SignatureInfoR" +
      "\030covenantUnbondingSigList\"S\n\027BTCDelegato" +
      "rDelegations\0228\n\004dels\030\001 \003(\0132$.babylon.btc" +
      "staking.v1.BTCDelegationR\004dels\"N\n\033BTCDel" +
      "egatorDelegationIndex\022/\n\024staking_tx_hash" +
      "_list\030\001 \003(\014R\021stakingTxHashList\"\244\001\n\rSigna" +
      "tureInfo\022F\n\002pk\030\001 \001(\014B6\332\336\0372github.com/bab" +
      "ylonchain/babylon/types.BIP340PubKeyR\002pk" +
      "\022K\n\003sig\030\002 \001(\014B9\332\336\0375github.com/babyloncha" +
      "in/babylon/types.BIP340SignatureR\003sig\"\215\001" +
      "\n\031CovenantAdaptorSignatures\022M\n\006cov_pk\030\001 " +
      "\001(\014B6\332\336\0372github.com/babylonchain/babylon" +
      "/types.BIP340PubKeyR\005covPk\022!\n\014adaptor_si" +
      "gs\030\002 \003(\014R\013adaptorSigs\"\306\001\n\031SelectiveSlash" +
      "ingEvidence\022&\n\017staking_tx_hash\030\001 \001(\tR\rst" +
      "akingTxHash\022R\n\tfp_btc_pk\030\002 \001(\014B6\332\336\0372gith" +
      "ub.com/babylonchain/babylon/types.BIP340" +
      "PubKeyR\007fpBtcPk\022-\n\023recovered_fp_btc_sk\030\003" +
      " \001(\014R\020recoveredFpBtcSk*E\n\023BTCDelegationS" +
      "tatus\022\013\n\007PENDING\020\000\022\n\n\006ACTIVE\020\001\022\014\n\010UNBOND" +
      "ED\020\002\022\007\n\003ANY\020\003B\324\001\n\031com.babylon.btcstaking" +
      ".v1B\017BtcstakingProtoZ2github.com/babylon" +
      "chain/babylon/x/btcstaking/types\242\002\003BBX\252\002" +
      "\025Babylon.Btcstaking.V1\312\002\025Babylon\\Btcstak" +
      "ing\\V1\342\002!Babylon\\Btcstaking\\V1\\GPBMetada" +
      "ta\352\002\027Babylon::Btcstaking::V1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.gogoproto.GogoProto.getDescriptor(),
          com.cosmos_proto.CosmosProto.getDescriptor(),
          com.cosmos.staking.v1beta1.StakingProto.getDescriptor(),
          com.babylon.btcstaking.v1.PopProto.getDescriptor(),
        });
    internal_static_babylon_btcstaking_v1_FinalityProvider_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_babylon_btcstaking_v1_FinalityProvider_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_FinalityProvider_descriptor,
        new java.lang.String[] { "Addr", "Description", "Commission", "BtcPk", "Pop", "SlashedBabylonHeight", "SlashedBtcHeight", "Sluggish", });
    internal_static_babylon_btcstaking_v1_FinalityProviderWithMeta_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_babylon_btcstaking_v1_FinalityProviderWithMeta_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_FinalityProviderWithMeta_descriptor,
        new java.lang.String[] { "BtcPk", "Height", "VotingPower", "SlashedBabylonHeight", "SlashedBtcHeight", "Sluggish", });
    internal_static_babylon_btcstaking_v1_BTCDelegation_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_babylon_btcstaking_v1_BTCDelegation_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_BTCDelegation_descriptor,
        new java.lang.String[] { "StakerAddr", "BtcPk", "Pop", "FpBtcPkList", "StartHeight", "EndHeight", "TotalSat", "StakingTx", "StakingOutputIdx", "SlashingTx", "DelegatorSig", "CovenantSigs", "UnbondingTime", "BtcUndelegation", "ParamsVersion", });
    internal_static_babylon_btcstaking_v1_BTCUndelegation_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_babylon_btcstaking_v1_BTCUndelegation_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_BTCUndelegation_descriptor,
        new java.lang.String[] { "UnbondingTx", "SlashingTx", "DelegatorUnbondingSig", "DelegatorSlashingSig", "CovenantSlashingSigs", "CovenantUnbondingSigList", });
    internal_static_babylon_btcstaking_v1_BTCDelegatorDelegations_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_babylon_btcstaking_v1_BTCDelegatorDelegations_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_BTCDelegatorDelegations_descriptor,
        new java.lang.String[] { "Dels", });
    internal_static_babylon_btcstaking_v1_BTCDelegatorDelegationIndex_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_babylon_btcstaking_v1_BTCDelegatorDelegationIndex_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_BTCDelegatorDelegationIndex_descriptor,
        new java.lang.String[] { "StakingTxHashList", });
    internal_static_babylon_btcstaking_v1_SignatureInfo_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_babylon_btcstaking_v1_SignatureInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_SignatureInfo_descriptor,
        new java.lang.String[] { "Pk", "Sig", });
    internal_static_babylon_btcstaking_v1_CovenantAdaptorSignatures_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_babylon_btcstaking_v1_CovenantAdaptorSignatures_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_CovenantAdaptorSignatures_descriptor,
        new java.lang.String[] { "CovPk", "AdaptorSigs", });
    internal_static_babylon_btcstaking_v1_SelectiveSlashingEvidence_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_babylon_btcstaking_v1_SelectiveSlashingEvidence_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_btcstaking_v1_SelectiveSlashingEvidence_descriptor,
        new java.lang.String[] { "StakingTxHash", "FpBtcPk", "RecoveredFpBtcSk", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.cosmos_proto.CosmosProto.scalar);
    registry.add(com.gogoproto.GogoProto.customtype);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.gogoproto.GogoProto.getDescriptor();
    com.cosmos_proto.CosmosProto.getDescriptor();
    com.cosmos.staking.v1beta1.StakingProto.getDescriptor();
    com.babylon.btcstaking.v1.PopProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
