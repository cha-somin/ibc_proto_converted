// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: babylon/checkpointing/v1/events.proto

package com.babylon.checkpointing.v1;

public final class EventsProto {
  private EventsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface EventCheckpointAccumulatingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.checkpointing.v1.EventCheckpointAccumulating)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return Whether the checkpoint field is set.
     */
    boolean hasCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return The checkpoint.
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder();
  }
  /**
   * <pre>
   * EventCheckpointAccumulating is emitted when a checkpoint reaches the
   * `Accumulating` state.
   * </pre>
   *
   * Protobuf type {@code babylon.checkpointing.v1.EventCheckpointAccumulating}
   */
  public static final class EventCheckpointAccumulating extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.checkpointing.v1.EventCheckpointAccumulating)
      EventCheckpointAccumulatingOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EventCheckpointAccumulating.newBuilder() to construct.
    private EventCheckpointAccumulating(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EventCheckpointAccumulating() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EventCheckpointAccumulating();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointAccumulating_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointAccumulating_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating.class, com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating.Builder.class);
    }

    public static final int CHECKPOINT_FIELD_NUMBER = 1;
    private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta checkpoint_;
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return Whether the checkpoint field is set.
     */
    @java.lang.Override
    public boolean hasCheckpoint() {
      return checkpoint_ != null;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return The checkpoint.
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint() {
      return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder() {
      return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (checkpoint_ != null) {
        output.writeMessage(1, getCheckpoint());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (checkpoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCheckpoint());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating)) {
        return super.equals(obj);
      }
      com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating other = (com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating) obj;

      if (hasCheckpoint() != other.hasCheckpoint()) return false;
      if (hasCheckpoint()) {
        if (!getCheckpoint()
            .equals(other.getCheckpoint())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCheckpoint()) {
        hash = (37 * hash) + CHECKPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getCheckpoint().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * EventCheckpointAccumulating is emitted when a checkpoint reaches the
     * `Accumulating` state.
     * </pre>
     *
     * Protobuf type {@code babylon.checkpointing.v1.EventCheckpointAccumulating}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.checkpointing.v1.EventCheckpointAccumulating)
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulatingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointAccumulating_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointAccumulating_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating.class, com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating.Builder.class);
      }

      // Construct using com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        checkpoint_ = null;
        if (checkpointBuilder_ != null) {
          checkpointBuilder_.dispose();
          checkpointBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointAccumulating_descriptor;
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating getDefaultInstanceForType() {
        return com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating build() {
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating buildPartial() {
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating result = new com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.checkpoint_ = checkpointBuilder_ == null
              ? checkpoint_
              : checkpointBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating) {
          return mergeFrom((com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating other) {
        if (other == com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating.getDefaultInstance()) return this;
        if (other.hasCheckpoint()) {
          mergeCheckpoint(other.getCheckpoint());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getCheckpointFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta checkpoint_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder> checkpointBuilder_;
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       * @return Whether the checkpoint field is set.
       */
      public boolean hasCheckpoint() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       * @return The checkpoint.
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint() {
        if (checkpointBuilder_ == null) {
          return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
        } else {
          return checkpointBuilder_.getMessage();
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder setCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta value) {
        if (checkpointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          checkpoint_ = value;
        } else {
          checkpointBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder setCheckpoint(
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder builderForValue) {
        if (checkpointBuilder_ == null) {
          checkpoint_ = builderForValue.build();
        } else {
          checkpointBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder mergeCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta value) {
        if (checkpointBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            checkpoint_ != null &&
            checkpoint_ != com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance()) {
            getCheckpointBuilder().mergeFrom(value);
          } else {
            checkpoint_ = value;
          }
        } else {
          checkpointBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder clearCheckpoint() {
        bitField0_ = (bitField0_ & ~0x00000001);
        checkpoint_ = null;
        if (checkpointBuilder_ != null) {
          checkpointBuilder_.dispose();
          checkpointBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder getCheckpointBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCheckpointFieldBuilder().getBuilder();
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder() {
        if (checkpointBuilder_ != null) {
          return checkpointBuilder_.getMessageOrBuilder();
        } else {
          return checkpoint_ == null ?
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder> 
          getCheckpointFieldBuilder() {
        if (checkpointBuilder_ == null) {
          checkpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder>(
                  getCheckpoint(),
                  getParentForChildren(),
                  isClean());
          checkpoint_ = null;
        }
        return checkpointBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.checkpointing.v1.EventCheckpointAccumulating)
    }

    // @@protoc_insertion_point(class_scope:babylon.checkpointing.v1.EventCheckpointAccumulating)
    private static final com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating();
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EventCheckpointAccumulating>
        PARSER = new com.google.protobuf.AbstractParser<EventCheckpointAccumulating>() {
      @java.lang.Override
      public EventCheckpointAccumulating parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<EventCheckpointAccumulating> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EventCheckpointAccumulating> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.checkpointing.v1.EventsProto.EventCheckpointAccumulating getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EventCheckpointSealedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.checkpointing.v1.EventCheckpointSealed)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return Whether the checkpoint field is set.
     */
    boolean hasCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return The checkpoint.
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder();
  }
  /**
   * <pre>
   * EventCheckpointSealed is emitted when a checkpoint reaches the `Sealed`
   * state.
   * </pre>
   *
   * Protobuf type {@code babylon.checkpointing.v1.EventCheckpointSealed}
   */
  public static final class EventCheckpointSealed extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.checkpointing.v1.EventCheckpointSealed)
      EventCheckpointSealedOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EventCheckpointSealed.newBuilder() to construct.
    private EventCheckpointSealed(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EventCheckpointSealed() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EventCheckpointSealed();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointSealed_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointSealed_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed.class, com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed.Builder.class);
    }

    public static final int CHECKPOINT_FIELD_NUMBER = 1;
    private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta checkpoint_;
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return Whether the checkpoint field is set.
     */
    @java.lang.Override
    public boolean hasCheckpoint() {
      return checkpoint_ != null;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return The checkpoint.
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint() {
      return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder() {
      return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (checkpoint_ != null) {
        output.writeMessage(1, getCheckpoint());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (checkpoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCheckpoint());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed)) {
        return super.equals(obj);
      }
      com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed other = (com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed) obj;

      if (hasCheckpoint() != other.hasCheckpoint()) return false;
      if (hasCheckpoint()) {
        if (!getCheckpoint()
            .equals(other.getCheckpoint())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCheckpoint()) {
        hash = (37 * hash) + CHECKPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getCheckpoint().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * EventCheckpointSealed is emitted when a checkpoint reaches the `Sealed`
     * state.
     * </pre>
     *
     * Protobuf type {@code babylon.checkpointing.v1.EventCheckpointSealed}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.checkpointing.v1.EventCheckpointSealed)
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointSealed_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointSealed_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed.class, com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed.Builder.class);
      }

      // Construct using com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        checkpoint_ = null;
        if (checkpointBuilder_ != null) {
          checkpointBuilder_.dispose();
          checkpointBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointSealed_descriptor;
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed getDefaultInstanceForType() {
        return com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed build() {
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed buildPartial() {
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed result = new com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.checkpoint_ = checkpointBuilder_ == null
              ? checkpoint_
              : checkpointBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed) {
          return mergeFrom((com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed other) {
        if (other == com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed.getDefaultInstance()) return this;
        if (other.hasCheckpoint()) {
          mergeCheckpoint(other.getCheckpoint());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getCheckpointFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta checkpoint_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder> checkpointBuilder_;
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       * @return Whether the checkpoint field is set.
       */
      public boolean hasCheckpoint() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       * @return The checkpoint.
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint() {
        if (checkpointBuilder_ == null) {
          return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
        } else {
          return checkpointBuilder_.getMessage();
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder setCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta value) {
        if (checkpointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          checkpoint_ = value;
        } else {
          checkpointBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder setCheckpoint(
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder builderForValue) {
        if (checkpointBuilder_ == null) {
          checkpoint_ = builderForValue.build();
        } else {
          checkpointBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder mergeCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta value) {
        if (checkpointBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            checkpoint_ != null &&
            checkpoint_ != com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance()) {
            getCheckpointBuilder().mergeFrom(value);
          } else {
            checkpoint_ = value;
          }
        } else {
          checkpointBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder clearCheckpoint() {
        bitField0_ = (bitField0_ & ~0x00000001);
        checkpoint_ = null;
        if (checkpointBuilder_ != null) {
          checkpointBuilder_.dispose();
          checkpointBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder getCheckpointBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCheckpointFieldBuilder().getBuilder();
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder() {
        if (checkpointBuilder_ != null) {
          return checkpointBuilder_.getMessageOrBuilder();
        } else {
          return checkpoint_ == null ?
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder> 
          getCheckpointFieldBuilder() {
        if (checkpointBuilder_ == null) {
          checkpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder>(
                  getCheckpoint(),
                  getParentForChildren(),
                  isClean());
          checkpoint_ = null;
        }
        return checkpointBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.checkpointing.v1.EventCheckpointSealed)
    }

    // @@protoc_insertion_point(class_scope:babylon.checkpointing.v1.EventCheckpointSealed)
    private static final com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed();
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EventCheckpointSealed>
        PARSER = new com.google.protobuf.AbstractParser<EventCheckpointSealed>() {
      @java.lang.Override
      public EventCheckpointSealed parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<EventCheckpointSealed> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EventCheckpointSealed> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.checkpointing.v1.EventsProto.EventCheckpointSealed getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EventCheckpointSubmittedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.checkpointing.v1.EventCheckpointSubmitted)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return Whether the checkpoint field is set.
     */
    boolean hasCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return The checkpoint.
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder();
  }
  /**
   * <pre>
   * EventCheckpointSubmitted is emitted when a checkpoint reaches the `Submitted`
   * state.
   * </pre>
   *
   * Protobuf type {@code babylon.checkpointing.v1.EventCheckpointSubmitted}
   */
  public static final class EventCheckpointSubmitted extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.checkpointing.v1.EventCheckpointSubmitted)
      EventCheckpointSubmittedOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EventCheckpointSubmitted.newBuilder() to construct.
    private EventCheckpointSubmitted(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EventCheckpointSubmitted() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EventCheckpointSubmitted();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointSubmitted_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointSubmitted_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted.class, com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted.Builder.class);
    }

    public static final int CHECKPOINT_FIELD_NUMBER = 1;
    private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta checkpoint_;
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return Whether the checkpoint field is set.
     */
    @java.lang.Override
    public boolean hasCheckpoint() {
      return checkpoint_ != null;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return The checkpoint.
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint() {
      return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder() {
      return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (checkpoint_ != null) {
        output.writeMessage(1, getCheckpoint());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (checkpoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCheckpoint());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted)) {
        return super.equals(obj);
      }
      com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted other = (com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted) obj;

      if (hasCheckpoint() != other.hasCheckpoint()) return false;
      if (hasCheckpoint()) {
        if (!getCheckpoint()
            .equals(other.getCheckpoint())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCheckpoint()) {
        hash = (37 * hash) + CHECKPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getCheckpoint().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * EventCheckpointSubmitted is emitted when a checkpoint reaches the `Submitted`
     * state.
     * </pre>
     *
     * Protobuf type {@code babylon.checkpointing.v1.EventCheckpointSubmitted}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.checkpointing.v1.EventCheckpointSubmitted)
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmittedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointSubmitted_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointSubmitted_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted.class, com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted.Builder.class);
      }

      // Construct using com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        checkpoint_ = null;
        if (checkpointBuilder_ != null) {
          checkpointBuilder_.dispose();
          checkpointBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointSubmitted_descriptor;
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted getDefaultInstanceForType() {
        return com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted build() {
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted buildPartial() {
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted result = new com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.checkpoint_ = checkpointBuilder_ == null
              ? checkpoint_
              : checkpointBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted) {
          return mergeFrom((com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted other) {
        if (other == com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted.getDefaultInstance()) return this;
        if (other.hasCheckpoint()) {
          mergeCheckpoint(other.getCheckpoint());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getCheckpointFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta checkpoint_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder> checkpointBuilder_;
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       * @return Whether the checkpoint field is set.
       */
      public boolean hasCheckpoint() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       * @return The checkpoint.
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint() {
        if (checkpointBuilder_ == null) {
          return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
        } else {
          return checkpointBuilder_.getMessage();
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder setCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta value) {
        if (checkpointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          checkpoint_ = value;
        } else {
          checkpointBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder setCheckpoint(
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder builderForValue) {
        if (checkpointBuilder_ == null) {
          checkpoint_ = builderForValue.build();
        } else {
          checkpointBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder mergeCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta value) {
        if (checkpointBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            checkpoint_ != null &&
            checkpoint_ != com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance()) {
            getCheckpointBuilder().mergeFrom(value);
          } else {
            checkpoint_ = value;
          }
        } else {
          checkpointBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder clearCheckpoint() {
        bitField0_ = (bitField0_ & ~0x00000001);
        checkpoint_ = null;
        if (checkpointBuilder_ != null) {
          checkpointBuilder_.dispose();
          checkpointBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder getCheckpointBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCheckpointFieldBuilder().getBuilder();
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder() {
        if (checkpointBuilder_ != null) {
          return checkpointBuilder_.getMessageOrBuilder();
        } else {
          return checkpoint_ == null ?
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder> 
          getCheckpointFieldBuilder() {
        if (checkpointBuilder_ == null) {
          checkpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder>(
                  getCheckpoint(),
                  getParentForChildren(),
                  isClean());
          checkpoint_ = null;
        }
        return checkpointBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.checkpointing.v1.EventCheckpointSubmitted)
    }

    // @@protoc_insertion_point(class_scope:babylon.checkpointing.v1.EventCheckpointSubmitted)
    private static final com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted();
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EventCheckpointSubmitted>
        PARSER = new com.google.protobuf.AbstractParser<EventCheckpointSubmitted>() {
      @java.lang.Override
      public EventCheckpointSubmitted parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<EventCheckpointSubmitted> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EventCheckpointSubmitted> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.checkpointing.v1.EventsProto.EventCheckpointSubmitted getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EventCheckpointConfirmedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.checkpointing.v1.EventCheckpointConfirmed)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return Whether the checkpoint field is set.
     */
    boolean hasCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return The checkpoint.
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder();
  }
  /**
   * <pre>
   * EventCheckpointConfirmed is emitted when a checkpoint reaches the `Confirmed`
   * state.
   * </pre>
   *
   * Protobuf type {@code babylon.checkpointing.v1.EventCheckpointConfirmed}
   */
  public static final class EventCheckpointConfirmed extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.checkpointing.v1.EventCheckpointConfirmed)
      EventCheckpointConfirmedOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EventCheckpointConfirmed.newBuilder() to construct.
    private EventCheckpointConfirmed(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EventCheckpointConfirmed() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EventCheckpointConfirmed();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointConfirmed_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointConfirmed_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed.class, com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed.Builder.class);
    }

    public static final int CHECKPOINT_FIELD_NUMBER = 1;
    private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta checkpoint_;
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return Whether the checkpoint field is set.
     */
    @java.lang.Override
    public boolean hasCheckpoint() {
      return checkpoint_ != null;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return The checkpoint.
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint() {
      return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder() {
      return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (checkpoint_ != null) {
        output.writeMessage(1, getCheckpoint());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (checkpoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCheckpoint());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed)) {
        return super.equals(obj);
      }
      com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed other = (com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed) obj;

      if (hasCheckpoint() != other.hasCheckpoint()) return false;
      if (hasCheckpoint()) {
        if (!getCheckpoint()
            .equals(other.getCheckpoint())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCheckpoint()) {
        hash = (37 * hash) + CHECKPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getCheckpoint().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * EventCheckpointConfirmed is emitted when a checkpoint reaches the `Confirmed`
     * state.
     * </pre>
     *
     * Protobuf type {@code babylon.checkpointing.v1.EventCheckpointConfirmed}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.checkpointing.v1.EventCheckpointConfirmed)
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointConfirmed_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointConfirmed_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed.class, com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed.Builder.class);
      }

      // Construct using com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        checkpoint_ = null;
        if (checkpointBuilder_ != null) {
          checkpointBuilder_.dispose();
          checkpointBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointConfirmed_descriptor;
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed getDefaultInstanceForType() {
        return com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed build() {
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed buildPartial() {
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed result = new com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.checkpoint_ = checkpointBuilder_ == null
              ? checkpoint_
              : checkpointBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed) {
          return mergeFrom((com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed other) {
        if (other == com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed.getDefaultInstance()) return this;
        if (other.hasCheckpoint()) {
          mergeCheckpoint(other.getCheckpoint());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getCheckpointFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta checkpoint_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder> checkpointBuilder_;
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       * @return Whether the checkpoint field is set.
       */
      public boolean hasCheckpoint() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       * @return The checkpoint.
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint() {
        if (checkpointBuilder_ == null) {
          return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
        } else {
          return checkpointBuilder_.getMessage();
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder setCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta value) {
        if (checkpointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          checkpoint_ = value;
        } else {
          checkpointBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder setCheckpoint(
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder builderForValue) {
        if (checkpointBuilder_ == null) {
          checkpoint_ = builderForValue.build();
        } else {
          checkpointBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder mergeCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta value) {
        if (checkpointBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            checkpoint_ != null &&
            checkpoint_ != com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance()) {
            getCheckpointBuilder().mergeFrom(value);
          } else {
            checkpoint_ = value;
          }
        } else {
          checkpointBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder clearCheckpoint() {
        bitField0_ = (bitField0_ & ~0x00000001);
        checkpoint_ = null;
        if (checkpointBuilder_ != null) {
          checkpointBuilder_.dispose();
          checkpointBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder getCheckpointBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCheckpointFieldBuilder().getBuilder();
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder() {
        if (checkpointBuilder_ != null) {
          return checkpointBuilder_.getMessageOrBuilder();
        } else {
          return checkpoint_ == null ?
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder> 
          getCheckpointFieldBuilder() {
        if (checkpointBuilder_ == null) {
          checkpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder>(
                  getCheckpoint(),
                  getParentForChildren(),
                  isClean());
          checkpoint_ = null;
        }
        return checkpointBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.checkpointing.v1.EventCheckpointConfirmed)
    }

    // @@protoc_insertion_point(class_scope:babylon.checkpointing.v1.EventCheckpointConfirmed)
    private static final com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed();
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EventCheckpointConfirmed>
        PARSER = new com.google.protobuf.AbstractParser<EventCheckpointConfirmed>() {
      @java.lang.Override
      public EventCheckpointConfirmed parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<EventCheckpointConfirmed> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EventCheckpointConfirmed> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.checkpointing.v1.EventsProto.EventCheckpointConfirmed getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EventCheckpointFinalizedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.checkpointing.v1.EventCheckpointFinalized)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return Whether the checkpoint field is set.
     */
    boolean hasCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return The checkpoint.
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder();
  }
  /**
   * <pre>
   * EventCheckpointFinalized is emitted when a checkpoint reaches the `Finalized`
   * state.
   * </pre>
   *
   * Protobuf type {@code babylon.checkpointing.v1.EventCheckpointFinalized}
   */
  public static final class EventCheckpointFinalized extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.checkpointing.v1.EventCheckpointFinalized)
      EventCheckpointFinalizedOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EventCheckpointFinalized.newBuilder() to construct.
    private EventCheckpointFinalized(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EventCheckpointFinalized() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EventCheckpointFinalized();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointFinalized_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointFinalized_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized.class, com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized.Builder.class);
    }

    public static final int CHECKPOINT_FIELD_NUMBER = 1;
    private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta checkpoint_;
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return Whether the checkpoint field is set.
     */
    @java.lang.Override
    public boolean hasCheckpoint() {
      return checkpoint_ != null;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return The checkpoint.
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint() {
      return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder() {
      return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (checkpoint_ != null) {
        output.writeMessage(1, getCheckpoint());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (checkpoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCheckpoint());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized)) {
        return super.equals(obj);
      }
      com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized other = (com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized) obj;

      if (hasCheckpoint() != other.hasCheckpoint()) return false;
      if (hasCheckpoint()) {
        if (!getCheckpoint()
            .equals(other.getCheckpoint())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCheckpoint()) {
        hash = (37 * hash) + CHECKPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getCheckpoint().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * EventCheckpointFinalized is emitted when a checkpoint reaches the `Finalized`
     * state.
     * </pre>
     *
     * Protobuf type {@code babylon.checkpointing.v1.EventCheckpointFinalized}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.checkpointing.v1.EventCheckpointFinalized)
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalizedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointFinalized_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointFinalized_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized.class, com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized.Builder.class);
      }

      // Construct using com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        checkpoint_ = null;
        if (checkpointBuilder_ != null) {
          checkpointBuilder_.dispose();
          checkpointBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointFinalized_descriptor;
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized getDefaultInstanceForType() {
        return com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized build() {
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized buildPartial() {
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized result = new com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.checkpoint_ = checkpointBuilder_ == null
              ? checkpoint_
              : checkpointBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized) {
          return mergeFrom((com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized other) {
        if (other == com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized.getDefaultInstance()) return this;
        if (other.hasCheckpoint()) {
          mergeCheckpoint(other.getCheckpoint());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getCheckpointFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta checkpoint_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder> checkpointBuilder_;
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       * @return Whether the checkpoint field is set.
       */
      public boolean hasCheckpoint() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       * @return The checkpoint.
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint() {
        if (checkpointBuilder_ == null) {
          return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
        } else {
          return checkpointBuilder_.getMessage();
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder setCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta value) {
        if (checkpointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          checkpoint_ = value;
        } else {
          checkpointBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder setCheckpoint(
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder builderForValue) {
        if (checkpointBuilder_ == null) {
          checkpoint_ = builderForValue.build();
        } else {
          checkpointBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder mergeCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta value) {
        if (checkpointBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            checkpoint_ != null &&
            checkpoint_ != com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance()) {
            getCheckpointBuilder().mergeFrom(value);
          } else {
            checkpoint_ = value;
          }
        } else {
          checkpointBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder clearCheckpoint() {
        bitField0_ = (bitField0_ & ~0x00000001);
        checkpoint_ = null;
        if (checkpointBuilder_ != null) {
          checkpointBuilder_.dispose();
          checkpointBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder getCheckpointBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCheckpointFieldBuilder().getBuilder();
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder() {
        if (checkpointBuilder_ != null) {
          return checkpointBuilder_.getMessageOrBuilder();
        } else {
          return checkpoint_ == null ?
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder> 
          getCheckpointFieldBuilder() {
        if (checkpointBuilder_ == null) {
          checkpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder>(
                  getCheckpoint(),
                  getParentForChildren(),
                  isClean());
          checkpoint_ = null;
        }
        return checkpointBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.checkpointing.v1.EventCheckpointFinalized)
    }

    // @@protoc_insertion_point(class_scope:babylon.checkpointing.v1.EventCheckpointFinalized)
    private static final com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized();
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EventCheckpointFinalized>
        PARSER = new com.google.protobuf.AbstractParser<EventCheckpointFinalized>() {
      @java.lang.Override
      public EventCheckpointFinalized parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<EventCheckpointFinalized> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EventCheckpointFinalized> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.checkpointing.v1.EventsProto.EventCheckpointFinalized getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EventCheckpointForgottenOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.checkpointing.v1.EventCheckpointForgotten)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return Whether the checkpoint field is set.
     */
    boolean hasCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return The checkpoint.
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder();
  }
  /**
   * <pre>
   * EventCheckpointForgotten is emitted when a checkpoint switches to a
   * `Forgotten` state.
   * </pre>
   *
   * Protobuf type {@code babylon.checkpointing.v1.EventCheckpointForgotten}
   */
  public static final class EventCheckpointForgotten extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.checkpointing.v1.EventCheckpointForgotten)
      EventCheckpointForgottenOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EventCheckpointForgotten.newBuilder() to construct.
    private EventCheckpointForgotten(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EventCheckpointForgotten() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EventCheckpointForgotten();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointForgotten_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointForgotten_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten.class, com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten.Builder.class);
    }

    public static final int CHECKPOINT_FIELD_NUMBER = 1;
    private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta checkpoint_;
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return Whether the checkpoint field is set.
     */
    @java.lang.Override
    public boolean hasCheckpoint() {
      return checkpoint_ != null;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     * @return The checkpoint.
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint() {
      return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder() {
      return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (checkpoint_ != null) {
        output.writeMessage(1, getCheckpoint());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (checkpoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getCheckpoint());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten)) {
        return super.equals(obj);
      }
      com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten other = (com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten) obj;

      if (hasCheckpoint() != other.hasCheckpoint()) return false;
      if (hasCheckpoint()) {
        if (!getCheckpoint()
            .equals(other.getCheckpoint())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasCheckpoint()) {
        hash = (37 * hash) + CHECKPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getCheckpoint().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * EventCheckpointForgotten is emitted when a checkpoint switches to a
     * `Forgotten` state.
     * </pre>
     *
     * Protobuf type {@code babylon.checkpointing.v1.EventCheckpointForgotten}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.checkpointing.v1.EventCheckpointForgotten)
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgottenOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointForgotten_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointForgotten_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten.class, com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten.Builder.class);
      }

      // Construct using com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        checkpoint_ = null;
        if (checkpointBuilder_ != null) {
          checkpointBuilder_.dispose();
          checkpointBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventCheckpointForgotten_descriptor;
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten getDefaultInstanceForType() {
        return com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten build() {
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten buildPartial() {
        com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten result = new com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.checkpoint_ = checkpointBuilder_ == null
              ? checkpoint_
              : checkpointBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten) {
          return mergeFrom((com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten other) {
        if (other == com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten.getDefaultInstance()) return this;
        if (other.hasCheckpoint()) {
          mergeCheckpoint(other.getCheckpoint());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getCheckpointFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta checkpoint_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder> checkpointBuilder_;
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       * @return Whether the checkpoint field is set.
       */
      public boolean hasCheckpoint() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       * @return The checkpoint.
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getCheckpoint() {
        if (checkpointBuilder_ == null) {
          return checkpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
        } else {
          return checkpointBuilder_.getMessage();
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder setCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta value) {
        if (checkpointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          checkpoint_ = value;
        } else {
          checkpointBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder setCheckpoint(
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder builderForValue) {
        if (checkpointBuilder_ == null) {
          checkpoint_ = builderForValue.build();
        } else {
          checkpointBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder mergeCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta value) {
        if (checkpointBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            checkpoint_ != null &&
            checkpoint_ != com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance()) {
            getCheckpointBuilder().mergeFrom(value);
          } else {
            checkpoint_ = value;
          }
        } else {
          checkpointBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public Builder clearCheckpoint() {
        bitField0_ = (bitField0_ & ~0x00000001);
        checkpoint_ = null;
        if (checkpointBuilder_ != null) {
          checkpointBuilder_.dispose();
          checkpointBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder getCheckpointBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getCheckpointFieldBuilder().getBuilder();
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getCheckpointOrBuilder() {
        if (checkpointBuilder_ != null) {
          return checkpointBuilder_.getMessageOrBuilder();
        } else {
          return checkpoint_ == null ?
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : checkpoint_;
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta checkpoint = 1 [json_name = "checkpoint"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder> 
          getCheckpointFieldBuilder() {
        if (checkpointBuilder_ == null) {
          checkpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder>(
                  getCheckpoint(),
                  getParentForChildren(),
                  isClean());
          checkpoint_ = null;
        }
        return checkpointBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.checkpointing.v1.EventCheckpointForgotten)
    }

    // @@protoc_insertion_point(class_scope:babylon.checkpointing.v1.EventCheckpointForgotten)
    private static final com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten();
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EventCheckpointForgotten>
        PARSER = new com.google.protobuf.AbstractParser<EventCheckpointForgotten>() {
      @java.lang.Override
      public EventCheckpointForgotten parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<EventCheckpointForgotten> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EventCheckpointForgotten> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.checkpointing.v1.EventsProto.EventCheckpointForgotten getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface EventConflictingCheckpointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.checkpointing.v1.EventConflictingCheckpoint)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
     * @return Whether the conflictingCheckpoint field is set.
     */
    boolean hasConflictingCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
     * @return The conflictingCheckpoint.
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint getConflictingCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointOrBuilder getConflictingCheckpointOrBuilder();

    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
     * @return Whether the localCheckpoint field is set.
     */
    boolean hasLocalCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
     * @return The localCheckpoint.
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getLocalCheckpoint();
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
     */
    com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getLocalCheckpointOrBuilder();
  }
  /**
   * <pre>
   * EventConflictingCheckpoint is emitted when two conflicting checkpoints are
   * found.
   * </pre>
   *
   * Protobuf type {@code babylon.checkpointing.v1.EventConflictingCheckpoint}
   */
  public static final class EventConflictingCheckpoint extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.checkpointing.v1.EventConflictingCheckpoint)
      EventConflictingCheckpointOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EventConflictingCheckpoint.newBuilder() to construct.
    private EventConflictingCheckpoint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EventConflictingCheckpoint() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EventConflictingCheckpoint();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventConflictingCheckpoint_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventConflictingCheckpoint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint.class, com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint.Builder.class);
    }

    public static final int CONFLICTING_CHECKPOINT_FIELD_NUMBER = 1;
    private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint conflictingCheckpoint_;
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
     * @return Whether the conflictingCheckpoint field is set.
     */
    @java.lang.Override
    public boolean hasConflictingCheckpoint() {
      return conflictingCheckpoint_ != null;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
     * @return The conflictingCheckpoint.
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint getConflictingCheckpoint() {
      return conflictingCheckpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint.getDefaultInstance() : conflictingCheckpoint_;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointOrBuilder getConflictingCheckpointOrBuilder() {
      return conflictingCheckpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint.getDefaultInstance() : conflictingCheckpoint_;
    }

    public static final int LOCAL_CHECKPOINT_FIELD_NUMBER = 2;
    private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta localCheckpoint_;
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
     * @return Whether the localCheckpoint field is set.
     */
    @java.lang.Override
    public boolean hasLocalCheckpoint() {
      return localCheckpoint_ != null;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
     * @return The localCheckpoint.
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getLocalCheckpoint() {
      return localCheckpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : localCheckpoint_;
    }
    /**
     * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
     */
    @java.lang.Override
    public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getLocalCheckpointOrBuilder() {
      return localCheckpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : localCheckpoint_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (conflictingCheckpoint_ != null) {
        output.writeMessage(1, getConflictingCheckpoint());
      }
      if (localCheckpoint_ != null) {
        output.writeMessage(2, getLocalCheckpoint());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (conflictingCheckpoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getConflictingCheckpoint());
      }
      if (localCheckpoint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getLocalCheckpoint());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint)) {
        return super.equals(obj);
      }
      com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint other = (com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint) obj;

      if (hasConflictingCheckpoint() != other.hasConflictingCheckpoint()) return false;
      if (hasConflictingCheckpoint()) {
        if (!getConflictingCheckpoint()
            .equals(other.getConflictingCheckpoint())) return false;
      }
      if (hasLocalCheckpoint() != other.hasLocalCheckpoint()) return false;
      if (hasLocalCheckpoint()) {
        if (!getLocalCheckpoint()
            .equals(other.getLocalCheckpoint())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasConflictingCheckpoint()) {
        hash = (37 * hash) + CONFLICTING_CHECKPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getConflictingCheckpoint().hashCode();
      }
      if (hasLocalCheckpoint()) {
        hash = (37 * hash) + LOCAL_CHECKPOINT_FIELD_NUMBER;
        hash = (53 * hash) + getLocalCheckpoint().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * EventConflictingCheckpoint is emitted when two conflicting checkpoints are
     * found.
     * </pre>
     *
     * Protobuf type {@code babylon.checkpointing.v1.EventConflictingCheckpoint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.checkpointing.v1.EventConflictingCheckpoint)
        com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventConflictingCheckpoint_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventConflictingCheckpoint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint.class, com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint.Builder.class);
      }

      // Construct using com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        conflictingCheckpoint_ = null;
        if (conflictingCheckpointBuilder_ != null) {
          conflictingCheckpointBuilder_.dispose();
          conflictingCheckpointBuilder_ = null;
        }
        localCheckpoint_ = null;
        if (localCheckpointBuilder_ != null) {
          localCheckpointBuilder_.dispose();
          localCheckpointBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.checkpointing.v1.EventsProto.internal_static_babylon_checkpointing_v1_EventConflictingCheckpoint_descriptor;
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint getDefaultInstanceForType() {
        return com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint build() {
        com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint buildPartial() {
        com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint result = new com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.conflictingCheckpoint_ = conflictingCheckpointBuilder_ == null
              ? conflictingCheckpoint_
              : conflictingCheckpointBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.localCheckpoint_ = localCheckpointBuilder_ == null
              ? localCheckpoint_
              : localCheckpointBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint) {
          return mergeFrom((com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint other) {
        if (other == com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint.getDefaultInstance()) return this;
        if (other.hasConflictingCheckpoint()) {
          mergeConflictingCheckpoint(other.getConflictingCheckpoint());
        }
        if (other.hasLocalCheckpoint()) {
          mergeLocalCheckpoint(other.getLocalCheckpoint());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getConflictingCheckpointFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getLocalCheckpointFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint conflictingCheckpoint_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointOrBuilder> conflictingCheckpointBuilder_;
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
       * @return Whether the conflictingCheckpoint field is set.
       */
      public boolean hasConflictingCheckpoint() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
       * @return The conflictingCheckpoint.
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint getConflictingCheckpoint() {
        if (conflictingCheckpointBuilder_ == null) {
          return conflictingCheckpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint.getDefaultInstance() : conflictingCheckpoint_;
        } else {
          return conflictingCheckpointBuilder_.getMessage();
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
       */
      public Builder setConflictingCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint value) {
        if (conflictingCheckpointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          conflictingCheckpoint_ = value;
        } else {
          conflictingCheckpointBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
       */
      public Builder setConflictingCheckpoint(
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint.Builder builderForValue) {
        if (conflictingCheckpointBuilder_ == null) {
          conflictingCheckpoint_ = builderForValue.build();
        } else {
          conflictingCheckpointBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
       */
      public Builder mergeConflictingCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint value) {
        if (conflictingCheckpointBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            conflictingCheckpoint_ != null &&
            conflictingCheckpoint_ != com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint.getDefaultInstance()) {
            getConflictingCheckpointBuilder().mergeFrom(value);
          } else {
            conflictingCheckpoint_ = value;
          }
        } else {
          conflictingCheckpointBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
       */
      public Builder clearConflictingCheckpoint() {
        bitField0_ = (bitField0_ & ~0x00000001);
        conflictingCheckpoint_ = null;
        if (conflictingCheckpointBuilder_ != null) {
          conflictingCheckpointBuilder_.dispose();
          conflictingCheckpointBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint.Builder getConflictingCheckpointBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getConflictingCheckpointFieldBuilder().getBuilder();
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointOrBuilder getConflictingCheckpointOrBuilder() {
        if (conflictingCheckpointBuilder_ != null) {
          return conflictingCheckpointBuilder_.getMessageOrBuilder();
        } else {
          return conflictingCheckpoint_ == null ?
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint.getDefaultInstance() : conflictingCheckpoint_;
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpoint conflicting_checkpoint = 1 [json_name = "conflictingCheckpoint"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointOrBuilder> 
          getConflictingCheckpointFieldBuilder() {
        if (conflictingCheckpointBuilder_ == null) {
          conflictingCheckpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpoint.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointOrBuilder>(
                  getConflictingCheckpoint(),
                  getParentForChildren(),
                  isClean());
          conflictingCheckpoint_ = null;
        }
        return conflictingCheckpointBuilder_;
      }

      private com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta localCheckpoint_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder> localCheckpointBuilder_;
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
       * @return Whether the localCheckpoint field is set.
       */
      public boolean hasLocalCheckpoint() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
       * @return The localCheckpoint.
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta getLocalCheckpoint() {
        if (localCheckpointBuilder_ == null) {
          return localCheckpoint_ == null ? com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : localCheckpoint_;
        } else {
          return localCheckpointBuilder_.getMessage();
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
       */
      public Builder setLocalCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta value) {
        if (localCheckpointBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          localCheckpoint_ = value;
        } else {
          localCheckpointBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
       */
      public Builder setLocalCheckpoint(
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder builderForValue) {
        if (localCheckpointBuilder_ == null) {
          localCheckpoint_ = builderForValue.build();
        } else {
          localCheckpointBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
       */
      public Builder mergeLocalCheckpoint(com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta value) {
        if (localCheckpointBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            localCheckpoint_ != null &&
            localCheckpoint_ != com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance()) {
            getLocalCheckpointBuilder().mergeFrom(value);
          } else {
            localCheckpoint_ = value;
          }
        } else {
          localCheckpointBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
       */
      public Builder clearLocalCheckpoint() {
        bitField0_ = (bitField0_ & ~0x00000002);
        localCheckpoint_ = null;
        if (localCheckpointBuilder_ != null) {
          localCheckpointBuilder_.dispose();
          localCheckpointBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder getLocalCheckpointBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getLocalCheckpointFieldBuilder().getBuilder();
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
       */
      public com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder getLocalCheckpointOrBuilder() {
        if (localCheckpointBuilder_ != null) {
          return localCheckpointBuilder_.getMessageOrBuilder();
        } else {
          return localCheckpoint_ == null ?
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.getDefaultInstance() : localCheckpoint_;
        }
      }
      /**
       * <code>.babylon.checkpointing.v1.RawCheckpointWithMeta local_checkpoint = 2 [json_name = "localCheckpoint"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder> 
          getLocalCheckpointFieldBuilder() {
        if (localCheckpointBuilder_ == null) {
          localCheckpointBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMeta.Builder, com.babylon.checkpointing.v1.CheckpointProto.RawCheckpointWithMetaOrBuilder>(
                  getLocalCheckpoint(),
                  getParentForChildren(),
                  isClean());
          localCheckpoint_ = null;
        }
        return localCheckpointBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.checkpointing.v1.EventConflictingCheckpoint)
    }

    // @@protoc_insertion_point(class_scope:babylon.checkpointing.v1.EventConflictingCheckpoint)
    private static final com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint();
    }

    public static com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EventConflictingCheckpoint>
        PARSER = new com.google.protobuf.AbstractParser<EventConflictingCheckpoint>() {
      @java.lang.Override
      public EventConflictingCheckpoint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<EventConflictingCheckpoint> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EventConflictingCheckpoint> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.checkpointing.v1.EventsProto.EventConflictingCheckpoint getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_checkpointing_v1_EventCheckpointAccumulating_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_checkpointing_v1_EventCheckpointAccumulating_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_checkpointing_v1_EventCheckpointSealed_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_checkpointing_v1_EventCheckpointSealed_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_checkpointing_v1_EventCheckpointSubmitted_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_checkpointing_v1_EventCheckpointSubmitted_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_checkpointing_v1_EventCheckpointConfirmed_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_checkpointing_v1_EventCheckpointConfirmed_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_checkpointing_v1_EventCheckpointFinalized_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_checkpointing_v1_EventCheckpointFinalized_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_checkpointing_v1_EventCheckpointForgotten_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_checkpointing_v1_EventCheckpointForgotten_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_checkpointing_v1_EventConflictingCheckpoint_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_checkpointing_v1_EventConflictingCheckpoint_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n%babylon/checkpointing/v1/events.proto\022" +
      "\030babylon.checkpointing.v1\032)babylon/check" +
      "pointing/v1/checkpoint.proto\"n\n\033EventChe" +
      "ckpointAccumulating\022O\n\ncheckpoint\030\001 \001(\0132" +
      "/.babylon.checkpointing.v1.RawCheckpoint" +
      "WithMetaR\ncheckpoint\"h\n\025EventCheckpointS" +
      "ealed\022O\n\ncheckpoint\030\001 \001(\0132/.babylon.chec" +
      "kpointing.v1.RawCheckpointWithMetaR\nchec" +
      "kpoint\"k\n\030EventCheckpointSubmitted\022O\n\nch" +
      "eckpoint\030\001 \001(\0132/.babylon.checkpointing.v" +
      "1.RawCheckpointWithMetaR\ncheckpoint\"k\n\030E" +
      "ventCheckpointConfirmed\022O\n\ncheckpoint\030\001 " +
      "\001(\0132/.babylon.checkpointing.v1.RawCheckp" +
      "ointWithMetaR\ncheckpoint\"k\n\030EventCheckpo" +
      "intFinalized\022O\n\ncheckpoint\030\001 \001(\0132/.babyl" +
      "on.checkpointing.v1.RawCheckpointWithMet" +
      "aR\ncheckpoint\"k\n\030EventCheckpointForgotte" +
      "n\022O\n\ncheckpoint\030\001 \001(\0132/.babylon.checkpoi" +
      "nting.v1.RawCheckpointWithMetaR\ncheckpoi" +
      "nt\"\330\001\n\032EventConflictingCheckpoint\022^\n\026con" +
      "flicting_checkpoint\030\001 \001(\0132\'.babylon.chec" +
      "kpointing.v1.RawCheckpointR\025conflictingC" +
      "heckpoint\022Z\n\020local_checkpoint\030\002 \001(\0132/.ba" +
      "bylon.checkpointing.v1.RawCheckpointWith" +
      "MetaR\017localCheckpointB\342\001\n\034com.babylon.ch" +
      "eckpointing.v1B\013EventsProtoZ5github.com/" +
      "babylonchain/babylon/x/checkpointing/typ" +
      "es\242\002\003BCX\252\002\030Babylon.Checkpointing.V1\312\002\030Ba" +
      "bylon\\Checkpointing\\V1\342\002$Babylon\\Checkpo" +
      "inting\\V1\\GPBMetadata\352\002\032Babylon::Checkpo" +
      "inting::V1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.babylon.checkpointing.v1.CheckpointProto.getDescriptor(),
        });
    internal_static_babylon_checkpointing_v1_EventCheckpointAccumulating_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_babylon_checkpointing_v1_EventCheckpointAccumulating_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_checkpointing_v1_EventCheckpointAccumulating_descriptor,
        new java.lang.String[] { "Checkpoint", });
    internal_static_babylon_checkpointing_v1_EventCheckpointSealed_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_babylon_checkpointing_v1_EventCheckpointSealed_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_checkpointing_v1_EventCheckpointSealed_descriptor,
        new java.lang.String[] { "Checkpoint", });
    internal_static_babylon_checkpointing_v1_EventCheckpointSubmitted_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_babylon_checkpointing_v1_EventCheckpointSubmitted_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_checkpointing_v1_EventCheckpointSubmitted_descriptor,
        new java.lang.String[] { "Checkpoint", });
    internal_static_babylon_checkpointing_v1_EventCheckpointConfirmed_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_babylon_checkpointing_v1_EventCheckpointConfirmed_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_checkpointing_v1_EventCheckpointConfirmed_descriptor,
        new java.lang.String[] { "Checkpoint", });
    internal_static_babylon_checkpointing_v1_EventCheckpointFinalized_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_babylon_checkpointing_v1_EventCheckpointFinalized_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_checkpointing_v1_EventCheckpointFinalized_descriptor,
        new java.lang.String[] { "Checkpoint", });
    internal_static_babylon_checkpointing_v1_EventCheckpointForgotten_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_babylon_checkpointing_v1_EventCheckpointForgotten_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_checkpointing_v1_EventCheckpointForgotten_descriptor,
        new java.lang.String[] { "Checkpoint", });
    internal_static_babylon_checkpointing_v1_EventConflictingCheckpoint_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_babylon_checkpointing_v1_EventConflictingCheckpoint_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_checkpointing_v1_EventConflictingCheckpoint_descriptor,
        new java.lang.String[] { "ConflictingCheckpoint", "LocalCheckpoint", });
    com.babylon.checkpointing.v1.CheckpointProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
