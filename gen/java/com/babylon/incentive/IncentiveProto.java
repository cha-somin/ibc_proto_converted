// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: babylon/incentive/incentive.proto

package com.babylon.incentive;

public final class IncentiveProto {
  private IncentiveProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface GaugeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.incentive.Gauge)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> 
        getCoinsList();
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    com.cosmos.base.v1beta1.CoinProto.Coin getCoins(int index);
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    int getCoinsCount();
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
        getCoinsOrBuilderList();
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getCoinsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Gauge is an object that stores rewards to be distributed
   * code adapted from
   * https://github.com/osmosis-labs/osmosis/blob/v18.0.0/proto/osmosis/incentives/gauge.proto
   * </pre>
   *
   * Protobuf type {@code babylon.incentive.Gauge}
   */
  public static final class Gauge extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.incentive.Gauge)
      GaugeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Gauge.newBuilder() to construct.
    private Gauge(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Gauge() {
      coins_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Gauge();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.incentive.IncentiveProto.internal_static_babylon_incentive_Gauge_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.incentive.IncentiveProto.internal_static_babylon_incentive_Gauge_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.incentive.IncentiveProto.Gauge.class, com.babylon.incentive.IncentiveProto.Gauge.Builder.class);
    }

    public static final int COINS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> coins_;
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> getCoinsList() {
      return coins_;
    }
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
        getCoinsOrBuilderList() {
      return coins_;
    }
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public int getCoinsCount() {
      return coins_.size();
    }
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public com.cosmos.base.v1beta1.CoinProto.Coin getCoins(int index) {
      return coins_.get(index);
    }
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getCoinsOrBuilder(
        int index) {
      return coins_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < coins_.size(); i++) {
        output.writeMessage(1, coins_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < coins_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, coins_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.incentive.IncentiveProto.Gauge)) {
        return super.equals(obj);
      }
      com.babylon.incentive.IncentiveProto.Gauge other = (com.babylon.incentive.IncentiveProto.Gauge) obj;

      if (!getCoinsList()
          .equals(other.getCoinsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getCoinsCount() > 0) {
        hash = (37 * hash) + COINS_FIELD_NUMBER;
        hash = (53 * hash) + getCoinsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.incentive.IncentiveProto.Gauge parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.IncentiveProto.Gauge parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.IncentiveProto.Gauge parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.IncentiveProto.Gauge parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.IncentiveProto.Gauge parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.IncentiveProto.Gauge parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.IncentiveProto.Gauge parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.incentive.IncentiveProto.Gauge parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.incentive.IncentiveProto.Gauge parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.incentive.IncentiveProto.Gauge parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.incentive.IncentiveProto.Gauge parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.incentive.IncentiveProto.Gauge parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.incentive.IncentiveProto.Gauge prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Gauge is an object that stores rewards to be distributed
     * code adapted from
     * https://github.com/osmosis-labs/osmosis/blob/v18.0.0/proto/osmosis/incentives/gauge.proto
     * </pre>
     *
     * Protobuf type {@code babylon.incentive.Gauge}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.incentive.Gauge)
        com.babylon.incentive.IncentiveProto.GaugeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.incentive.IncentiveProto.internal_static_babylon_incentive_Gauge_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.incentive.IncentiveProto.internal_static_babylon_incentive_Gauge_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.incentive.IncentiveProto.Gauge.class, com.babylon.incentive.IncentiveProto.Gauge.Builder.class);
      }

      // Construct using com.babylon.incentive.IncentiveProto.Gauge.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (coinsBuilder_ == null) {
          coins_ = java.util.Collections.emptyList();
        } else {
          coins_ = null;
          coinsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.incentive.IncentiveProto.internal_static_babylon_incentive_Gauge_descriptor;
      }

      @java.lang.Override
      public com.babylon.incentive.IncentiveProto.Gauge getDefaultInstanceForType() {
        return com.babylon.incentive.IncentiveProto.Gauge.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.incentive.IncentiveProto.Gauge build() {
        com.babylon.incentive.IncentiveProto.Gauge result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.incentive.IncentiveProto.Gauge buildPartial() {
        com.babylon.incentive.IncentiveProto.Gauge result = new com.babylon.incentive.IncentiveProto.Gauge(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.babylon.incentive.IncentiveProto.Gauge result) {
        if (coinsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            coins_ = java.util.Collections.unmodifiableList(coins_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.coins_ = coins_;
        } else {
          result.coins_ = coinsBuilder_.build();
        }
      }

      private void buildPartial0(com.babylon.incentive.IncentiveProto.Gauge result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.incentive.IncentiveProto.Gauge) {
          return mergeFrom((com.babylon.incentive.IncentiveProto.Gauge)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.incentive.IncentiveProto.Gauge other) {
        if (other == com.babylon.incentive.IncentiveProto.Gauge.getDefaultInstance()) return this;
        if (coinsBuilder_ == null) {
          if (!other.coins_.isEmpty()) {
            if (coins_.isEmpty()) {
              coins_ = other.coins_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCoinsIsMutable();
              coins_.addAll(other.coins_);
            }
            onChanged();
          }
        } else {
          if (!other.coins_.isEmpty()) {
            if (coinsBuilder_.isEmpty()) {
              coinsBuilder_.dispose();
              coinsBuilder_ = null;
              coins_ = other.coins_;
              bitField0_ = (bitField0_ & ~0x00000001);
              coinsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCoinsFieldBuilder() : null;
            } else {
              coinsBuilder_.addAllMessages(other.coins_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.cosmos.base.v1beta1.CoinProto.Coin m =
                    input.readMessage(
                        com.cosmos.base.v1beta1.CoinProto.Coin.parser(),
                        extensionRegistry);
                if (coinsBuilder_ == null) {
                  ensureCoinsIsMutable();
                  coins_.add(m);
                } else {
                  coinsBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> coins_ =
        java.util.Collections.emptyList();
      private void ensureCoinsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          coins_ = new java.util.ArrayList<com.cosmos.base.v1beta1.CoinProto.Coin>(coins_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> coinsBuilder_;

      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> getCoinsList() {
        if (coinsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(coins_);
        } else {
          return coinsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public int getCoinsCount() {
        if (coinsBuilder_ == null) {
          return coins_.size();
        } else {
          return coinsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin getCoins(int index) {
        if (coinsBuilder_ == null) {
          return coins_.get(index);
        } else {
          return coinsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder setCoins(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (coinsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCoinsIsMutable();
          coins_.set(index, value);
          onChanged();
        } else {
          coinsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder setCoins(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (coinsBuilder_ == null) {
          ensureCoinsIsMutable();
          coins_.set(index, builderForValue.build());
          onChanged();
        } else {
          coinsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCoins(com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (coinsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCoinsIsMutable();
          coins_.add(value);
          onChanged();
        } else {
          coinsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCoins(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (coinsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCoinsIsMutable();
          coins_.add(index, value);
          onChanged();
        } else {
          coinsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCoins(
          com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (coinsBuilder_ == null) {
          ensureCoinsIsMutable();
          coins_.add(builderForValue.build());
          onChanged();
        } else {
          coinsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCoins(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (coinsBuilder_ == null) {
          ensureCoinsIsMutable();
          coins_.add(index, builderForValue.build());
          onChanged();
        } else {
          coinsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addAllCoins(
          java.lang.Iterable<? extends com.cosmos.base.v1beta1.CoinProto.Coin> values) {
        if (coinsBuilder_ == null) {
          ensureCoinsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, coins_);
          onChanged();
        } else {
          coinsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder clearCoins() {
        if (coinsBuilder_ == null) {
          coins_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          coinsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder removeCoins(int index) {
        if (coinsBuilder_ == null) {
          ensureCoinsIsMutable();
          coins_.remove(index);
          onChanged();
        } else {
          coinsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder getCoinsBuilder(
          int index) {
        return getCoinsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getCoinsOrBuilder(
          int index) {
        if (coinsBuilder_ == null) {
          return coins_.get(index);  } else {
          return coinsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
           getCoinsOrBuilderList() {
        if (coinsBuilder_ != null) {
          return coinsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(coins_);
        }
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder addCoinsBuilder() {
        return getCoinsFieldBuilder().addBuilder(
            com.cosmos.base.v1beta1.CoinProto.Coin.getDefaultInstance());
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder addCoinsBuilder(
          int index) {
        return getCoinsFieldBuilder().addBuilder(
            index, com.cosmos.base.v1beta1.CoinProto.Coin.getDefaultInstance());
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin.Builder> 
           getCoinsBuilderList() {
        return getCoinsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
          getCoinsFieldBuilder() {
        if (coinsBuilder_ == null) {
          coinsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder>(
                  coins_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          coins_ = null;
        }
        return coinsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.incentive.Gauge)
    }

    // @@protoc_insertion_point(class_scope:babylon.incentive.Gauge)
    private static final com.babylon.incentive.IncentiveProto.Gauge DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.incentive.IncentiveProto.Gauge();
    }

    public static com.babylon.incentive.IncentiveProto.Gauge getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Gauge>
        PARSER = new com.google.protobuf.AbstractParser<Gauge>() {
      @java.lang.Override
      public Gauge parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<Gauge> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Gauge> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.incentive.IncentiveProto.Gauge getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RewardGaugeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.incentive.RewardGauge)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> 
        getCoinsList();
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    com.cosmos.base.v1beta1.CoinProto.Coin getCoins(int index);
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    int getCoinsCount();
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
        getCoinsOrBuilderList();
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getCoinsOrBuilder(
        int index);

    /**
     * <pre>
     * withdrawn_coins are coins that have been withdrawn by the stakeholder
     * already
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> 
        getWithdrawnCoinsList();
    /**
     * <pre>
     * withdrawn_coins are coins that have been withdrawn by the stakeholder
     * already
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    com.cosmos.base.v1beta1.CoinProto.Coin getWithdrawnCoins(int index);
    /**
     * <pre>
     * withdrawn_coins are coins that have been withdrawn by the stakeholder
     * already
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    int getWithdrawnCoinsCount();
    /**
     * <pre>
     * withdrawn_coins are coins that have been withdrawn by the stakeholder
     * already
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
        getWithdrawnCoinsOrBuilderList();
    /**
     * <pre>
     * withdrawn_coins are coins that have been withdrawn by the stakeholder
     * already
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getWithdrawnCoinsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * RewardGauge is an object that stores rewards distributed to a BTC staking
   * stakeholder code adapted from
   * https://github.com/osmosis-labs/osmosis/blob/v18.0.0/proto/osmosis/incentives/gauge.proto
   * </pre>
   *
   * Protobuf type {@code babylon.incentive.RewardGauge}
   */
  public static final class RewardGauge extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.incentive.RewardGauge)
      RewardGaugeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RewardGauge.newBuilder() to construct.
    private RewardGauge(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RewardGauge() {
      coins_ = java.util.Collections.emptyList();
      withdrawnCoins_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RewardGauge();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.incentive.IncentiveProto.internal_static_babylon_incentive_RewardGauge_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.incentive.IncentiveProto.internal_static_babylon_incentive_RewardGauge_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.incentive.IncentiveProto.RewardGauge.class, com.babylon.incentive.IncentiveProto.RewardGauge.Builder.class);
    }

    public static final int COINS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> coins_;
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> getCoinsList() {
      return coins_;
    }
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
        getCoinsOrBuilderList() {
      return coins_;
    }
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public int getCoinsCount() {
      return coins_.size();
    }
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public com.cosmos.base.v1beta1.CoinProto.Coin getCoins(int index) {
      return coins_.get(index);
    }
    /**
     * <pre>
     * coins are coins that have been in the gauge
     * Can have multiple coin denoms
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getCoinsOrBuilder(
        int index) {
      return coins_.get(index);
    }

    public static final int WITHDRAWN_COINS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> withdrawnCoins_;
    /**
     * <pre>
     * withdrawn_coins are coins that have been withdrawn by the stakeholder
     * already
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> getWithdrawnCoinsList() {
      return withdrawnCoins_;
    }
    /**
     * <pre>
     * withdrawn_coins are coins that have been withdrawn by the stakeholder
     * already
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
        getWithdrawnCoinsOrBuilderList() {
      return withdrawnCoins_;
    }
    /**
     * <pre>
     * withdrawn_coins are coins that have been withdrawn by the stakeholder
     * already
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public int getWithdrawnCoinsCount() {
      return withdrawnCoins_.size();
    }
    /**
     * <pre>
     * withdrawn_coins are coins that have been withdrawn by the stakeholder
     * already
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public com.cosmos.base.v1beta1.CoinProto.Coin getWithdrawnCoins(int index) {
      return withdrawnCoins_.get(index);
    }
    /**
     * <pre>
     * withdrawn_coins are coins that have been withdrawn by the stakeholder
     * already
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getWithdrawnCoinsOrBuilder(
        int index) {
      return withdrawnCoins_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < coins_.size(); i++) {
        output.writeMessage(1, coins_.get(i));
      }
      for (int i = 0; i < withdrawnCoins_.size(); i++) {
        output.writeMessage(2, withdrawnCoins_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < coins_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, coins_.get(i));
      }
      for (int i = 0; i < withdrawnCoins_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, withdrawnCoins_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.incentive.IncentiveProto.RewardGauge)) {
        return super.equals(obj);
      }
      com.babylon.incentive.IncentiveProto.RewardGauge other = (com.babylon.incentive.IncentiveProto.RewardGauge) obj;

      if (!getCoinsList()
          .equals(other.getCoinsList())) return false;
      if (!getWithdrawnCoinsList()
          .equals(other.getWithdrawnCoinsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getCoinsCount() > 0) {
        hash = (37 * hash) + COINS_FIELD_NUMBER;
        hash = (53 * hash) + getCoinsList().hashCode();
      }
      if (getWithdrawnCoinsCount() > 0) {
        hash = (37 * hash) + WITHDRAWN_COINS_FIELD_NUMBER;
        hash = (53 * hash) + getWithdrawnCoinsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.incentive.IncentiveProto.RewardGauge parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.IncentiveProto.RewardGauge parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.IncentiveProto.RewardGauge parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.IncentiveProto.RewardGauge parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.IncentiveProto.RewardGauge parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.IncentiveProto.RewardGauge parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.IncentiveProto.RewardGauge parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.incentive.IncentiveProto.RewardGauge parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.incentive.IncentiveProto.RewardGauge parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.incentive.IncentiveProto.RewardGauge parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.incentive.IncentiveProto.RewardGauge parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.incentive.IncentiveProto.RewardGauge parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.incentive.IncentiveProto.RewardGauge prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * RewardGauge is an object that stores rewards distributed to a BTC staking
     * stakeholder code adapted from
     * https://github.com/osmosis-labs/osmosis/blob/v18.0.0/proto/osmosis/incentives/gauge.proto
     * </pre>
     *
     * Protobuf type {@code babylon.incentive.RewardGauge}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.incentive.RewardGauge)
        com.babylon.incentive.IncentiveProto.RewardGaugeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.incentive.IncentiveProto.internal_static_babylon_incentive_RewardGauge_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.incentive.IncentiveProto.internal_static_babylon_incentive_RewardGauge_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.incentive.IncentiveProto.RewardGauge.class, com.babylon.incentive.IncentiveProto.RewardGauge.Builder.class);
      }

      // Construct using com.babylon.incentive.IncentiveProto.RewardGauge.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (coinsBuilder_ == null) {
          coins_ = java.util.Collections.emptyList();
        } else {
          coins_ = null;
          coinsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (withdrawnCoinsBuilder_ == null) {
          withdrawnCoins_ = java.util.Collections.emptyList();
        } else {
          withdrawnCoins_ = null;
          withdrawnCoinsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.incentive.IncentiveProto.internal_static_babylon_incentive_RewardGauge_descriptor;
      }

      @java.lang.Override
      public com.babylon.incentive.IncentiveProto.RewardGauge getDefaultInstanceForType() {
        return com.babylon.incentive.IncentiveProto.RewardGauge.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.incentive.IncentiveProto.RewardGauge build() {
        com.babylon.incentive.IncentiveProto.RewardGauge result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.incentive.IncentiveProto.RewardGauge buildPartial() {
        com.babylon.incentive.IncentiveProto.RewardGauge result = new com.babylon.incentive.IncentiveProto.RewardGauge(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.babylon.incentive.IncentiveProto.RewardGauge result) {
        if (coinsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            coins_ = java.util.Collections.unmodifiableList(coins_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.coins_ = coins_;
        } else {
          result.coins_ = coinsBuilder_.build();
        }
        if (withdrawnCoinsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            withdrawnCoins_ = java.util.Collections.unmodifiableList(withdrawnCoins_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.withdrawnCoins_ = withdrawnCoins_;
        } else {
          result.withdrawnCoins_ = withdrawnCoinsBuilder_.build();
        }
      }

      private void buildPartial0(com.babylon.incentive.IncentiveProto.RewardGauge result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.incentive.IncentiveProto.RewardGauge) {
          return mergeFrom((com.babylon.incentive.IncentiveProto.RewardGauge)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.incentive.IncentiveProto.RewardGauge other) {
        if (other == com.babylon.incentive.IncentiveProto.RewardGauge.getDefaultInstance()) return this;
        if (coinsBuilder_ == null) {
          if (!other.coins_.isEmpty()) {
            if (coins_.isEmpty()) {
              coins_ = other.coins_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCoinsIsMutable();
              coins_.addAll(other.coins_);
            }
            onChanged();
          }
        } else {
          if (!other.coins_.isEmpty()) {
            if (coinsBuilder_.isEmpty()) {
              coinsBuilder_.dispose();
              coinsBuilder_ = null;
              coins_ = other.coins_;
              bitField0_ = (bitField0_ & ~0x00000001);
              coinsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCoinsFieldBuilder() : null;
            } else {
              coinsBuilder_.addAllMessages(other.coins_);
            }
          }
        }
        if (withdrawnCoinsBuilder_ == null) {
          if (!other.withdrawnCoins_.isEmpty()) {
            if (withdrawnCoins_.isEmpty()) {
              withdrawnCoins_ = other.withdrawnCoins_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureWithdrawnCoinsIsMutable();
              withdrawnCoins_.addAll(other.withdrawnCoins_);
            }
            onChanged();
          }
        } else {
          if (!other.withdrawnCoins_.isEmpty()) {
            if (withdrawnCoinsBuilder_.isEmpty()) {
              withdrawnCoinsBuilder_.dispose();
              withdrawnCoinsBuilder_ = null;
              withdrawnCoins_ = other.withdrawnCoins_;
              bitField0_ = (bitField0_ & ~0x00000002);
              withdrawnCoinsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getWithdrawnCoinsFieldBuilder() : null;
            } else {
              withdrawnCoinsBuilder_.addAllMessages(other.withdrawnCoins_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.cosmos.base.v1beta1.CoinProto.Coin m =
                    input.readMessage(
                        com.cosmos.base.v1beta1.CoinProto.Coin.parser(),
                        extensionRegistry);
                if (coinsBuilder_ == null) {
                  ensureCoinsIsMutable();
                  coins_.add(m);
                } else {
                  coinsBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                com.cosmos.base.v1beta1.CoinProto.Coin m =
                    input.readMessage(
                        com.cosmos.base.v1beta1.CoinProto.Coin.parser(),
                        extensionRegistry);
                if (withdrawnCoinsBuilder_ == null) {
                  ensureWithdrawnCoinsIsMutable();
                  withdrawnCoins_.add(m);
                } else {
                  withdrawnCoinsBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> coins_ =
        java.util.Collections.emptyList();
      private void ensureCoinsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          coins_ = new java.util.ArrayList<com.cosmos.base.v1beta1.CoinProto.Coin>(coins_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> coinsBuilder_;

      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> getCoinsList() {
        if (coinsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(coins_);
        } else {
          return coinsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public int getCoinsCount() {
        if (coinsBuilder_ == null) {
          return coins_.size();
        } else {
          return coinsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin getCoins(int index) {
        if (coinsBuilder_ == null) {
          return coins_.get(index);
        } else {
          return coinsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder setCoins(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (coinsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCoinsIsMutable();
          coins_.set(index, value);
          onChanged();
        } else {
          coinsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder setCoins(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (coinsBuilder_ == null) {
          ensureCoinsIsMutable();
          coins_.set(index, builderForValue.build());
          onChanged();
        } else {
          coinsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCoins(com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (coinsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCoinsIsMutable();
          coins_.add(value);
          onChanged();
        } else {
          coinsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCoins(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (coinsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCoinsIsMutable();
          coins_.add(index, value);
          onChanged();
        } else {
          coinsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCoins(
          com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (coinsBuilder_ == null) {
          ensureCoinsIsMutable();
          coins_.add(builderForValue.build());
          onChanged();
        } else {
          coinsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCoins(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (coinsBuilder_ == null) {
          ensureCoinsIsMutable();
          coins_.add(index, builderForValue.build());
          onChanged();
        } else {
          coinsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addAllCoins(
          java.lang.Iterable<? extends com.cosmos.base.v1beta1.CoinProto.Coin> values) {
        if (coinsBuilder_ == null) {
          ensureCoinsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, coins_);
          onChanged();
        } else {
          coinsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder clearCoins() {
        if (coinsBuilder_ == null) {
          coins_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          coinsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder removeCoins(int index) {
        if (coinsBuilder_ == null) {
          ensureCoinsIsMutable();
          coins_.remove(index);
          onChanged();
        } else {
          coinsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder getCoinsBuilder(
          int index) {
        return getCoinsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getCoinsOrBuilder(
          int index) {
        if (coinsBuilder_ == null) {
          return coins_.get(index);  } else {
          return coinsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
           getCoinsOrBuilderList() {
        if (coinsBuilder_ != null) {
          return coinsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(coins_);
        }
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder addCoinsBuilder() {
        return getCoinsFieldBuilder().addBuilder(
            com.cosmos.base.v1beta1.CoinProto.Coin.getDefaultInstance());
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder addCoinsBuilder(
          int index) {
        return getCoinsFieldBuilder().addBuilder(
            index, com.cosmos.base.v1beta1.CoinProto.Coin.getDefaultInstance());
      }
      /**
       * <pre>
       * coins are coins that have been in the gauge
       * Can have multiple coin denoms
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin coins = 1 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin.Builder> 
           getCoinsBuilderList() {
        return getCoinsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
          getCoinsFieldBuilder() {
        if (coinsBuilder_ == null) {
          coinsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder>(
                  coins_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          coins_ = null;
        }
        return coinsBuilder_;
      }

      private java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> withdrawnCoins_ =
        java.util.Collections.emptyList();
      private void ensureWithdrawnCoinsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          withdrawnCoins_ = new java.util.ArrayList<com.cosmos.base.v1beta1.CoinProto.Coin>(withdrawnCoins_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> withdrawnCoinsBuilder_;

      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> getWithdrawnCoinsList() {
        if (withdrawnCoinsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(withdrawnCoins_);
        } else {
          return withdrawnCoinsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public int getWithdrawnCoinsCount() {
        if (withdrawnCoinsBuilder_ == null) {
          return withdrawnCoins_.size();
        } else {
          return withdrawnCoinsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin getWithdrawnCoins(int index) {
        if (withdrawnCoinsBuilder_ == null) {
          return withdrawnCoins_.get(index);
        } else {
          return withdrawnCoinsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder setWithdrawnCoins(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (withdrawnCoinsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWithdrawnCoinsIsMutable();
          withdrawnCoins_.set(index, value);
          onChanged();
        } else {
          withdrawnCoinsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder setWithdrawnCoins(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (withdrawnCoinsBuilder_ == null) {
          ensureWithdrawnCoinsIsMutable();
          withdrawnCoins_.set(index, builderForValue.build());
          onChanged();
        } else {
          withdrawnCoinsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addWithdrawnCoins(com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (withdrawnCoinsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWithdrawnCoinsIsMutable();
          withdrawnCoins_.add(value);
          onChanged();
        } else {
          withdrawnCoinsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addWithdrawnCoins(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (withdrawnCoinsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureWithdrawnCoinsIsMutable();
          withdrawnCoins_.add(index, value);
          onChanged();
        } else {
          withdrawnCoinsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addWithdrawnCoins(
          com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (withdrawnCoinsBuilder_ == null) {
          ensureWithdrawnCoinsIsMutable();
          withdrawnCoins_.add(builderForValue.build());
          onChanged();
        } else {
          withdrawnCoinsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addWithdrawnCoins(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (withdrawnCoinsBuilder_ == null) {
          ensureWithdrawnCoinsIsMutable();
          withdrawnCoins_.add(index, builderForValue.build());
          onChanged();
        } else {
          withdrawnCoinsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addAllWithdrawnCoins(
          java.lang.Iterable<? extends com.cosmos.base.v1beta1.CoinProto.Coin> values) {
        if (withdrawnCoinsBuilder_ == null) {
          ensureWithdrawnCoinsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, withdrawnCoins_);
          onChanged();
        } else {
          withdrawnCoinsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder clearWithdrawnCoins() {
        if (withdrawnCoinsBuilder_ == null) {
          withdrawnCoins_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          withdrawnCoinsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder removeWithdrawnCoins(int index) {
        if (withdrawnCoinsBuilder_ == null) {
          ensureWithdrawnCoinsIsMutable();
          withdrawnCoins_.remove(index);
          onChanged();
        } else {
          withdrawnCoinsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder getWithdrawnCoinsBuilder(
          int index) {
        return getWithdrawnCoinsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getWithdrawnCoinsOrBuilder(
          int index) {
        if (withdrawnCoinsBuilder_ == null) {
          return withdrawnCoins_.get(index);  } else {
          return withdrawnCoinsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
           getWithdrawnCoinsOrBuilderList() {
        if (withdrawnCoinsBuilder_ != null) {
          return withdrawnCoinsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(withdrawnCoins_);
        }
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder addWithdrawnCoinsBuilder() {
        return getWithdrawnCoinsFieldBuilder().addBuilder(
            com.cosmos.base.v1beta1.CoinProto.Coin.getDefaultInstance());
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder addWithdrawnCoinsBuilder(
          int index) {
        return getWithdrawnCoinsFieldBuilder().addBuilder(
            index, com.cosmos.base.v1beta1.CoinProto.Coin.getDefaultInstance());
      }
      /**
       * <pre>
       * withdrawn_coins are coins that have been withdrawn by the stakeholder
       * already
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin withdrawn_coins = 2 [json_name = "withdrawnCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin.Builder> 
           getWithdrawnCoinsBuilderList() {
        return getWithdrawnCoinsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
          getWithdrawnCoinsFieldBuilder() {
        if (withdrawnCoinsBuilder_ == null) {
          withdrawnCoinsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder>(
                  withdrawnCoins_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          withdrawnCoins_ = null;
        }
        return withdrawnCoinsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.incentive.RewardGauge)
    }

    // @@protoc_insertion_point(class_scope:babylon.incentive.RewardGauge)
    private static final com.babylon.incentive.IncentiveProto.RewardGauge DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.incentive.IncentiveProto.RewardGauge();
    }

    public static com.babylon.incentive.IncentiveProto.RewardGauge getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RewardGauge>
        PARSER = new com.google.protobuf.AbstractParser<RewardGauge>() {
      @java.lang.Override
      public RewardGauge parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<RewardGauge> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RewardGauge> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.incentive.IncentiveProto.RewardGauge getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_incentive_Gauge_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_incentive_Gauge_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_incentive_RewardGauge_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_incentive_RewardGauge_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n!babylon/incentive/incentive.proto\022\021bab" +
      "ylon.incentive\032\024gogoproto/gogo.proto\032\036co" +
      "smos/base/v1beta1/coin.proto\"j\n\005Gauge\022a\n" +
      "\005coins\030\001 \003(\0132\031.cosmos.base.v1beta1.CoinB" +
      "0\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk/ty" +
      "pes.CoinsR\005coins\"\346\001\n\013RewardGauge\022a\n\005coin" +
      "s\030\001 \003(\0132\031.cosmos.base.v1beta1.CoinB0\310\336\037\000" +
      "\252\337\037(github.com/cosmos/cosmos-sdk/types.C" +
      "oinsR\005coins\022t\n\017withdrawn_coins\030\002 \003(\0132\031.c" +
      "osmos.base.v1beta1.CoinB0\310\336\037\000\252\337\037(github." +
      "com/cosmos/cosmos-sdk/types.CoinsR\016withd" +
      "rawnCoinsB\277\001\n\025com.babylon.incentiveB\016Inc" +
      "entiveProtoZ3github.com/babylonlabs-io/b" +
      "abylon/x/incentive/types\242\002\003BIX\252\002\021Babylon" +
      ".Incentive\312\002\021Babylon\\Incentive\342\002\035Babylon" +
      "\\Incentive\\GPBMetadata\352\002\022Babylon::Incent" +
      "iveb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.gogoproto.GogoProto.getDescriptor(),
          com.cosmos.base.v1beta1.CoinProto.getDescriptor(),
        });
    internal_static_babylon_incentive_Gauge_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_babylon_incentive_Gauge_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_incentive_Gauge_descriptor,
        new java.lang.String[] { "Coins", });
    internal_static_babylon_incentive_RewardGauge_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_babylon_incentive_RewardGauge_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_incentive_RewardGauge_descriptor,
        new java.lang.String[] { "Coins", "WithdrawnCoins", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.gogoproto.GogoProto.castrepeated);
    registry.add(com.gogoproto.GogoProto.nullable);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.gogoproto.GogoProto.getDescriptor();
    com.cosmos.base.v1beta1.CoinProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
