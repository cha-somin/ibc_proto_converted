// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: babylon/incentive/rewards.proto

package com.babylon.incentive;

public final class RewardsProto {
  private RewardsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface FinalityProviderHistoricalRewardsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.incentive.FinalityProviderHistoricalRewards)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The cumulative rewards of that finality provider per sat until that period
     * This coins will aways increase the value, never be reduced due to keep
     * acumulation and when the cumulative rewards will be used to distribute
     * rewards, 2 periods will be loaded, calculate the difference and multiplied
     * by the total sat amount delegated
     * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> 
        getCumulativeRewardsPerSatList();
    /**
     * <pre>
     * The cumulative rewards of that finality provider per sat until that period
     * This coins will aways increase the value, never be reduced due to keep
     * acumulation and when the cumulative rewards will be used to distribute
     * rewards, 2 periods will be loaded, calculate the difference and multiplied
     * by the total sat amount delegated
     * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    com.cosmos.base.v1beta1.CoinProto.Coin getCumulativeRewardsPerSat(int index);
    /**
     * <pre>
     * The cumulative rewards of that finality provider per sat until that period
     * This coins will aways increase the value, never be reduced due to keep
     * acumulation and when the cumulative rewards will be used to distribute
     * rewards, 2 periods will be loaded, calculate the difference and multiplied
     * by the total sat amount delegated
     * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    int getCumulativeRewardsPerSatCount();
    /**
     * <pre>
     * The cumulative rewards of that finality provider per sat until that period
     * This coins will aways increase the value, never be reduced due to keep
     * acumulation and when the cumulative rewards will be used to distribute
     * rewards, 2 periods will be loaded, calculate the difference and multiplied
     * by the total sat amount delegated
     * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
        getCumulativeRewardsPerSatOrBuilderList();
    /**
     * <pre>
     * The cumulative rewards of that finality provider per sat until that period
     * This coins will aways increase the value, never be reduced due to keep
     * acumulation and when the cumulative rewards will be used to distribute
     * rewards, 2 periods will be loaded, calculate the difference and multiplied
     * by the total sat amount delegated
     * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getCumulativeRewardsPerSatOrBuilder(
        int index);
  }
  /**
   * <pre>
   * FinalityProviderHistoricalRewards represents the cumulative rewards ratio of
   * the finality provider per sat in that period. The period is ommited here and
   * should be part of the key used to store this structure. Key: Prefix +
   * Finality provider bech32 address + Period.
   * </pre>
   *
   * Protobuf type {@code babylon.incentive.FinalityProviderHistoricalRewards}
   */
  public static final class FinalityProviderHistoricalRewards extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.incentive.FinalityProviderHistoricalRewards)
      FinalityProviderHistoricalRewardsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FinalityProviderHistoricalRewards.newBuilder() to construct.
    private FinalityProviderHistoricalRewards(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FinalityProviderHistoricalRewards() {
      cumulativeRewardsPerSat_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FinalityProviderHistoricalRewards();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_FinalityProviderHistoricalRewards_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_FinalityProviderHistoricalRewards_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards.class, com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards.Builder.class);
    }

    public static final int CUMULATIVE_REWARDS_PER_SAT_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> cumulativeRewardsPerSat_;
    /**
     * <pre>
     * The cumulative rewards of that finality provider per sat until that period
     * This coins will aways increase the value, never be reduced due to keep
     * acumulation and when the cumulative rewards will be used to distribute
     * rewards, 2 periods will be loaded, calculate the difference and multiplied
     * by the total sat amount delegated
     * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> getCumulativeRewardsPerSatList() {
      return cumulativeRewardsPerSat_;
    }
    /**
     * <pre>
     * The cumulative rewards of that finality provider per sat until that period
     * This coins will aways increase the value, never be reduced due to keep
     * acumulation and when the cumulative rewards will be used to distribute
     * rewards, 2 periods will be loaded, calculate the difference and multiplied
     * by the total sat amount delegated
     * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
        getCumulativeRewardsPerSatOrBuilderList() {
      return cumulativeRewardsPerSat_;
    }
    /**
     * <pre>
     * The cumulative rewards of that finality provider per sat until that period
     * This coins will aways increase the value, never be reduced due to keep
     * acumulation and when the cumulative rewards will be used to distribute
     * rewards, 2 periods will be loaded, calculate the difference and multiplied
     * by the total sat amount delegated
     * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public int getCumulativeRewardsPerSatCount() {
      return cumulativeRewardsPerSat_.size();
    }
    /**
     * <pre>
     * The cumulative rewards of that finality provider per sat until that period
     * This coins will aways increase the value, never be reduced due to keep
     * acumulation and when the cumulative rewards will be used to distribute
     * rewards, 2 periods will be loaded, calculate the difference and multiplied
     * by the total sat amount delegated
     * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public com.cosmos.base.v1beta1.CoinProto.Coin getCumulativeRewardsPerSat(int index) {
      return cumulativeRewardsPerSat_.get(index);
    }
    /**
     * <pre>
     * The cumulative rewards of that finality provider per sat until that period
     * This coins will aways increase the value, never be reduced due to keep
     * acumulation and when the cumulative rewards will be used to distribute
     * rewards, 2 periods will be loaded, calculate the difference and multiplied
     * by the total sat amount delegated
     * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getCumulativeRewardsPerSatOrBuilder(
        int index) {
      return cumulativeRewardsPerSat_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < cumulativeRewardsPerSat_.size(); i++) {
        output.writeMessage(1, cumulativeRewardsPerSat_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < cumulativeRewardsPerSat_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, cumulativeRewardsPerSat_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards)) {
        return super.equals(obj);
      }
      com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards other = (com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards) obj;

      if (!getCumulativeRewardsPerSatList()
          .equals(other.getCumulativeRewardsPerSatList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getCumulativeRewardsPerSatCount() > 0) {
        hash = (37 * hash) + CUMULATIVE_REWARDS_PER_SAT_FIELD_NUMBER;
        hash = (53 * hash) + getCumulativeRewardsPerSatList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * FinalityProviderHistoricalRewards represents the cumulative rewards ratio of
     * the finality provider per sat in that period. The period is ommited here and
     * should be part of the key used to store this structure. Key: Prefix +
     * Finality provider bech32 address + Period.
     * </pre>
     *
     * Protobuf type {@code babylon.incentive.FinalityProviderHistoricalRewards}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.incentive.FinalityProviderHistoricalRewards)
        com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewardsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_FinalityProviderHistoricalRewards_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_FinalityProviderHistoricalRewards_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards.class, com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards.Builder.class);
      }

      // Construct using com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (cumulativeRewardsPerSatBuilder_ == null) {
          cumulativeRewardsPerSat_ = java.util.Collections.emptyList();
        } else {
          cumulativeRewardsPerSat_ = null;
          cumulativeRewardsPerSatBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_FinalityProviderHistoricalRewards_descriptor;
      }

      @java.lang.Override
      public com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards getDefaultInstanceForType() {
        return com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards build() {
        com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards buildPartial() {
        com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards result = new com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards result) {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            cumulativeRewardsPerSat_ = java.util.Collections.unmodifiableList(cumulativeRewardsPerSat_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.cumulativeRewardsPerSat_ = cumulativeRewardsPerSat_;
        } else {
          result.cumulativeRewardsPerSat_ = cumulativeRewardsPerSatBuilder_.build();
        }
      }

      private void buildPartial0(com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards) {
          return mergeFrom((com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards other) {
        if (other == com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards.getDefaultInstance()) return this;
        if (cumulativeRewardsPerSatBuilder_ == null) {
          if (!other.cumulativeRewardsPerSat_.isEmpty()) {
            if (cumulativeRewardsPerSat_.isEmpty()) {
              cumulativeRewardsPerSat_ = other.cumulativeRewardsPerSat_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCumulativeRewardsPerSatIsMutable();
              cumulativeRewardsPerSat_.addAll(other.cumulativeRewardsPerSat_);
            }
            onChanged();
          }
        } else {
          if (!other.cumulativeRewardsPerSat_.isEmpty()) {
            if (cumulativeRewardsPerSatBuilder_.isEmpty()) {
              cumulativeRewardsPerSatBuilder_.dispose();
              cumulativeRewardsPerSatBuilder_ = null;
              cumulativeRewardsPerSat_ = other.cumulativeRewardsPerSat_;
              bitField0_ = (bitField0_ & ~0x00000001);
              cumulativeRewardsPerSatBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCumulativeRewardsPerSatFieldBuilder() : null;
            } else {
              cumulativeRewardsPerSatBuilder_.addAllMessages(other.cumulativeRewardsPerSat_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.cosmos.base.v1beta1.CoinProto.Coin m =
                    input.readMessage(
                        com.cosmos.base.v1beta1.CoinProto.Coin.parser(),
                        extensionRegistry);
                if (cumulativeRewardsPerSatBuilder_ == null) {
                  ensureCumulativeRewardsPerSatIsMutable();
                  cumulativeRewardsPerSat_.add(m);
                } else {
                  cumulativeRewardsPerSatBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> cumulativeRewardsPerSat_ =
        java.util.Collections.emptyList();
      private void ensureCumulativeRewardsPerSatIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          cumulativeRewardsPerSat_ = new java.util.ArrayList<com.cosmos.base.v1beta1.CoinProto.Coin>(cumulativeRewardsPerSat_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> cumulativeRewardsPerSatBuilder_;

      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> getCumulativeRewardsPerSatList() {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          return java.util.Collections.unmodifiableList(cumulativeRewardsPerSat_);
        } else {
          return cumulativeRewardsPerSatBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public int getCumulativeRewardsPerSatCount() {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          return cumulativeRewardsPerSat_.size();
        } else {
          return cumulativeRewardsPerSatBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin getCumulativeRewardsPerSat(int index) {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          return cumulativeRewardsPerSat_.get(index);
        } else {
          return cumulativeRewardsPerSatBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder setCumulativeRewardsPerSat(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCumulativeRewardsPerSatIsMutable();
          cumulativeRewardsPerSat_.set(index, value);
          onChanged();
        } else {
          cumulativeRewardsPerSatBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder setCumulativeRewardsPerSat(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          ensureCumulativeRewardsPerSatIsMutable();
          cumulativeRewardsPerSat_.set(index, builderForValue.build());
          onChanged();
        } else {
          cumulativeRewardsPerSatBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCumulativeRewardsPerSat(com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCumulativeRewardsPerSatIsMutable();
          cumulativeRewardsPerSat_.add(value);
          onChanged();
        } else {
          cumulativeRewardsPerSatBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCumulativeRewardsPerSat(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCumulativeRewardsPerSatIsMutable();
          cumulativeRewardsPerSat_.add(index, value);
          onChanged();
        } else {
          cumulativeRewardsPerSatBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCumulativeRewardsPerSat(
          com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          ensureCumulativeRewardsPerSatIsMutable();
          cumulativeRewardsPerSat_.add(builderForValue.build());
          onChanged();
        } else {
          cumulativeRewardsPerSatBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCumulativeRewardsPerSat(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          ensureCumulativeRewardsPerSatIsMutable();
          cumulativeRewardsPerSat_.add(index, builderForValue.build());
          onChanged();
        } else {
          cumulativeRewardsPerSatBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addAllCumulativeRewardsPerSat(
          java.lang.Iterable<? extends com.cosmos.base.v1beta1.CoinProto.Coin> values) {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          ensureCumulativeRewardsPerSatIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, cumulativeRewardsPerSat_);
          onChanged();
        } else {
          cumulativeRewardsPerSatBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder clearCumulativeRewardsPerSat() {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          cumulativeRewardsPerSat_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          cumulativeRewardsPerSatBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder removeCumulativeRewardsPerSat(int index) {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          ensureCumulativeRewardsPerSatIsMutable();
          cumulativeRewardsPerSat_.remove(index);
          onChanged();
        } else {
          cumulativeRewardsPerSatBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder getCumulativeRewardsPerSatBuilder(
          int index) {
        return getCumulativeRewardsPerSatFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getCumulativeRewardsPerSatOrBuilder(
          int index) {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          return cumulativeRewardsPerSat_.get(index);  } else {
          return cumulativeRewardsPerSatBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
           getCumulativeRewardsPerSatOrBuilderList() {
        if (cumulativeRewardsPerSatBuilder_ != null) {
          return cumulativeRewardsPerSatBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(cumulativeRewardsPerSat_);
        }
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder addCumulativeRewardsPerSatBuilder() {
        return getCumulativeRewardsPerSatFieldBuilder().addBuilder(
            com.cosmos.base.v1beta1.CoinProto.Coin.getDefaultInstance());
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder addCumulativeRewardsPerSatBuilder(
          int index) {
        return getCumulativeRewardsPerSatFieldBuilder().addBuilder(
            index, com.cosmos.base.v1beta1.CoinProto.Coin.getDefaultInstance());
      }
      /**
       * <pre>
       * The cumulative rewards of that finality provider per sat until that period
       * This coins will aways increase the value, never be reduced due to keep
       * acumulation and when the cumulative rewards will be used to distribute
       * rewards, 2 periods will be loaded, calculate the difference and multiplied
       * by the total sat amount delegated
       * https://github.com/cosmos/cosmos-sdk/blob/e76102f885b71fd6e1c1efb692052173c4b3c3a3/x/distribution/keeper/delegation.go#L47
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin cumulative_rewards_per_sat = 1 [json_name = "cumulativeRewardsPerSat", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin.Builder> 
           getCumulativeRewardsPerSatBuilderList() {
        return getCumulativeRewardsPerSatFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
          getCumulativeRewardsPerSatFieldBuilder() {
        if (cumulativeRewardsPerSatBuilder_ == null) {
          cumulativeRewardsPerSatBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder>(
                  cumulativeRewardsPerSat_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          cumulativeRewardsPerSat_ = null;
        }
        return cumulativeRewardsPerSatBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.incentive.FinalityProviderHistoricalRewards)
    }

    // @@protoc_insertion_point(class_scope:babylon.incentive.FinalityProviderHistoricalRewards)
    private static final com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards();
    }

    public static com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FinalityProviderHistoricalRewards>
        PARSER = new com.google.protobuf.AbstractParser<FinalityProviderHistoricalRewards>() {
      @java.lang.Override
      public FinalityProviderHistoricalRewards parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<FinalityProviderHistoricalRewards> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FinalityProviderHistoricalRewards> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.incentive.RewardsProto.FinalityProviderHistoricalRewards getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FinalityProviderCurrentRewardsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.incentive.FinalityProviderCurrentRewards)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * CurrentRewards is the current rewards that the finality provider have and
     * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
     * something happens that modifies the amount of satoshis delegated to this
     * finality provider or the delegators starting period (activation, unbonding
     * or btc rewards withdraw) a new period must be created, accumulate this
     * rewards to FinalityProviderHistoricalRewards with a new period and zero out
     * the Current Rewards.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> 
        getCurrentRewardsList();
    /**
     * <pre>
     * CurrentRewards is the current rewards that the finality provider have and
     * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
     * something happens that modifies the amount of satoshis delegated to this
     * finality provider or the delegators starting period (activation, unbonding
     * or btc rewards withdraw) a new period must be created, accumulate this
     * rewards to FinalityProviderHistoricalRewards with a new period and zero out
     * the Current Rewards.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    com.cosmos.base.v1beta1.CoinProto.Coin getCurrentRewards(int index);
    /**
     * <pre>
     * CurrentRewards is the current rewards that the finality provider have and
     * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
     * something happens that modifies the amount of satoshis delegated to this
     * finality provider or the delegators starting period (activation, unbonding
     * or btc rewards withdraw) a new period must be created, accumulate this
     * rewards to FinalityProviderHistoricalRewards with a new period and zero out
     * the Current Rewards.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    int getCurrentRewardsCount();
    /**
     * <pre>
     * CurrentRewards is the current rewards that the finality provider have and
     * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
     * something happens that modifies the amount of satoshis delegated to this
     * finality provider or the delegators starting period (activation, unbonding
     * or btc rewards withdraw) a new period must be created, accumulate this
     * rewards to FinalityProviderHistoricalRewards with a new period and zero out
     * the Current Rewards.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
        getCurrentRewardsOrBuilderList();
    /**
     * <pre>
     * CurrentRewards is the current rewards that the finality provider have and
     * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
     * something happens that modifies the amount of satoshis delegated to this
     * finality provider or the delegators starting period (activation, unbonding
     * or btc rewards withdraw) a new period must be created, accumulate this
     * rewards to FinalityProviderHistoricalRewards with a new period and zero out
     * the Current Rewards.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getCurrentRewardsOrBuilder(
        int index);

    /**
     * <pre>
     * Period stores the current period that serves as a reference for
     * creating new historical rewards and correlate with
     * BTCDelegationRewardsTracker StartPeriodCumulativeReward.
     * </pre>
     *
     * <code>uint64 period = 2 [json_name = "period"];</code>
     * @return The period.
     */
    long getPeriod();

    /**
     * <pre>
     * TotalActiveSat is the total amount of active satoshi delegated
     * to this finality provider.
     * </pre>
     *
     * <code>bytes total_active_sat = 3 [json_name = "totalActiveSat", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     * @return The totalActiveSat.
     */
    com.google.protobuf.ByteString getTotalActiveSat();
  }
  /**
   * <pre>
   * FinalityProviderCurrentRewards represents the current rewards of the pool of
   * BTC delegations that delegated for this finality provider is entitled to.
   * Note: This rewards are for the BTC delegators that delegated to this FP
   * the FP itself is not the owner or can withdraw this rewards.
   * If a slash event happens with this finality provider, all the delegations
   * need to withdraw to the RewardGauge and the related scrutures should be
   * deleted. Key: Prefix + Finality provider bech32 address.
   * </pre>
   *
   * Protobuf type {@code babylon.incentive.FinalityProviderCurrentRewards}
   */
  public static final class FinalityProviderCurrentRewards extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.incentive.FinalityProviderCurrentRewards)
      FinalityProviderCurrentRewardsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FinalityProviderCurrentRewards.newBuilder() to construct.
    private FinalityProviderCurrentRewards(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FinalityProviderCurrentRewards() {
      currentRewards_ = java.util.Collections.emptyList();
      totalActiveSat_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FinalityProviderCurrentRewards();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_FinalityProviderCurrentRewards_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_FinalityProviderCurrentRewards_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards.class, com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards.Builder.class);
    }

    public static final int CURRENT_REWARDS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> currentRewards_;
    /**
     * <pre>
     * CurrentRewards is the current rewards that the finality provider have and
     * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
     * something happens that modifies the amount of satoshis delegated to this
     * finality provider or the delegators starting period (activation, unbonding
     * or btc rewards withdraw) a new period must be created, accumulate this
     * rewards to FinalityProviderHistoricalRewards with a new period and zero out
     * the Current Rewards.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> getCurrentRewardsList() {
      return currentRewards_;
    }
    /**
     * <pre>
     * CurrentRewards is the current rewards that the finality provider have and
     * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
     * something happens that modifies the amount of satoshis delegated to this
     * finality provider or the delegators starting period (activation, unbonding
     * or btc rewards withdraw) a new period must be created, accumulate this
     * rewards to FinalityProviderHistoricalRewards with a new period and zero out
     * the Current Rewards.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
        getCurrentRewardsOrBuilderList() {
      return currentRewards_;
    }
    /**
     * <pre>
     * CurrentRewards is the current rewards that the finality provider have and
     * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
     * something happens that modifies the amount of satoshis delegated to this
     * finality provider or the delegators starting period (activation, unbonding
     * or btc rewards withdraw) a new period must be created, accumulate this
     * rewards to FinalityProviderHistoricalRewards with a new period and zero out
     * the Current Rewards.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public int getCurrentRewardsCount() {
      return currentRewards_.size();
    }
    /**
     * <pre>
     * CurrentRewards is the current rewards that the finality provider have and
     * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
     * something happens that modifies the amount of satoshis delegated to this
     * finality provider or the delegators starting period (activation, unbonding
     * or btc rewards withdraw) a new period must be created, accumulate this
     * rewards to FinalityProviderHistoricalRewards with a new period and zero out
     * the Current Rewards.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public com.cosmos.base.v1beta1.CoinProto.Coin getCurrentRewards(int index) {
      return currentRewards_.get(index);
    }
    /**
     * <pre>
     * CurrentRewards is the current rewards that the finality provider have and
     * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
     * something happens that modifies the amount of satoshis delegated to this
     * finality provider or the delegators starting period (activation, unbonding
     * or btc rewards withdraw) a new period must be created, accumulate this
     * rewards to FinalityProviderHistoricalRewards with a new period and zero out
     * the Current Rewards.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getCurrentRewardsOrBuilder(
        int index) {
      return currentRewards_.get(index);
    }

    public static final int PERIOD_FIELD_NUMBER = 2;
    private long period_ = 0L;
    /**
     * <pre>
     * Period stores the current period that serves as a reference for
     * creating new historical rewards and correlate with
     * BTCDelegationRewardsTracker StartPeriodCumulativeReward.
     * </pre>
     *
     * <code>uint64 period = 2 [json_name = "period"];</code>
     * @return The period.
     */
    @java.lang.Override
    public long getPeriod() {
      return period_;
    }

    public static final int TOTAL_ACTIVE_SAT_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString totalActiveSat_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * TotalActiveSat is the total amount of active satoshi delegated
     * to this finality provider.
     * </pre>
     *
     * <code>bytes total_active_sat = 3 [json_name = "totalActiveSat", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     * @return The totalActiveSat.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getTotalActiveSat() {
      return totalActiveSat_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < currentRewards_.size(); i++) {
        output.writeMessage(1, currentRewards_.get(i));
      }
      if (period_ != 0L) {
        output.writeUInt64(2, period_);
      }
      if (!totalActiveSat_.isEmpty()) {
        output.writeBytes(3, totalActiveSat_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < currentRewards_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, currentRewards_.get(i));
      }
      if (period_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, period_);
      }
      if (!totalActiveSat_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, totalActiveSat_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards)) {
        return super.equals(obj);
      }
      com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards other = (com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards) obj;

      if (!getCurrentRewardsList()
          .equals(other.getCurrentRewardsList())) return false;
      if (getPeriod()
          != other.getPeriod()) return false;
      if (!getTotalActiveSat()
          .equals(other.getTotalActiveSat())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getCurrentRewardsCount() > 0) {
        hash = (37 * hash) + CURRENT_REWARDS_FIELD_NUMBER;
        hash = (53 * hash) + getCurrentRewardsList().hashCode();
      }
      hash = (37 * hash) + PERIOD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getPeriod());
      hash = (37 * hash) + TOTAL_ACTIVE_SAT_FIELD_NUMBER;
      hash = (53 * hash) + getTotalActiveSat().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * FinalityProviderCurrentRewards represents the current rewards of the pool of
     * BTC delegations that delegated for this finality provider is entitled to.
     * Note: This rewards are for the BTC delegators that delegated to this FP
     * the FP itself is not the owner or can withdraw this rewards.
     * If a slash event happens with this finality provider, all the delegations
     * need to withdraw to the RewardGauge and the related scrutures should be
     * deleted. Key: Prefix + Finality provider bech32 address.
     * </pre>
     *
     * Protobuf type {@code babylon.incentive.FinalityProviderCurrentRewards}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.incentive.FinalityProviderCurrentRewards)
        com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewardsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_FinalityProviderCurrentRewards_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_FinalityProviderCurrentRewards_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards.class, com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards.Builder.class);
      }

      // Construct using com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (currentRewardsBuilder_ == null) {
          currentRewards_ = java.util.Collections.emptyList();
        } else {
          currentRewards_ = null;
          currentRewardsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        period_ = 0L;
        totalActiveSat_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_FinalityProviderCurrentRewards_descriptor;
      }

      @java.lang.Override
      public com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards getDefaultInstanceForType() {
        return com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards build() {
        com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards buildPartial() {
        com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards result = new com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards result) {
        if (currentRewardsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            currentRewards_ = java.util.Collections.unmodifiableList(currentRewards_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.currentRewards_ = currentRewards_;
        } else {
          result.currentRewards_ = currentRewardsBuilder_.build();
        }
      }

      private void buildPartial0(com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.period_ = period_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.totalActiveSat_ = totalActiveSat_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards) {
          return mergeFrom((com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards other) {
        if (other == com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards.getDefaultInstance()) return this;
        if (currentRewardsBuilder_ == null) {
          if (!other.currentRewards_.isEmpty()) {
            if (currentRewards_.isEmpty()) {
              currentRewards_ = other.currentRewards_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCurrentRewardsIsMutable();
              currentRewards_.addAll(other.currentRewards_);
            }
            onChanged();
          }
        } else {
          if (!other.currentRewards_.isEmpty()) {
            if (currentRewardsBuilder_.isEmpty()) {
              currentRewardsBuilder_.dispose();
              currentRewardsBuilder_ = null;
              currentRewards_ = other.currentRewards_;
              bitField0_ = (bitField0_ & ~0x00000001);
              currentRewardsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCurrentRewardsFieldBuilder() : null;
            } else {
              currentRewardsBuilder_.addAllMessages(other.currentRewards_);
            }
          }
        }
        if (other.getPeriod() != 0L) {
          setPeriod(other.getPeriod());
        }
        if (other.getTotalActiveSat() != com.google.protobuf.ByteString.EMPTY) {
          setTotalActiveSat(other.getTotalActiveSat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.cosmos.base.v1beta1.CoinProto.Coin m =
                    input.readMessage(
                        com.cosmos.base.v1beta1.CoinProto.Coin.parser(),
                        extensionRegistry);
                if (currentRewardsBuilder_ == null) {
                  ensureCurrentRewardsIsMutable();
                  currentRewards_.add(m);
                } else {
                  currentRewardsBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 16: {
                period_ = input.readUInt64();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 26: {
                totalActiveSat_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> currentRewards_ =
        java.util.Collections.emptyList();
      private void ensureCurrentRewardsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          currentRewards_ = new java.util.ArrayList<com.cosmos.base.v1beta1.CoinProto.Coin>(currentRewards_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> currentRewardsBuilder_;

      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> getCurrentRewardsList() {
        if (currentRewardsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(currentRewards_);
        } else {
          return currentRewardsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public int getCurrentRewardsCount() {
        if (currentRewardsBuilder_ == null) {
          return currentRewards_.size();
        } else {
          return currentRewardsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin getCurrentRewards(int index) {
        if (currentRewardsBuilder_ == null) {
          return currentRewards_.get(index);
        } else {
          return currentRewardsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder setCurrentRewards(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (currentRewardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCurrentRewardsIsMutable();
          currentRewards_.set(index, value);
          onChanged();
        } else {
          currentRewardsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder setCurrentRewards(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (currentRewardsBuilder_ == null) {
          ensureCurrentRewardsIsMutable();
          currentRewards_.set(index, builderForValue.build());
          onChanged();
        } else {
          currentRewardsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCurrentRewards(com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (currentRewardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCurrentRewardsIsMutable();
          currentRewards_.add(value);
          onChanged();
        } else {
          currentRewardsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCurrentRewards(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (currentRewardsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCurrentRewardsIsMutable();
          currentRewards_.add(index, value);
          onChanged();
        } else {
          currentRewardsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCurrentRewards(
          com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (currentRewardsBuilder_ == null) {
          ensureCurrentRewardsIsMutable();
          currentRewards_.add(builderForValue.build());
          onChanged();
        } else {
          currentRewardsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addCurrentRewards(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (currentRewardsBuilder_ == null) {
          ensureCurrentRewardsIsMutable();
          currentRewards_.add(index, builderForValue.build());
          onChanged();
        } else {
          currentRewardsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addAllCurrentRewards(
          java.lang.Iterable<? extends com.cosmos.base.v1beta1.CoinProto.Coin> values) {
        if (currentRewardsBuilder_ == null) {
          ensureCurrentRewardsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, currentRewards_);
          onChanged();
        } else {
          currentRewardsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder clearCurrentRewards() {
        if (currentRewardsBuilder_ == null) {
          currentRewards_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          currentRewardsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder removeCurrentRewards(int index) {
        if (currentRewardsBuilder_ == null) {
          ensureCurrentRewardsIsMutable();
          currentRewards_.remove(index);
          onChanged();
        } else {
          currentRewardsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder getCurrentRewardsBuilder(
          int index) {
        return getCurrentRewardsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getCurrentRewardsOrBuilder(
          int index) {
        if (currentRewardsBuilder_ == null) {
          return currentRewards_.get(index);  } else {
          return currentRewardsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
           getCurrentRewardsOrBuilderList() {
        if (currentRewardsBuilder_ != null) {
          return currentRewardsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(currentRewards_);
        }
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder addCurrentRewardsBuilder() {
        return getCurrentRewardsFieldBuilder().addBuilder(
            com.cosmos.base.v1beta1.CoinProto.Coin.getDefaultInstance());
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder addCurrentRewardsBuilder(
          int index) {
        return getCurrentRewardsFieldBuilder().addBuilder(
            index, com.cosmos.base.v1beta1.CoinProto.Coin.getDefaultInstance());
      }
      /**
       * <pre>
       * CurrentRewards is the current rewards that the finality provider have and
       * it was not yet stored inside the FinalityProviderHistoricalRewards. Once
       * something happens that modifies the amount of satoshis delegated to this
       * finality provider or the delegators starting period (activation, unbonding
       * or btc rewards withdraw) a new period must be created, accumulate this
       * rewards to FinalityProviderHistoricalRewards with a new period and zero out
       * the Current Rewards.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin current_rewards = 1 [json_name = "currentRewards", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin.Builder> 
           getCurrentRewardsBuilderList() {
        return getCurrentRewardsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
          getCurrentRewardsFieldBuilder() {
        if (currentRewardsBuilder_ == null) {
          currentRewardsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder>(
                  currentRewards_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          currentRewards_ = null;
        }
        return currentRewardsBuilder_;
      }

      private long period_ ;
      /**
       * <pre>
       * Period stores the current period that serves as a reference for
       * creating new historical rewards and correlate with
       * BTCDelegationRewardsTracker StartPeriodCumulativeReward.
       * </pre>
       *
       * <code>uint64 period = 2 [json_name = "period"];</code>
       * @return The period.
       */
      @java.lang.Override
      public long getPeriod() {
        return period_;
      }
      /**
       * <pre>
       * Period stores the current period that serves as a reference for
       * creating new historical rewards and correlate with
       * BTCDelegationRewardsTracker StartPeriodCumulativeReward.
       * </pre>
       *
       * <code>uint64 period = 2 [json_name = "period"];</code>
       * @param value The period to set.
       * @return This builder for chaining.
       */
      public Builder setPeriod(long value) {

        period_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Period stores the current period that serves as a reference for
       * creating new historical rewards and correlate with
       * BTCDelegationRewardsTracker StartPeriodCumulativeReward.
       * </pre>
       *
       * <code>uint64 period = 2 [json_name = "period"];</code>
       * @return This builder for chaining.
       */
      public Builder clearPeriod() {
        bitField0_ = (bitField0_ & ~0x00000002);
        period_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString totalActiveSat_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * TotalActiveSat is the total amount of active satoshi delegated
       * to this finality provider.
       * </pre>
       *
       * <code>bytes total_active_sat = 3 [json_name = "totalActiveSat", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
       * @return The totalActiveSat.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getTotalActiveSat() {
        return totalActiveSat_;
      }
      /**
       * <pre>
       * TotalActiveSat is the total amount of active satoshi delegated
       * to this finality provider.
       * </pre>
       *
       * <code>bytes total_active_sat = 3 [json_name = "totalActiveSat", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
       * @param value The totalActiveSat to set.
       * @return This builder for chaining.
       */
      public Builder setTotalActiveSat(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        totalActiveSat_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TotalActiveSat is the total amount of active satoshi delegated
       * to this finality provider.
       * </pre>
       *
       * <code>bytes total_active_sat = 3 [json_name = "totalActiveSat", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTotalActiveSat() {
        bitField0_ = (bitField0_ & ~0x00000004);
        totalActiveSat_ = getDefaultInstance().getTotalActiveSat();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.incentive.FinalityProviderCurrentRewards)
    }

    // @@protoc_insertion_point(class_scope:babylon.incentive.FinalityProviderCurrentRewards)
    private static final com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards();
    }

    public static com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FinalityProviderCurrentRewards>
        PARSER = new com.google.protobuf.AbstractParser<FinalityProviderCurrentRewards>() {
      @java.lang.Override
      public FinalityProviderCurrentRewards parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<FinalityProviderCurrentRewards> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FinalityProviderCurrentRewards> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.incentive.RewardsProto.FinalityProviderCurrentRewards getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BTCDelegationRewardsTrackerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:babylon.incentive.BTCDelegationRewardsTracker)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * StartPeriodCumulativeReward the starting period the the BTC delegator
     * made his last withdraw of rewards or modified his active staking amount
     * of satoshis.
     * </pre>
     *
     * <code>uint64 start_period_cumulative_reward = 1 [json_name = "startPeriodCumulativeReward"];</code>
     * @return The startPeriodCumulativeReward.
     */
    long getStartPeriodCumulativeReward();

    /**
     * <pre>
     * TotalActiveSat is the total amount of active satoshi delegated
     * to one specific finality provider.
     * </pre>
     *
     * <code>bytes total_active_sat = 2 [json_name = "totalActiveSat", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     * @return The totalActiveSat.
     */
    com.google.protobuf.ByteString getTotalActiveSat();
  }
  /**
   * <pre>
   * BTCDelegationRewardsTracker represents the structure that holds information
   * from the last time this BTC delegator withdraw the rewards or modified his
   * active staked amount to one finality provider.
   * The finality provider address is ommitted here but should be part of the
   * key used to store this structure together with the BTC delegator address.
   * </pre>
   *
   * Protobuf type {@code babylon.incentive.BTCDelegationRewardsTracker}
   */
  public static final class BTCDelegationRewardsTracker extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:babylon.incentive.BTCDelegationRewardsTracker)
      BTCDelegationRewardsTrackerOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BTCDelegationRewardsTracker.newBuilder() to construct.
    private BTCDelegationRewardsTracker(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BTCDelegationRewardsTracker() {
      totalActiveSat_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BTCDelegationRewardsTracker();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_BTCDelegationRewardsTracker_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_BTCDelegationRewardsTracker_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker.class, com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker.Builder.class);
    }

    public static final int START_PERIOD_CUMULATIVE_REWARD_FIELD_NUMBER = 1;
    private long startPeriodCumulativeReward_ = 0L;
    /**
     * <pre>
     * StartPeriodCumulativeReward the starting period the the BTC delegator
     * made his last withdraw of rewards or modified his active staking amount
     * of satoshis.
     * </pre>
     *
     * <code>uint64 start_period_cumulative_reward = 1 [json_name = "startPeriodCumulativeReward"];</code>
     * @return The startPeriodCumulativeReward.
     */
    @java.lang.Override
    public long getStartPeriodCumulativeReward() {
      return startPeriodCumulativeReward_;
    }

    public static final int TOTAL_ACTIVE_SAT_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString totalActiveSat_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * TotalActiveSat is the total amount of active satoshi delegated
     * to one specific finality provider.
     * </pre>
     *
     * <code>bytes total_active_sat = 2 [json_name = "totalActiveSat", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
     * @return The totalActiveSat.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getTotalActiveSat() {
      return totalActiveSat_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (startPeriodCumulativeReward_ != 0L) {
        output.writeUInt64(1, startPeriodCumulativeReward_);
      }
      if (!totalActiveSat_.isEmpty()) {
        output.writeBytes(2, totalActiveSat_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (startPeriodCumulativeReward_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, startPeriodCumulativeReward_);
      }
      if (!totalActiveSat_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, totalActiveSat_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker)) {
        return super.equals(obj);
      }
      com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker other = (com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker) obj;

      if (getStartPeriodCumulativeReward()
          != other.getStartPeriodCumulativeReward()) return false;
      if (!getTotalActiveSat()
          .equals(other.getTotalActiveSat())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + START_PERIOD_CUMULATIVE_REWARD_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getStartPeriodCumulativeReward());
      hash = (37 * hash) + TOTAL_ACTIVE_SAT_FIELD_NUMBER;
      hash = (53 * hash) + getTotalActiveSat().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * BTCDelegationRewardsTracker represents the structure that holds information
     * from the last time this BTC delegator withdraw the rewards or modified his
     * active staked amount to one finality provider.
     * The finality provider address is ommitted here but should be part of the
     * key used to store this structure together with the BTC delegator address.
     * </pre>
     *
     * Protobuf type {@code babylon.incentive.BTCDelegationRewardsTracker}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:babylon.incentive.BTCDelegationRewardsTracker)
        com.babylon.incentive.RewardsProto.BTCDelegationRewardsTrackerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_BTCDelegationRewardsTracker_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_BTCDelegationRewardsTracker_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker.class, com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker.Builder.class);
      }

      // Construct using com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        startPeriodCumulativeReward_ = 0L;
        totalActiveSat_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.babylon.incentive.RewardsProto.internal_static_babylon_incentive_BTCDelegationRewardsTracker_descriptor;
      }

      @java.lang.Override
      public com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker getDefaultInstanceForType() {
        return com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker.getDefaultInstance();
      }

      @java.lang.Override
      public com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker build() {
        com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker buildPartial() {
        com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker result = new com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.startPeriodCumulativeReward_ = startPeriodCumulativeReward_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.totalActiveSat_ = totalActiveSat_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker) {
          return mergeFrom((com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker other) {
        if (other == com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker.getDefaultInstance()) return this;
        if (other.getStartPeriodCumulativeReward() != 0L) {
          setStartPeriodCumulativeReward(other.getStartPeriodCumulativeReward());
        }
        if (other.getTotalActiveSat() != com.google.protobuf.ByteString.EMPTY) {
          setTotalActiveSat(other.getTotalActiveSat());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                startPeriodCumulativeReward_ = input.readUInt64();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                totalActiveSat_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private long startPeriodCumulativeReward_ ;
      /**
       * <pre>
       * StartPeriodCumulativeReward the starting period the the BTC delegator
       * made his last withdraw of rewards or modified his active staking amount
       * of satoshis.
       * </pre>
       *
       * <code>uint64 start_period_cumulative_reward = 1 [json_name = "startPeriodCumulativeReward"];</code>
       * @return The startPeriodCumulativeReward.
       */
      @java.lang.Override
      public long getStartPeriodCumulativeReward() {
        return startPeriodCumulativeReward_;
      }
      /**
       * <pre>
       * StartPeriodCumulativeReward the starting period the the BTC delegator
       * made his last withdraw of rewards or modified his active staking amount
       * of satoshis.
       * </pre>
       *
       * <code>uint64 start_period_cumulative_reward = 1 [json_name = "startPeriodCumulativeReward"];</code>
       * @param value The startPeriodCumulativeReward to set.
       * @return This builder for chaining.
       */
      public Builder setStartPeriodCumulativeReward(long value) {

        startPeriodCumulativeReward_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * StartPeriodCumulativeReward the starting period the the BTC delegator
       * made his last withdraw of rewards or modified his active staking amount
       * of satoshis.
       * </pre>
       *
       * <code>uint64 start_period_cumulative_reward = 1 [json_name = "startPeriodCumulativeReward"];</code>
       * @return This builder for chaining.
       */
      public Builder clearStartPeriodCumulativeReward() {
        bitField0_ = (bitField0_ & ~0x00000001);
        startPeriodCumulativeReward_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString totalActiveSat_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * TotalActiveSat is the total amount of active satoshi delegated
       * to one specific finality provider.
       * </pre>
       *
       * <code>bytes total_active_sat = 2 [json_name = "totalActiveSat", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
       * @return The totalActiveSat.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getTotalActiveSat() {
        return totalActiveSat_;
      }
      /**
       * <pre>
       * TotalActiveSat is the total amount of active satoshi delegated
       * to one specific finality provider.
       * </pre>
       *
       * <code>bytes total_active_sat = 2 [json_name = "totalActiveSat", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
       * @param value The totalActiveSat to set.
       * @return This builder for chaining.
       */
      public Builder setTotalActiveSat(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        totalActiveSat_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TotalActiveSat is the total amount of active satoshi delegated
       * to one specific finality provider.
       * </pre>
       *
       * <code>bytes total_active_sat = 2 [json_name = "totalActiveSat", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
       * @return This builder for chaining.
       */
      public Builder clearTotalActiveSat() {
        bitField0_ = (bitField0_ & ~0x00000002);
        totalActiveSat_ = getDefaultInstance().getTotalActiveSat();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:babylon.incentive.BTCDelegationRewardsTracker)
    }

    // @@protoc_insertion_point(class_scope:babylon.incentive.BTCDelegationRewardsTracker)
    private static final com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker();
    }

    public static com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BTCDelegationRewardsTracker>
        PARSER = new com.google.protobuf.AbstractParser<BTCDelegationRewardsTracker>() {
      @java.lang.Override
      public BTCDelegationRewardsTracker parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BTCDelegationRewardsTracker> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BTCDelegationRewardsTracker> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.babylon.incentive.RewardsProto.BTCDelegationRewardsTracker getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_incentive_FinalityProviderHistoricalRewards_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_incentive_FinalityProviderHistoricalRewards_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_incentive_FinalityProviderCurrentRewards_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_incentive_FinalityProviderCurrentRewards_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_babylon_incentive_BTCDelegationRewardsTracker_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_babylon_incentive_BTCDelegationRewardsTracker_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037babylon/incentive/rewards.proto\022\021babyl" +
      "on.incentive\032\024gogoproto/gogo.proto\032\036cosm" +
      "os/base/v1beta1/coin.proto\032\031cosmos_proto" +
      "/cosmos.proto\"\256\001\n!FinalityProviderHistor" +
      "icalRewards\022\210\001\n\032cumulative_rewards_per_s" +
      "at\030\001 \003(\0132\031.cosmos.base.v1beta1.CoinB0\310\336\037" +
      "\000\252\337\037(github.com/cosmos/cosmos-sdk/types." +
      "CoinsR\027cumulativeRewardsPerSat\"\205\002\n\036Final" +
      "ityProviderCurrentRewards\022t\n\017current_rew" +
      "ards\030\001 \003(\0132\031.cosmos.base.v1beta1.CoinB0\310" +
      "\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk/type" +
      "s.CoinsR\016currentRewards\022\026\n\006period\030\002 \001(\004R" +
      "\006period\022U\n\020total_active_sat\030\003 \001(\014B+\310\336\037\000\332" +
      "\336\037\025cosmossdk.io/math.Int\322\264-\ncosmos.IntR\016" +
      "totalActiveSat\"\271\001\n\033BTCDelegationRewardsT" +
      "racker\022C\n\036start_period_cumulative_reward" +
      "\030\001 \001(\004R\033startPeriodCumulativeReward\022U\n\020t" +
      "otal_active_sat\030\002 \001(\014B+\310\336\037\000\332\336\037\025cosmossdk" +
      ".io/math.Int\322\264-\ncosmos.IntR\016totalActiveS" +
      "atB\275\001\n\025com.babylon.incentiveB\014RewardsPro" +
      "toZ3github.com/babylonlabs-io/babylon/x/" +
      "incentive/types\242\002\003BIX\252\002\021Babylon.Incentiv" +
      "e\312\002\021Babylon\\Incentive\342\002\035Babylon\\Incentiv" +
      "e\\GPBMetadata\352\002\022Babylon::Incentiveb\006prot" +
      "o3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.gogoproto.GogoProto.getDescriptor(),
          com.cosmos.base.v1beta1.CoinProto.getDescriptor(),
          com.cosmos_proto.CosmosProto.getDescriptor(),
        });
    internal_static_babylon_incentive_FinalityProviderHistoricalRewards_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_babylon_incentive_FinalityProviderHistoricalRewards_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_incentive_FinalityProviderHistoricalRewards_descriptor,
        new java.lang.String[] { "CumulativeRewardsPerSat", });
    internal_static_babylon_incentive_FinalityProviderCurrentRewards_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_babylon_incentive_FinalityProviderCurrentRewards_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_incentive_FinalityProviderCurrentRewards_descriptor,
        new java.lang.String[] { "CurrentRewards", "Period", "TotalActiveSat", });
    internal_static_babylon_incentive_BTCDelegationRewardsTracker_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_babylon_incentive_BTCDelegationRewardsTracker_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_babylon_incentive_BTCDelegationRewardsTracker_descriptor,
        new java.lang.String[] { "StartPeriodCumulativeReward", "TotalActiveSat", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.cosmos_proto.CosmosProto.scalar);
    registry.add(com.gogoproto.GogoProto.castrepeated);
    registry.add(com.gogoproto.GogoProto.customtype);
    registry.add(com.gogoproto.GogoProto.nullable);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.gogoproto.GogoProto.getDescriptor();
    com.cosmos.base.v1beta1.CoinProto.getDescriptor();
    com.cosmos_proto.CosmosProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
