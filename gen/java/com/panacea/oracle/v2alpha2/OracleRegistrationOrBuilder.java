// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: panacea/oracle/v2alpha2/oracle.proto

package com.panacea.oracle.v2alpha2;

public interface OracleRegistrationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:panacea.oracle.v2alpha2.OracleRegistration)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string unique_id = 1 [json_name = "uniqueId"];</code>
   * @return The uniqueId.
   */
  java.lang.String getUniqueId();
  /**
   * <code>string unique_id = 1 [json_name = "uniqueId"];</code>
   * @return The bytes for uniqueId.
   */
  com.google.protobuf.ByteString
      getUniqueIdBytes();

  /**
   * <code>string address = 2 [json_name = "address"];</code>
   * @return The address.
   */
  java.lang.String getAddress();
  /**
   * <code>string address = 2 [json_name = "address"];</code>
   * @return The bytes for address.
   */
  com.google.protobuf.ByteString
      getAddressBytes();

  /**
   * <pre>
   * Node public key is a pair with a node private key which is generated in SGX by each oracle.
   * This key is used to share the oracle private key from other oracles.
   * </pre>
   *
   * <code>bytes node_pub_key = 3 [json_name = "nodePubKey"];</code>
   * @return The nodePubKey.
   */
  com.google.protobuf.ByteString getNodePubKey();

  /**
   * <pre>
   * Anyone can validate that the node key pair is generated in SGX using this node key remote report.
   * </pre>
   *
   * <code>bytes node_pub_key_remote_report = 4 [json_name = "nodePubKeyRemoteReport"];</code>
   * @return The nodePubKeyRemoteReport.
   */
  com.google.protobuf.ByteString getNodePubKeyRemoteReport();

  /**
   * <pre>
   * The trusted block info is required for light client.
   * Other oracle can validate whether the oracle set correct trusted block info.
   * </pre>
   *
   * <code>int64 trusted_block_height = 5 [json_name = "trustedBlockHeight"];</code>
   * @return The trustedBlockHeight.
   */
  long getTrustedBlockHeight();

  /**
   * <code>bytes trusted_block_hash = 6 [json_name = "trustedBlockHash"];</code>
   * @return The trustedBlockHash.
   */
  com.google.protobuf.ByteString getTrustedBlockHash();

  /**
   * <pre>
   * Encrypted oracle private key by node public key, which can only be decrypted in SGX securely.
   * </pre>
   *
   * <code>bytes encrypted_oracle_priv_key = 7 [json_name = "encryptedOraclePrivKey"];</code>
   * @return The encryptedOraclePrivKey.
   */
  com.google.protobuf.ByteString getEncryptedOraclePrivKey();

  /**
   * <pre>
   * The status of OracleRegistration.
   * </pre>
   *
   * <code>.panacea.oracle.v2alpha2.OracleRegistrationStatus status = 8 [json_name = "status"];</code>
   * @return The enum numeric value on the wire for status.
   */
  int getStatusValue();
  /**
   * <pre>
   * The status of OracleRegistration.
   * </pre>
   *
   * <code>.panacea.oracle.v2alpha2.OracleRegistrationStatus status = 8 [json_name = "status"];</code>
   * @return The status.
   */
  com.panacea.oracle.v2alpha2.OracleRegistrationStatus getStatus();

  /**
   * <code>.panacea.oracle.v2alpha2.VotingPeriod voting_period = 9 [json_name = "votingPeriod"];</code>
   * @return Whether the votingPeriod field is set.
   */
  boolean hasVotingPeriod();
  /**
   * <code>.panacea.oracle.v2alpha2.VotingPeriod voting_period = 9 [json_name = "votingPeriod"];</code>
   * @return The votingPeriod.
   */
  com.panacea.oracle.v2alpha2.VotingPeriod getVotingPeriod();
  /**
   * <code>.panacea.oracle.v2alpha2.VotingPeriod voting_period = 9 [json_name = "votingPeriod"];</code>
   */
  com.panacea.oracle.v2alpha2.VotingPeriodOrBuilder getVotingPeriodOrBuilder();

  /**
   * <code>.panacea.oracle.v2alpha2.TallyResult tally_result = 10 [json_name = "tallyResult"];</code>
   * @return Whether the tallyResult field is set.
   */
  boolean hasTallyResult();
  /**
   * <code>.panacea.oracle.v2alpha2.TallyResult tally_result = 10 [json_name = "tallyResult"];</code>
   * @return The tallyResult.
   */
  com.panacea.oracle.v2alpha2.TallyResult getTallyResult();
  /**
   * <code>.panacea.oracle.v2alpha2.TallyResult tally_result = 10 [json_name = "tallyResult"];</code>
   */
  com.panacea.oracle.v2alpha2.TallyResultOrBuilder getTallyResultOrBuilder();

  /**
   * <pre>
   * Nonce required for AES256-GCM encryption
   * </pre>
   *
   * <code>bytes nonce = 11 [json_name = "nonce"];</code>
   * @return The nonce.
   */
  com.google.protobuf.ByteString getNonce();

  /**
   * <pre>
   * Type of registration through which path
   * </pre>
   *
   * <code>.panacea.oracle.v2alpha2.OracleRegistrationType registration_type = 12 [json_name = "registrationType"];</code>
   * @return The enum numeric value on the wire for registrationType.
   */
  int getRegistrationTypeValue();
  /**
   * <pre>
   * Type of registration through which path
   * </pre>
   *
   * <code>.panacea.oracle.v2alpha2.OracleRegistrationType registration_type = 12 [json_name = "registrationType"];</code>
   * @return The registrationType.
   */
  com.panacea.oracle.v2alpha2.OracleRegistrationType getRegistrationType();
}
