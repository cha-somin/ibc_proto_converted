// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: regen/ecocredit/v1alpha2/events.proto

package com.regen.ecocredit.v1alpha2;

public interface EventBuyOrderCreatedOrBuilder extends
    // @@protoc_insertion_point(interface_extends:regen.ecocredit.v1alpha2.EventBuyOrderCreated)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * buy_order_id is the unique ID of buy order.
   * </pre>
   *
   * <code>uint64 buy_order_id = 1 [json_name = "buyOrderId"];</code>
   * @return The buyOrderId.
   */
  long getBuyOrderId();

  /**
   * <pre>
   * sell_order_id is the sell order ID against which the buyer is trying to buy.
   * </pre>
   *
   * <code>uint64 sell_order_id = 2 [json_name = "sellOrderId"];</code>
   * @return The sellOrderId.
   */
  long getSellOrderId();

  /**
   * <pre>
   * quantity is the quantity of credits to buy. If the quantity of credits
   * available is less than this amount the order will be partially filled
   * unless disable_partial_fill is true.
   * </pre>
   *
   * <code>string quantity = 3 [json_name = "quantity"];</code>
   * @return The quantity.
   */
  java.lang.String getQuantity();
  /**
   * <pre>
   * quantity is the quantity of credits to buy. If the quantity of credits
   * available is less than this amount the order will be partially filled
   * unless disable_partial_fill is true.
   * </pre>
   *
   * <code>string quantity = 3 [json_name = "quantity"];</code>
   * @return The bytes for quantity.
   */
  com.google.protobuf.ByteString
      getQuantityBytes();

  /**
   * <pre>
   * bid price is the bid price for this buy order. A credit unit will be
   * settled at a purchase price that is no more than the bid price. The
   * buy order will fail if the buyer does not have enough funds available
   * to complete the purchase.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin bid_price = 4 [json_name = "bidPrice"];</code>
   * @return Whether the bidPrice field is set.
   */
  boolean hasBidPrice();
  /**
   * <pre>
   * bid price is the bid price for this buy order. A credit unit will be
   * settled at a purchase price that is no more than the bid price. The
   * buy order will fail if the buyer does not have enough funds available
   * to complete the purchase.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin bid_price = 4 [json_name = "bidPrice"];</code>
   * @return The bidPrice.
   */
  com.cosmos.base.v1beta1.Coin getBidPrice();
  /**
   * <pre>
   * bid price is the bid price for this buy order. A credit unit will be
   * settled at a purchase price that is no more than the bid price. The
   * buy order will fail if the buyer does not have enough funds available
   * to complete the purchase.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin bid_price = 4 [json_name = "bidPrice"];</code>
   */
  com.cosmos.base.v1beta1.CoinOrBuilder getBidPriceOrBuilder();

  /**
   * <pre>
   * disable_auto_retire allows auto-retirement to be disabled. If it is set to true
   * the credits will not auto-retire and can be resold assuming that the
   * corresponding sell order has auto-retirement disabled. If the sell order
   * hasn't disabled auto-retirement and the buy order tries to disable it,
   * that buy order will fail.
   * </pre>
   *
   * <code>bool disable_auto_retire = 5 [json_name = "disableAutoRetire"];</code>
   * @return The disableAutoRetire.
   */
  boolean getDisableAutoRetire();

  /**
   * <pre>
   * disable_partial_fill disables the default behavior of partially filling
   * buy orders if the requested quantity is not available.
   * </pre>
   *
   * <code>bool disable_partial_fill = 6 [json_name = "disablePartialFill"];</code>
   * @return The disablePartialFill.
   */
  boolean getDisablePartialFill();
}
