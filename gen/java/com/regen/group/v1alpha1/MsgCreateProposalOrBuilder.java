// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: regen/group/v1alpha1/tx.proto

package com.regen.group.v1alpha1;

public interface MsgCreateProposalOrBuilder extends
    // @@protoc_insertion_point(interface_extends:regen.group.v1alpha1.MsgCreateProposal)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * address is the group account address.
   * </pre>
   *
   * <code>string address = 1 [json_name = "address"];</code>
   * @return The address.
   */
  java.lang.String getAddress();
  /**
   * <pre>
   * address is the group account address.
   * </pre>
   *
   * <code>string address = 1 [json_name = "address"];</code>
   * @return The bytes for address.
   */
  com.google.protobuf.ByteString
      getAddressBytes();

  /**
   * <pre>
   * proposers are the account addresses of the proposers.
   * Proposers signatures will be counted as yes votes.
   * </pre>
   *
   * <code>repeated string proposers = 2 [json_name = "proposers"];</code>
   * @return A list containing the proposers.
   */
  java.util.List<java.lang.String>
      getProposersList();
  /**
   * <pre>
   * proposers are the account addresses of the proposers.
   * Proposers signatures will be counted as yes votes.
   * </pre>
   *
   * <code>repeated string proposers = 2 [json_name = "proposers"];</code>
   * @return The count of proposers.
   */
  int getProposersCount();
  /**
   * <pre>
   * proposers are the account addresses of the proposers.
   * Proposers signatures will be counted as yes votes.
   * </pre>
   *
   * <code>repeated string proposers = 2 [json_name = "proposers"];</code>
   * @param index The index of the element to return.
   * @return The proposers at the given index.
   */
  java.lang.String getProposers(int index);
  /**
   * <pre>
   * proposers are the account addresses of the proposers.
   * Proposers signatures will be counted as yes votes.
   * </pre>
   *
   * <code>repeated string proposers = 2 [json_name = "proposers"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the proposers at the given index.
   */
  com.google.protobuf.ByteString
      getProposersBytes(int index);

  /**
   * <pre>
   * metadata is any arbitrary metadata to attached to the proposal.
   * </pre>
   *
   * <code>bytes metadata = 3 [json_name = "metadata"];</code>
   * @return The metadata.
   */
  com.google.protobuf.ByteString getMetadata();

  /**
   * <pre>
   * msgs is a list of Msgs that will be executed if the proposal passes.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any msgs = 4 [json_name = "msgs"];</code>
   */
  java.util.List<com.google.protobuf.Any> 
      getMsgsList();
  /**
   * <pre>
   * msgs is a list of Msgs that will be executed if the proposal passes.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any msgs = 4 [json_name = "msgs"];</code>
   */
  com.google.protobuf.Any getMsgs(int index);
  /**
   * <pre>
   * msgs is a list of Msgs that will be executed if the proposal passes.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any msgs = 4 [json_name = "msgs"];</code>
   */
  int getMsgsCount();
  /**
   * <pre>
   * msgs is a list of Msgs that will be executed if the proposal passes.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any msgs = 4 [json_name = "msgs"];</code>
   */
  java.util.List<? extends com.google.protobuf.AnyOrBuilder> 
      getMsgsOrBuilderList();
  /**
   * <pre>
   * msgs is a list of Msgs that will be executed if the proposal passes.
   * </pre>
   *
   * <code>repeated .google.protobuf.Any msgs = 4 [json_name = "msgs"];</code>
   */
  com.google.protobuf.AnyOrBuilder getMsgsOrBuilder(
      int index);

  /**
   * <pre>
   * exec defines the mode of execution of the proposal,
   * whether it should be executed immediately on creation or not.
   * If so, proposers signatures are considered as Yes votes.
   * </pre>
   *
   * <code>.regen.group.v1alpha1.Exec exec = 5 [json_name = "exec"];</code>
   * @return The enum numeric value on the wire for exec.
   */
  int getExecValue();
  /**
   * <pre>
   * exec defines the mode of execution of the proposal,
   * whether it should be executed immediately on creation or not.
   * If so, proposers signatures are considered as Yes votes.
   * </pre>
   *
   * <code>.regen.group.v1alpha1.Exec exec = 5 [json_name = "exec"];</code>
   * @return The exec.
   */
  com.regen.group.v1alpha1.Exec getExec();
}
