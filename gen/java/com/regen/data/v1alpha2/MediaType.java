// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: regen/data/v1alpha2/types.proto

package com.regen.data.v1alpha2;

/**
 * <pre>
 * MediaType defines MIME media types to be used with a ContentHash.Raw hash.
 * </pre>
 *
 * Protobuf enum {@code regen.data.v1alpha2.MediaType}
 */
public enum MediaType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * MEDIA_TYPE_UNSPECIFIED can be used for raw binary data
   * </pre>
   *
   * <code>MEDIA_TYPE_UNSPECIFIED = 0;</code>
   */
  MEDIA_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   * plain text
   * </pre>
   *
   * <code>MEDIA_TYPE_TEXT_PLAIN = 1;</code>
   */
  MEDIA_TYPE_TEXT_PLAIN(1),
  /**
   * <pre>
   * JSON
   * </pre>
   *
   * <code>MEDIA_TYPE_JSON = 2;</code>
   */
  MEDIA_TYPE_JSON(2),
  /**
   * <pre>
   * CSV
   * </pre>
   *
   * <code>MEDIA_TYPE_CSV = 3;</code>
   */
  MEDIA_TYPE_CSV(3),
  /**
   * <pre>
   * XML
   * </pre>
   *
   * <code>MEDIA_TYPE_XML = 4;</code>
   */
  MEDIA_TYPE_XML(4),
  /**
   * <pre>
   * PDF
   * </pre>
   *
   * <code>MEDIA_TYPE_PDF = 5;</code>
   */
  MEDIA_TYPE_PDF(5),
  /**
   * <pre>
   * TIIF
   * </pre>
   *
   * <code>MEDIA_TYPE_TIFF = 16;</code>
   */
  MEDIA_TYPE_TIFF(16),
  /**
   * <pre>
   * JPG
   * </pre>
   *
   * <code>MEDIA_TYPE_JPG = 17;</code>
   */
  MEDIA_TYPE_JPG(17),
  /**
   * <pre>
   * PNG
   * </pre>
   *
   * <code>MEDIA_TYPE_PNG = 18;</code>
   */
  MEDIA_TYPE_PNG(18),
  /**
   * <pre>
   * SVG
   * </pre>
   *
   * <code>MEDIA_TYPE_SVG = 19;</code>
   */
  MEDIA_TYPE_SVG(19),
  /**
   * <pre>
   * WEBP
   * </pre>
   *
   * <code>MEDIA_TYPE_WEBP = 20;</code>
   */
  MEDIA_TYPE_WEBP(20),
  /**
   * <pre>
   * AVIF
   * </pre>
   *
   * <code>MEDIA_TYPE_AVIF = 21;</code>
   */
  MEDIA_TYPE_AVIF(21),
  /**
   * <pre>
   * GIF
   * </pre>
   *
   * <code>MEDIA_TYPE_GIF = 22;</code>
   */
  MEDIA_TYPE_GIF(22),
  /**
   * <pre>
   * APNG
   * </pre>
   *
   * <code>MEDIA_TYPE_APNG = 23;</code>
   */
  MEDIA_TYPE_APNG(23),
  /**
   * <pre>
   * MPEG
   * </pre>
   *
   * <code>MEDIA_TYPE_MPEG = 32;</code>
   */
  MEDIA_TYPE_MPEG(32),
  /**
   * <pre>
   * MP4
   * </pre>
   *
   * <code>MEDIA_TYPE_MP4 = 33;</code>
   */
  MEDIA_TYPE_MP4(33),
  /**
   * <pre>
   * WEBM
   * </pre>
   *
   * <code>MEDIA_TYPE_WEBM = 34;</code>
   */
  MEDIA_TYPE_WEBM(34),
  /**
   * <pre>
   * OGG
   * </pre>
   *
   * <code>MEDIA_TYPE_OGG = 35;</code>
   */
  MEDIA_TYPE_OGG(35),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * MEDIA_TYPE_UNSPECIFIED can be used for raw binary data
   * </pre>
   *
   * <code>MEDIA_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int MEDIA_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * plain text
   * </pre>
   *
   * <code>MEDIA_TYPE_TEXT_PLAIN = 1;</code>
   */
  public static final int MEDIA_TYPE_TEXT_PLAIN_VALUE = 1;
  /**
   * <pre>
   * JSON
   * </pre>
   *
   * <code>MEDIA_TYPE_JSON = 2;</code>
   */
  public static final int MEDIA_TYPE_JSON_VALUE = 2;
  /**
   * <pre>
   * CSV
   * </pre>
   *
   * <code>MEDIA_TYPE_CSV = 3;</code>
   */
  public static final int MEDIA_TYPE_CSV_VALUE = 3;
  /**
   * <pre>
   * XML
   * </pre>
   *
   * <code>MEDIA_TYPE_XML = 4;</code>
   */
  public static final int MEDIA_TYPE_XML_VALUE = 4;
  /**
   * <pre>
   * PDF
   * </pre>
   *
   * <code>MEDIA_TYPE_PDF = 5;</code>
   */
  public static final int MEDIA_TYPE_PDF_VALUE = 5;
  /**
   * <pre>
   * TIIF
   * </pre>
   *
   * <code>MEDIA_TYPE_TIFF = 16;</code>
   */
  public static final int MEDIA_TYPE_TIFF_VALUE = 16;
  /**
   * <pre>
   * JPG
   * </pre>
   *
   * <code>MEDIA_TYPE_JPG = 17;</code>
   */
  public static final int MEDIA_TYPE_JPG_VALUE = 17;
  /**
   * <pre>
   * PNG
   * </pre>
   *
   * <code>MEDIA_TYPE_PNG = 18;</code>
   */
  public static final int MEDIA_TYPE_PNG_VALUE = 18;
  /**
   * <pre>
   * SVG
   * </pre>
   *
   * <code>MEDIA_TYPE_SVG = 19;</code>
   */
  public static final int MEDIA_TYPE_SVG_VALUE = 19;
  /**
   * <pre>
   * WEBP
   * </pre>
   *
   * <code>MEDIA_TYPE_WEBP = 20;</code>
   */
  public static final int MEDIA_TYPE_WEBP_VALUE = 20;
  /**
   * <pre>
   * AVIF
   * </pre>
   *
   * <code>MEDIA_TYPE_AVIF = 21;</code>
   */
  public static final int MEDIA_TYPE_AVIF_VALUE = 21;
  /**
   * <pre>
   * GIF
   * </pre>
   *
   * <code>MEDIA_TYPE_GIF = 22;</code>
   */
  public static final int MEDIA_TYPE_GIF_VALUE = 22;
  /**
   * <pre>
   * APNG
   * </pre>
   *
   * <code>MEDIA_TYPE_APNG = 23;</code>
   */
  public static final int MEDIA_TYPE_APNG_VALUE = 23;
  /**
   * <pre>
   * MPEG
   * </pre>
   *
   * <code>MEDIA_TYPE_MPEG = 32;</code>
   */
  public static final int MEDIA_TYPE_MPEG_VALUE = 32;
  /**
   * <pre>
   * MP4
   * </pre>
   *
   * <code>MEDIA_TYPE_MP4 = 33;</code>
   */
  public static final int MEDIA_TYPE_MP4_VALUE = 33;
  /**
   * <pre>
   * WEBM
   * </pre>
   *
   * <code>MEDIA_TYPE_WEBM = 34;</code>
   */
  public static final int MEDIA_TYPE_WEBM_VALUE = 34;
  /**
   * <pre>
   * OGG
   * </pre>
   *
   * <code>MEDIA_TYPE_OGG = 35;</code>
   */
  public static final int MEDIA_TYPE_OGG_VALUE = 35;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static MediaType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static MediaType forNumber(int value) {
    switch (value) {
      case 0: return MEDIA_TYPE_UNSPECIFIED;
      case 1: return MEDIA_TYPE_TEXT_PLAIN;
      case 2: return MEDIA_TYPE_JSON;
      case 3: return MEDIA_TYPE_CSV;
      case 4: return MEDIA_TYPE_XML;
      case 5: return MEDIA_TYPE_PDF;
      case 16: return MEDIA_TYPE_TIFF;
      case 17: return MEDIA_TYPE_JPG;
      case 18: return MEDIA_TYPE_PNG;
      case 19: return MEDIA_TYPE_SVG;
      case 20: return MEDIA_TYPE_WEBP;
      case 21: return MEDIA_TYPE_AVIF;
      case 22: return MEDIA_TYPE_GIF;
      case 23: return MEDIA_TYPE_APNG;
      case 32: return MEDIA_TYPE_MPEG;
      case 33: return MEDIA_TYPE_MP4;
      case 34: return MEDIA_TYPE_WEBM;
      case 35: return MEDIA_TYPE_OGG;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<MediaType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      MediaType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<MediaType>() {
          public MediaType findValueByNumber(int number) {
            return MediaType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.regen.data.v1alpha2.TypesProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final MediaType[] VALUES = values();

  public static MediaType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private MediaType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:regen.data.v1alpha2.MediaType)
}

