// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: regen/data/v1alpha2/types.proto

package com.regen.data.v1alpha2;

public interface ContentHashOrBuilder extends
    // @@protoc_insertion_point(interface_extends:regen.data.v1alpha2.ContentHash)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Raw specifies "raw" data which does not specify a deterministic, canonical encoding.
   * Users of these hashes MUST maintain a copy of the hashed data which is preserved bit by bit.
   * All other content encodings specify a deterministic, canonical encoding allowing implementations to
   * choose from a variety of alternative formats for transport and encoding while maintaining the guarantee
   * that the canonical hash will not change. The media type for "raw" data is defined by the MediaType enum.
   * </pre>
   *
   * <code>.regen.data.v1alpha2.ContentHash.Raw raw = 1 [json_name = "raw"];</code>
   * @return Whether the raw field is set.
   */
  boolean hasRaw();
  /**
   * <pre>
   * Raw specifies "raw" data which does not specify a deterministic, canonical encoding.
   * Users of these hashes MUST maintain a copy of the hashed data which is preserved bit by bit.
   * All other content encodings specify a deterministic, canonical encoding allowing implementations to
   * choose from a variety of alternative formats for transport and encoding while maintaining the guarantee
   * that the canonical hash will not change. The media type for "raw" data is defined by the MediaType enum.
   * </pre>
   *
   * <code>.regen.data.v1alpha2.ContentHash.Raw raw = 1 [json_name = "raw"];</code>
   * @return The raw.
   */
  com.regen.data.v1alpha2.ContentHash.Raw getRaw();
  /**
   * <pre>
   * Raw specifies "raw" data which does not specify a deterministic, canonical encoding.
   * Users of these hashes MUST maintain a copy of the hashed data which is preserved bit by bit.
   * All other content encodings specify a deterministic, canonical encoding allowing implementations to
   * choose from a variety of alternative formats for transport and encoding while maintaining the guarantee
   * that the canonical hash will not change. The media type for "raw" data is defined by the MediaType enum.
   * </pre>
   *
   * <code>.regen.data.v1alpha2.ContentHash.Raw raw = 1 [json_name = "raw"];</code>
   */
  com.regen.data.v1alpha2.ContentHash.RawOrBuilder getRawOrBuilder();

  /**
   * <pre>
   * Graph specifies graph data that conforms to the RDF data model.
   * The canonicalization algorithm used for an RDF graph is specified by GraphCanonicalizationAlgorithm.
   * </pre>
   *
   * <code>.regen.data.v1alpha2.ContentHash.Graph graph = 2 [json_name = "graph"];</code>
   * @return Whether the graph field is set.
   */
  boolean hasGraph();
  /**
   * <pre>
   * Graph specifies graph data that conforms to the RDF data model.
   * The canonicalization algorithm used for an RDF graph is specified by GraphCanonicalizationAlgorithm.
   * </pre>
   *
   * <code>.regen.data.v1alpha2.ContentHash.Graph graph = 2 [json_name = "graph"];</code>
   * @return The graph.
   */
  com.regen.data.v1alpha2.ContentHash.Graph getGraph();
  /**
   * <pre>
   * Graph specifies graph data that conforms to the RDF data model.
   * The canonicalization algorithm used for an RDF graph is specified by GraphCanonicalizationAlgorithm.
   * </pre>
   *
   * <code>.regen.data.v1alpha2.ContentHash.Graph graph = 2 [json_name = "graph"];</code>
   */
  com.regen.data.v1alpha2.ContentHash.GraphOrBuilder getGraphOrBuilder();

  com.regen.data.v1alpha2.ContentHash.SumCase getSumCase();
}
