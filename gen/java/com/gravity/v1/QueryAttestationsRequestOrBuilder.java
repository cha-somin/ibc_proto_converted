// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gravity/v1/query.proto

package com.gravity.v1;

public interface QueryAttestationsRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:gravity.v1.QueryAttestationsRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * limit defines how many attestations to limit in the response.
   * </pre>
   *
   * <code>uint64 limit = 1 [json_name = "limit"];</code>
   * @return The limit.
   */
  long getLimit();

  /**
   * <pre>
   * order_by provides ordering of atteststions by nonce in the response. Either
   * 'asc' or 'desc' can be provided. If no value is provided, it defaults to
   * 'asc'.
   * </pre>
   *
   * <code>string order_by = 2 [json_name = "orderBy"];</code>
   * @return The orderBy.
   */
  java.lang.String getOrderBy();
  /**
   * <pre>
   * order_by provides ordering of atteststions by nonce in the response. Either
   * 'asc' or 'desc' can be provided. If no value is provided, it defaults to
   * 'asc'.
   * </pre>
   *
   * <code>string order_by = 2 [json_name = "orderBy"];</code>
   * @return The bytes for orderBy.
   */
  com.google.protobuf.ByteString
      getOrderByBytes();

  /**
   * <pre>
   * claim_type allows filtering attestations by Ethereum claim type.
   * </pre>
   *
   * <code>string claim_type = 3 [json_name = "claimType"];</code>
   * @return The claimType.
   */
  java.lang.String getClaimType();
  /**
   * <pre>
   * claim_type allows filtering attestations by Ethereum claim type.
   * </pre>
   *
   * <code>string claim_type = 3 [json_name = "claimType"];</code>
   * @return The bytes for claimType.
   */
  com.google.protobuf.ByteString
      getClaimTypeBytes();

  /**
   * <pre>
   * nonce allows filtering attestations by Ethereum claim nonce.
   * </pre>
   *
   * <code>uint64 nonce = 4 [json_name = "nonce"];</code>
   * @return The nonce.
   */
  long getNonce();

  /**
   * <pre>
   * height allows filtering attestations by Ethereum claim height.
   * </pre>
   *
   * <code>uint64 height = 5 [json_name = "height"];</code>
   * @return The height.
   */
  long getHeight();

  /**
   * <pre>
   * indicates whether to search for store data using the old Gravity v1 key "OracleAttestationKey"
   * Note that queries before the Mercury upgrade at height 1282013 must set this to true
   * </pre>
   *
   * <code>bool use_v1_key = 6 [json_name = "useV1Key"];</code>
   * @return The useV1Key.
   */
  boolean getUseV1Key();
}
