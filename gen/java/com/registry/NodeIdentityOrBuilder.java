// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shentu/burrow/registry.proto

package com.registry;

public interface NodeIdentityOrBuilder extends
    // @@protoc_insertion_point(interface_extends:registry.NodeIdentity)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Peer moniker name
   * </pre>
   *
   * <code>string Moniker = 1 [json_name = "Moniker"];</code>
   * @return The moniker.
   */
  java.lang.String getMoniker();
  /**
   * <pre>
   * Peer moniker name
   * </pre>
   *
   * <code>string Moniker = 1 [json_name = "Moniker"];</code>
   * @return The bytes for moniker.
   */
  com.google.protobuf.ByteString
      getMonikerBytes();

  /**
   * <pre>
   * Peer network address
   * </pre>
   *
   * <code>string NetworkAddress = 2 [json_name = "NetworkAddress"];</code>
   * @return The networkAddress.
   */
  java.lang.String getNetworkAddress();
  /**
   * <pre>
   * Peer network address
   * </pre>
   *
   * <code>string NetworkAddress = 2 [json_name = "NetworkAddress"];</code>
   * @return The bytes for networkAddress.
   */
  com.google.protobuf.ByteString
      getNetworkAddressBytes();

  /**
   * <pre>
   * The Tendermint p2p node ID
   * </pre>
   *
   * <code>bytes TendermintNodeID = 3 [json_name = "TendermintNodeID", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/hyperledger/burrow/crypto.Address"];</code>
   * @return The tendermintNodeID.
   */
  com.google.protobuf.ByteString getTendermintNodeID();

  /**
   * <pre>
   * The public key that this node will validate with if it becomes a validator 
   * (use this to create a binding between p2p node ID and validator)
   * </pre>
   *
   * <code>bytes ValidatorPublicKey = 4 [json_name = "ValidatorPublicKey", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/hyperledger/burrow/crypto.PublicKey"];</code>
   * @return The validatorPublicKey.
   */
  com.google.protobuf.ByteString getValidatorPublicKey();
}
