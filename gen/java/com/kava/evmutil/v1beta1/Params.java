// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kava/evmutil/v1beta1/genesis.proto

package com.kava.evmutil.v1beta1;

/**
 * <pre>
 * Params defines the evmutil module params
 * </pre>
 *
 * Protobuf type {@code kava.evmutil.v1beta1.Params}
 */
public final class Params extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:kava.evmutil.v1beta1.Params)
    ParamsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Params.newBuilder() to construct.
  private Params(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Params() {
    enabledConversionPairs_ = java.util.Collections.emptyList();
    allowedCosmosDenoms_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Params();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.kava.evmutil.v1beta1.GenesisProto.internal_static_kava_evmutil_v1beta1_Params_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.kava.evmutil.v1beta1.GenesisProto.internal_static_kava_evmutil_v1beta1_Params_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.kava.evmutil.v1beta1.Params.class, com.kava.evmutil.v1beta1.Params.Builder.class);
  }

  public static final int ENABLED_CONVERSION_PAIRS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<com.kava.evmutil.v1beta1.ConversionPair> enabledConversionPairs_;
  /**
   * <pre>
   * enabled_conversion_pairs defines the list of conversion pairs allowed to be
   * converted between Kava ERC20 and sdk.Coin
   * </pre>
   *
   * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
   */
  @java.lang.Override
  public java.util.List<com.kava.evmutil.v1beta1.ConversionPair> getEnabledConversionPairsList() {
    return enabledConversionPairs_;
  }
  /**
   * <pre>
   * enabled_conversion_pairs defines the list of conversion pairs allowed to be
   * converted between Kava ERC20 and sdk.Coin
   * </pre>
   *
   * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.kava.evmutil.v1beta1.ConversionPairOrBuilder> 
      getEnabledConversionPairsOrBuilderList() {
    return enabledConversionPairs_;
  }
  /**
   * <pre>
   * enabled_conversion_pairs defines the list of conversion pairs allowed to be
   * converted between Kava ERC20 and sdk.Coin
   * </pre>
   *
   * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
   */
  @java.lang.Override
  public int getEnabledConversionPairsCount() {
    return enabledConversionPairs_.size();
  }
  /**
   * <pre>
   * enabled_conversion_pairs defines the list of conversion pairs allowed to be
   * converted between Kava ERC20 and sdk.Coin
   * </pre>
   *
   * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
   */
  @java.lang.Override
  public com.kava.evmutil.v1beta1.ConversionPair getEnabledConversionPairs(int index) {
    return enabledConversionPairs_.get(index);
  }
  /**
   * <pre>
   * enabled_conversion_pairs defines the list of conversion pairs allowed to be
   * converted between Kava ERC20 and sdk.Coin
   * </pre>
   *
   * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
   */
  @java.lang.Override
  public com.kava.evmutil.v1beta1.ConversionPairOrBuilder getEnabledConversionPairsOrBuilder(
      int index) {
    return enabledConversionPairs_.get(index);
  }

  public static final int ALLOWED_COSMOS_DENOMS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token> allowedCosmosDenoms_;
  /**
   * <pre>
   * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
   * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
   * </pre>
   *
   * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
   */
  @java.lang.Override
  public java.util.List<com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token> getAllowedCosmosDenomsList() {
    return allowedCosmosDenoms_;
  }
  /**
   * <pre>
   * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
   * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
   * </pre>
   *
   * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20TokenOrBuilder> 
      getAllowedCosmosDenomsOrBuilderList() {
    return allowedCosmosDenoms_;
  }
  /**
   * <pre>
   * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
   * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
   * </pre>
   *
   * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
   */
  @java.lang.Override
  public int getAllowedCosmosDenomsCount() {
    return allowedCosmosDenoms_.size();
  }
  /**
   * <pre>
   * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
   * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
   * </pre>
   *
   * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
   */
  @java.lang.Override
  public com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token getAllowedCosmosDenoms(int index) {
    return allowedCosmosDenoms_.get(index);
  }
  /**
   * <pre>
   * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
   * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
   * </pre>
   *
   * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
   */
  @java.lang.Override
  public com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20TokenOrBuilder getAllowedCosmosDenomsOrBuilder(
      int index) {
    return allowedCosmosDenoms_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < allowedCosmosDenoms_.size(); i++) {
      output.writeMessage(1, allowedCosmosDenoms_.get(i));
    }
    for (int i = 0; i < enabledConversionPairs_.size(); i++) {
      output.writeMessage(4, enabledConversionPairs_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < allowedCosmosDenoms_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, allowedCosmosDenoms_.get(i));
    }
    for (int i = 0; i < enabledConversionPairs_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, enabledConversionPairs_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.kava.evmutil.v1beta1.Params)) {
      return super.equals(obj);
    }
    com.kava.evmutil.v1beta1.Params other = (com.kava.evmutil.v1beta1.Params) obj;

    if (!getEnabledConversionPairsList()
        .equals(other.getEnabledConversionPairsList())) return false;
    if (!getAllowedCosmosDenomsList()
        .equals(other.getAllowedCosmosDenomsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getEnabledConversionPairsCount() > 0) {
      hash = (37 * hash) + ENABLED_CONVERSION_PAIRS_FIELD_NUMBER;
      hash = (53 * hash) + getEnabledConversionPairsList().hashCode();
    }
    if (getAllowedCosmosDenomsCount() > 0) {
      hash = (37 * hash) + ALLOWED_COSMOS_DENOMS_FIELD_NUMBER;
      hash = (53 * hash) + getAllowedCosmosDenomsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.kava.evmutil.v1beta1.Params parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.kava.evmutil.v1beta1.Params parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.kava.evmutil.v1beta1.Params parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.kava.evmutil.v1beta1.Params parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.kava.evmutil.v1beta1.Params parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.kava.evmutil.v1beta1.Params parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.kava.evmutil.v1beta1.Params parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.kava.evmutil.v1beta1.Params parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.kava.evmutil.v1beta1.Params parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.kava.evmutil.v1beta1.Params parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.kava.evmutil.v1beta1.Params parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.kava.evmutil.v1beta1.Params parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.kava.evmutil.v1beta1.Params prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Params defines the evmutil module params
   * </pre>
   *
   * Protobuf type {@code kava.evmutil.v1beta1.Params}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:kava.evmutil.v1beta1.Params)
      com.kava.evmutil.v1beta1.ParamsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.kava.evmutil.v1beta1.GenesisProto.internal_static_kava_evmutil_v1beta1_Params_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.kava.evmutil.v1beta1.GenesisProto.internal_static_kava_evmutil_v1beta1_Params_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.kava.evmutil.v1beta1.Params.class, com.kava.evmutil.v1beta1.Params.Builder.class);
    }

    // Construct using com.kava.evmutil.v1beta1.Params.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (enabledConversionPairsBuilder_ == null) {
        enabledConversionPairs_ = java.util.Collections.emptyList();
      } else {
        enabledConversionPairs_ = null;
        enabledConversionPairsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      if (allowedCosmosDenomsBuilder_ == null) {
        allowedCosmosDenoms_ = java.util.Collections.emptyList();
      } else {
        allowedCosmosDenoms_ = null;
        allowedCosmosDenomsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.kava.evmutil.v1beta1.GenesisProto.internal_static_kava_evmutil_v1beta1_Params_descriptor;
    }

    @java.lang.Override
    public com.kava.evmutil.v1beta1.Params getDefaultInstanceForType() {
      return com.kava.evmutil.v1beta1.Params.getDefaultInstance();
    }

    @java.lang.Override
    public com.kava.evmutil.v1beta1.Params build() {
      com.kava.evmutil.v1beta1.Params result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.kava.evmutil.v1beta1.Params buildPartial() {
      com.kava.evmutil.v1beta1.Params result = new com.kava.evmutil.v1beta1.Params(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.kava.evmutil.v1beta1.Params result) {
      if (enabledConversionPairsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          enabledConversionPairs_ = java.util.Collections.unmodifiableList(enabledConversionPairs_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.enabledConversionPairs_ = enabledConversionPairs_;
      } else {
        result.enabledConversionPairs_ = enabledConversionPairsBuilder_.build();
      }
      if (allowedCosmosDenomsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          allowedCosmosDenoms_ = java.util.Collections.unmodifiableList(allowedCosmosDenoms_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.allowedCosmosDenoms_ = allowedCosmosDenoms_;
      } else {
        result.allowedCosmosDenoms_ = allowedCosmosDenomsBuilder_.build();
      }
    }

    private void buildPartial0(com.kava.evmutil.v1beta1.Params result) {
      int from_bitField0_ = bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.kava.evmutil.v1beta1.Params) {
        return mergeFrom((com.kava.evmutil.v1beta1.Params)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.kava.evmutil.v1beta1.Params other) {
      if (other == com.kava.evmutil.v1beta1.Params.getDefaultInstance()) return this;
      if (enabledConversionPairsBuilder_ == null) {
        if (!other.enabledConversionPairs_.isEmpty()) {
          if (enabledConversionPairs_.isEmpty()) {
            enabledConversionPairs_ = other.enabledConversionPairs_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureEnabledConversionPairsIsMutable();
            enabledConversionPairs_.addAll(other.enabledConversionPairs_);
          }
          onChanged();
        }
      } else {
        if (!other.enabledConversionPairs_.isEmpty()) {
          if (enabledConversionPairsBuilder_.isEmpty()) {
            enabledConversionPairsBuilder_.dispose();
            enabledConversionPairsBuilder_ = null;
            enabledConversionPairs_ = other.enabledConversionPairs_;
            bitField0_ = (bitField0_ & ~0x00000001);
            enabledConversionPairsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getEnabledConversionPairsFieldBuilder() : null;
          } else {
            enabledConversionPairsBuilder_.addAllMessages(other.enabledConversionPairs_);
          }
        }
      }
      if (allowedCosmosDenomsBuilder_ == null) {
        if (!other.allowedCosmosDenoms_.isEmpty()) {
          if (allowedCosmosDenoms_.isEmpty()) {
            allowedCosmosDenoms_ = other.allowedCosmosDenoms_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureAllowedCosmosDenomsIsMutable();
            allowedCosmosDenoms_.addAll(other.allowedCosmosDenoms_);
          }
          onChanged();
        }
      } else {
        if (!other.allowedCosmosDenoms_.isEmpty()) {
          if (allowedCosmosDenomsBuilder_.isEmpty()) {
            allowedCosmosDenomsBuilder_.dispose();
            allowedCosmosDenomsBuilder_ = null;
            allowedCosmosDenoms_ = other.allowedCosmosDenoms_;
            bitField0_ = (bitField0_ & ~0x00000002);
            allowedCosmosDenomsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getAllowedCosmosDenomsFieldBuilder() : null;
          } else {
            allowedCosmosDenomsBuilder_.addAllMessages(other.allowedCosmosDenoms_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token m =
                  input.readMessage(
                      com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token.parser(),
                      extensionRegistry);
              if (allowedCosmosDenomsBuilder_ == null) {
                ensureAllowedCosmosDenomsIsMutable();
                allowedCosmosDenoms_.add(m);
              } else {
                allowedCosmosDenomsBuilder_.addMessage(m);
              }
              break;
            } // case 10
            case 34: {
              com.kava.evmutil.v1beta1.ConversionPair m =
                  input.readMessage(
                      com.kava.evmutil.v1beta1.ConversionPair.parser(),
                      extensionRegistry);
              if (enabledConversionPairsBuilder_ == null) {
                ensureEnabledConversionPairsIsMutable();
                enabledConversionPairs_.add(m);
              } else {
                enabledConversionPairsBuilder_.addMessage(m);
              }
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<com.kava.evmutil.v1beta1.ConversionPair> enabledConversionPairs_ =
      java.util.Collections.emptyList();
    private void ensureEnabledConversionPairsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        enabledConversionPairs_ = new java.util.ArrayList<com.kava.evmutil.v1beta1.ConversionPair>(enabledConversionPairs_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.kava.evmutil.v1beta1.ConversionPair, com.kava.evmutil.v1beta1.ConversionPair.Builder, com.kava.evmutil.v1beta1.ConversionPairOrBuilder> enabledConversionPairsBuilder_;

    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public java.util.List<com.kava.evmutil.v1beta1.ConversionPair> getEnabledConversionPairsList() {
      if (enabledConversionPairsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(enabledConversionPairs_);
      } else {
        return enabledConversionPairsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public int getEnabledConversionPairsCount() {
      if (enabledConversionPairsBuilder_ == null) {
        return enabledConversionPairs_.size();
      } else {
        return enabledConversionPairsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public com.kava.evmutil.v1beta1.ConversionPair getEnabledConversionPairs(int index) {
      if (enabledConversionPairsBuilder_ == null) {
        return enabledConversionPairs_.get(index);
      } else {
        return enabledConversionPairsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public Builder setEnabledConversionPairs(
        int index, com.kava.evmutil.v1beta1.ConversionPair value) {
      if (enabledConversionPairsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEnabledConversionPairsIsMutable();
        enabledConversionPairs_.set(index, value);
        onChanged();
      } else {
        enabledConversionPairsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public Builder setEnabledConversionPairs(
        int index, com.kava.evmutil.v1beta1.ConversionPair.Builder builderForValue) {
      if (enabledConversionPairsBuilder_ == null) {
        ensureEnabledConversionPairsIsMutable();
        enabledConversionPairs_.set(index, builderForValue.build());
        onChanged();
      } else {
        enabledConversionPairsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public Builder addEnabledConversionPairs(com.kava.evmutil.v1beta1.ConversionPair value) {
      if (enabledConversionPairsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEnabledConversionPairsIsMutable();
        enabledConversionPairs_.add(value);
        onChanged();
      } else {
        enabledConversionPairsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public Builder addEnabledConversionPairs(
        int index, com.kava.evmutil.v1beta1.ConversionPair value) {
      if (enabledConversionPairsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEnabledConversionPairsIsMutable();
        enabledConversionPairs_.add(index, value);
        onChanged();
      } else {
        enabledConversionPairsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public Builder addEnabledConversionPairs(
        com.kava.evmutil.v1beta1.ConversionPair.Builder builderForValue) {
      if (enabledConversionPairsBuilder_ == null) {
        ensureEnabledConversionPairsIsMutable();
        enabledConversionPairs_.add(builderForValue.build());
        onChanged();
      } else {
        enabledConversionPairsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public Builder addEnabledConversionPairs(
        int index, com.kava.evmutil.v1beta1.ConversionPair.Builder builderForValue) {
      if (enabledConversionPairsBuilder_ == null) {
        ensureEnabledConversionPairsIsMutable();
        enabledConversionPairs_.add(index, builderForValue.build());
        onChanged();
      } else {
        enabledConversionPairsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public Builder addAllEnabledConversionPairs(
        java.lang.Iterable<? extends com.kava.evmutil.v1beta1.ConversionPair> values) {
      if (enabledConversionPairsBuilder_ == null) {
        ensureEnabledConversionPairsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, enabledConversionPairs_);
        onChanged();
      } else {
        enabledConversionPairsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public Builder clearEnabledConversionPairs() {
      if (enabledConversionPairsBuilder_ == null) {
        enabledConversionPairs_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        enabledConversionPairsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public Builder removeEnabledConversionPairs(int index) {
      if (enabledConversionPairsBuilder_ == null) {
        ensureEnabledConversionPairsIsMutable();
        enabledConversionPairs_.remove(index);
        onChanged();
      } else {
        enabledConversionPairsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public com.kava.evmutil.v1beta1.ConversionPair.Builder getEnabledConversionPairsBuilder(
        int index) {
      return getEnabledConversionPairsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public com.kava.evmutil.v1beta1.ConversionPairOrBuilder getEnabledConversionPairsOrBuilder(
        int index) {
      if (enabledConversionPairsBuilder_ == null) {
        return enabledConversionPairs_.get(index);  } else {
        return enabledConversionPairsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public java.util.List<? extends com.kava.evmutil.v1beta1.ConversionPairOrBuilder> 
         getEnabledConversionPairsOrBuilderList() {
      if (enabledConversionPairsBuilder_ != null) {
        return enabledConversionPairsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(enabledConversionPairs_);
      }
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public com.kava.evmutil.v1beta1.ConversionPair.Builder addEnabledConversionPairsBuilder() {
      return getEnabledConversionPairsFieldBuilder().addBuilder(
          com.kava.evmutil.v1beta1.ConversionPair.getDefaultInstance());
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public com.kava.evmutil.v1beta1.ConversionPair.Builder addEnabledConversionPairsBuilder(
        int index) {
      return getEnabledConversionPairsFieldBuilder().addBuilder(
          index, com.kava.evmutil.v1beta1.ConversionPair.getDefaultInstance());
    }
    /**
     * <pre>
     * enabled_conversion_pairs defines the list of conversion pairs allowed to be
     * converted between Kava ERC20 and sdk.Coin
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.ConversionPair enabled_conversion_pairs = 4 [json_name = "enabledConversionPairs", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "ConversionPairs"];</code>
     */
    public java.util.List<com.kava.evmutil.v1beta1.ConversionPair.Builder> 
         getEnabledConversionPairsBuilderList() {
      return getEnabledConversionPairsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.kava.evmutil.v1beta1.ConversionPair, com.kava.evmutil.v1beta1.ConversionPair.Builder, com.kava.evmutil.v1beta1.ConversionPairOrBuilder> 
        getEnabledConversionPairsFieldBuilder() {
      if (enabledConversionPairsBuilder_ == null) {
        enabledConversionPairsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.kava.evmutil.v1beta1.ConversionPair, com.kava.evmutil.v1beta1.ConversionPair.Builder, com.kava.evmutil.v1beta1.ConversionPairOrBuilder>(
                enabledConversionPairs_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        enabledConversionPairs_ = null;
      }
      return enabledConversionPairsBuilder_;
    }

    private java.util.List<com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token> allowedCosmosDenoms_ =
      java.util.Collections.emptyList();
    private void ensureAllowedCosmosDenomsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        allowedCosmosDenoms_ = new java.util.ArrayList<com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token>(allowedCosmosDenoms_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token, com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token.Builder, com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20TokenOrBuilder> allowedCosmosDenomsBuilder_;

    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public java.util.List<com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token> getAllowedCosmosDenomsList() {
      if (allowedCosmosDenomsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(allowedCosmosDenoms_);
      } else {
        return allowedCosmosDenomsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public int getAllowedCosmosDenomsCount() {
      if (allowedCosmosDenomsBuilder_ == null) {
        return allowedCosmosDenoms_.size();
      } else {
        return allowedCosmosDenomsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token getAllowedCosmosDenoms(int index) {
      if (allowedCosmosDenomsBuilder_ == null) {
        return allowedCosmosDenoms_.get(index);
      } else {
        return allowedCosmosDenomsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public Builder setAllowedCosmosDenoms(
        int index, com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token value) {
      if (allowedCosmosDenomsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAllowedCosmosDenomsIsMutable();
        allowedCosmosDenoms_.set(index, value);
        onChanged();
      } else {
        allowedCosmosDenomsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public Builder setAllowedCosmosDenoms(
        int index, com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token.Builder builderForValue) {
      if (allowedCosmosDenomsBuilder_ == null) {
        ensureAllowedCosmosDenomsIsMutable();
        allowedCosmosDenoms_.set(index, builderForValue.build());
        onChanged();
      } else {
        allowedCosmosDenomsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public Builder addAllowedCosmosDenoms(com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token value) {
      if (allowedCosmosDenomsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAllowedCosmosDenomsIsMutable();
        allowedCosmosDenoms_.add(value);
        onChanged();
      } else {
        allowedCosmosDenomsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public Builder addAllowedCosmosDenoms(
        int index, com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token value) {
      if (allowedCosmosDenomsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureAllowedCosmosDenomsIsMutable();
        allowedCosmosDenoms_.add(index, value);
        onChanged();
      } else {
        allowedCosmosDenomsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public Builder addAllowedCosmosDenoms(
        com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token.Builder builderForValue) {
      if (allowedCosmosDenomsBuilder_ == null) {
        ensureAllowedCosmosDenomsIsMutable();
        allowedCosmosDenoms_.add(builderForValue.build());
        onChanged();
      } else {
        allowedCosmosDenomsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public Builder addAllowedCosmosDenoms(
        int index, com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token.Builder builderForValue) {
      if (allowedCosmosDenomsBuilder_ == null) {
        ensureAllowedCosmosDenomsIsMutable();
        allowedCosmosDenoms_.add(index, builderForValue.build());
        onChanged();
      } else {
        allowedCosmosDenomsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public Builder addAllAllowedCosmosDenoms(
        java.lang.Iterable<? extends com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token> values) {
      if (allowedCosmosDenomsBuilder_ == null) {
        ensureAllowedCosmosDenomsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, allowedCosmosDenoms_);
        onChanged();
      } else {
        allowedCosmosDenomsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public Builder clearAllowedCosmosDenoms() {
      if (allowedCosmosDenomsBuilder_ == null) {
        allowedCosmosDenoms_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        allowedCosmosDenomsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public Builder removeAllowedCosmosDenoms(int index) {
      if (allowedCosmosDenomsBuilder_ == null) {
        ensureAllowedCosmosDenomsIsMutable();
        allowedCosmosDenoms_.remove(index);
        onChanged();
      } else {
        allowedCosmosDenomsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token.Builder getAllowedCosmosDenomsBuilder(
        int index) {
      return getAllowedCosmosDenomsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20TokenOrBuilder getAllowedCosmosDenomsOrBuilder(
        int index) {
      if (allowedCosmosDenomsBuilder_ == null) {
        return allowedCosmosDenoms_.get(index);  } else {
        return allowedCosmosDenomsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public java.util.List<? extends com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20TokenOrBuilder> 
         getAllowedCosmosDenomsOrBuilderList() {
      if (allowedCosmosDenomsBuilder_ != null) {
        return allowedCosmosDenomsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(allowedCosmosDenoms_);
      }
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token.Builder addAllowedCosmosDenomsBuilder() {
      return getAllowedCosmosDenomsFieldBuilder().addBuilder(
          com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token.getDefaultInstance());
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token.Builder addAllowedCosmosDenomsBuilder(
        int index) {
      return getAllowedCosmosDenomsFieldBuilder().addBuilder(
          index, com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token.getDefaultInstance());
    }
    /**
     * <pre>
     * allowed_cosmos_denoms is a list of denom &amp; erc20 token metadata pairs.
     * if a denom is in the list, it is allowed to be converted to an erc20 in the evm.
     * </pre>
     *
     * <code>repeated .kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token allowed_cosmos_denoms = 1 [json_name = "allowedCosmosDenoms", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "AllowedCosmosCoinERC20Tokens"];</code>
     */
    public java.util.List<com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token.Builder> 
         getAllowedCosmosDenomsBuilderList() {
      return getAllowedCosmosDenomsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token, com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token.Builder, com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20TokenOrBuilder> 
        getAllowedCosmosDenomsFieldBuilder() {
      if (allowedCosmosDenomsBuilder_ == null) {
        allowedCosmosDenomsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token, com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20Token.Builder, com.kava.evmutil.v1beta1.AllowedCosmosCoinERC20TokenOrBuilder>(
                allowedCosmosDenoms_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        allowedCosmosDenoms_ = null;
      }
      return allowedCosmosDenomsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:kava.evmutil.v1beta1.Params)
  }

  // @@protoc_insertion_point(class_scope:kava.evmutil.v1beta1.Params)
  private static final com.kava.evmutil.v1beta1.Params DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.kava.evmutil.v1beta1.Params();
  }

  public static com.kava.evmutil.v1beta1.Params getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Params>
      PARSER = new com.google.protobuf.AbstractParser<Params>() {
    @java.lang.Override
    public Params parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Params> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Params> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.kava.evmutil.v1beta1.Params getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

