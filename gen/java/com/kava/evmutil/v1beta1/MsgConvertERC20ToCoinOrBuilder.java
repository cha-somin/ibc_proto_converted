// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kava/evmutil/v1beta1/tx.proto

package com.kava.evmutil.v1beta1;

public interface MsgConvertERC20ToCoinOrBuilder extends
    // @@protoc_insertion_point(interface_extends:kava.evmutil.v1beta1.MsgConvertERC20ToCoin)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * EVM 0x hex address initiating the conversion.
   * </pre>
   *
   * <code>string initiator = 1 [json_name = "initiator"];</code>
   * @return The initiator.
   */
  java.lang.String getInitiator();
  /**
   * <pre>
   * EVM 0x hex address initiating the conversion.
   * </pre>
   *
   * <code>string initiator = 1 [json_name = "initiator"];</code>
   * @return The bytes for initiator.
   */
  com.google.protobuf.ByteString
      getInitiatorBytes();

  /**
   * <pre>
   * Kava bech32 address that will receive the converted sdk.Coin.
   * </pre>
   *
   * <code>string receiver = 2 [json_name = "receiver", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
   * @return The receiver.
   */
  java.lang.String getReceiver();
  /**
   * <pre>
   * Kava bech32 address that will receive the converted sdk.Coin.
   * </pre>
   *
   * <code>string receiver = 2 [json_name = "receiver", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
   * @return The bytes for receiver.
   */
  com.google.protobuf.ByteString
      getReceiverBytes();

  /**
   * <pre>
   * EVM 0x hex address of the ERC20 contract.
   * </pre>
   *
   * <code>string kava_erc20_address = 3 [json_name = "kavaErc20Address", (.gogoproto.customname) = "KavaERC20Address"];</code>
   * @return The kavaErc20Address.
   */
  java.lang.String getKavaErc20Address();
  /**
   * <pre>
   * EVM 0x hex address of the ERC20 contract.
   * </pre>
   *
   * <code>string kava_erc20_address = 3 [json_name = "kavaErc20Address", (.gogoproto.customname) = "KavaERC20Address"];</code>
   * @return The bytes for kavaErc20Address.
   */
  com.google.protobuf.ByteString
      getKavaErc20AddressBytes();

  /**
   * <pre>
   * ERC20 token amount to convert.
   * </pre>
   *
   * <code>string amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
   * @return The amount.
   */
  java.lang.String getAmount();
  /**
   * <pre>
   * ERC20 token amount to convert.
   * </pre>
   *
   * <code>string amount = 4 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.cosmos_proto.scalar) = "cosmos.Int"];</code>
   * @return The bytes for amount.
   */
  com.google.protobuf.ByteString
      getAmountBytes();
}
