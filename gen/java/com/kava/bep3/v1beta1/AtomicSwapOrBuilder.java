// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kava/bep3/v1beta1/bep3.proto

package com.kava.bep3.v1beta1;

public interface AtomicSwapOrBuilder extends
    // @@protoc_insertion_point(interface_extends:kava.bep3.v1beta1.AtomicSwap)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * amount represents the amount being swapped
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<com.cosmos.base.v1beta1.Coin> 
      getAmountList();
  /**
   * <pre>
   * amount represents the amount being swapped
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  com.cosmos.base.v1beta1.Coin getAmount(int index);
  /**
   * <pre>
   * amount represents the amount being swapped
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  int getAmountCount();
  /**
   * <pre>
   * amount represents the amount being swapped
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getAmountOrBuilderList();
  /**
   * <pre>
   * amount represents the amount being swapped
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin amount = 1 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  com.cosmos.base.v1beta1.CoinOrBuilder getAmountOrBuilder(
      int index);

  /**
   * <pre>
   * random_number_hash represents the hash of the random number
   * </pre>
   *
   * <code>bytes random_number_hash = 2 [json_name = "randomNumberHash", (.gogoproto.casttype) = "github.com/tendermint/tendermint/libs/bytes.HexBytes"];</code>
   * @return The randomNumberHash.
   */
  com.google.protobuf.ByteString getRandomNumberHash();

  /**
   * <pre>
   * expire_height represents the height when the swap expires
   * </pre>
   *
   * <code>uint64 expire_height = 3 [json_name = "expireHeight"];</code>
   * @return The expireHeight.
   */
  long getExpireHeight();

  /**
   * <pre>
   * timestamp represents the timestamp of the swap
   * </pre>
   *
   * <code>int64 timestamp = 4 [json_name = "timestamp"];</code>
   * @return The timestamp.
   */
  long getTimestamp();

  /**
   * <pre>
   * sender is the kava chain sender of the swap
   * </pre>
   *
   * <code>bytes sender = 5 [json_name = "sender", (.gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (.cosmos_proto.scalar) = "cosmos.AddressBytes"];</code>
   * @return The sender.
   */
  com.google.protobuf.ByteString getSender();

  /**
   * <pre>
   * recipient is the kava chain recipient of the swap
   * </pre>
   *
   * <code>bytes recipient = 6 [json_name = "recipient", (.gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (.cosmos_proto.scalar) = "cosmos.AddressBytes"];</code>
   * @return The recipient.
   */
  com.google.protobuf.ByteString getRecipient();

  /**
   * <pre>
   * sender_other_chain is the sender on the other chain
   * </pre>
   *
   * <code>string sender_other_chain = 7 [json_name = "senderOtherChain"];</code>
   * @return The senderOtherChain.
   */
  java.lang.String getSenderOtherChain();
  /**
   * <pre>
   * sender_other_chain is the sender on the other chain
   * </pre>
   *
   * <code>string sender_other_chain = 7 [json_name = "senderOtherChain"];</code>
   * @return The bytes for senderOtherChain.
   */
  com.google.protobuf.ByteString
      getSenderOtherChainBytes();

  /**
   * <pre>
   * recipient_other_chain is the recipient on the other chain
   * </pre>
   *
   * <code>string recipient_other_chain = 8 [json_name = "recipientOtherChain"];</code>
   * @return The recipientOtherChain.
   */
  java.lang.String getRecipientOtherChain();
  /**
   * <pre>
   * recipient_other_chain is the recipient on the other chain
   * </pre>
   *
   * <code>string recipient_other_chain = 8 [json_name = "recipientOtherChain"];</code>
   * @return The bytes for recipientOtherChain.
   */
  com.google.protobuf.ByteString
      getRecipientOtherChainBytes();

  /**
   * <pre>
   * closed_block is the block when the swap is closed
   * </pre>
   *
   * <code>int64 closed_block = 9 [json_name = "closedBlock"];</code>
   * @return The closedBlock.
   */
  long getClosedBlock();

  /**
   * <pre>
   * status represents the current status of the swap
   * </pre>
   *
   * <code>.kava.bep3.v1beta1.SwapStatus status = 10 [json_name = "status"];</code>
   * @return The enum numeric value on the wire for status.
   */
  int getStatusValue();
  /**
   * <pre>
   * status represents the current status of the swap
   * </pre>
   *
   * <code>.kava.bep3.v1beta1.SwapStatus status = 10 [json_name = "status"];</code>
   * @return The status.
   */
  com.kava.bep3.v1beta1.SwapStatus getStatus();

  /**
   * <pre>
   * cross_chain identifies whether the atomic swap is cross chain
   * </pre>
   *
   * <code>bool cross_chain = 11 [json_name = "crossChain"];</code>
   * @return The crossChain.
   */
  boolean getCrossChain();

  /**
   * <pre>
   * direction identifies if the swap is incoming or outgoing
   * </pre>
   *
   * <code>.kava.bep3.v1beta1.SwapDirection direction = 12 [json_name = "direction"];</code>
   * @return The enum numeric value on the wire for direction.
   */
  int getDirectionValue();
  /**
   * <pre>
   * direction identifies if the swap is incoming or outgoing
   * </pre>
   *
   * <code>.kava.bep3.v1beta1.SwapDirection direction = 12 [json_name = "direction"];</code>
   * @return The direction.
   */
  com.kava.bep3.v1beta1.SwapDirection getDirection();
}
