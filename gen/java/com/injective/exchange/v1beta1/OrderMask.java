// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/exchange/v1beta1/exchange.proto

package com.injective.exchange.v1beta1;

/**
 * Protobuf enum {@code injective.exchange.v1beta1.OrderMask}
 */
public enum OrderMask
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNUSED = 0 [(.gogoproto.enumvalue_customname) = "UNUSED"];</code>
   */
  UNUSED(0),
  /**
   * <code>ANY = 1 [(.gogoproto.enumvalue_customname) = "ANY"];</code>
   */
  ANY(1),
  /**
   * <code>REGULAR = 2 [(.gogoproto.enumvalue_customname) = "REGULAR"];</code>
   */
  REGULAR(2),
  /**
   * <code>CONDITIONAL = 4 [(.gogoproto.enumvalue_customname) = "CONDITIONAL"];</code>
   */
  CONDITIONAL(4),
  /**
   * <pre>
   * for conditional orders means HIGHER
   * </pre>
   *
   * <code>DIRECTION_BUY_OR_HIGHER = 8 [(.gogoproto.enumvalue_customname) = "BUY_OR_HIGHER"];</code>
   */
  DIRECTION_BUY_OR_HIGHER(8),
  /**
   * <pre>
   * for conditional orders means LOWER
   * </pre>
   *
   * <code>DIRECTION_SELL_OR_LOWER = 16 [(.gogoproto.enumvalue_customname) = "SELL_OR_LOWER"];</code>
   */
  DIRECTION_SELL_OR_LOWER(16),
  /**
   * <code>TYPE_MARKET = 32 [(.gogoproto.enumvalue_customname) = "MARKET"];</code>
   */
  TYPE_MARKET(32),
  /**
   * <code>TYPE_LIMIT = 64 [(.gogoproto.enumvalue_customname) = "LIMIT"];</code>
   */
  TYPE_LIMIT(64),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNUSED = 0 [(.gogoproto.enumvalue_customname) = "UNUSED"];</code>
   */
  public static final int UNUSED_VALUE = 0;
  /**
   * <code>ANY = 1 [(.gogoproto.enumvalue_customname) = "ANY"];</code>
   */
  public static final int ANY_VALUE = 1;
  /**
   * <code>REGULAR = 2 [(.gogoproto.enumvalue_customname) = "REGULAR"];</code>
   */
  public static final int REGULAR_VALUE = 2;
  /**
   * <code>CONDITIONAL = 4 [(.gogoproto.enumvalue_customname) = "CONDITIONAL"];</code>
   */
  public static final int CONDITIONAL_VALUE = 4;
  /**
   * <pre>
   * for conditional orders means HIGHER
   * </pre>
   *
   * <code>DIRECTION_BUY_OR_HIGHER = 8 [(.gogoproto.enumvalue_customname) = "BUY_OR_HIGHER"];</code>
   */
  public static final int DIRECTION_BUY_OR_HIGHER_VALUE = 8;
  /**
   * <pre>
   * for conditional orders means LOWER
   * </pre>
   *
   * <code>DIRECTION_SELL_OR_LOWER = 16 [(.gogoproto.enumvalue_customname) = "SELL_OR_LOWER"];</code>
   */
  public static final int DIRECTION_SELL_OR_LOWER_VALUE = 16;
  /**
   * <code>TYPE_MARKET = 32 [(.gogoproto.enumvalue_customname) = "MARKET"];</code>
   */
  public static final int TYPE_MARKET_VALUE = 32;
  /**
   * <code>TYPE_LIMIT = 64 [(.gogoproto.enumvalue_customname) = "LIMIT"];</code>
   */
  public static final int TYPE_LIMIT_VALUE = 64;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static OrderMask valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static OrderMask forNumber(int value) {
    switch (value) {
      case 0: return UNUSED;
      case 1: return ANY;
      case 2: return REGULAR;
      case 4: return CONDITIONAL;
      case 8: return DIRECTION_BUY_OR_HIGHER;
      case 16: return DIRECTION_SELL_OR_LOWER;
      case 32: return TYPE_MARKET;
      case 64: return TYPE_LIMIT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<OrderMask>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      OrderMask> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<OrderMask>() {
          public OrderMask findValueByNumber(int number) {
            return OrderMask.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.injective.exchange.v1beta1.ExchangeProto.getDescriptor().getEnumTypes().get(4);
  }

  private static final OrderMask[] VALUES = values();

  public static OrderMask valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private OrderMask(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:injective.exchange.v1beta1.OrderMask)
}

