// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/exchange/v1beta1/tx.proto

package com.injective.exchange.v1beta1;

public interface ProviderOracleParamsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:injective.exchange.v1beta1.ProviderOracleParams)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Oracle base currency
   * </pre>
   *
   * <code>string symbol = 1 [json_name = "symbol"];</code>
   * @return The symbol.
   */
  java.lang.String getSymbol();
  /**
   * <pre>
   * Oracle base currency
   * </pre>
   *
   * <code>string symbol = 1 [json_name = "symbol"];</code>
   * @return The bytes for symbol.
   */
  com.google.protobuf.ByteString
      getSymbolBytes();

  /**
   * <pre>
   * Oracle quote currency
   * </pre>
   *
   * <code>string provider = 2 [json_name = "provider"];</code>
   * @return The provider.
   */
  java.lang.String getProvider();
  /**
   * <pre>
   * Oracle quote currency
   * </pre>
   *
   * <code>string provider = 2 [json_name = "provider"];</code>
   * @return The bytes for provider.
   */
  com.google.protobuf.ByteString
      getProviderBytes();

  /**
   * <pre>
   * Scale factor for oracle prices.
   * </pre>
   *
   * <code>uint32 oracle_scale_factor = 3 [json_name = "oracleScaleFactor"];</code>
   * @return The oracleScaleFactor.
   */
  int getOracleScaleFactor();

  /**
   * <pre>
   * Oracle type
   * </pre>
   *
   * <code>.injective.oracle.v1beta1.OracleType oracle_type = 4 [json_name = "oracleType"];</code>
   * @return The enum numeric value on the wire for oracleType.
   */
  int getOracleTypeValue();
  /**
   * <pre>
   * Oracle type
   * </pre>
   *
   * <code>.injective.oracle.v1beta1.OracleType oracle_type = 4 [json_name = "oracleType"];</code>
   * @return The oracleType.
   */
  com.injective.oracle.v1beta1.OracleType getOracleType();
}
