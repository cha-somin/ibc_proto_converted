// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/types/v1beta1/tx_ext.proto

package com.injective.types.v1beta1;

public interface ExtensionOptionsWeb3TxOrBuilder extends
    // @@protoc_insertion_point(interface_extends:injective.types.v1beta1.ExtensionOptionsWeb3Tx)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * typedDataChainID used only in EIP712 Domain and should match
   * Ethereum network ID in a Web3 provider (e.g. Metamask).
   * </pre>
   *
   * <code>uint64 typedDataChainID = 1 [json_name = "typedDataChainID"];</code>
   * @return The typedDataChainID.
   */
  long getTypedDataChainID();

  /**
   * <pre>
   * feePayer is an account address for the fee payer. It will be validated
   * during EIP712 signature checking.
   * </pre>
   *
   * <code>string feePayer = 2 [json_name = "feePayer"];</code>
   * @return The feePayer.
   */
  java.lang.String getFeePayer();
  /**
   * <pre>
   * feePayer is an account address for the fee payer. It will be validated
   * during EIP712 signature checking.
   * </pre>
   *
   * <code>string feePayer = 2 [json_name = "feePayer"];</code>
   * @return The bytes for feePayer.
   */
  com.google.protobuf.ByteString
      getFeePayerBytes();

  /**
   * <pre>
   * feePayerSig is a signature data from the fee paying account,
   * allows to perform fee delegation when using EIP712 Domain.
   * </pre>
   *
   * <code>bytes feePayerSig = 3 [json_name = "feePayerSig"];</code>
   * @return The feePayerSig.
   */
  com.google.protobuf.ByteString getFeePayerSig();
}
