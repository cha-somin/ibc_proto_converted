// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/oracle/v1beta1/oracle.proto

package com.injective.oracle.v1beta1;

public interface BandOracleRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:injective.oracle.v1beta1.BandOracleRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Unique Identifier for band ibc oracle request
   * </pre>
   *
   * <code>uint64 request_id = 1 [json_name = "requestId"];</code>
   * @return The requestId.
   */
  long getRequestId();

  /**
   * <pre>
   * OracleScriptID is the unique identifier of the oracle script to be
   * executed.
   * </pre>
   *
   * <code>int64 oracle_script_id = 2 [json_name = "oracleScriptId"];</code>
   * @return The oracleScriptId.
   */
  long getOracleScriptId();

  /**
   * <pre>
   * Symbols is the list of symbols to prepare in the calldata
   * </pre>
   *
   * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
   * @return A list containing the symbols.
   */
  java.util.List<java.lang.String>
      getSymbolsList();
  /**
   * <pre>
   * Symbols is the list of symbols to prepare in the calldata
   * </pre>
   *
   * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
   * @return The count of symbols.
   */
  int getSymbolsCount();
  /**
   * <pre>
   * Symbols is the list of symbols to prepare in the calldata
   * </pre>
   *
   * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
   * @param index The index of the element to return.
   * @return The symbols at the given index.
   */
  java.lang.String getSymbols(int index);
  /**
   * <pre>
   * Symbols is the list of symbols to prepare in the calldata
   * </pre>
   *
   * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the symbols at the given index.
   */
  com.google.protobuf.ByteString
      getSymbolsBytes(int index);

  /**
   * <pre>
   * AskCount is the number of validators that are requested to respond to this
   * oracle request. Higher value means more security, at a higher gas cost.
   * </pre>
   *
   * <code>uint64 ask_count = 4 [json_name = "askCount"];</code>
   * @return The askCount.
   */
  long getAskCount();

  /**
   * <pre>
   * MinCount is the minimum number of validators necessary for the request to
   * proceed to the execution phase. Higher value means more security, at the
   * cost of liveness.
   * </pre>
   *
   * <code>uint64 min_count = 5 [json_name = "minCount"];</code>
   * @return The minCount.
   */
  long getMinCount();

  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<com.cosmos.base.v1beta1.Coin> 
      getFeeLimitList();
  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  com.cosmos.base.v1beta1.Coin getFeeLimit(int index);
  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  int getFeeLimitCount();
  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getFeeLimitOrBuilderList();
  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  com.cosmos.base.v1beta1.CoinOrBuilder getFeeLimitOrBuilder(
      int index);

  /**
   * <pre>
   * PrepareGas is amount of gas to pay to prepare raw requests
   * </pre>
   *
   * <code>uint64 prepare_gas = 7 [json_name = "prepareGas"];</code>
   * @return The prepareGas.
   */
  long getPrepareGas();

  /**
   * <pre>
   * ExecuteGas is amount of gas to reserve for executing
   * </pre>
   *
   * <code>uint64 execute_gas = 8 [json_name = "executeGas"];</code>
   * @return The executeGas.
   */
  long getExecuteGas();

  /**
   * <pre>
   * MinSourceCount is the minimum number of data sources that must be used by
   * each validator
   * </pre>
   *
   * <code>uint64 min_source_count = 9 [json_name = "minSourceCount"];</code>
   * @return The minSourceCount.
   */
  long getMinSourceCount();
}
