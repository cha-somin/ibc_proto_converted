// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: injective/oracle/v1beta1/oracle.proto

package com.injective.oracle.v1beta1;

/**
 * Protobuf type {@code injective.oracle.v1beta1.BandOracleRequest}
 */
public final class BandOracleRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:injective.oracle.v1beta1.BandOracleRequest)
    BandOracleRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use BandOracleRequest.newBuilder() to construct.
  private BandOracleRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private BandOracleRequest() {
    symbols_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    feeLimit_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new BandOracleRequest();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.injective.oracle.v1beta1.OracleProto.internal_static_injective_oracle_v1beta1_BandOracleRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.injective.oracle.v1beta1.OracleProto.internal_static_injective_oracle_v1beta1_BandOracleRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.injective.oracle.v1beta1.BandOracleRequest.class, com.injective.oracle.v1beta1.BandOracleRequest.Builder.class);
  }

  public static final int REQUEST_ID_FIELD_NUMBER = 1;
  private long requestId_ = 0L;
  /**
   * <pre>
   * Unique Identifier for band ibc oracle request
   * </pre>
   *
   * <code>uint64 request_id = 1 [json_name = "requestId"];</code>
   * @return The requestId.
   */
  @java.lang.Override
  public long getRequestId() {
    return requestId_;
  }

  public static final int ORACLE_SCRIPT_ID_FIELD_NUMBER = 2;
  private long oracleScriptId_ = 0L;
  /**
   * <pre>
   * OracleScriptID is the unique identifier of the oracle script to be
   * executed.
   * </pre>
   *
   * <code>int64 oracle_script_id = 2 [json_name = "oracleScriptId"];</code>
   * @return The oracleScriptId.
   */
  @java.lang.Override
  public long getOracleScriptId() {
    return oracleScriptId_;
  }

  public static final int SYMBOLS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private com.google.protobuf.LazyStringArrayList symbols_ =
      com.google.protobuf.LazyStringArrayList.emptyList();
  /**
   * <pre>
   * Symbols is the list of symbols to prepare in the calldata
   * </pre>
   *
   * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
   * @return A list containing the symbols.
   */
  public com.google.protobuf.ProtocolStringList
      getSymbolsList() {
    return symbols_;
  }
  /**
   * <pre>
   * Symbols is the list of symbols to prepare in the calldata
   * </pre>
   *
   * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
   * @return The count of symbols.
   */
  public int getSymbolsCount() {
    return symbols_.size();
  }
  /**
   * <pre>
   * Symbols is the list of symbols to prepare in the calldata
   * </pre>
   *
   * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
   * @param index The index of the element to return.
   * @return The symbols at the given index.
   */
  public java.lang.String getSymbols(int index) {
    return symbols_.get(index);
  }
  /**
   * <pre>
   * Symbols is the list of symbols to prepare in the calldata
   * </pre>
   *
   * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the symbols at the given index.
   */
  public com.google.protobuf.ByteString
      getSymbolsBytes(int index) {
    return symbols_.getByteString(index);
  }

  public static final int ASK_COUNT_FIELD_NUMBER = 4;
  private long askCount_ = 0L;
  /**
   * <pre>
   * AskCount is the number of validators that are requested to respond to this
   * oracle request. Higher value means more security, at a higher gas cost.
   * </pre>
   *
   * <code>uint64 ask_count = 4 [json_name = "askCount"];</code>
   * @return The askCount.
   */
  @java.lang.Override
  public long getAskCount() {
    return askCount_;
  }

  public static final int MIN_COUNT_FIELD_NUMBER = 5;
  private long minCount_ = 0L;
  /**
   * <pre>
   * MinCount is the minimum number of validators necessary for the request to
   * proceed to the execution phase. Higher value means more security, at the
   * cost of liveness.
   * </pre>
   *
   * <code>uint64 min_count = 5 [json_name = "minCount"];</code>
   * @return The minCount.
   */
  @java.lang.Override
  public long getMinCount() {
    return minCount_;
  }

  public static final int FEE_LIMIT_FIELD_NUMBER = 6;
  @SuppressWarnings("serial")
  private java.util.List<com.cosmos.base.v1beta1.Coin> feeLimit_;
  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<com.cosmos.base.v1beta1.Coin> getFeeLimitList() {
    return feeLimit_;
  }
  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getFeeLimitOrBuilderList() {
    return feeLimit_;
  }
  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public int getFeeLimitCount() {
    return feeLimit_.size();
  }
  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public com.cosmos.base.v1beta1.Coin getFeeLimit(int index) {
    return feeLimit_.get(index);
  }
  /**
   * <pre>
   * FeeLimit is the maximum tokens that will be paid to all data source
   * providers.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public com.cosmos.base.v1beta1.CoinOrBuilder getFeeLimitOrBuilder(
      int index) {
    return feeLimit_.get(index);
  }

  public static final int PREPARE_GAS_FIELD_NUMBER = 7;
  private long prepareGas_ = 0L;
  /**
   * <pre>
   * PrepareGas is amount of gas to pay to prepare raw requests
   * </pre>
   *
   * <code>uint64 prepare_gas = 7 [json_name = "prepareGas"];</code>
   * @return The prepareGas.
   */
  @java.lang.Override
  public long getPrepareGas() {
    return prepareGas_;
  }

  public static final int EXECUTE_GAS_FIELD_NUMBER = 8;
  private long executeGas_ = 0L;
  /**
   * <pre>
   * ExecuteGas is amount of gas to reserve for executing
   * </pre>
   *
   * <code>uint64 execute_gas = 8 [json_name = "executeGas"];</code>
   * @return The executeGas.
   */
  @java.lang.Override
  public long getExecuteGas() {
    return executeGas_;
  }

  public static final int MIN_SOURCE_COUNT_FIELD_NUMBER = 9;
  private long minSourceCount_ = 0L;
  /**
   * <pre>
   * MinSourceCount is the minimum number of data sources that must be used by
   * each validator
   * </pre>
   *
   * <code>uint64 min_source_count = 9 [json_name = "minSourceCount"];</code>
   * @return The minSourceCount.
   */
  @java.lang.Override
  public long getMinSourceCount() {
    return minSourceCount_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (requestId_ != 0L) {
      output.writeUInt64(1, requestId_);
    }
    if (oracleScriptId_ != 0L) {
      output.writeInt64(2, oracleScriptId_);
    }
    for (int i = 0; i < symbols_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, symbols_.getRaw(i));
    }
    if (askCount_ != 0L) {
      output.writeUInt64(4, askCount_);
    }
    if (minCount_ != 0L) {
      output.writeUInt64(5, minCount_);
    }
    for (int i = 0; i < feeLimit_.size(); i++) {
      output.writeMessage(6, feeLimit_.get(i));
    }
    if (prepareGas_ != 0L) {
      output.writeUInt64(7, prepareGas_);
    }
    if (executeGas_ != 0L) {
      output.writeUInt64(8, executeGas_);
    }
    if (minSourceCount_ != 0L) {
      output.writeUInt64(9, minSourceCount_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (requestId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(1, requestId_);
    }
    if (oracleScriptId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(2, oracleScriptId_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < symbols_.size(); i++) {
        dataSize += computeStringSizeNoTag(symbols_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getSymbolsList().size();
    }
    if (askCount_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(4, askCount_);
    }
    if (minCount_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(5, minCount_);
    }
    for (int i = 0; i < feeLimit_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, feeLimit_.get(i));
    }
    if (prepareGas_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(7, prepareGas_);
    }
    if (executeGas_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(8, executeGas_);
    }
    if (minSourceCount_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(9, minSourceCount_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.injective.oracle.v1beta1.BandOracleRequest)) {
      return super.equals(obj);
    }
    com.injective.oracle.v1beta1.BandOracleRequest other = (com.injective.oracle.v1beta1.BandOracleRequest) obj;

    if (getRequestId()
        != other.getRequestId()) return false;
    if (getOracleScriptId()
        != other.getOracleScriptId()) return false;
    if (!getSymbolsList()
        .equals(other.getSymbolsList())) return false;
    if (getAskCount()
        != other.getAskCount()) return false;
    if (getMinCount()
        != other.getMinCount()) return false;
    if (!getFeeLimitList()
        .equals(other.getFeeLimitList())) return false;
    if (getPrepareGas()
        != other.getPrepareGas()) return false;
    if (getExecuteGas()
        != other.getExecuteGas()) return false;
    if (getMinSourceCount()
        != other.getMinSourceCount()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + REQUEST_ID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getRequestId());
    hash = (37 * hash) + ORACLE_SCRIPT_ID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getOracleScriptId());
    if (getSymbolsCount() > 0) {
      hash = (37 * hash) + SYMBOLS_FIELD_NUMBER;
      hash = (53 * hash) + getSymbolsList().hashCode();
    }
    hash = (37 * hash) + ASK_COUNT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getAskCount());
    hash = (37 * hash) + MIN_COUNT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getMinCount());
    if (getFeeLimitCount() > 0) {
      hash = (37 * hash) + FEE_LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + getFeeLimitList().hashCode();
    }
    hash = (37 * hash) + PREPARE_GAS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPrepareGas());
    hash = (37 * hash) + EXECUTE_GAS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getExecuteGas());
    hash = (37 * hash) + MIN_SOURCE_COUNT_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getMinSourceCount());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.injective.oracle.v1beta1.BandOracleRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.injective.oracle.v1beta1.BandOracleRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.injective.oracle.v1beta1.BandOracleRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.injective.oracle.v1beta1.BandOracleRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.injective.oracle.v1beta1.BandOracleRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.injective.oracle.v1beta1.BandOracleRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.injective.oracle.v1beta1.BandOracleRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.injective.oracle.v1beta1.BandOracleRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.injective.oracle.v1beta1.BandOracleRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.injective.oracle.v1beta1.BandOracleRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.injective.oracle.v1beta1.BandOracleRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.injective.oracle.v1beta1.BandOracleRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.injective.oracle.v1beta1.BandOracleRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code injective.oracle.v1beta1.BandOracleRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:injective.oracle.v1beta1.BandOracleRequest)
      com.injective.oracle.v1beta1.BandOracleRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.injective.oracle.v1beta1.OracleProto.internal_static_injective_oracle_v1beta1_BandOracleRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.injective.oracle.v1beta1.OracleProto.internal_static_injective_oracle_v1beta1_BandOracleRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.injective.oracle.v1beta1.BandOracleRequest.class, com.injective.oracle.v1beta1.BandOracleRequest.Builder.class);
    }

    // Construct using com.injective.oracle.v1beta1.BandOracleRequest.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      requestId_ = 0L;
      oracleScriptId_ = 0L;
      symbols_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      askCount_ = 0L;
      minCount_ = 0L;
      if (feeLimitBuilder_ == null) {
        feeLimit_ = java.util.Collections.emptyList();
      } else {
        feeLimit_ = null;
        feeLimitBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000020);
      prepareGas_ = 0L;
      executeGas_ = 0L;
      minSourceCount_ = 0L;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.injective.oracle.v1beta1.OracleProto.internal_static_injective_oracle_v1beta1_BandOracleRequest_descriptor;
    }

    @java.lang.Override
    public com.injective.oracle.v1beta1.BandOracleRequest getDefaultInstanceForType() {
      return com.injective.oracle.v1beta1.BandOracleRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.injective.oracle.v1beta1.BandOracleRequest build() {
      com.injective.oracle.v1beta1.BandOracleRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.injective.oracle.v1beta1.BandOracleRequest buildPartial() {
      com.injective.oracle.v1beta1.BandOracleRequest result = new com.injective.oracle.v1beta1.BandOracleRequest(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.injective.oracle.v1beta1.BandOracleRequest result) {
      if (feeLimitBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0)) {
          feeLimit_ = java.util.Collections.unmodifiableList(feeLimit_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.feeLimit_ = feeLimit_;
      } else {
        result.feeLimit_ = feeLimitBuilder_.build();
      }
    }

    private void buildPartial0(com.injective.oracle.v1beta1.BandOracleRequest result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.requestId_ = requestId_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.oracleScriptId_ = oracleScriptId_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        symbols_.makeImmutable();
        result.symbols_ = symbols_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.askCount_ = askCount_;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.minCount_ = minCount_;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.prepareGas_ = prepareGas_;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.executeGas_ = executeGas_;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.minSourceCount_ = minSourceCount_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.injective.oracle.v1beta1.BandOracleRequest) {
        return mergeFrom((com.injective.oracle.v1beta1.BandOracleRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.injective.oracle.v1beta1.BandOracleRequest other) {
      if (other == com.injective.oracle.v1beta1.BandOracleRequest.getDefaultInstance()) return this;
      if (other.getRequestId() != 0L) {
        setRequestId(other.getRequestId());
      }
      if (other.getOracleScriptId() != 0L) {
        setOracleScriptId(other.getOracleScriptId());
      }
      if (!other.symbols_.isEmpty()) {
        if (symbols_.isEmpty()) {
          symbols_ = other.symbols_;
          bitField0_ |= 0x00000004;
        } else {
          ensureSymbolsIsMutable();
          symbols_.addAll(other.symbols_);
        }
        onChanged();
      }
      if (other.getAskCount() != 0L) {
        setAskCount(other.getAskCount());
      }
      if (other.getMinCount() != 0L) {
        setMinCount(other.getMinCount());
      }
      if (feeLimitBuilder_ == null) {
        if (!other.feeLimit_.isEmpty()) {
          if (feeLimit_.isEmpty()) {
            feeLimit_ = other.feeLimit_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureFeeLimitIsMutable();
            feeLimit_.addAll(other.feeLimit_);
          }
          onChanged();
        }
      } else {
        if (!other.feeLimit_.isEmpty()) {
          if (feeLimitBuilder_.isEmpty()) {
            feeLimitBuilder_.dispose();
            feeLimitBuilder_ = null;
            feeLimit_ = other.feeLimit_;
            bitField0_ = (bitField0_ & ~0x00000020);
            feeLimitBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getFeeLimitFieldBuilder() : null;
          } else {
            feeLimitBuilder_.addAllMessages(other.feeLimit_);
          }
        }
      }
      if (other.getPrepareGas() != 0L) {
        setPrepareGas(other.getPrepareGas());
      }
      if (other.getExecuteGas() != 0L) {
        setExecuteGas(other.getExecuteGas());
      }
      if (other.getMinSourceCount() != 0L) {
        setMinSourceCount(other.getMinSourceCount());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              requestId_ = input.readUInt64();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              oracleScriptId_ = input.readInt64();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              ensureSymbolsIsMutable();
              symbols_.add(s);
              break;
            } // case 26
            case 32: {
              askCount_ = input.readUInt64();
              bitField0_ |= 0x00000008;
              break;
            } // case 32
            case 40: {
              minCount_ = input.readUInt64();
              bitField0_ |= 0x00000010;
              break;
            } // case 40
            case 50: {
              com.cosmos.base.v1beta1.Coin m =
                  input.readMessage(
                      com.cosmos.base.v1beta1.Coin.parser(),
                      extensionRegistry);
              if (feeLimitBuilder_ == null) {
                ensureFeeLimitIsMutable();
                feeLimit_.add(m);
              } else {
                feeLimitBuilder_.addMessage(m);
              }
              break;
            } // case 50
            case 56: {
              prepareGas_ = input.readUInt64();
              bitField0_ |= 0x00000040;
              break;
            } // case 56
            case 64: {
              executeGas_ = input.readUInt64();
              bitField0_ |= 0x00000080;
              break;
            } // case 64
            case 72: {
              minSourceCount_ = input.readUInt64();
              bitField0_ |= 0x00000100;
              break;
            } // case 72
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private long requestId_ ;
    /**
     * <pre>
     * Unique Identifier for band ibc oracle request
     * </pre>
     *
     * <code>uint64 request_id = 1 [json_name = "requestId"];</code>
     * @return The requestId.
     */
    @java.lang.Override
    public long getRequestId() {
      return requestId_;
    }
    /**
     * <pre>
     * Unique Identifier for band ibc oracle request
     * </pre>
     *
     * <code>uint64 request_id = 1 [json_name = "requestId"];</code>
     * @param value The requestId to set.
     * @return This builder for chaining.
     */
    public Builder setRequestId(long value) {

      requestId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Unique Identifier for band ibc oracle request
     * </pre>
     *
     * <code>uint64 request_id = 1 [json_name = "requestId"];</code>
     * @return This builder for chaining.
     */
    public Builder clearRequestId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      requestId_ = 0L;
      onChanged();
      return this;
    }

    private long oracleScriptId_ ;
    /**
     * <pre>
     * OracleScriptID is the unique identifier of the oracle script to be
     * executed.
     * </pre>
     *
     * <code>int64 oracle_script_id = 2 [json_name = "oracleScriptId"];</code>
     * @return The oracleScriptId.
     */
    @java.lang.Override
    public long getOracleScriptId() {
      return oracleScriptId_;
    }
    /**
     * <pre>
     * OracleScriptID is the unique identifier of the oracle script to be
     * executed.
     * </pre>
     *
     * <code>int64 oracle_script_id = 2 [json_name = "oracleScriptId"];</code>
     * @param value The oracleScriptId to set.
     * @return This builder for chaining.
     */
    public Builder setOracleScriptId(long value) {

      oracleScriptId_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * OracleScriptID is the unique identifier of the oracle script to be
     * executed.
     * </pre>
     *
     * <code>int64 oracle_script_id = 2 [json_name = "oracleScriptId"];</code>
     * @return This builder for chaining.
     */
    public Builder clearOracleScriptId() {
      bitField0_ = (bitField0_ & ~0x00000002);
      oracleScriptId_ = 0L;
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringArrayList symbols_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    private void ensureSymbolsIsMutable() {
      if (!symbols_.isModifiable()) {
        symbols_ = new com.google.protobuf.LazyStringArrayList(symbols_);
      }
      bitField0_ |= 0x00000004;
    }
    /**
     * <pre>
     * Symbols is the list of symbols to prepare in the calldata
     * </pre>
     *
     * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
     * @return A list containing the symbols.
     */
    public com.google.protobuf.ProtocolStringList
        getSymbolsList() {
      symbols_.makeImmutable();
      return symbols_;
    }
    /**
     * <pre>
     * Symbols is the list of symbols to prepare in the calldata
     * </pre>
     *
     * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
     * @return The count of symbols.
     */
    public int getSymbolsCount() {
      return symbols_.size();
    }
    /**
     * <pre>
     * Symbols is the list of symbols to prepare in the calldata
     * </pre>
     *
     * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
     * @param index The index of the element to return.
     * @return The symbols at the given index.
     */
    public java.lang.String getSymbols(int index) {
      return symbols_.get(index);
    }
    /**
     * <pre>
     * Symbols is the list of symbols to prepare in the calldata
     * </pre>
     *
     * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
     * @param index The index of the value to return.
     * @return The bytes of the symbols at the given index.
     */
    public com.google.protobuf.ByteString
        getSymbolsBytes(int index) {
      return symbols_.getByteString(index);
    }
    /**
     * <pre>
     * Symbols is the list of symbols to prepare in the calldata
     * </pre>
     *
     * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
     * @param index The index to set the value at.
     * @param value The symbols to set.
     * @return This builder for chaining.
     */
    public Builder setSymbols(
        int index, java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureSymbolsIsMutable();
      symbols_.set(index, value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Symbols is the list of symbols to prepare in the calldata
     * </pre>
     *
     * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
     * @param value The symbols to add.
     * @return This builder for chaining.
     */
    public Builder addSymbols(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      ensureSymbolsIsMutable();
      symbols_.add(value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Symbols is the list of symbols to prepare in the calldata
     * </pre>
     *
     * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
     * @param values The symbols to add.
     * @return This builder for chaining.
     */
    public Builder addAllSymbols(
        java.lang.Iterable<java.lang.String> values) {
      ensureSymbolsIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, symbols_);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Symbols is the list of symbols to prepare in the calldata
     * </pre>
     *
     * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
     * @return This builder for chaining.
     */
    public Builder clearSymbols() {
      symbols_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
      bitField0_ = (bitField0_ & ~0x00000004);;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Symbols is the list of symbols to prepare in the calldata
     * </pre>
     *
     * <code>repeated string symbols = 3 [json_name = "symbols"];</code>
     * @param value The bytes of the symbols to add.
     * @return This builder for chaining.
     */
    public Builder addSymbolsBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      ensureSymbolsIsMutable();
      symbols_.add(value);
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private long askCount_ ;
    /**
     * <pre>
     * AskCount is the number of validators that are requested to respond to this
     * oracle request. Higher value means more security, at a higher gas cost.
     * </pre>
     *
     * <code>uint64 ask_count = 4 [json_name = "askCount"];</code>
     * @return The askCount.
     */
    @java.lang.Override
    public long getAskCount() {
      return askCount_;
    }
    /**
     * <pre>
     * AskCount is the number of validators that are requested to respond to this
     * oracle request. Higher value means more security, at a higher gas cost.
     * </pre>
     *
     * <code>uint64 ask_count = 4 [json_name = "askCount"];</code>
     * @param value The askCount to set.
     * @return This builder for chaining.
     */
    public Builder setAskCount(long value) {

      askCount_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * AskCount is the number of validators that are requested to respond to this
     * oracle request. Higher value means more security, at a higher gas cost.
     * </pre>
     *
     * <code>uint64 ask_count = 4 [json_name = "askCount"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAskCount() {
      bitField0_ = (bitField0_ & ~0x00000008);
      askCount_ = 0L;
      onChanged();
      return this;
    }

    private long minCount_ ;
    /**
     * <pre>
     * MinCount is the minimum number of validators necessary for the request to
     * proceed to the execution phase. Higher value means more security, at the
     * cost of liveness.
     * </pre>
     *
     * <code>uint64 min_count = 5 [json_name = "minCount"];</code>
     * @return The minCount.
     */
    @java.lang.Override
    public long getMinCount() {
      return minCount_;
    }
    /**
     * <pre>
     * MinCount is the minimum number of validators necessary for the request to
     * proceed to the execution phase. Higher value means more security, at the
     * cost of liveness.
     * </pre>
     *
     * <code>uint64 min_count = 5 [json_name = "minCount"];</code>
     * @param value The minCount to set.
     * @return This builder for chaining.
     */
    public Builder setMinCount(long value) {

      minCount_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * MinCount is the minimum number of validators necessary for the request to
     * proceed to the execution phase. Higher value means more security, at the
     * cost of liveness.
     * </pre>
     *
     * <code>uint64 min_count = 5 [json_name = "minCount"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMinCount() {
      bitField0_ = (bitField0_ & ~0x00000010);
      minCount_ = 0L;
      onChanged();
      return this;
    }

    private java.util.List<com.cosmos.base.v1beta1.Coin> feeLimit_ =
      java.util.Collections.emptyList();
    private void ensureFeeLimitIsMutable() {
      if (!((bitField0_ & 0x00000020) != 0)) {
        feeLimit_ = new java.util.ArrayList<com.cosmos.base.v1beta1.Coin>(feeLimit_);
        bitField0_ |= 0x00000020;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> feeLimitBuilder_;

    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin> getFeeLimitList() {
      if (feeLimitBuilder_ == null) {
        return java.util.Collections.unmodifiableList(feeLimit_);
      } else {
        return feeLimitBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public int getFeeLimitCount() {
      if (feeLimitBuilder_ == null) {
        return feeLimit_.size();
      } else {
        return feeLimitBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin getFeeLimit(int index) {
      if (feeLimitBuilder_ == null) {
        return feeLimit_.get(index);
      } else {
        return feeLimitBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setFeeLimit(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (feeLimitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFeeLimitIsMutable();
        feeLimit_.set(index, value);
        onChanged();
      } else {
        feeLimitBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setFeeLimit(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (feeLimitBuilder_ == null) {
        ensureFeeLimitIsMutable();
        feeLimit_.set(index, builderForValue.build());
        onChanged();
      } else {
        feeLimitBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addFeeLimit(com.cosmos.base.v1beta1.Coin value) {
      if (feeLimitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFeeLimitIsMutable();
        feeLimit_.add(value);
        onChanged();
      } else {
        feeLimitBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addFeeLimit(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (feeLimitBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFeeLimitIsMutable();
        feeLimit_.add(index, value);
        onChanged();
      } else {
        feeLimitBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addFeeLimit(
        com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (feeLimitBuilder_ == null) {
        ensureFeeLimitIsMutable();
        feeLimit_.add(builderForValue.build());
        onChanged();
      } else {
        feeLimitBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addFeeLimit(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (feeLimitBuilder_ == null) {
        ensureFeeLimitIsMutable();
        feeLimit_.add(index, builderForValue.build());
        onChanged();
      } else {
        feeLimitBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addAllFeeLimit(
        java.lang.Iterable<? extends com.cosmos.base.v1beta1.Coin> values) {
      if (feeLimitBuilder_ == null) {
        ensureFeeLimitIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, feeLimit_);
        onChanged();
      } else {
        feeLimitBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder clearFeeLimit() {
      if (feeLimitBuilder_ == null) {
        feeLimit_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
      } else {
        feeLimitBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder removeFeeLimit(int index) {
      if (feeLimitBuilder_ == null) {
        ensureFeeLimitIsMutable();
        feeLimit_.remove(index);
        onChanged();
      } else {
        feeLimitBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder getFeeLimitBuilder(
        int index) {
      return getFeeLimitFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.CoinOrBuilder getFeeLimitOrBuilder(
        int index) {
      if (feeLimitBuilder_ == null) {
        return feeLimit_.get(index);  } else {
        return feeLimitBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
         getFeeLimitOrBuilderList() {
      if (feeLimitBuilder_ != null) {
        return feeLimitBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(feeLimit_);
      }
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addFeeLimitBuilder() {
      return getFeeLimitFieldBuilder().addBuilder(
          com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addFeeLimitBuilder(
        int index) {
      return getFeeLimitFieldBuilder().addBuilder(
          index, com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * FeeLimit is the maximum tokens that will be paid to all data source
     * providers.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin fee_limit = 6 [json_name = "feeLimit", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin.Builder> 
         getFeeLimitBuilderList() {
      return getFeeLimitFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> 
        getFeeLimitFieldBuilder() {
      if (feeLimitBuilder_ == null) {
        feeLimitBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder>(
                feeLimit_,
                ((bitField0_ & 0x00000020) != 0),
                getParentForChildren(),
                isClean());
        feeLimit_ = null;
      }
      return feeLimitBuilder_;
    }

    private long prepareGas_ ;
    /**
     * <pre>
     * PrepareGas is amount of gas to pay to prepare raw requests
     * </pre>
     *
     * <code>uint64 prepare_gas = 7 [json_name = "prepareGas"];</code>
     * @return The prepareGas.
     */
    @java.lang.Override
    public long getPrepareGas() {
      return prepareGas_;
    }
    /**
     * <pre>
     * PrepareGas is amount of gas to pay to prepare raw requests
     * </pre>
     *
     * <code>uint64 prepare_gas = 7 [json_name = "prepareGas"];</code>
     * @param value The prepareGas to set.
     * @return This builder for chaining.
     */
    public Builder setPrepareGas(long value) {

      prepareGas_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * PrepareGas is amount of gas to pay to prepare raw requests
     * </pre>
     *
     * <code>uint64 prepare_gas = 7 [json_name = "prepareGas"];</code>
     * @return This builder for chaining.
     */
    public Builder clearPrepareGas() {
      bitField0_ = (bitField0_ & ~0x00000040);
      prepareGas_ = 0L;
      onChanged();
      return this;
    }

    private long executeGas_ ;
    /**
     * <pre>
     * ExecuteGas is amount of gas to reserve for executing
     * </pre>
     *
     * <code>uint64 execute_gas = 8 [json_name = "executeGas"];</code>
     * @return The executeGas.
     */
    @java.lang.Override
    public long getExecuteGas() {
      return executeGas_;
    }
    /**
     * <pre>
     * ExecuteGas is amount of gas to reserve for executing
     * </pre>
     *
     * <code>uint64 execute_gas = 8 [json_name = "executeGas"];</code>
     * @param value The executeGas to set.
     * @return This builder for chaining.
     */
    public Builder setExecuteGas(long value) {

      executeGas_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * ExecuteGas is amount of gas to reserve for executing
     * </pre>
     *
     * <code>uint64 execute_gas = 8 [json_name = "executeGas"];</code>
     * @return This builder for chaining.
     */
    public Builder clearExecuteGas() {
      bitField0_ = (bitField0_ & ~0x00000080);
      executeGas_ = 0L;
      onChanged();
      return this;
    }

    private long minSourceCount_ ;
    /**
     * <pre>
     * MinSourceCount is the minimum number of data sources that must be used by
     * each validator
     * </pre>
     *
     * <code>uint64 min_source_count = 9 [json_name = "minSourceCount"];</code>
     * @return The minSourceCount.
     */
    @java.lang.Override
    public long getMinSourceCount() {
      return minSourceCount_;
    }
    /**
     * <pre>
     * MinSourceCount is the minimum number of data sources that must be used by
     * each validator
     * </pre>
     *
     * <code>uint64 min_source_count = 9 [json_name = "minSourceCount"];</code>
     * @param value The minSourceCount to set.
     * @return This builder for chaining.
     */
    public Builder setMinSourceCount(long value) {

      minSourceCount_ = value;
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * MinSourceCount is the minimum number of data sources that must be used by
     * each validator
     * </pre>
     *
     * <code>uint64 min_source_count = 9 [json_name = "minSourceCount"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMinSourceCount() {
      bitField0_ = (bitField0_ & ~0x00000100);
      minSourceCount_ = 0L;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:injective.oracle.v1beta1.BandOracleRequest)
  }

  // @@protoc_insertion_point(class_scope:injective.oracle.v1beta1.BandOracleRequest)
  private static final com.injective.oracle.v1beta1.BandOracleRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.injective.oracle.v1beta1.BandOracleRequest();
  }

  public static com.injective.oracle.v1beta1.BandOracleRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<BandOracleRequest>
      PARSER = new com.google.protobuf.AbstractParser<BandOracleRequest>() {
    @java.lang.Override
    public BandOracleRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<BandOracleRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<BandOracleRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.injective.oracle.v1beta1.BandOracleRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

