// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: evmos/revenue/v1/tx.proto

package com.evmos.revenue.v1;

public interface MsgRegisterRevenueOrBuilder extends
    // @@protoc_insertion_point(interface_extends:evmos.revenue.v1.MsgRegisterRevenue)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * contract_address in hex format
   * </pre>
   *
   * <code>string contract_address = 1 [json_name = "contractAddress"];</code>
   * @return The contractAddress.
   */
  java.lang.String getContractAddress();
  /**
   * <pre>
   * contract_address in hex format
   * </pre>
   *
   * <code>string contract_address = 1 [json_name = "contractAddress"];</code>
   * @return The bytes for contractAddress.
   */
  com.google.protobuf.ByteString
      getContractAddressBytes();

  /**
   * <pre>
   * deployer_address is the bech32 address of message sender. It must be the same as the origin EOA
   * sending the transaction which deploys the contract
   * </pre>
   *
   * <code>string deployer_address = 2 [json_name = "deployerAddress"];</code>
   * @return The deployerAddress.
   */
  java.lang.String getDeployerAddress();
  /**
   * <pre>
   * deployer_address is the bech32 address of message sender. It must be the same as the origin EOA
   * sending the transaction which deploys the contract
   * </pre>
   *
   * <code>string deployer_address = 2 [json_name = "deployerAddress"];</code>
   * @return The bytes for deployerAddress.
   */
  com.google.protobuf.ByteString
      getDeployerAddressBytes();

  /**
   * <pre>
   * withdrawer_address is the bech32 address of account receiving the transaction fees
   * </pre>
   *
   * <code>string withdrawer_address = 3 [json_name = "withdrawerAddress"];</code>
   * @return The withdrawerAddress.
   */
  java.lang.String getWithdrawerAddress();
  /**
   * <pre>
   * withdrawer_address is the bech32 address of account receiving the transaction fees
   * </pre>
   *
   * <code>string withdrawer_address = 3 [json_name = "withdrawerAddress"];</code>
   * @return The bytes for withdrawerAddress.
   */
  com.google.protobuf.ByteString
      getWithdrawerAddressBytes();

  /**
   * <pre>
   * nonces is an array of nonces from the address path, where the last nonce is the nonce
   * that determines the contract's address - it can be an EOA nonce or a
   * factory contract nonce
   * </pre>
   *
   * <code>repeated uint64 nonces = 4 [json_name = "nonces"];</code>
   * @return A list containing the nonces.
   */
  java.util.List<java.lang.Long> getNoncesList();
  /**
   * <pre>
   * nonces is an array of nonces from the address path, where the last nonce is the nonce
   * that determines the contract's address - it can be an EOA nonce or a
   * factory contract nonce
   * </pre>
   *
   * <code>repeated uint64 nonces = 4 [json_name = "nonces"];</code>
   * @return The count of nonces.
   */
  int getNoncesCount();
  /**
   * <pre>
   * nonces is an array of nonces from the address path, where the last nonce is the nonce
   * that determines the contract's address - it can be an EOA nonce or a
   * factory contract nonce
   * </pre>
   *
   * <code>repeated uint64 nonces = 4 [json_name = "nonces"];</code>
   * @param index The index of the element to return.
   * @return The nonces at the given index.
   */
  long getNonces(int index);
}
