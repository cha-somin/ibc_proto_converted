// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comdex/liquidity/v1beta1/params.proto

package com.comdex.liquidity.v1beta1;

public final class ParamsProto {
  private ParamsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_comdex_liquidity_v1beta1_Params_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_comdex_liquidity_v1beta1_Params_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_comdex_liquidity_v1beta1_GenericParams_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_comdex_liquidity_v1beta1_GenericParams_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n%comdex/liquidity/v1beta1/params.proto\022" +
      "\030comdex.liquidity.v1beta1\032\024gogoproto/gog" +
      "o.proto\032\036cosmos/base/v1beta1/coin.proto\032" +
      "\036google/protobuf/duration.proto\"\010\n\006Param" +
      "s\"\265\014\n\rGenericParams\022\035\n\nbatch_size\030\001 \001(\004R" +
      "\tbatchSize\022%\n\016tick_precision\030\002 \001(\004R\rtick" +
      "Precision\0222\n\025fee_collector_address\030\003 \001(\t" +
      "R\023feeCollectorAddress\0224\n\026dust_collector_" +
      "address\030\004 \001(\tR\024dustCollectorAddress\022n\n\034m" +
      "in_initial_pool_coin_supply\030\005 \001(\tB.\310\336\037\000\332" +
      "\336\037&github.com/cosmos/cosmos-sdk/types.In" +
      "tR\030minInitialPoolCoinSupply\022w\n\021pair_crea" +
      "tion_fee\030\006 \003(\0132\031.cosmos.base.v1beta1.Coi" +
      "nB0\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk/" +
      "types.CoinsR\017pairCreationFee\022w\n\021pool_cre" +
      "ation_fee\030\007 \003(\0132\031.cosmos.base.v1beta1.Co" +
      "inB0\310\336\037\000\252\337\037(github.com/cosmos/cosmos-sdk" +
      "/types.CoinsR\017poolCreationFee\022k\n\032min_ini" +
      "tial_deposit_amount\030\010 \001(\tB.\310\336\037\000\332\336\037&githu" +
      "b.com/cosmos/cosmos-sdk/types.IntR\027minIn" +
      "itialDepositAmount\022a\n\025max_price_limit_ra" +
      "tio\030\t \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cos" +
      "mos-sdk/types.DecR\022maxPriceLimitRatio\022Q\n" +
      "\022max_order_lifespan\030\n \001(\0132\031.google.proto" +
      "buf.DurationB\010\310\336\037\000\230\337\037\001R\020maxOrderLifespan" +
      "\022R\n\rswap_fee_rate\030\013 \001(\tB.\310\336\037\000\332\336\037&github." +
      "com/cosmos/cosmos-sdk/types.DecR\013swapFee" +
      "Rate\022Z\n\021withdraw_fee_rate\030\014 \001(\tB.\310\336\037\000\332\336\037" +
      "&github.com/cosmos/cosmos-sdk/types.DecR" +
      "\017withdrawFeeRate\022Z\n\021deposit_extra_gas\030\r " +
      "\001(\004B.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sd" +
      "k/types.GasR\017depositExtraGas\022\\\n\022withdraw" +
      "_extra_gas\030\016 \001(\004B.\310\336\037\000\332\336\037&github.com/cos" +
      "mos/cosmos-sdk/types.GasR\020withdrawExtraG" +
      "as\022V\n\017order_extra_gas\030\017 \001(\004B.\310\336\037\000\332\336\037&git" +
      "hub.com/cosmos/cosmos-sdk/types.GasR\rord" +
      "erExtraGas\022/\n\024swap_fee_distr_denom\030\020 \001(\t" +
      "R\021swapFeeDistrDenom\022[\n\022swap_fee_burn_rat" +
      "e\030\021 \001(\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmo" +
      "s-sdk/types.DecR\017swapFeeBurnRate\022\025\n\006app_" +
      "id\030\022 \001(\004R\005appId\022G\n!max_num_market_making" +
      "_order_ticks\030\023 \001(\004R\034maxNumMarketMakingOr" +
      "derTicks\022?\n\035max_num_active_pools_per_pai" +
      "r\030\024 \001(\004R\030maxNumActivePoolsPerPairB\346\001\n\034co" +
      "m.comdex.liquidity.v1beta1B\013ParamsProtoP" +
      "\001Z3github.com/comdex-official/comdex/x/l" +
      "iquidity/types\242\002\003CLX\252\002\030Comdex.Liquidity." +
      "V1beta1\312\002\030Comdex\\Liquidity\\V1beta1\342\002$Com" +
      "dex\\Liquidity\\V1beta1\\GPBMetadata\352\002\032Comd" +
      "ex::Liquidity::V1beta1\310\341\036\000b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.gogoproto.GogoProto.getDescriptor(),
          com.cosmos.base.v1beta1.CoinProto.getDescriptor(),
          com.google.protobuf.DurationProto.getDescriptor(),
        });
    internal_static_comdex_liquidity_v1beta1_Params_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_comdex_liquidity_v1beta1_Params_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_comdex_liquidity_v1beta1_Params_descriptor,
        new java.lang.String[] { });
    internal_static_comdex_liquidity_v1beta1_GenericParams_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_comdex_liquidity_v1beta1_GenericParams_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_comdex_liquidity_v1beta1_GenericParams_descriptor,
        new java.lang.String[] { "BatchSize", "TickPrecision", "FeeCollectorAddress", "DustCollectorAddress", "MinInitialPoolCoinSupply", "PairCreationFee", "PoolCreationFee", "MinInitialDepositAmount", "MaxPriceLimitRatio", "MaxOrderLifespan", "SwapFeeRate", "WithdrawFeeRate", "DepositExtraGas", "WithdrawExtraGas", "OrderExtraGas", "SwapFeeDistrDenom", "SwapFeeBurnRate", "AppId", "MaxNumMarketMakingOrderTicks", "MaxNumActivePoolsPerPair", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.gogoproto.GogoProto.castrepeated);
    registry.add(com.gogoproto.GogoProto.customtype);
    registry.add(com.gogoproto.GogoProto.goprotoGettersAll);
    registry.add(com.gogoproto.GogoProto.nullable);
    registry.add(com.gogoproto.GogoProto.stdduration);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.gogoproto.GogoProto.getDescriptor();
    com.cosmos.base.v1beta1.CoinProto.getDescriptor();
    com.google.protobuf.DurationProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
