// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: umee/incentive/v1/incentive.proto

package com.umee.incentive.v1;

public interface IncentiveProgramOrBuilder extends
    // @@protoc_insertion_point(interface_extends:umee.incentive.v1.IncentiveProgram)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * ID uniquely identifies the incentive program after it has been created.
   * It is zero when the program is being proposed by governance, and is set
   * to its final value when the proposal passes.
   * </pre>
   *
   * <code>uint32 ID = 1 [json_name = "ID"];</code>
   * @return The iD.
   */
  int getID();

  /**
   * <pre>
   * start_time is the unix time (in seconds) at which the incentives begin.
   * If a program is passed after its intended start time, its start time
   * will be increased to the current time, with program duration unchanged.
   * </pre>
   *
   * <code>int64 start_time = 2 [json_name = "startTime"];</code>
   * @return The startTime.
   */
  long getStartTime();

  /**
   * <pre>
   * duration is the length of the incentive program from start time to
   * completion in seconds.
   * </pre>
   *
   * <code>int64 duration = 3 [json_name = "duration"];</code>
   * @return The duration.
   */
  long getDuration();

  /**
   * <pre>
   * uToken is the incentivized uToken collateral denom. Suppliers who collateralize
   * this asset then bond it to the incentive module are eligible for this program's
   * rewards.
   * </pre>
   *
   * <code>string uToken = 4 [json_name = "uToken"];</code>
   * @return The uToken.
   */
  java.lang.String getUToken();
  /**
   * <pre>
   * uToken is the incentivized uToken collateral denom. Suppliers who collateralize
   * this asset then bond it to the incentive module are eligible for this program's
   * rewards.
   * </pre>
   *
   * <code>string uToken = 4 [json_name = "uToken"];</code>
   * @return The bytes for uToken.
   */
  com.google.protobuf.ByteString
      getUTokenBytes();

  /**
   * <pre>
   * funded indicates whether a program bas been funded. This can happen when
   * a program passes if funding from community fund, or any time before the
   * program's start time if funding with MsgSponsor. A program that reaches
   * its start time without being funded is cancelled.
   * </pre>
   *
   * <code>bool funded = 5 [json_name = "funded"];</code>
   * @return The funded.
   */
  boolean getFunded();

  /**
   * <pre>
   * total_rewards are total amount of rewards which can be distributed to
   * suppliers by this program. This is set to its final value when the program
   * is proposed by governance.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin total_rewards = 6 [json_name = "totalRewards", (.gogoproto.nullable) = false];</code>
   * @return Whether the totalRewards field is set.
   */
  boolean hasTotalRewards();
  /**
   * <pre>
   * total_rewards are total amount of rewards which can be distributed to
   * suppliers by this program. This is set to its final value when the program
   * is proposed by governance.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin total_rewards = 6 [json_name = "totalRewards", (.gogoproto.nullable) = false];</code>
   * @return The totalRewards.
   */
  com.cosmos.base.v1beta1.Coin getTotalRewards();
  /**
   * <pre>
   * total_rewards are total amount of rewards which can be distributed to
   * suppliers by this program. This is set to its final value when the program
   * is proposed by governance.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin total_rewards = 6 [json_name = "totalRewards", (.gogoproto.nullable) = false];</code>
   */
  com.cosmos.base.v1beta1.CoinOrBuilder getTotalRewardsOrBuilder();

  /**
   * <pre>
   * remaining_rewards are total amount of this program's funded rewards
   * which have not yet been allocated to suppliers. This is zero until the
   * program is both passed by governance and funded, at which point it
   * starts at the same value as total_rewards then begins decreasing
   * to zero as the program runs to completion.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin remaining_rewards = 7 [json_name = "remainingRewards", (.gogoproto.nullable) = false];</code>
   * @return Whether the remainingRewards field is set.
   */
  boolean hasRemainingRewards();
  /**
   * <pre>
   * remaining_rewards are total amount of this program's funded rewards
   * which have not yet been allocated to suppliers. This is zero until the
   * program is both passed by governance and funded, at which point it
   * starts at the same value as total_rewards then begins decreasing
   * to zero as the program runs to completion.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin remaining_rewards = 7 [json_name = "remainingRewards", (.gogoproto.nullable) = false];</code>
   * @return The remainingRewards.
   */
  com.cosmos.base.v1beta1.Coin getRemainingRewards();
  /**
   * <pre>
   * remaining_rewards are total amount of this program's funded rewards
   * which have not yet been allocated to suppliers. This is zero until the
   * program is both passed by governance and funded, at which point it
   * starts at the same value as total_rewards then begins decreasing
   * to zero as the program runs to completion.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin remaining_rewards = 7 [json_name = "remainingRewards", (.gogoproto.nullable) = false];</code>
   */
  com.cosmos.base.v1beta1.CoinOrBuilder getRemainingRewardsOrBuilder();
}
