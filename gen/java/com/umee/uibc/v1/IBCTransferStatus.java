// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: umee/uibc/v1/quota.proto

package com.umee.uibc.v1;

/**
 * <pre>
 * IBCTransferStatus status of ibc-transfer quota check for inflow and outflow
 * </pre>
 *
 * Protobuf enum {@code umee.uibc.v1.IBCTransferStatus}
 */
public enum IBCTransferStatus
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * UNSPECIFIED  defines a no-op status.
   * </pre>
   *
   * <code>IBC_TRANSFER_STATUS_UNSPECIFIED = 0;</code>
   */
  IBC_TRANSFER_STATUS_UNSPECIFIED(0),
  /**
   * <pre>
   * DISABLED: all inflow and outflow quota checks are disabled.
   * </pre>
   *
   * <code>IBC_TRANSFER_STATUS_QUOTA_DISABLED = 1;</code>
   */
  IBC_TRANSFER_STATUS_QUOTA_DISABLED(1),
  /**
   * <pre>
   * ENABLED: all inflow and outflow quota checks are enabled.
   * </pre>
   *
   * <code>IBC_TRANSFER_STATUS_QUOTA_ENABLED = 2;</code>
   */
  IBC_TRANSFER_STATUS_QUOTA_ENABLED(2),
  /**
   * <pre>
   * DISABLED OUT: outflow quota check is disabled, while the inflow quota check is enabled.
   * </pre>
   *
   * <code>IBC_TRANSFER_STATUS_QUOTA_OUT_DISABLED = 3;</code>
   */
  IBC_TRANSFER_STATUS_QUOTA_OUT_DISABLED(3),
  /**
   * <pre>
   * DISABLED IN: inflow quota check is disabled, while the outflow quota check is enabled.
   * </pre>
   *
   * <code>IBC_TRANSFER_STATUS_QUOTA_IN_DISABLED = 4;</code>
   */
  IBC_TRANSFER_STATUS_QUOTA_IN_DISABLED(4),
  /**
   * <pre>
   * PAUSED: all IBC transfers are paused.
   * </pre>
   *
   * <code>IBC_TRANSFER_STATUS_TRANSFERS_PAUSED = 5;</code>
   */
  IBC_TRANSFER_STATUS_TRANSFERS_PAUSED(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * UNSPECIFIED  defines a no-op status.
   * </pre>
   *
   * <code>IBC_TRANSFER_STATUS_UNSPECIFIED = 0;</code>
   */
  public static final int IBC_TRANSFER_STATUS_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * DISABLED: all inflow and outflow quota checks are disabled.
   * </pre>
   *
   * <code>IBC_TRANSFER_STATUS_QUOTA_DISABLED = 1;</code>
   */
  public static final int IBC_TRANSFER_STATUS_QUOTA_DISABLED_VALUE = 1;
  /**
   * <pre>
   * ENABLED: all inflow and outflow quota checks are enabled.
   * </pre>
   *
   * <code>IBC_TRANSFER_STATUS_QUOTA_ENABLED = 2;</code>
   */
  public static final int IBC_TRANSFER_STATUS_QUOTA_ENABLED_VALUE = 2;
  /**
   * <pre>
   * DISABLED OUT: outflow quota check is disabled, while the inflow quota check is enabled.
   * </pre>
   *
   * <code>IBC_TRANSFER_STATUS_QUOTA_OUT_DISABLED = 3;</code>
   */
  public static final int IBC_TRANSFER_STATUS_QUOTA_OUT_DISABLED_VALUE = 3;
  /**
   * <pre>
   * DISABLED IN: inflow quota check is disabled, while the outflow quota check is enabled.
   * </pre>
   *
   * <code>IBC_TRANSFER_STATUS_QUOTA_IN_DISABLED = 4;</code>
   */
  public static final int IBC_TRANSFER_STATUS_QUOTA_IN_DISABLED_VALUE = 4;
  /**
   * <pre>
   * PAUSED: all IBC transfers are paused.
   * </pre>
   *
   * <code>IBC_TRANSFER_STATUS_TRANSFERS_PAUSED = 5;</code>
   */
  public static final int IBC_TRANSFER_STATUS_TRANSFERS_PAUSED_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static IBCTransferStatus valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static IBCTransferStatus forNumber(int value) {
    switch (value) {
      case 0: return IBC_TRANSFER_STATUS_UNSPECIFIED;
      case 1: return IBC_TRANSFER_STATUS_QUOTA_DISABLED;
      case 2: return IBC_TRANSFER_STATUS_QUOTA_ENABLED;
      case 3: return IBC_TRANSFER_STATUS_QUOTA_OUT_DISABLED;
      case 4: return IBC_TRANSFER_STATUS_QUOTA_IN_DISABLED;
      case 5: return IBC_TRANSFER_STATUS_TRANSFERS_PAUSED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<IBCTransferStatus>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      IBCTransferStatus> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<IBCTransferStatus>() {
          public IBCTransferStatus findValueByNumber(int number) {
            return IBCTransferStatus.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.umee.uibc.v1.QuotaProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final IBCTransferStatus[] VALUES = values();

  public static IBCTransferStatus valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private IBCTransferStatus(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:umee.uibc.v1.IBCTransferStatus)
}

