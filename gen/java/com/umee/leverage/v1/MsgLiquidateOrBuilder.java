// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: umee/leverage/v1/tx.proto

package com.umee.leverage.v1;

public interface MsgLiquidateOrBuilder extends
    // @@protoc_insertion_point(interface_extends:umee.leverage.v1.MsgLiquidate)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Liquidator is the account address performing a liquidation and the signer
   * of the message.
   * </pre>
   *
   * <code>string liquidator = 1 [json_name = "liquidator"];</code>
   * @return The liquidator.
   */
  java.lang.String getLiquidator();
  /**
   * <pre>
   * Liquidator is the account address performing a liquidation and the signer
   * of the message.
   * </pre>
   *
   * <code>string liquidator = 1 [json_name = "liquidator"];</code>
   * @return The bytes for liquidator.
   */
  com.google.protobuf.ByteString
      getLiquidatorBytes();

  /**
   * <pre>
   * Borrower is the account whose borrow is being repaid, and collateral consumed,
   * by the liquidation. It does not sign the message.
   * </pre>
   *
   * <code>string borrower = 2 [json_name = "borrower"];</code>
   * @return The borrower.
   */
  java.lang.String getBorrower();
  /**
   * <pre>
   * Borrower is the account whose borrow is being repaid, and collateral consumed,
   * by the liquidation. It does not sign the message.
   * </pre>
   *
   * <code>string borrower = 2 [json_name = "borrower"];</code>
   * @return The bytes for borrower.
   */
  com.google.protobuf.ByteString
      getBorrowerBytes();

  /**
   * <pre>
   * Repayment is the maximum amount of base tokens that the liquidator is willing
   * to repay.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin repayment = 3 [json_name = "repayment", (.gogoproto.nullable) = false];</code>
   * @return Whether the repayment field is set.
   */
  boolean hasRepayment();
  /**
   * <pre>
   * Repayment is the maximum amount of base tokens that the liquidator is willing
   * to repay.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin repayment = 3 [json_name = "repayment", (.gogoproto.nullable) = false];</code>
   * @return The repayment.
   */
  com.cosmos.base.v1beta1.Coin getRepayment();
  /**
   * <pre>
   * Repayment is the maximum amount of base tokens that the liquidator is willing
   * to repay.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin repayment = 3 [json_name = "repayment", (.gogoproto.nullable) = false];</code>
   */
  com.cosmos.base.v1beta1.CoinOrBuilder getRepaymentOrBuilder();

  /**
   * <pre>
   * RewardDenom is the denom that the liquidator will receive as a liquidation reward.
   * If it is a uToken, the liquidator will receive uTokens from the borrower's
   * collateral. If it is a base token, the uTokens will be redeemed directly at
   * a reduced Liquidation Incentive, and the liquidator will receive base tokens.
   * </pre>
   *
   * <code>string reward_denom = 4 [json_name = "rewardDenom"];</code>
   * @return The rewardDenom.
   */
  java.lang.String getRewardDenom();
  /**
   * <pre>
   * RewardDenom is the denom that the liquidator will receive as a liquidation reward.
   * If it is a uToken, the liquidator will receive uTokens from the borrower's
   * collateral. If it is a base token, the uTokens will be redeemed directly at
   * a reduced Liquidation Incentive, and the liquidator will receive base tokens.
   * </pre>
   *
   * <code>string reward_denom = 4 [json_name = "rewardDenom"];</code>
   * @return The bytes for rewardDenom.
   */
  com.google.protobuf.ByteString
      getRewardDenomBytes();
}
