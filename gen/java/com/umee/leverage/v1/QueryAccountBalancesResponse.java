// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: umee/leverage/v1/query.proto

package com.umee.leverage.v1;

/**
 * <pre>
 * QueryAccountBalancesResponse defines the response structure for the AccountBalances gRPC service handler.
 * </pre>
 *
 * Protobuf type {@code umee.leverage.v1.QueryAccountBalancesResponse}
 */
public final class QueryAccountBalancesResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:umee.leverage.v1.QueryAccountBalancesResponse)
    QueryAccountBalancesResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use QueryAccountBalancesResponse.newBuilder() to construct.
  private QueryAccountBalancesResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private QueryAccountBalancesResponse() {
    supplied_ = java.util.Collections.emptyList();
    collateral_ = java.util.Collections.emptyList();
    borrowed_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new QueryAccountBalancesResponse();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.umee.leverage.v1.QueryProto.internal_static_umee_leverage_v1_QueryAccountBalancesResponse_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.umee.leverage.v1.QueryProto.internal_static_umee_leverage_v1_QueryAccountBalancesResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.umee.leverage.v1.QueryAccountBalancesResponse.class, com.umee.leverage.v1.QueryAccountBalancesResponse.Builder.class);
  }

  public static final int SUPPLIED_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<com.cosmos.base.v1beta1.Coin> supplied_;
  /**
   * <pre>
   * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<com.cosmos.base.v1beta1.Coin> getSuppliedList() {
    return supplied_;
  }
  /**
   * <pre>
   * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getSuppliedOrBuilderList() {
    return supplied_;
  }
  /**
   * <pre>
   * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public int getSuppliedCount() {
    return supplied_.size();
  }
  /**
   * <pre>
   * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public com.cosmos.base.v1beta1.Coin getSupplied(int index) {
    return supplied_.get(index);
  }
  /**
   * <pre>
   * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public com.cosmos.base.v1beta1.CoinOrBuilder getSuppliedOrBuilder(
      int index) {
    return supplied_.get(index);
  }

  public static final int COLLATERAL_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<com.cosmos.base.v1beta1.Coin> collateral_;
  /**
   * <pre>
   * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<com.cosmos.base.v1beta1.Coin> getCollateralList() {
    return collateral_;
  }
  /**
   * <pre>
   * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getCollateralOrBuilderList() {
    return collateral_;
  }
  /**
   * <pre>
   * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public int getCollateralCount() {
    return collateral_.size();
  }
  /**
   * <pre>
   * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public com.cosmos.base.v1beta1.Coin getCollateral(int index) {
    return collateral_.get(index);
  }
  /**
   * <pre>
   * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public com.cosmos.base.v1beta1.CoinOrBuilder getCollateralOrBuilder(
      int index) {
    return collateral_.get(index);
  }

  public static final int BORROWED_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<com.cosmos.base.v1beta1.Coin> borrowed_;
  /**
   * <pre>
   * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<com.cosmos.base.v1beta1.Coin> getBorrowedList() {
    return borrowed_;
  }
  /**
   * <pre>
   * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getBorrowedOrBuilderList() {
    return borrowed_;
  }
  /**
   * <pre>
   * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public int getBorrowedCount() {
    return borrowed_.size();
  }
  /**
   * <pre>
   * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public com.cosmos.base.v1beta1.Coin getBorrowed(int index) {
    return borrowed_.get(index);
  }
  /**
   * <pre>
   * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public com.cosmos.base.v1beta1.CoinOrBuilder getBorrowedOrBuilder(
      int index) {
    return borrowed_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < supplied_.size(); i++) {
      output.writeMessage(1, supplied_.get(i));
    }
    for (int i = 0; i < collateral_.size(); i++) {
      output.writeMessage(2, collateral_.get(i));
    }
    for (int i = 0; i < borrowed_.size(); i++) {
      output.writeMessage(3, borrowed_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < supplied_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, supplied_.get(i));
    }
    for (int i = 0; i < collateral_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, collateral_.get(i));
    }
    for (int i = 0; i < borrowed_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, borrowed_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.umee.leverage.v1.QueryAccountBalancesResponse)) {
      return super.equals(obj);
    }
    com.umee.leverage.v1.QueryAccountBalancesResponse other = (com.umee.leverage.v1.QueryAccountBalancesResponse) obj;

    if (!getSuppliedList()
        .equals(other.getSuppliedList())) return false;
    if (!getCollateralList()
        .equals(other.getCollateralList())) return false;
    if (!getBorrowedList()
        .equals(other.getBorrowedList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getSuppliedCount() > 0) {
      hash = (37 * hash) + SUPPLIED_FIELD_NUMBER;
      hash = (53 * hash) + getSuppliedList().hashCode();
    }
    if (getCollateralCount() > 0) {
      hash = (37 * hash) + COLLATERAL_FIELD_NUMBER;
      hash = (53 * hash) + getCollateralList().hashCode();
    }
    if (getBorrowedCount() > 0) {
      hash = (37 * hash) + BORROWED_FIELD_NUMBER;
      hash = (53 * hash) + getBorrowedList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.umee.leverage.v1.QueryAccountBalancesResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.umee.leverage.v1.QueryAccountBalancesResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.umee.leverage.v1.QueryAccountBalancesResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.umee.leverage.v1.QueryAccountBalancesResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.umee.leverage.v1.QueryAccountBalancesResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.umee.leverage.v1.QueryAccountBalancesResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.umee.leverage.v1.QueryAccountBalancesResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.umee.leverage.v1.QueryAccountBalancesResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.umee.leverage.v1.QueryAccountBalancesResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.umee.leverage.v1.QueryAccountBalancesResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.umee.leverage.v1.QueryAccountBalancesResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.umee.leverage.v1.QueryAccountBalancesResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.umee.leverage.v1.QueryAccountBalancesResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * QueryAccountBalancesResponse defines the response structure for the AccountBalances gRPC service handler.
   * </pre>
   *
   * Protobuf type {@code umee.leverage.v1.QueryAccountBalancesResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:umee.leverage.v1.QueryAccountBalancesResponse)
      com.umee.leverage.v1.QueryAccountBalancesResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.umee.leverage.v1.QueryProto.internal_static_umee_leverage_v1_QueryAccountBalancesResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.umee.leverage.v1.QueryProto.internal_static_umee_leverage_v1_QueryAccountBalancesResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.umee.leverage.v1.QueryAccountBalancesResponse.class, com.umee.leverage.v1.QueryAccountBalancesResponse.Builder.class);
    }

    // Construct using com.umee.leverage.v1.QueryAccountBalancesResponse.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (suppliedBuilder_ == null) {
        supplied_ = java.util.Collections.emptyList();
      } else {
        supplied_ = null;
        suppliedBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      if (collateralBuilder_ == null) {
        collateral_ = java.util.Collections.emptyList();
      } else {
        collateral_ = null;
        collateralBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      if (borrowedBuilder_ == null) {
        borrowed_ = java.util.Collections.emptyList();
      } else {
        borrowed_ = null;
        borrowedBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.umee.leverage.v1.QueryProto.internal_static_umee_leverage_v1_QueryAccountBalancesResponse_descriptor;
    }

    @java.lang.Override
    public com.umee.leverage.v1.QueryAccountBalancesResponse getDefaultInstanceForType() {
      return com.umee.leverage.v1.QueryAccountBalancesResponse.getDefaultInstance();
    }

    @java.lang.Override
    public com.umee.leverage.v1.QueryAccountBalancesResponse build() {
      com.umee.leverage.v1.QueryAccountBalancesResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.umee.leverage.v1.QueryAccountBalancesResponse buildPartial() {
      com.umee.leverage.v1.QueryAccountBalancesResponse result = new com.umee.leverage.v1.QueryAccountBalancesResponse(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.umee.leverage.v1.QueryAccountBalancesResponse result) {
      if (suppliedBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          supplied_ = java.util.Collections.unmodifiableList(supplied_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.supplied_ = supplied_;
      } else {
        result.supplied_ = suppliedBuilder_.build();
      }
      if (collateralBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          collateral_ = java.util.Collections.unmodifiableList(collateral_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.collateral_ = collateral_;
      } else {
        result.collateral_ = collateralBuilder_.build();
      }
      if (borrowedBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          borrowed_ = java.util.Collections.unmodifiableList(borrowed_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.borrowed_ = borrowed_;
      } else {
        result.borrowed_ = borrowedBuilder_.build();
      }
    }

    private void buildPartial0(com.umee.leverage.v1.QueryAccountBalancesResponse result) {
      int from_bitField0_ = bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.umee.leverage.v1.QueryAccountBalancesResponse) {
        return mergeFrom((com.umee.leverage.v1.QueryAccountBalancesResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.umee.leverage.v1.QueryAccountBalancesResponse other) {
      if (other == com.umee.leverage.v1.QueryAccountBalancesResponse.getDefaultInstance()) return this;
      if (suppliedBuilder_ == null) {
        if (!other.supplied_.isEmpty()) {
          if (supplied_.isEmpty()) {
            supplied_ = other.supplied_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSuppliedIsMutable();
            supplied_.addAll(other.supplied_);
          }
          onChanged();
        }
      } else {
        if (!other.supplied_.isEmpty()) {
          if (suppliedBuilder_.isEmpty()) {
            suppliedBuilder_.dispose();
            suppliedBuilder_ = null;
            supplied_ = other.supplied_;
            bitField0_ = (bitField0_ & ~0x00000001);
            suppliedBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSuppliedFieldBuilder() : null;
          } else {
            suppliedBuilder_.addAllMessages(other.supplied_);
          }
        }
      }
      if (collateralBuilder_ == null) {
        if (!other.collateral_.isEmpty()) {
          if (collateral_.isEmpty()) {
            collateral_ = other.collateral_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureCollateralIsMutable();
            collateral_.addAll(other.collateral_);
          }
          onChanged();
        }
      } else {
        if (!other.collateral_.isEmpty()) {
          if (collateralBuilder_.isEmpty()) {
            collateralBuilder_.dispose();
            collateralBuilder_ = null;
            collateral_ = other.collateral_;
            bitField0_ = (bitField0_ & ~0x00000002);
            collateralBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getCollateralFieldBuilder() : null;
          } else {
            collateralBuilder_.addAllMessages(other.collateral_);
          }
        }
      }
      if (borrowedBuilder_ == null) {
        if (!other.borrowed_.isEmpty()) {
          if (borrowed_.isEmpty()) {
            borrowed_ = other.borrowed_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureBorrowedIsMutable();
            borrowed_.addAll(other.borrowed_);
          }
          onChanged();
        }
      } else {
        if (!other.borrowed_.isEmpty()) {
          if (borrowedBuilder_.isEmpty()) {
            borrowedBuilder_.dispose();
            borrowedBuilder_ = null;
            borrowed_ = other.borrowed_;
            bitField0_ = (bitField0_ & ~0x00000004);
            borrowedBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getBorrowedFieldBuilder() : null;
          } else {
            borrowedBuilder_.addAllMessages(other.borrowed_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.cosmos.base.v1beta1.Coin m =
                  input.readMessage(
                      com.cosmos.base.v1beta1.Coin.parser(),
                      extensionRegistry);
              if (suppliedBuilder_ == null) {
                ensureSuppliedIsMutable();
                supplied_.add(m);
              } else {
                suppliedBuilder_.addMessage(m);
              }
              break;
            } // case 10
            case 18: {
              com.cosmos.base.v1beta1.Coin m =
                  input.readMessage(
                      com.cosmos.base.v1beta1.Coin.parser(),
                      extensionRegistry);
              if (collateralBuilder_ == null) {
                ensureCollateralIsMutable();
                collateral_.add(m);
              } else {
                collateralBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 26: {
              com.cosmos.base.v1beta1.Coin m =
                  input.readMessage(
                      com.cosmos.base.v1beta1.Coin.parser(),
                      extensionRegistry);
              if (borrowedBuilder_ == null) {
                ensureBorrowedIsMutable();
                borrowed_.add(m);
              } else {
                borrowedBuilder_.addMessage(m);
              }
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<com.cosmos.base.v1beta1.Coin> supplied_ =
      java.util.Collections.emptyList();
    private void ensureSuppliedIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        supplied_ = new java.util.ArrayList<com.cosmos.base.v1beta1.Coin>(supplied_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> suppliedBuilder_;

    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin> getSuppliedList() {
      if (suppliedBuilder_ == null) {
        return java.util.Collections.unmodifiableList(supplied_);
      } else {
        return suppliedBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public int getSuppliedCount() {
      if (suppliedBuilder_ == null) {
        return supplied_.size();
      } else {
        return suppliedBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin getSupplied(int index) {
      if (suppliedBuilder_ == null) {
        return supplied_.get(index);
      } else {
        return suppliedBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setSupplied(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (suppliedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSuppliedIsMutable();
        supplied_.set(index, value);
        onChanged();
      } else {
        suppliedBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setSupplied(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (suppliedBuilder_ == null) {
        ensureSuppliedIsMutable();
        supplied_.set(index, builderForValue.build());
        onChanged();
      } else {
        suppliedBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addSupplied(com.cosmos.base.v1beta1.Coin value) {
      if (suppliedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSuppliedIsMutable();
        supplied_.add(value);
        onChanged();
      } else {
        suppliedBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addSupplied(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (suppliedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSuppliedIsMutable();
        supplied_.add(index, value);
        onChanged();
      } else {
        suppliedBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addSupplied(
        com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (suppliedBuilder_ == null) {
        ensureSuppliedIsMutable();
        supplied_.add(builderForValue.build());
        onChanged();
      } else {
        suppliedBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addSupplied(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (suppliedBuilder_ == null) {
        ensureSuppliedIsMutable();
        supplied_.add(index, builderForValue.build());
        onChanged();
      } else {
        suppliedBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addAllSupplied(
        java.lang.Iterable<? extends com.cosmos.base.v1beta1.Coin> values) {
      if (suppliedBuilder_ == null) {
        ensureSuppliedIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, supplied_);
        onChanged();
      } else {
        suppliedBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder clearSupplied() {
      if (suppliedBuilder_ == null) {
        supplied_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        suppliedBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder removeSupplied(int index) {
      if (suppliedBuilder_ == null) {
        ensureSuppliedIsMutable();
        supplied_.remove(index);
        onChanged();
      } else {
        suppliedBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder getSuppliedBuilder(
        int index) {
      return getSuppliedFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.CoinOrBuilder getSuppliedOrBuilder(
        int index) {
      if (suppliedBuilder_ == null) {
        return supplied_.get(index);  } else {
        return suppliedBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
         getSuppliedOrBuilderList() {
      if (suppliedBuilder_ != null) {
        return suppliedBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(supplied_);
      }
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addSuppliedBuilder() {
      return getSuppliedFieldBuilder().addBuilder(
          com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addSuppliedBuilder(
        int index) {
      return getSuppliedFieldBuilder().addBuilder(
          index, com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * Supplied contains all tokens the account has supplied, including interest earned. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin supplied = 1 [json_name = "supplied", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin.Builder> 
         getSuppliedBuilderList() {
      return getSuppliedFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> 
        getSuppliedFieldBuilder() {
      if (suppliedBuilder_ == null) {
        suppliedBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder>(
                supplied_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        supplied_ = null;
      }
      return suppliedBuilder_;
    }

    private java.util.List<com.cosmos.base.v1beta1.Coin> collateral_ =
      java.util.Collections.emptyList();
    private void ensureCollateralIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        collateral_ = new java.util.ArrayList<com.cosmos.base.v1beta1.Coin>(collateral_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> collateralBuilder_;

    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin> getCollateralList() {
      if (collateralBuilder_ == null) {
        return java.util.Collections.unmodifiableList(collateral_);
      } else {
        return collateralBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public int getCollateralCount() {
      if (collateralBuilder_ == null) {
        return collateral_.size();
      } else {
        return collateralBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin getCollateral(int index) {
      if (collateralBuilder_ == null) {
        return collateral_.get(index);
      } else {
        return collateralBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setCollateral(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (collateralBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCollateralIsMutable();
        collateral_.set(index, value);
        onChanged();
      } else {
        collateralBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setCollateral(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (collateralBuilder_ == null) {
        ensureCollateralIsMutable();
        collateral_.set(index, builderForValue.build());
        onChanged();
      } else {
        collateralBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addCollateral(com.cosmos.base.v1beta1.Coin value) {
      if (collateralBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCollateralIsMutable();
        collateral_.add(value);
        onChanged();
      } else {
        collateralBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addCollateral(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (collateralBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCollateralIsMutable();
        collateral_.add(index, value);
        onChanged();
      } else {
        collateralBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addCollateral(
        com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (collateralBuilder_ == null) {
        ensureCollateralIsMutable();
        collateral_.add(builderForValue.build());
        onChanged();
      } else {
        collateralBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addCollateral(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (collateralBuilder_ == null) {
        ensureCollateralIsMutable();
        collateral_.add(index, builderForValue.build());
        onChanged();
      } else {
        collateralBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addAllCollateral(
        java.lang.Iterable<? extends com.cosmos.base.v1beta1.Coin> values) {
      if (collateralBuilder_ == null) {
        ensureCollateralIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, collateral_);
        onChanged();
      } else {
        collateralBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder clearCollateral() {
      if (collateralBuilder_ == null) {
        collateral_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        collateralBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder removeCollateral(int index) {
      if (collateralBuilder_ == null) {
        ensureCollateralIsMutable();
        collateral_.remove(index);
        onChanged();
      } else {
        collateralBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder getCollateralBuilder(
        int index) {
      return getCollateralFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.CoinOrBuilder getCollateralOrBuilder(
        int index) {
      if (collateralBuilder_ == null) {
        return collateral_.get(index);  } else {
        return collateralBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
         getCollateralOrBuilderList() {
      if (collateralBuilder_ != null) {
        return collateralBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(collateral_);
      }
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addCollateralBuilder() {
      return getCollateralFieldBuilder().addBuilder(
          com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addCollateralBuilder(
        int index) {
      return getCollateralFieldBuilder().addBuilder(
          index, com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * Collateral contains all uTokens the account has collateralized. It is denominated in uTokens, so both exponent and uToken exchange rate from each coin's market_summary must be applied to convert to base token symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin collateral = 2 [json_name = "collateral", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin.Builder> 
         getCollateralBuilderList() {
      return getCollateralFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> 
        getCollateralFieldBuilder() {
      if (collateralBuilder_ == null) {
        collateralBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder>(
                collateral_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        collateral_ = null;
      }
      return collateralBuilder_;
    }

    private java.util.List<com.cosmos.base.v1beta1.Coin> borrowed_ =
      java.util.Collections.emptyList();
    private void ensureBorrowedIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        borrowed_ = new java.util.ArrayList<com.cosmos.base.v1beta1.Coin>(borrowed_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> borrowedBuilder_;

    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin> getBorrowedList() {
      if (borrowedBuilder_ == null) {
        return java.util.Collections.unmodifiableList(borrowed_);
      } else {
        return borrowedBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public int getBorrowedCount() {
      if (borrowedBuilder_ == null) {
        return borrowed_.size();
      } else {
        return borrowedBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin getBorrowed(int index) {
      if (borrowedBuilder_ == null) {
        return borrowed_.get(index);
      } else {
        return borrowedBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setBorrowed(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (borrowedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBorrowedIsMutable();
        borrowed_.set(index, value);
        onChanged();
      } else {
        borrowedBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setBorrowed(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (borrowedBuilder_ == null) {
        ensureBorrowedIsMutable();
        borrowed_.set(index, builderForValue.build());
        onChanged();
      } else {
        borrowedBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addBorrowed(com.cosmos.base.v1beta1.Coin value) {
      if (borrowedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBorrowedIsMutable();
        borrowed_.add(value);
        onChanged();
      } else {
        borrowedBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addBorrowed(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (borrowedBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureBorrowedIsMutable();
        borrowed_.add(index, value);
        onChanged();
      } else {
        borrowedBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addBorrowed(
        com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (borrowedBuilder_ == null) {
        ensureBorrowedIsMutable();
        borrowed_.add(builderForValue.build());
        onChanged();
      } else {
        borrowedBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addBorrowed(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (borrowedBuilder_ == null) {
        ensureBorrowedIsMutable();
        borrowed_.add(index, builderForValue.build());
        onChanged();
      } else {
        borrowedBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addAllBorrowed(
        java.lang.Iterable<? extends com.cosmos.base.v1beta1.Coin> values) {
      if (borrowedBuilder_ == null) {
        ensureBorrowedIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, borrowed_);
        onChanged();
      } else {
        borrowedBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder clearBorrowed() {
      if (borrowedBuilder_ == null) {
        borrowed_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        borrowedBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder removeBorrowed(int index) {
      if (borrowedBuilder_ == null) {
        ensureBorrowedIsMutable();
        borrowed_.remove(index);
        onChanged();
      } else {
        borrowedBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder getBorrowedBuilder(
        int index) {
      return getBorrowedFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.CoinOrBuilder getBorrowedOrBuilder(
        int index) {
      if (borrowedBuilder_ == null) {
        return borrowed_.get(index);  } else {
        return borrowedBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
         getBorrowedOrBuilderList() {
      if (borrowedBuilder_ != null) {
        return borrowedBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(borrowed_);
      }
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addBorrowedBuilder() {
      return getBorrowedFieldBuilder().addBuilder(
          com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addBorrowedBuilder(
        int index) {
      return getBorrowedFieldBuilder().addBuilder(
          index, com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * Borrowed contains all tokens the account has borrowed, including interest owed. It is denominated in base tokens, so exponent from each coin's registered_tokens entry must be applied to convert to symbol denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin borrowed = 3 [json_name = "borrowed", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin.Builder> 
         getBorrowedBuilderList() {
      return getBorrowedFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> 
        getBorrowedFieldBuilder() {
      if (borrowedBuilder_ == null) {
        borrowedBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder>(
                borrowed_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        borrowed_ = null;
      }
      return borrowedBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:umee.leverage.v1.QueryAccountBalancesResponse)
  }

  // @@protoc_insertion_point(class_scope:umee.leverage.v1.QueryAccountBalancesResponse)
  private static final com.umee.leverage.v1.QueryAccountBalancesResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.umee.leverage.v1.QueryAccountBalancesResponse();
  }

  public static com.umee.leverage.v1.QueryAccountBalancesResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<QueryAccountBalancesResponse>
      PARSER = new com.google.protobuf.AbstractParser<QueryAccountBalancesResponse>() {
    @java.lang.Override
    public QueryAccountBalancesResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<QueryAccountBalancesResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<QueryAccountBalancesResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.umee.leverage.v1.QueryAccountBalancesResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

