// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: umee/leverage/v1/leverage.proto

package com.umee.leverage.v1;

public final class LeverageProto {
  private LeverageProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_umee_leverage_v1_Params_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_umee_leverage_v1_Params_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_umee_leverage_v1_Token_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_umee_leverage_v1_Token_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037umee/leverage/v1/leverage.proto\022\020umee." +
      "leverage.v1\032\024gogoproto/gogo.proto\"\300\005\n\006Pa" +
      "rams\022\235\001\n\036complete_liquidation_threshold\030" +
      "\002 \001(\tBW\310\336\037\000\332\336\037&github.com/cosmos/cosmos-" +
      "sdk/types.Dec\362\336\037%yaml:\"complete_liquidat" +
      "ion_threshold\"R\034completeLiquidationThres" +
      "hold\022\177\n\024minimum_close_factor\030\003 \001(\tBM\310\336\037\000" +
      "\332\336\037&github.com/cosmos/cosmos-sdk/types.D" +
      "ec\362\336\037\033yaml:\"minimum_close_factor\"R\022minim" +
      "umCloseFactor\022\177\n\024oracle_reward_factor\030\004 " +
      "\001(\tBM\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sd" +
      "k/types.Dec\362\336\037\033yaml:\"oracle_reward_facto" +
      "r\"R\022oracleRewardFactor\022\205\001\n\026small_liquida" +
      "tion_size\030\005 \001(\tBO\310\336\037\000\332\336\037&github.com/cosm" +
      "os/cosmos-sdk/types.Dec\362\336\037\035yaml:\"small_l" +
      "iquidation_size\"R\024smallLiquidationSize\022\205" +
      "\001\n\026direct_liquidation_fee\030\006 \001(\tBO\310\336\037\000\332\336\037" +
      "&github.com/cosmos/cosmos-sdk/types.Dec\362" +
      "\336\037\035yaml:\"direct_liquidation_fee\"R\024direct" +
      "LiquidationFee:\004\230\240\037\000\"\354\016\n\005Token\0224\n\nbase_d" +
      "enom\030\001 \001(\tB\025\362\336\037\021yaml:\"base_denom\"R\tbaseD" +
      "enom\022n\n\016reserve_factor\030\002 \001(\tBG\310\336\037\000\332\336\037&gi" +
      "thub.com/cosmos/cosmos-sdk/types.Dec\362\336\037\025" +
      "yaml:\"reserve_factor\"R\rreserveFactor\022w\n\021" +
      "collateral_weight\030\003 \001(\tBJ\310\336\037\000\332\336\037&github." +
      "com/cosmos/cosmos-sdk/types.Dec\362\336\037\030yaml:" +
      "\"collateral_weight\"R\020collateralWeight\022\203\001" +
      "\n\025liquidation_threshold\030\004 \001(\tBN\310\336\037\000\332\336\037&g" +
      "ithub.com/cosmos/cosmos-sdk/types.Dec\362\336\037" +
      "\034yaml:\"liquidation_threshold\"R\024liquidati" +
      "onThreshold\022s\n\020base_borrow_rate\030\005 \001(\tBI\310" +
      "\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/type" +
      "s.Dec\362\336\037\027yaml:\"base_borrow_rate\"R\016baseBo" +
      "rrowRate\022s\n\020kink_borrow_rate\030\006 \001(\tBI\310\336\037\000" +
      "\332\336\037&github.com/cosmos/cosmos-sdk/types.D" +
      "ec\362\336\037\027yaml:\"kink_borrow_rate\"R\016kinkBorro" +
      "wRate\022p\n\017max_borrow_rate\030\007 \001(\tBH\310\336\037\000\332\336\037&" +
      "github.com/cosmos/cosmos-sdk/types.Dec\362\336" +
      "\037\026yaml:\"max_borrow_rate\"R\rmaxBorrowRate\022" +
      "t\n\020kink_utilization\030\010 \001(\tBI\310\336\037\000\332\336\037&githu" +
      "b.com/cosmos/cosmos-sdk/types.Dec\362\336\037\027yam" +
      "l:\"kink_utilization\"R\017kinkUtilization\022\203\001" +
      "\n\025liquidation_incentive\030\t \001(\tBN\310\336\037\000\332\336\037&g" +
      "ithub.com/cosmos/cosmos-sdk/types.Dec\362\336\037" +
      "\034yaml:\"liquidation_incentive\"R\024liquidati" +
      "onIncentive\022:\n\014symbol_denom\030\n \001(\tB\027\362\336\037\023y" +
      "aml:\"symbol_denom\"R\013symbolDenom\022/\n\010expon" +
      "ent\030\013 \001(\rB\023\362\336\037\017yaml:\"exponent\"R\010exponent" +
      "\022H\n\021enable_msg_supply\030\014 \001(\010B\034\362\336\037\030yaml:\"e" +
      "nable_msg_supply\"R\017enableMsgSupply\022H\n\021en" +
      "able_msg_borrow\030\r \001(\010B\034\362\336\037\030yaml:\"enable_" +
      "msg_borrow\"R\017enableMsgBorrow\022\034\n\tblacklis" +
      "t\030\016 \001(\010R\tblacklist\022\177\n\024max_collateral_sha" +
      "re\030\017 \001(\tBM\310\336\037\000\332\336\037&github.com/cosmos/cosm" +
      "os-sdk/types.Dec\362\336\037\033yaml:\"max_collateral" +
      "_share\"R\022maxCollateralShare\022\205\001\n\026max_supp" +
      "ly_utilization\030\020 \001(\tBO\310\336\037\000\332\336\037&github.com" +
      "/cosmos/cosmos-sdk/types.Dec\362\336\037\035yaml:\"ma" +
      "x_supply_utilization\"R\024maxSupplyUtilizat" +
      "ion\022\213\001\n\030min_collateral_liquidity\030\021 \001(\tBQ" +
      "\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/typ" +
      "es.Dec\362\336\037\037yaml:\"min_collateral_liquidity" +
      "\"R\026minCollateralLiquidity\022b\n\nmax_supply\030" +
      "\022 \001(\tBC\310\336\037\000\332\336\037&github.com/cosmos/cosmos-" +
      "sdk/types.Int\362\336\037\021yaml:\"max_supply\"R\tmaxS" +
      "upply\022F\n\020historic_medians\030\023 \001(\rB\033\362\336\037\027yam" +
      "l:\"historic_medians\"R\017historicMedians:\004\350" +
      "\240\037\001B\275\001\n\024com.umee.leverage.v1B\rLeveragePr" +
      "otoP\001Z0github.com/umee-network/umee/v5/x" +
      "/leverage/types\242\002\003ULX\252\002\020Umee.Leverage.V1" +
      "\312\002\020Umee\\Leverage\\V1\342\002\034Umee\\Leverage\\V1\\G" +
      "PBMetadata\352\002\022Umee::Leverage::V1\310\341\036\000b\006pro" +
      "to3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.gogoproto.GogoProto.getDescriptor(),
        });
    internal_static_umee_leverage_v1_Params_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_umee_leverage_v1_Params_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_umee_leverage_v1_Params_descriptor,
        new java.lang.String[] { "CompleteLiquidationThreshold", "MinimumCloseFactor", "OracleRewardFactor", "SmallLiquidationSize", "DirectLiquidationFee", });
    internal_static_umee_leverage_v1_Token_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_umee_leverage_v1_Token_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_umee_leverage_v1_Token_descriptor,
        new java.lang.String[] { "BaseDenom", "ReserveFactor", "CollateralWeight", "LiquidationThreshold", "BaseBorrowRate", "KinkBorrowRate", "MaxBorrowRate", "KinkUtilization", "LiquidationIncentive", "SymbolDenom", "Exponent", "EnableMsgSupply", "EnableMsgBorrow", "Blacklist", "MaxCollateralShare", "MaxSupplyUtilization", "MinCollateralLiquidity", "MaxSupply", "HistoricMedians", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.gogoproto.GogoProto.customtype);
    registry.add(com.gogoproto.GogoProto.equal);
    registry.add(com.gogoproto.GogoProto.goprotoGettersAll);
    registry.add(com.gogoproto.GogoProto.goprotoStringer);
    registry.add(com.gogoproto.GogoProto.moretags);
    registry.add(com.gogoproto.GogoProto.nullable);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.gogoproto.GogoProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
