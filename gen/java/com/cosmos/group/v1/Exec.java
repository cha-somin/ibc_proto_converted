// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/group/v1/tx.proto

package com.cosmos.group.v1;

/**
 * <pre>
 * Exec defines modes of execution of a proposal on creation or on new vote.
 * </pre>
 *
 * Protobuf enum {@code cosmos.group.v1.Exec}
 */
public enum Exec
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * An empty value means that there should be a separate
   * MsgExec request for the proposal to execute.
   * </pre>
   *
   * <code>EXEC_UNSPECIFIED = 0;</code>
   */
  EXEC_UNSPECIFIED(0),
  /**
   * <pre>
   * Try to execute the proposal immediately.
   * If the proposal is not allowed per the DecisionPolicy,
   * the proposal will still be open and could
   * be executed at a later point.
   * </pre>
   *
   * <code>EXEC_TRY = 1;</code>
   */
  EXEC_TRY(1),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * An empty value means that there should be a separate
   * MsgExec request for the proposal to execute.
   * </pre>
   *
   * <code>EXEC_UNSPECIFIED = 0;</code>
   */
  public static final int EXEC_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Try to execute the proposal immediately.
   * If the proposal is not allowed per the DecisionPolicy,
   * the proposal will still be open and could
   * be executed at a later point.
   * </pre>
   *
   * <code>EXEC_TRY = 1;</code>
   */
  public static final int EXEC_TRY_VALUE = 1;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Exec valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Exec forNumber(int value) {
    switch (value) {
      case 0: return EXEC_UNSPECIFIED;
      case 1: return EXEC_TRY;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Exec>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Exec> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Exec>() {
          public Exec findValueByNumber(int number) {
            return Exec.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.cosmos.group.v1.TxProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final Exec[] VALUES = values();

  public static Exec valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Exec(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:cosmos.group.v1.Exec)
}

