// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/ics23/v1/proofs.proto

package com.cosmos.ics23.v1;

public final class ProofsProto {
  private ProofsProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code cosmos.ics23.v1.HashOp}
   */
  public enum HashOp
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * NO_HASH is the default if no data passed. Note this is an illegal argument some places.
     * </pre>
     *
     * <code>NO_HASH = 0;</code>
     */
    NO_HASH(0),
    /**
     * <code>SHA256 = 1;</code>
     */
    SHA256(1),
    /**
     * <code>SHA512 = 2;</code>
     */
    SHA512(2),
    /**
     * <code>KECCAK = 3;</code>
     */
    KECCAK(3),
    /**
     * <code>RIPEMD160 = 4;</code>
     */
    RIPEMD160(4),
    /**
     * <pre>
     * ripemd160(sha256(x))
     * </pre>
     *
     * <code>BITCOIN = 5;</code>
     */
    BITCOIN(5),
    /**
     * <code>SHA512_256 = 6;</code>
     */
    SHA512_256(6),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * NO_HASH is the default if no data passed. Note this is an illegal argument some places.
     * </pre>
     *
     * <code>NO_HASH = 0;</code>
     */
    public static final int NO_HASH_VALUE = 0;
    /**
     * <code>SHA256 = 1;</code>
     */
    public static final int SHA256_VALUE = 1;
    /**
     * <code>SHA512 = 2;</code>
     */
    public static final int SHA512_VALUE = 2;
    /**
     * <code>KECCAK = 3;</code>
     */
    public static final int KECCAK_VALUE = 3;
    /**
     * <code>RIPEMD160 = 4;</code>
     */
    public static final int RIPEMD160_VALUE = 4;
    /**
     * <pre>
     * ripemd160(sha256(x))
     * </pre>
     *
     * <code>BITCOIN = 5;</code>
     */
    public static final int BITCOIN_VALUE = 5;
    /**
     * <code>SHA512_256 = 6;</code>
     */
    public static final int SHA512_256_VALUE = 6;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static HashOp valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static HashOp forNumber(int value) {
      switch (value) {
        case 0: return NO_HASH;
        case 1: return SHA256;
        case 2: return SHA512;
        case 3: return KECCAK;
        case 4: return RIPEMD160;
        case 5: return BITCOIN;
        case 6: return SHA512_256;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HashOp>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        HashOp> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HashOp>() {
            public HashOp findValueByNumber(int number) {
              return HashOp.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.getDescriptor().getEnumTypes().get(0);
    }

    private static final HashOp[] VALUES = values();

    public static HashOp valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private HashOp(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:cosmos.ics23.v1.HashOp)
  }

  /**
   * <pre>
   **
   *LengthOp defines how to process the key and value of the LeafOp
   *to include length information. After encoding the length with the given
   *algorithm, the length will be prepended to the key and value bytes.
   *(Each one with it's own encoded length)
   * </pre>
   *
   * Protobuf enum {@code cosmos.ics23.v1.LengthOp}
   */
  public enum LengthOp
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * NO_PREFIX don't include any length info
     * </pre>
     *
     * <code>NO_PREFIX = 0;</code>
     */
    NO_PREFIX(0),
    /**
     * <pre>
     * VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
     * </pre>
     *
     * <code>VAR_PROTO = 1;</code>
     */
    VAR_PROTO(1),
    /**
     * <pre>
     * VAR_RLP uses rlp int encoding of the length
     * </pre>
     *
     * <code>VAR_RLP = 2;</code>
     */
    VAR_RLP(2),
    /**
     * <pre>
     * FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
     * </pre>
     *
     * <code>FIXED32_BIG = 3;</code>
     */
    FIXED32_BIG(3),
    /**
     * <pre>
     * FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
     * </pre>
     *
     * <code>FIXED32_LITTLE = 4;</code>
     */
    FIXED32_LITTLE(4),
    /**
     * <pre>
     * FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
     * </pre>
     *
     * <code>FIXED64_BIG = 5;</code>
     */
    FIXED64_BIG(5),
    /**
     * <pre>
     * FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
     * </pre>
     *
     * <code>FIXED64_LITTLE = 6;</code>
     */
    FIXED64_LITTLE(6),
    /**
     * <pre>
     * REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
     * </pre>
     *
     * <code>REQUIRE_32_BYTES = 7;</code>
     */
    REQUIRE_32_BYTES(7),
    /**
     * <pre>
     * REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
     * </pre>
     *
     * <code>REQUIRE_64_BYTES = 8;</code>
     */
    REQUIRE_64_BYTES(8),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * NO_PREFIX don't include any length info
     * </pre>
     *
     * <code>NO_PREFIX = 0;</code>
     */
    public static final int NO_PREFIX_VALUE = 0;
    /**
     * <pre>
     * VAR_PROTO uses protobuf (and go-amino) varint encoding of the length
     * </pre>
     *
     * <code>VAR_PROTO = 1;</code>
     */
    public static final int VAR_PROTO_VALUE = 1;
    /**
     * <pre>
     * VAR_RLP uses rlp int encoding of the length
     * </pre>
     *
     * <code>VAR_RLP = 2;</code>
     */
    public static final int VAR_RLP_VALUE = 2;
    /**
     * <pre>
     * FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer
     * </pre>
     *
     * <code>FIXED32_BIG = 3;</code>
     */
    public static final int FIXED32_BIG_VALUE = 3;
    /**
     * <pre>
     * FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer
     * </pre>
     *
     * <code>FIXED32_LITTLE = 4;</code>
     */
    public static final int FIXED32_LITTLE_VALUE = 4;
    /**
     * <pre>
     * FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer
     * </pre>
     *
     * <code>FIXED64_BIG = 5;</code>
     */
    public static final int FIXED64_BIG_VALUE = 5;
    /**
     * <pre>
     * FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer
     * </pre>
     *
     * <code>FIXED64_LITTLE = 6;</code>
     */
    public static final int FIXED64_LITTLE_VALUE = 6;
    /**
     * <pre>
     * REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output)
     * </pre>
     *
     * <code>REQUIRE_32_BYTES = 7;</code>
     */
    public static final int REQUIRE_32_BYTES_VALUE = 7;
    /**
     * <pre>
     * REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output)
     * </pre>
     *
     * <code>REQUIRE_64_BYTES = 8;</code>
     */
    public static final int REQUIRE_64_BYTES_VALUE = 8;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static LengthOp valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static LengthOp forNumber(int value) {
      switch (value) {
        case 0: return NO_PREFIX;
        case 1: return VAR_PROTO;
        case 2: return VAR_RLP;
        case 3: return FIXED32_BIG;
        case 4: return FIXED32_LITTLE;
        case 5: return FIXED64_BIG;
        case 6: return FIXED64_LITTLE;
        case 7: return REQUIRE_32_BYTES;
        case 8: return REQUIRE_64_BYTES;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<LengthOp>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        LengthOp> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LengthOp>() {
            public LengthOp findValueByNumber(int number) {
              return LengthOp.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.getDescriptor().getEnumTypes().get(1);
    }

    private static final LengthOp[] VALUES = values();

    public static LengthOp valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private LengthOp(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:cosmos.ics23.v1.LengthOp)
  }

  public interface ExistenceProofOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.ics23.v1.ExistenceProof)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bytes key = 1 [json_name = "key"];</code>
     * @return The key.
     */
    com.google.protobuf.ByteString getKey();

    /**
     * <code>bytes value = 2 [json_name = "value"];</code>
     * @return The value.
     */
    com.google.protobuf.ByteString getValue();

    /**
     * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
     * @return Whether the leaf field is set.
     */
    boolean hasLeaf();
    /**
     * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
     * @return The leaf.
     */
    com.cosmos.ics23.v1.ProofsProto.LeafOp getLeaf();
    /**
     * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder getLeafOrBuilder();

    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
     */
    java.util.List<com.cosmos.ics23.v1.ProofsProto.InnerOp> 
        getPathList();
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.InnerOp getPath(int index);
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
     */
    int getPathCount();
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
     */
    java.util.List<? extends com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder> 
        getPathOrBuilderList();
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder getPathOrBuilder(
        int index);
  }
  /**
   * <pre>
   **
   *ExistenceProof takes a key and a value and a set of steps to perform on it.
   *The result of peforming all these steps will provide a "root hash", which can
   *be compared to the value in a header.
   *
   *Since it is computationally infeasible to produce a hash collission for any of the used
   *cryptographic hash functions, if someone can provide a series of operations to transform
   *a given key and value into a root hash that matches some trusted root, these key and values
   *must be in the referenced merkle tree.
   *
   *The only possible issue is maliablity in LeafOp, such as providing extra prefix data,
   *which should be controlled by a spec. Eg. with lengthOp as NONE,
   *prefix = FOO, key = BAR, value = CHOICE
   *and
   *prefix = F, key = OOBAR, value = CHOICE
   *would produce the same value.
   *
   *With LengthOp this is tricker but not impossible. Which is why the "leafPrefixEqual" field
   *in the ProofSpec is valuable to prevent this mutability. And why all trees should
   *length-prefix the data before hashing it.
   * </pre>
   *
   * Protobuf type {@code cosmos.ics23.v1.ExistenceProof}
   */
  public static final class ExistenceProof extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.ExistenceProof)
      ExistenceProofOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExistenceProof.newBuilder() to construct.
    private ExistenceProof(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExistenceProof() {
      key_ = com.google.protobuf.ByteString.EMPTY;
      value_ = com.google.protobuf.ByteString.EMPTY;
      path_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ExistenceProof();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_ExistenceProof_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_ExistenceProof_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.ics23.v1.ProofsProto.ExistenceProof.class, com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder.class);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes key = 1 [json_name = "key"];</code>
     * @return The key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getKey() {
      return key_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString value_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes value = 2 [json_name = "value"];</code>
     * @return The value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getValue() {
      return value_;
    }

    public static final int LEAF_FIELD_NUMBER = 3;
    private com.cosmos.ics23.v1.ProofsProto.LeafOp leaf_;
    /**
     * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
     * @return Whether the leaf field is set.
     */
    @java.lang.Override
    public boolean hasLeaf() {
      return leaf_ != null;
    }
    /**
     * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
     * @return The leaf.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.LeafOp getLeaf() {
      return leaf_ == null ? com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance() : leaf_;
    }
    /**
     * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder getLeafOrBuilder() {
      return leaf_ == null ? com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance() : leaf_;
    }

    public static final int PATH_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private java.util.List<com.cosmos.ics23.v1.ProofsProto.InnerOp> path_;
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
     */
    @java.lang.Override
    public java.util.List<com.cosmos.ics23.v1.ProofsProto.InnerOp> getPathList() {
      return path_;
    }
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder> 
        getPathOrBuilderList() {
      return path_;
    }
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
     */
    @java.lang.Override
    public int getPathCount() {
      return path_.size();
    }
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.InnerOp getPath(int index) {
      return path_.get(index);
    }
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder getPathOrBuilder(
        int index) {
      return path_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!key_.isEmpty()) {
        output.writeBytes(1, key_);
      }
      if (!value_.isEmpty()) {
        output.writeBytes(2, value_);
      }
      if (leaf_ != null) {
        output.writeMessage(3, getLeaf());
      }
      for (int i = 0; i < path_.size(); i++) {
        output.writeMessage(4, path_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!key_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, key_);
      }
      if (!value_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, value_);
      }
      if (leaf_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLeaf());
      }
      for (int i = 0; i < path_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, path_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cosmos.ics23.v1.ProofsProto.ExistenceProof)) {
        return super.equals(obj);
      }
      com.cosmos.ics23.v1.ProofsProto.ExistenceProof other = (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) obj;

      if (!getKey()
          .equals(other.getKey())) return false;
      if (!getValue()
          .equals(other.getValue())) return false;
      if (hasLeaf() != other.hasLeaf()) return false;
      if (hasLeaf()) {
        if (!getLeaf()
            .equals(other.getLeaf())) return false;
      }
      if (!getPathList()
          .equals(other.getPathList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      if (hasLeaf()) {
        hash = (37 * hash) + LEAF_FIELD_NUMBER;
        hash = (53 * hash) + getLeaf().hashCode();
      }
      if (getPathCount() > 0) {
        hash = (37 * hash) + PATH_FIELD_NUMBER;
        hash = (53 * hash) + getPathList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cosmos.ics23.v1.ProofsProto.ExistenceProof parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ExistenceProof parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ExistenceProof parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ExistenceProof parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ExistenceProof parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ExistenceProof parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ExistenceProof parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ExistenceProof parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.cosmos.ics23.v1.ProofsProto.ExistenceProof parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.cosmos.ics23.v1.ProofsProto.ExistenceProof parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ExistenceProof parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ExistenceProof parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cosmos.ics23.v1.ProofsProto.ExistenceProof prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     *ExistenceProof takes a key and a value and a set of steps to perform on it.
     *The result of peforming all these steps will provide a "root hash", which can
     *be compared to the value in a header.
     *
     *Since it is computationally infeasible to produce a hash collission for any of the used
     *cryptographic hash functions, if someone can provide a series of operations to transform
     *a given key and value into a root hash that matches some trusted root, these key and values
     *must be in the referenced merkle tree.
     *
     *The only possible issue is maliablity in LeafOp, such as providing extra prefix data,
     *which should be controlled by a spec. Eg. with lengthOp as NONE,
     *prefix = FOO, key = BAR, value = CHOICE
     *and
     *prefix = F, key = OOBAR, value = CHOICE
     *would produce the same value.
     *
     *With LengthOp this is tricker but not impossible. Which is why the "leafPrefixEqual" field
     *in the ProofSpec is valuable to prevent this mutability. And why all trees should
     *length-prefix the data before hashing it.
     * </pre>
     *
     * Protobuf type {@code cosmos.ics23.v1.ExistenceProof}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.ExistenceProof)
        com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_ExistenceProof_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_ExistenceProof_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cosmos.ics23.v1.ProofsProto.ExistenceProof.class, com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder.class);
      }

      // Construct using com.cosmos.ics23.v1.ProofsProto.ExistenceProof.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        key_ = com.google.protobuf.ByteString.EMPTY;
        value_ = com.google.protobuf.ByteString.EMPTY;
        leaf_ = null;
        if (leafBuilder_ != null) {
          leafBuilder_.dispose();
          leafBuilder_ = null;
        }
        if (pathBuilder_ == null) {
          path_ = java.util.Collections.emptyList();
        } else {
          path_ = null;
          pathBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_ExistenceProof_descriptor;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProof getDefaultInstanceForType() {
        return com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance();
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProof build() {
        com.cosmos.ics23.v1.ProofsProto.ExistenceProof result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProof buildPartial() {
        com.cosmos.ics23.v1.ProofsProto.ExistenceProof result = new com.cosmos.ics23.v1.ProofsProto.ExistenceProof(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.cosmos.ics23.v1.ProofsProto.ExistenceProof result) {
        if (pathBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            path_ = java.util.Collections.unmodifiableList(path_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.path_ = path_;
        } else {
          result.path_ = pathBuilder_.build();
        }
      }

      private void buildPartial0(com.cosmos.ics23.v1.ProofsProto.ExistenceProof result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.key_ = key_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.value_ = value_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.leaf_ = leafBuilder_ == null
              ? leaf_
              : leafBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cosmos.ics23.v1.ProofsProto.ExistenceProof) {
          return mergeFrom((com.cosmos.ics23.v1.ProofsProto.ExistenceProof)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cosmos.ics23.v1.ProofsProto.ExistenceProof other) {
        if (other == com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance()) return this;
        if (other.getKey() != com.google.protobuf.ByteString.EMPTY) {
          setKey(other.getKey());
        }
        if (other.getValue() != com.google.protobuf.ByteString.EMPTY) {
          setValue(other.getValue());
        }
        if (other.hasLeaf()) {
          mergeLeaf(other.getLeaf());
        }
        if (pathBuilder_ == null) {
          if (!other.path_.isEmpty()) {
            if (path_.isEmpty()) {
              path_ = other.path_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensurePathIsMutable();
              path_.addAll(other.path_);
            }
            onChanged();
          }
        } else {
          if (!other.path_.isEmpty()) {
            if (pathBuilder_.isEmpty()) {
              pathBuilder_.dispose();
              pathBuilder_ = null;
              path_ = other.path_;
              bitField0_ = (bitField0_ & ~0x00000008);
              pathBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getPathFieldBuilder() : null;
            } else {
              pathBuilder_.addAllMessages(other.path_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                key_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                value_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getLeafFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                com.cosmos.ics23.v1.ProofsProto.InnerOp m =
                    input.readMessage(
                        com.cosmos.ics23.v1.ProofsProto.InnerOp.parser(),
                        extensionRegistry);
                if (pathBuilder_ == null) {
                  ensurePathIsMutable();
                  path_.add(m);
                } else {
                  pathBuilder_.addMessage(m);
                }
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes key = 1 [json_name = "key"];</code>
       * @return The key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getKey() {
        return key_;
      }
      /**
       * <code>bytes key = 1 [json_name = "key"];</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        key_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>bytes key = 1 [json_name = "key"];</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        bitField0_ = (bitField0_ & ~0x00000001);
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString value_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes value = 2 [json_name = "value"];</code>
       * @return The value.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getValue() {
        return value_;
      }
      /**
       * <code>bytes value = 2 [json_name = "value"];</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        value_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>bytes value = 2 [json_name = "value"];</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }

      private com.cosmos.ics23.v1.ProofsProto.LeafOp leaf_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.LeafOp, com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder, com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder> leafBuilder_;
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       * @return Whether the leaf field is set.
       */
      public boolean hasLeaf() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       * @return The leaf.
       */
      public com.cosmos.ics23.v1.ProofsProto.LeafOp getLeaf() {
        if (leafBuilder_ == null) {
          return leaf_ == null ? com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance() : leaf_;
        } else {
          return leafBuilder_.getMessage();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       */
      public Builder setLeaf(com.cosmos.ics23.v1.ProofsProto.LeafOp value) {
        if (leafBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          leaf_ = value;
        } else {
          leafBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       */
      public Builder setLeaf(
          com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder builderForValue) {
        if (leafBuilder_ == null) {
          leaf_ = builderForValue.build();
        } else {
          leafBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       */
      public Builder mergeLeaf(com.cosmos.ics23.v1.ProofsProto.LeafOp value) {
        if (leafBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            leaf_ != null &&
            leaf_ != com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance()) {
            getLeafBuilder().mergeFrom(value);
          } else {
            leaf_ = value;
          }
        } else {
          leafBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       */
      public Builder clearLeaf() {
        bitField0_ = (bitField0_ & ~0x00000004);
        leaf_ = null;
        if (leafBuilder_ != null) {
          leafBuilder_.dispose();
          leafBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder getLeafBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getLeafFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder getLeafOrBuilder() {
        if (leafBuilder_ != null) {
          return leafBuilder_.getMessageOrBuilder();
        } else {
          return leaf_ == null ?
              com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance() : leaf_;
        }
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.LeafOp, com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder, com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder> 
          getLeafFieldBuilder() {
        if (leafBuilder_ == null) {
          leafBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.LeafOp, com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder, com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder>(
                  getLeaf(),
                  getParentForChildren(),
                  isClean());
          leaf_ = null;
        }
        return leafBuilder_;
      }

      private java.util.List<com.cosmos.ics23.v1.ProofsProto.InnerOp> path_ =
        java.util.Collections.emptyList();
      private void ensurePathIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          path_ = new java.util.ArrayList<com.cosmos.ics23.v1.ProofsProto.InnerOp>(path_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.InnerOp, com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder, com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder> pathBuilder_;

      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public java.util.List<com.cosmos.ics23.v1.ProofsProto.InnerOp> getPathList() {
        if (pathBuilder_ == null) {
          return java.util.Collections.unmodifiableList(path_);
        } else {
          return pathBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public int getPathCount() {
        if (pathBuilder_ == null) {
          return path_.size();
        } else {
          return pathBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.InnerOp getPath(int index) {
        if (pathBuilder_ == null) {
          return path_.get(index);
        } else {
          return pathBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public Builder setPath(
          int index, com.cosmos.ics23.v1.ProofsProto.InnerOp value) {
        if (pathBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePathIsMutable();
          path_.set(index, value);
          onChanged();
        } else {
          pathBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public Builder setPath(
          int index, com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder builderForValue) {
        if (pathBuilder_ == null) {
          ensurePathIsMutable();
          path_.set(index, builderForValue.build());
          onChanged();
        } else {
          pathBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public Builder addPath(com.cosmos.ics23.v1.ProofsProto.InnerOp value) {
        if (pathBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePathIsMutable();
          path_.add(value);
          onChanged();
        } else {
          pathBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public Builder addPath(
          int index, com.cosmos.ics23.v1.ProofsProto.InnerOp value) {
        if (pathBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePathIsMutable();
          path_.add(index, value);
          onChanged();
        } else {
          pathBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public Builder addPath(
          com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder builderForValue) {
        if (pathBuilder_ == null) {
          ensurePathIsMutable();
          path_.add(builderForValue.build());
          onChanged();
        } else {
          pathBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public Builder addPath(
          int index, com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder builderForValue) {
        if (pathBuilder_ == null) {
          ensurePathIsMutable();
          path_.add(index, builderForValue.build());
          onChanged();
        } else {
          pathBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public Builder addAllPath(
          java.lang.Iterable<? extends com.cosmos.ics23.v1.ProofsProto.InnerOp> values) {
        if (pathBuilder_ == null) {
          ensurePathIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, path_);
          onChanged();
        } else {
          pathBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public Builder clearPath() {
        if (pathBuilder_ == null) {
          path_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          pathBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public Builder removePath(int index) {
        if (pathBuilder_ == null) {
          ensurePathIsMutable();
          path_.remove(index);
          onChanged();
        } else {
          pathBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder getPathBuilder(
          int index) {
        return getPathFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder getPathOrBuilder(
          int index) {
        if (pathBuilder_ == null) {
          return path_.get(index);  } else {
          return pathBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public java.util.List<? extends com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder> 
           getPathOrBuilderList() {
        if (pathBuilder_ != null) {
          return pathBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(path_);
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder addPathBuilder() {
        return getPathFieldBuilder().addBuilder(
            com.cosmos.ics23.v1.ProofsProto.InnerOp.getDefaultInstance());
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder addPathBuilder(
          int index) {
        return getPathFieldBuilder().addBuilder(
            index, com.cosmos.ics23.v1.ProofsProto.InnerOp.getDefaultInstance());
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp path = 4 [json_name = "path"];</code>
       */
      public java.util.List<com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder> 
           getPathBuilderList() {
        return getPathFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.InnerOp, com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder, com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder> 
          getPathFieldBuilder() {
        if (pathBuilder_ == null) {
          pathBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.InnerOp, com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder, com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder>(
                  path_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          path_ = null;
        }
        return pathBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.ExistenceProof)
    }

    // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.ExistenceProof)
    private static final com.cosmos.ics23.v1.ProofsProto.ExistenceProof DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cosmos.ics23.v1.ProofsProto.ExistenceProof();
    }

    public static com.cosmos.ics23.v1.ProofsProto.ExistenceProof getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExistenceProof>
        PARSER = new com.google.protobuf.AbstractParser<ExistenceProof>() {
      @java.lang.Override
      public ExistenceProof parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ExistenceProof> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExistenceProof> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.ExistenceProof getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NonExistenceProofOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.ics23.v1.NonExistenceProof)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * TODO: remove this as unnecessary??? we prove a range
     * </pre>
     *
     * <code>bytes key = 1 [json_name = "key"];</code>
     * @return The key.
     */
    com.google.protobuf.ByteString getKey();

    /**
     * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
     * @return Whether the left field is set.
     */
    boolean hasLeft();
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
     * @return The left.
     */
    com.cosmos.ics23.v1.ProofsProto.ExistenceProof getLeft();
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder getLeftOrBuilder();

    /**
     * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
     * @return Whether the right field is set.
     */
    boolean hasRight();
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
     * @return The right.
     */
    com.cosmos.ics23.v1.ProofsProto.ExistenceProof getRight();
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder getRightOrBuilder();
  }
  /**
   * <pre>
   *
   *NonExistenceProof takes a proof of two neighbors, one left of the desired key,
   *one right of the desired key. If both proofs are valid AND they are neighbors,
   *then there is no valid proof for the given key.
   * </pre>
   *
   * Protobuf type {@code cosmos.ics23.v1.NonExistenceProof}
   */
  public static final class NonExistenceProof extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.NonExistenceProof)
      NonExistenceProofOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use NonExistenceProof.newBuilder() to construct.
    private NonExistenceProof(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private NonExistenceProof() {
      key_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new NonExistenceProof();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_NonExistenceProof_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_NonExistenceProof_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.class, com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.Builder.class);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * TODO: remove this as unnecessary??? we prove a range
     * </pre>
     *
     * <code>bytes key = 1 [json_name = "key"];</code>
     * @return The key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getKey() {
      return key_;
    }

    public static final int LEFT_FIELD_NUMBER = 2;
    private com.cosmos.ics23.v1.ProofsProto.ExistenceProof left_;
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
     * @return Whether the left field is set.
     */
    @java.lang.Override
    public boolean hasLeft() {
      return left_ != null;
    }
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
     * @return The left.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.ExistenceProof getLeft() {
      return left_ == null ? com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance() : left_;
    }
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder getLeftOrBuilder() {
      return left_ == null ? com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance() : left_;
    }

    public static final int RIGHT_FIELD_NUMBER = 3;
    private com.cosmos.ics23.v1.ProofsProto.ExistenceProof right_;
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
     * @return Whether the right field is set.
     */
    @java.lang.Override
    public boolean hasRight() {
      return right_ != null;
    }
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
     * @return The right.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.ExistenceProof getRight() {
      return right_ == null ? com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance() : right_;
    }
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder getRightOrBuilder() {
      return right_ == null ? com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance() : right_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!key_.isEmpty()) {
        output.writeBytes(1, key_);
      }
      if (left_ != null) {
        output.writeMessage(2, getLeft());
      }
      if (right_ != null) {
        output.writeMessage(3, getRight());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!key_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, key_);
      }
      if (left_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getLeft());
      }
      if (right_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getRight());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cosmos.ics23.v1.ProofsProto.NonExistenceProof)) {
        return super.equals(obj);
      }
      com.cosmos.ics23.v1.ProofsProto.NonExistenceProof other = (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) obj;

      if (!getKey()
          .equals(other.getKey())) return false;
      if (hasLeft() != other.hasLeft()) return false;
      if (hasLeft()) {
        if (!getLeft()
            .equals(other.getLeft())) return false;
      }
      if (hasRight() != other.hasRight()) return false;
      if (hasRight()) {
        if (!getRight()
            .equals(other.getRight())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
      if (hasLeft()) {
        hash = (37 * hash) + LEFT_FIELD_NUMBER;
        hash = (53 * hash) + getLeft().hashCode();
      }
      if (hasRight()) {
        hash = (37 * hash) + RIGHT_FIELD_NUMBER;
        hash = (53 * hash) + getRight().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cosmos.ics23.v1.ProofsProto.NonExistenceProof parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.NonExistenceProof parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.NonExistenceProof parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.NonExistenceProof parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.NonExistenceProof parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.NonExistenceProof parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.NonExistenceProof parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.NonExistenceProof parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.cosmos.ics23.v1.ProofsProto.NonExistenceProof parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.cosmos.ics23.v1.ProofsProto.NonExistenceProof parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.NonExistenceProof parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.NonExistenceProof parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cosmos.ics23.v1.ProofsProto.NonExistenceProof prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *
     *NonExistenceProof takes a proof of two neighbors, one left of the desired key,
     *one right of the desired key. If both proofs are valid AND they are neighbors,
     *then there is no valid proof for the given key.
     * </pre>
     *
     * Protobuf type {@code cosmos.ics23.v1.NonExistenceProof}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.NonExistenceProof)
        com.cosmos.ics23.v1.ProofsProto.NonExistenceProofOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_NonExistenceProof_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_NonExistenceProof_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.class, com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.Builder.class);
      }

      // Construct using com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        key_ = com.google.protobuf.ByteString.EMPTY;
        left_ = null;
        if (leftBuilder_ != null) {
          leftBuilder_.dispose();
          leftBuilder_ = null;
        }
        right_ = null;
        if (rightBuilder_ != null) {
          rightBuilder_.dispose();
          rightBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_NonExistenceProof_descriptor;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.NonExistenceProof getDefaultInstanceForType() {
        return com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance();
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.NonExistenceProof build() {
        com.cosmos.ics23.v1.ProofsProto.NonExistenceProof result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.NonExistenceProof buildPartial() {
        com.cosmos.ics23.v1.ProofsProto.NonExistenceProof result = new com.cosmos.ics23.v1.ProofsProto.NonExistenceProof(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.cosmos.ics23.v1.ProofsProto.NonExistenceProof result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.key_ = key_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.left_ = leftBuilder_ == null
              ? left_
              : leftBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.right_ = rightBuilder_ == null
              ? right_
              : rightBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) {
          return mergeFrom((com.cosmos.ics23.v1.ProofsProto.NonExistenceProof)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cosmos.ics23.v1.ProofsProto.NonExistenceProof other) {
        if (other == com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance()) return this;
        if (other.getKey() != com.google.protobuf.ByteString.EMPTY) {
          setKey(other.getKey());
        }
        if (other.hasLeft()) {
          mergeLeft(other.getLeft());
        }
        if (other.hasRight()) {
          mergeRight(other.getRight());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                key_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getLeftFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getRightFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * TODO: remove this as unnecessary??? we prove a range
       * </pre>
       *
       * <code>bytes key = 1 [json_name = "key"];</code>
       * @return The key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getKey() {
        return key_;
      }
      /**
       * <pre>
       * TODO: remove this as unnecessary??? we prove a range
       * </pre>
       *
       * <code>bytes key = 1 [json_name = "key"];</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        key_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO: remove this as unnecessary??? we prove a range
       * </pre>
       *
       * <code>bytes key = 1 [json_name = "key"];</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        bitField0_ = (bitField0_ & ~0x00000001);
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }

      private com.cosmos.ics23.v1.ProofsProto.ExistenceProof left_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.ExistenceProof, com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder> leftBuilder_;
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
       * @return Whether the left field is set.
       */
      public boolean hasLeft() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
       * @return The left.
       */
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProof getLeft() {
        if (leftBuilder_ == null) {
          return left_ == null ? com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance() : left_;
        } else {
          return leftBuilder_.getMessage();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
       */
      public Builder setLeft(com.cosmos.ics23.v1.ProofsProto.ExistenceProof value) {
        if (leftBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          left_ = value;
        } else {
          leftBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
       */
      public Builder setLeft(
          com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder builderForValue) {
        if (leftBuilder_ == null) {
          left_ = builderForValue.build();
        } else {
          leftBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
       */
      public Builder mergeLeft(com.cosmos.ics23.v1.ProofsProto.ExistenceProof value) {
        if (leftBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            left_ != null &&
            left_ != com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance()) {
            getLeftBuilder().mergeFrom(value);
          } else {
            left_ = value;
          }
        } else {
          leftBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
       */
      public Builder clearLeft() {
        bitField0_ = (bitField0_ & ~0x00000002);
        left_ = null;
        if (leftBuilder_ != null) {
          leftBuilder_.dispose();
          leftBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder getLeftBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getLeftFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder getLeftOrBuilder() {
        if (leftBuilder_ != null) {
          return leftBuilder_.getMessageOrBuilder();
        } else {
          return left_ == null ?
              com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance() : left_;
        }
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof left = 2 [json_name = "left"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.ExistenceProof, com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder> 
          getLeftFieldBuilder() {
        if (leftBuilder_ == null) {
          leftBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.ExistenceProof, com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder>(
                  getLeft(),
                  getParentForChildren(),
                  isClean());
          left_ = null;
        }
        return leftBuilder_;
      }

      private com.cosmos.ics23.v1.ProofsProto.ExistenceProof right_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.ExistenceProof, com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder> rightBuilder_;
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
       * @return Whether the right field is set.
       */
      public boolean hasRight() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
       * @return The right.
       */
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProof getRight() {
        if (rightBuilder_ == null) {
          return right_ == null ? com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance() : right_;
        } else {
          return rightBuilder_.getMessage();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
       */
      public Builder setRight(com.cosmos.ics23.v1.ProofsProto.ExistenceProof value) {
        if (rightBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          right_ = value;
        } else {
          rightBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
       */
      public Builder setRight(
          com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder builderForValue) {
        if (rightBuilder_ == null) {
          right_ = builderForValue.build();
        } else {
          rightBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
       */
      public Builder mergeRight(com.cosmos.ics23.v1.ProofsProto.ExistenceProof value) {
        if (rightBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            right_ != null &&
            right_ != com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance()) {
            getRightBuilder().mergeFrom(value);
          } else {
            right_ = value;
          }
        } else {
          rightBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
       */
      public Builder clearRight() {
        bitField0_ = (bitField0_ & ~0x00000004);
        right_ = null;
        if (rightBuilder_ != null) {
          rightBuilder_.dispose();
          rightBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder getRightBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getRightFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder getRightOrBuilder() {
        if (rightBuilder_ != null) {
          return rightBuilder_.getMessageOrBuilder();
        } else {
          return right_ == null ?
              com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance() : right_;
        }
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof right = 3 [json_name = "right"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.ExistenceProof, com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder> 
          getRightFieldBuilder() {
        if (rightBuilder_ == null) {
          rightBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.ExistenceProof, com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder>(
                  getRight(),
                  getParentForChildren(),
                  isClean());
          right_ = null;
        }
        return rightBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.NonExistenceProof)
    }

    // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.NonExistenceProof)
    private static final com.cosmos.ics23.v1.ProofsProto.NonExistenceProof DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cosmos.ics23.v1.ProofsProto.NonExistenceProof();
    }

    public static com.cosmos.ics23.v1.ProofsProto.NonExistenceProof getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NonExistenceProof>
        PARSER = new com.google.protobuf.AbstractParser<NonExistenceProof>() {
      @java.lang.Override
      public NonExistenceProof parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<NonExistenceProof> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NonExistenceProof> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.NonExistenceProof getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CommitmentProofOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.ics23.v1.CommitmentProof)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     * @return Whether the exist field is set.
     */
    boolean hasExist();
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     * @return The exist.
     */
    com.cosmos.ics23.v1.ProofsProto.ExistenceProof getExist();
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder getExistOrBuilder();

    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     * @return Whether the nonexist field is set.
     */
    boolean hasNonexist();
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     * @return The nonexist.
     */
    com.cosmos.ics23.v1.ProofsProto.NonExistenceProof getNonexist();
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.NonExistenceProofOrBuilder getNonexistOrBuilder();

    /**
     * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
     * @return Whether the batch field is set.
     */
    boolean hasBatch();
    /**
     * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
     * @return The batch.
     */
    com.cosmos.ics23.v1.ProofsProto.BatchProof getBatch();
    /**
     * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.BatchProofOrBuilder getBatchOrBuilder();

    /**
     * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
     * @return Whether the compressed field is set.
     */
    boolean hasCompressed();
    /**
     * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
     * @return The compressed.
     */
    com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof getCompressed();
    /**
     * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.CompressedBatchProofOrBuilder getCompressedOrBuilder();

    com.cosmos.ics23.v1.ProofsProto.CommitmentProof.ProofCase getProofCase();
  }
  /**
   * <pre>
   *
   *CommitmentProof is either an ExistenceProof or a NonExistenceProof, or a Batch of such messages
   * </pre>
   *
   * Protobuf type {@code cosmos.ics23.v1.CommitmentProof}
   */
  public static final class CommitmentProof extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.CommitmentProof)
      CommitmentProofOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CommitmentProof.newBuilder() to construct.
    private CommitmentProof(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CommitmentProof() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CommitmentProof();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CommitmentProof_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CommitmentProof_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.ics23.v1.ProofsProto.CommitmentProof.class, com.cosmos.ics23.v1.ProofsProto.CommitmentProof.Builder.class);
    }

    private int proofCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object proof_;
    public enum ProofCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      EXIST(1),
      NONEXIST(2),
      BATCH(3),
      COMPRESSED(4),
      PROOF_NOT_SET(0);
      private final int value;
      private ProofCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ProofCase valueOf(int value) {
        return forNumber(value);
      }

      public static ProofCase forNumber(int value) {
        switch (value) {
          case 1: return EXIST;
          case 2: return NONEXIST;
          case 3: return BATCH;
          case 4: return COMPRESSED;
          case 0: return PROOF_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ProofCase
    getProofCase() {
      return ProofCase.forNumber(
          proofCase_);
    }

    public static final int EXIST_FIELD_NUMBER = 1;
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     * @return Whether the exist field is set.
     */
    @java.lang.Override
    public boolean hasExist() {
      return proofCase_ == 1;
    }
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     * @return The exist.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.ExistenceProof getExist() {
      if (proofCase_ == 1) {
         return (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance();
    }
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder getExistOrBuilder() {
      if (proofCase_ == 1) {
         return (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance();
    }

    public static final int NONEXIST_FIELD_NUMBER = 2;
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     * @return Whether the nonexist field is set.
     */
    @java.lang.Override
    public boolean hasNonexist() {
      return proofCase_ == 2;
    }
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     * @return The nonexist.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.NonExistenceProof getNonexist() {
      if (proofCase_ == 2) {
         return (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance();
    }
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.NonExistenceProofOrBuilder getNonexistOrBuilder() {
      if (proofCase_ == 2) {
         return (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance();
    }

    public static final int BATCH_FIELD_NUMBER = 3;
    /**
     * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
     * @return Whether the batch field is set.
     */
    @java.lang.Override
    public boolean hasBatch() {
      return proofCase_ == 3;
    }
    /**
     * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
     * @return The batch.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.BatchProof getBatch() {
      if (proofCase_ == 3) {
         return (com.cosmos.ics23.v1.ProofsProto.BatchProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.BatchProof.getDefaultInstance();
    }
    /**
     * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.BatchProofOrBuilder getBatchOrBuilder() {
      if (proofCase_ == 3) {
         return (com.cosmos.ics23.v1.ProofsProto.BatchProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.BatchProof.getDefaultInstance();
    }

    public static final int COMPRESSED_FIELD_NUMBER = 4;
    /**
     * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
     * @return Whether the compressed field is set.
     */
    @java.lang.Override
    public boolean hasCompressed() {
      return proofCase_ == 4;
    }
    /**
     * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
     * @return The compressed.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof getCompressed() {
      if (proofCase_ == 4) {
         return (com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.getDefaultInstance();
    }
    /**
     * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedBatchProofOrBuilder getCompressedOrBuilder() {
      if (proofCase_ == 4) {
         return (com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (proofCase_ == 1) {
        output.writeMessage(1, (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_);
      }
      if (proofCase_ == 2) {
        output.writeMessage(2, (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_);
      }
      if (proofCase_ == 3) {
        output.writeMessage(3, (com.cosmos.ics23.v1.ProofsProto.BatchProof) proof_);
      }
      if (proofCase_ == 4) {
        output.writeMessage(4, (com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof) proof_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (proofCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_);
      }
      if (proofCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_);
      }
      if (proofCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.cosmos.ics23.v1.ProofsProto.BatchProof) proof_);
      }
      if (proofCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof) proof_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cosmos.ics23.v1.ProofsProto.CommitmentProof)) {
        return super.equals(obj);
      }
      com.cosmos.ics23.v1.ProofsProto.CommitmentProof other = (com.cosmos.ics23.v1.ProofsProto.CommitmentProof) obj;

      if (!getProofCase().equals(other.getProofCase())) return false;
      switch (proofCase_) {
        case 1:
          if (!getExist()
              .equals(other.getExist())) return false;
          break;
        case 2:
          if (!getNonexist()
              .equals(other.getNonexist())) return false;
          break;
        case 3:
          if (!getBatch()
              .equals(other.getBatch())) return false;
          break;
        case 4:
          if (!getCompressed()
              .equals(other.getCompressed())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (proofCase_) {
        case 1:
          hash = (37 * hash) + EXIST_FIELD_NUMBER;
          hash = (53 * hash) + getExist().hashCode();
          break;
        case 2:
          hash = (37 * hash) + NONEXIST_FIELD_NUMBER;
          hash = (53 * hash) + getNonexist().hashCode();
          break;
        case 3:
          hash = (37 * hash) + BATCH_FIELD_NUMBER;
          hash = (53 * hash) + getBatch().hashCode();
          break;
        case 4:
          hash = (37 * hash) + COMPRESSED_FIELD_NUMBER;
          hash = (53 * hash) + getCompressed().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cosmos.ics23.v1.ProofsProto.CommitmentProof parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CommitmentProof parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CommitmentProof parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CommitmentProof parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CommitmentProof parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CommitmentProof parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CommitmentProof parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CommitmentProof parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.cosmos.ics23.v1.ProofsProto.CommitmentProof parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.cosmos.ics23.v1.ProofsProto.CommitmentProof parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CommitmentProof parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CommitmentProof parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cosmos.ics23.v1.ProofsProto.CommitmentProof prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *
     *CommitmentProof is either an ExistenceProof or a NonExistenceProof, or a Batch of such messages
     * </pre>
     *
     * Protobuf type {@code cosmos.ics23.v1.CommitmentProof}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.CommitmentProof)
        com.cosmos.ics23.v1.ProofsProto.CommitmentProofOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CommitmentProof_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CommitmentProof_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cosmos.ics23.v1.ProofsProto.CommitmentProof.class, com.cosmos.ics23.v1.ProofsProto.CommitmentProof.Builder.class);
      }

      // Construct using com.cosmos.ics23.v1.ProofsProto.CommitmentProof.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (existBuilder_ != null) {
          existBuilder_.clear();
        }
        if (nonexistBuilder_ != null) {
          nonexistBuilder_.clear();
        }
        if (batchBuilder_ != null) {
          batchBuilder_.clear();
        }
        if (compressedBuilder_ != null) {
          compressedBuilder_.clear();
        }
        proofCase_ = 0;
        proof_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CommitmentProof_descriptor;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CommitmentProof getDefaultInstanceForType() {
        return com.cosmos.ics23.v1.ProofsProto.CommitmentProof.getDefaultInstance();
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CommitmentProof build() {
        com.cosmos.ics23.v1.ProofsProto.CommitmentProof result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CommitmentProof buildPartial() {
        com.cosmos.ics23.v1.ProofsProto.CommitmentProof result = new com.cosmos.ics23.v1.ProofsProto.CommitmentProof(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(com.cosmos.ics23.v1.ProofsProto.CommitmentProof result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(com.cosmos.ics23.v1.ProofsProto.CommitmentProof result) {
        result.proofCase_ = proofCase_;
        result.proof_ = this.proof_;
        if (proofCase_ == 1 &&
            existBuilder_ != null) {
          result.proof_ = existBuilder_.build();
        }
        if (proofCase_ == 2 &&
            nonexistBuilder_ != null) {
          result.proof_ = nonexistBuilder_.build();
        }
        if (proofCase_ == 3 &&
            batchBuilder_ != null) {
          result.proof_ = batchBuilder_.build();
        }
        if (proofCase_ == 4 &&
            compressedBuilder_ != null) {
          result.proof_ = compressedBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cosmos.ics23.v1.ProofsProto.CommitmentProof) {
          return mergeFrom((com.cosmos.ics23.v1.ProofsProto.CommitmentProof)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cosmos.ics23.v1.ProofsProto.CommitmentProof other) {
        if (other == com.cosmos.ics23.v1.ProofsProto.CommitmentProof.getDefaultInstance()) return this;
        switch (other.getProofCase()) {
          case EXIST: {
            mergeExist(other.getExist());
            break;
          }
          case NONEXIST: {
            mergeNonexist(other.getNonexist());
            break;
          }
          case BATCH: {
            mergeBatch(other.getBatch());
            break;
          }
          case COMPRESSED: {
            mergeCompressed(other.getCompressed());
            break;
          }
          case PROOF_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getExistFieldBuilder().getBuilder(),
                    extensionRegistry);
                proofCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getNonexistFieldBuilder().getBuilder(),
                    extensionRegistry);
                proofCase_ = 2;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getBatchFieldBuilder().getBuilder(),
                    extensionRegistry);
                proofCase_ = 3;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getCompressedFieldBuilder().getBuilder(),
                    extensionRegistry);
                proofCase_ = 4;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int proofCase_ = 0;
      private java.lang.Object proof_;
      public ProofCase
          getProofCase() {
        return ProofCase.forNumber(
            proofCase_);
      }

      public Builder clearProof() {
        proofCase_ = 0;
        proof_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.ExistenceProof, com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder> existBuilder_;
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       * @return Whether the exist field is set.
       */
      @java.lang.Override
      public boolean hasExist() {
        return proofCase_ == 1;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       * @return The exist.
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProof getExist() {
        if (existBuilder_ == null) {
          if (proofCase_ == 1) {
            return (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance();
        } else {
          if (proofCase_ == 1) {
            return existBuilder_.getMessage();
          }
          return com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public Builder setExist(com.cosmos.ics23.v1.ProofsProto.ExistenceProof value) {
        if (existBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          proof_ = value;
          onChanged();
        } else {
          existBuilder_.setMessage(value);
        }
        proofCase_ = 1;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public Builder setExist(
          com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder builderForValue) {
        if (existBuilder_ == null) {
          proof_ = builderForValue.build();
          onChanged();
        } else {
          existBuilder_.setMessage(builderForValue.build());
        }
        proofCase_ = 1;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public Builder mergeExist(com.cosmos.ics23.v1.ProofsProto.ExistenceProof value) {
        if (existBuilder_ == null) {
          if (proofCase_ == 1 &&
              proof_ != com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance()) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.ExistenceProof.newBuilder((com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_)
                .mergeFrom(value).buildPartial();
          } else {
            proof_ = value;
          }
          onChanged();
        } else {
          if (proofCase_ == 1) {
            existBuilder_.mergeFrom(value);
          } else {
            existBuilder_.setMessage(value);
          }
        }
        proofCase_ = 1;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public Builder clearExist() {
        if (existBuilder_ == null) {
          if (proofCase_ == 1) {
            proofCase_ = 0;
            proof_ = null;
            onChanged();
          }
        } else {
          if (proofCase_ == 1) {
            proofCase_ = 0;
            proof_ = null;
          }
          existBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder getExistBuilder() {
        return getExistFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder getExistOrBuilder() {
        if ((proofCase_ == 1) && (existBuilder_ != null)) {
          return existBuilder_.getMessageOrBuilder();
        } else {
          if (proofCase_ == 1) {
            return (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.ExistenceProof, com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder> 
          getExistFieldBuilder() {
        if (existBuilder_ == null) {
          if (!(proofCase_ == 1)) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance();
          }
          existBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.ExistenceProof, com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder>(
                  (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_,
                  getParentForChildren(),
                  isClean());
          proof_ = null;
        }
        proofCase_ = 1;
        onChanged();
        return existBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.NonExistenceProof, com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.NonExistenceProofOrBuilder> nonexistBuilder_;
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       * @return Whether the nonexist field is set.
       */
      @java.lang.Override
      public boolean hasNonexist() {
        return proofCase_ == 2;
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       * @return The nonexist.
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.NonExistenceProof getNonexist() {
        if (nonexistBuilder_ == null) {
          if (proofCase_ == 2) {
            return (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance();
        } else {
          if (proofCase_ == 2) {
            return nonexistBuilder_.getMessage();
          }
          return com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public Builder setNonexist(com.cosmos.ics23.v1.ProofsProto.NonExistenceProof value) {
        if (nonexistBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          proof_ = value;
          onChanged();
        } else {
          nonexistBuilder_.setMessage(value);
        }
        proofCase_ = 2;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public Builder setNonexist(
          com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.Builder builderForValue) {
        if (nonexistBuilder_ == null) {
          proof_ = builderForValue.build();
          onChanged();
        } else {
          nonexistBuilder_.setMessage(builderForValue.build());
        }
        proofCase_ = 2;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public Builder mergeNonexist(com.cosmos.ics23.v1.ProofsProto.NonExistenceProof value) {
        if (nonexistBuilder_ == null) {
          if (proofCase_ == 2 &&
              proof_ != com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance()) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.newBuilder((com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_)
                .mergeFrom(value).buildPartial();
          } else {
            proof_ = value;
          }
          onChanged();
        } else {
          if (proofCase_ == 2) {
            nonexistBuilder_.mergeFrom(value);
          } else {
            nonexistBuilder_.setMessage(value);
          }
        }
        proofCase_ = 2;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public Builder clearNonexist() {
        if (nonexistBuilder_ == null) {
          if (proofCase_ == 2) {
            proofCase_ = 0;
            proof_ = null;
            onChanged();
          }
        } else {
          if (proofCase_ == 2) {
            proofCase_ = 0;
            proof_ = null;
          }
          nonexistBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.Builder getNonexistBuilder() {
        return getNonexistFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.NonExistenceProofOrBuilder getNonexistOrBuilder() {
        if ((proofCase_ == 2) && (nonexistBuilder_ != null)) {
          return nonexistBuilder_.getMessageOrBuilder();
        } else {
          if (proofCase_ == 2) {
            return (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.NonExistenceProof, com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.NonExistenceProofOrBuilder> 
          getNonexistFieldBuilder() {
        if (nonexistBuilder_ == null) {
          if (!(proofCase_ == 2)) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance();
          }
          nonexistBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.NonExistenceProof, com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.NonExistenceProofOrBuilder>(
                  (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_,
                  getParentForChildren(),
                  isClean());
          proof_ = null;
        }
        proofCase_ = 2;
        onChanged();
        return nonexistBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.BatchProof, com.cosmos.ics23.v1.ProofsProto.BatchProof.Builder, com.cosmos.ics23.v1.ProofsProto.BatchProofOrBuilder> batchBuilder_;
      /**
       * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
       * @return Whether the batch field is set.
       */
      @java.lang.Override
      public boolean hasBatch() {
        return proofCase_ == 3;
      }
      /**
       * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
       * @return The batch.
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.BatchProof getBatch() {
        if (batchBuilder_ == null) {
          if (proofCase_ == 3) {
            return (com.cosmos.ics23.v1.ProofsProto.BatchProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.BatchProof.getDefaultInstance();
        } else {
          if (proofCase_ == 3) {
            return batchBuilder_.getMessage();
          }
          return com.cosmos.ics23.v1.ProofsProto.BatchProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
       */
      public Builder setBatch(com.cosmos.ics23.v1.ProofsProto.BatchProof value) {
        if (batchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          proof_ = value;
          onChanged();
        } else {
          batchBuilder_.setMessage(value);
        }
        proofCase_ = 3;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
       */
      public Builder setBatch(
          com.cosmos.ics23.v1.ProofsProto.BatchProof.Builder builderForValue) {
        if (batchBuilder_ == null) {
          proof_ = builderForValue.build();
          onChanged();
        } else {
          batchBuilder_.setMessage(builderForValue.build());
        }
        proofCase_ = 3;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
       */
      public Builder mergeBatch(com.cosmos.ics23.v1.ProofsProto.BatchProof value) {
        if (batchBuilder_ == null) {
          if (proofCase_ == 3 &&
              proof_ != com.cosmos.ics23.v1.ProofsProto.BatchProof.getDefaultInstance()) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.BatchProof.newBuilder((com.cosmos.ics23.v1.ProofsProto.BatchProof) proof_)
                .mergeFrom(value).buildPartial();
          } else {
            proof_ = value;
          }
          onChanged();
        } else {
          if (proofCase_ == 3) {
            batchBuilder_.mergeFrom(value);
          } else {
            batchBuilder_.setMessage(value);
          }
        }
        proofCase_ = 3;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
       */
      public Builder clearBatch() {
        if (batchBuilder_ == null) {
          if (proofCase_ == 3) {
            proofCase_ = 0;
            proof_ = null;
            onChanged();
          }
        } else {
          if (proofCase_ == 3) {
            proofCase_ = 0;
            proof_ = null;
          }
          batchBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.BatchProof.Builder getBatchBuilder() {
        return getBatchFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.BatchProofOrBuilder getBatchOrBuilder() {
        if ((proofCase_ == 3) && (batchBuilder_ != null)) {
          return batchBuilder_.getMessageOrBuilder();
        } else {
          if (proofCase_ == 3) {
            return (com.cosmos.ics23.v1.ProofsProto.BatchProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.BatchProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.BatchProof batch = 3 [json_name = "batch"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.BatchProof, com.cosmos.ics23.v1.ProofsProto.BatchProof.Builder, com.cosmos.ics23.v1.ProofsProto.BatchProofOrBuilder> 
          getBatchFieldBuilder() {
        if (batchBuilder_ == null) {
          if (!(proofCase_ == 3)) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.BatchProof.getDefaultInstance();
          }
          batchBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.BatchProof, com.cosmos.ics23.v1.ProofsProto.BatchProof.Builder, com.cosmos.ics23.v1.ProofsProto.BatchProofOrBuilder>(
                  (com.cosmos.ics23.v1.ProofsProto.BatchProof) proof_,
                  getParentForChildren(),
                  isClean());
          proof_ = null;
        }
        proofCase_ = 3;
        onChanged();
        return batchBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof, com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedBatchProofOrBuilder> compressedBuilder_;
      /**
       * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
       * @return Whether the compressed field is set.
       */
      @java.lang.Override
      public boolean hasCompressed() {
        return proofCase_ == 4;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
       * @return The compressed.
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof getCompressed() {
        if (compressedBuilder_ == null) {
          if (proofCase_ == 4) {
            return (com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.getDefaultInstance();
        } else {
          if (proofCase_ == 4) {
            return compressedBuilder_.getMessage();
          }
          return com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
       */
      public Builder setCompressed(com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof value) {
        if (compressedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          proof_ = value;
          onChanged();
        } else {
          compressedBuilder_.setMessage(value);
        }
        proofCase_ = 4;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
       */
      public Builder setCompressed(
          com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.Builder builderForValue) {
        if (compressedBuilder_ == null) {
          proof_ = builderForValue.build();
          onChanged();
        } else {
          compressedBuilder_.setMessage(builderForValue.build());
        }
        proofCase_ = 4;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
       */
      public Builder mergeCompressed(com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof value) {
        if (compressedBuilder_ == null) {
          if (proofCase_ == 4 &&
              proof_ != com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.getDefaultInstance()) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.newBuilder((com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof) proof_)
                .mergeFrom(value).buildPartial();
          } else {
            proof_ = value;
          }
          onChanged();
        } else {
          if (proofCase_ == 4) {
            compressedBuilder_.mergeFrom(value);
          } else {
            compressedBuilder_.setMessage(value);
          }
        }
        proofCase_ = 4;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
       */
      public Builder clearCompressed() {
        if (compressedBuilder_ == null) {
          if (proofCase_ == 4) {
            proofCase_ = 0;
            proof_ = null;
            onChanged();
          }
        } else {
          if (proofCase_ == 4) {
            proofCase_ = 0;
            proof_ = null;
          }
          compressedBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.Builder getCompressedBuilder() {
        return getCompressedFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedBatchProofOrBuilder getCompressedOrBuilder() {
        if ((proofCase_ == 4) && (compressedBuilder_ != null)) {
          return compressedBuilder_.getMessageOrBuilder();
        } else {
          if (proofCase_ == 4) {
            return (com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedBatchProof compressed = 4 [json_name = "compressed"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof, com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedBatchProofOrBuilder> 
          getCompressedFieldBuilder() {
        if (compressedBuilder_ == null) {
          if (!(proofCase_ == 4)) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.getDefaultInstance();
          }
          compressedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof, com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedBatchProofOrBuilder>(
                  (com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof) proof_,
                  getParentForChildren(),
                  isClean());
          proof_ = null;
        }
        proofCase_ = 4;
        onChanged();
        return compressedBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.CommitmentProof)
    }

    // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.CommitmentProof)
    private static final com.cosmos.ics23.v1.ProofsProto.CommitmentProof DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cosmos.ics23.v1.ProofsProto.CommitmentProof();
    }

    public static com.cosmos.ics23.v1.ProofsProto.CommitmentProof getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CommitmentProof>
        PARSER = new com.google.protobuf.AbstractParser<CommitmentProof>() {
      @java.lang.Override
      public CommitmentProof parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CommitmentProof> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CommitmentProof> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CommitmentProof getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LeafOpOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.ics23.v1.LeafOp)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
     * @return The enum numeric value on the wire for hash.
     */
    int getHashValue();
    /**
     * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
     * @return The hash.
     */
    com.cosmos.ics23.v1.ProofsProto.HashOp getHash();

    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
     * @return The enum numeric value on the wire for prehashKey.
     */
    int getPrehashKeyValue();
    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
     * @return The prehashKey.
     */
    com.cosmos.ics23.v1.ProofsProto.HashOp getPrehashKey();

    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
     * @return The enum numeric value on the wire for prehashValue.
     */
    int getPrehashValueValue();
    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
     * @return The prehashValue.
     */
    com.cosmos.ics23.v1.ProofsProto.HashOp getPrehashValue();

    /**
     * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
     * @return The enum numeric value on the wire for length.
     */
    int getLengthValue();
    /**
     * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
     * @return The length.
     */
    com.cosmos.ics23.v1.ProofsProto.LengthOp getLength();

    /**
     * <pre>
     * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
     * a leaf node from an inner node.
     * </pre>
     *
     * <code>bytes prefix = 5 [json_name = "prefix"];</code>
     * @return The prefix.
     */
    com.google.protobuf.ByteString getPrefix();
  }
  /**
   * <pre>
   **
   *LeafOp represents the raw key-value data we wish to prove, and
   *must be flexible to represent the internal transformation from
   *the original key-value pairs into the basis hash, for many existing
   *merkle trees.
   *
   *key and value are passed in. So that the signature of this operation is:
   *leafOp(key, value) -&gt; output
   *
   *To process this, first prehash the keys and values if needed (ANY means no hash in this case):
   *hkey = prehashKey(key)
   *hvalue = prehashValue(value)
   *
   *Then combine the bytes, and hash it
   *output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
   * </pre>
   *
   * Protobuf type {@code cosmos.ics23.v1.LeafOp}
   */
  public static final class LeafOp extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.LeafOp)
      LeafOpOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LeafOp.newBuilder() to construct.
    private LeafOp(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LeafOp() {
      hash_ = 0;
      prehashKey_ = 0;
      prehashValue_ = 0;
      length_ = 0;
      prefix_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LeafOp();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_LeafOp_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_LeafOp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.ics23.v1.ProofsProto.LeafOp.class, com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder.class);
    }

    public static final int HASH_FIELD_NUMBER = 1;
    private int hash_ = 0;
    /**
     * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
     * @return The enum numeric value on the wire for hash.
     */
    @java.lang.Override public int getHashValue() {
      return hash_;
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
     * @return The hash.
     */
    @java.lang.Override public com.cosmos.ics23.v1.ProofsProto.HashOp getHash() {
      com.cosmos.ics23.v1.ProofsProto.HashOp result = com.cosmos.ics23.v1.ProofsProto.HashOp.forNumber(hash_);
      return result == null ? com.cosmos.ics23.v1.ProofsProto.HashOp.UNRECOGNIZED : result;
    }

    public static final int PREHASH_KEY_FIELD_NUMBER = 2;
    private int prehashKey_ = 0;
    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
     * @return The enum numeric value on the wire for prehashKey.
     */
    @java.lang.Override public int getPrehashKeyValue() {
      return prehashKey_;
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
     * @return The prehashKey.
     */
    @java.lang.Override public com.cosmos.ics23.v1.ProofsProto.HashOp getPrehashKey() {
      com.cosmos.ics23.v1.ProofsProto.HashOp result = com.cosmos.ics23.v1.ProofsProto.HashOp.forNumber(prehashKey_);
      return result == null ? com.cosmos.ics23.v1.ProofsProto.HashOp.UNRECOGNIZED : result;
    }

    public static final int PREHASH_VALUE_FIELD_NUMBER = 3;
    private int prehashValue_ = 0;
    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
     * @return The enum numeric value on the wire for prehashValue.
     */
    @java.lang.Override public int getPrehashValueValue() {
      return prehashValue_;
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
     * @return The prehashValue.
     */
    @java.lang.Override public com.cosmos.ics23.v1.ProofsProto.HashOp getPrehashValue() {
      com.cosmos.ics23.v1.ProofsProto.HashOp result = com.cosmos.ics23.v1.ProofsProto.HashOp.forNumber(prehashValue_);
      return result == null ? com.cosmos.ics23.v1.ProofsProto.HashOp.UNRECOGNIZED : result;
    }

    public static final int LENGTH_FIELD_NUMBER = 4;
    private int length_ = 0;
    /**
     * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
     * @return The enum numeric value on the wire for length.
     */
    @java.lang.Override public int getLengthValue() {
      return length_;
    }
    /**
     * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
     * @return The length.
     */
    @java.lang.Override public com.cosmos.ics23.v1.ProofsProto.LengthOp getLength() {
      com.cosmos.ics23.v1.ProofsProto.LengthOp result = com.cosmos.ics23.v1.ProofsProto.LengthOp.forNumber(length_);
      return result == null ? com.cosmos.ics23.v1.ProofsProto.LengthOp.UNRECOGNIZED : result;
    }

    public static final int PREFIX_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString prefix_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
     * a leaf node from an inner node.
     * </pre>
     *
     * <code>bytes prefix = 5 [json_name = "prefix"];</code>
     * @return The prefix.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPrefix() {
      return prefix_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hash_ != com.cosmos.ics23.v1.ProofsProto.HashOp.NO_HASH.getNumber()) {
        output.writeEnum(1, hash_);
      }
      if (prehashKey_ != com.cosmos.ics23.v1.ProofsProto.HashOp.NO_HASH.getNumber()) {
        output.writeEnum(2, prehashKey_);
      }
      if (prehashValue_ != com.cosmos.ics23.v1.ProofsProto.HashOp.NO_HASH.getNumber()) {
        output.writeEnum(3, prehashValue_);
      }
      if (length_ != com.cosmos.ics23.v1.ProofsProto.LengthOp.NO_PREFIX.getNumber()) {
        output.writeEnum(4, length_);
      }
      if (!prefix_.isEmpty()) {
        output.writeBytes(5, prefix_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (hash_ != com.cosmos.ics23.v1.ProofsProto.HashOp.NO_HASH.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, hash_);
      }
      if (prehashKey_ != com.cosmos.ics23.v1.ProofsProto.HashOp.NO_HASH.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, prehashKey_);
      }
      if (prehashValue_ != com.cosmos.ics23.v1.ProofsProto.HashOp.NO_HASH.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, prehashValue_);
      }
      if (length_ != com.cosmos.ics23.v1.ProofsProto.LengthOp.NO_PREFIX.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, length_);
      }
      if (!prefix_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, prefix_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cosmos.ics23.v1.ProofsProto.LeafOp)) {
        return super.equals(obj);
      }
      com.cosmos.ics23.v1.ProofsProto.LeafOp other = (com.cosmos.ics23.v1.ProofsProto.LeafOp) obj;

      if (hash_ != other.hash_) return false;
      if (prehashKey_ != other.prehashKey_) return false;
      if (prehashValue_ != other.prehashValue_) return false;
      if (length_ != other.length_) return false;
      if (!getPrefix()
          .equals(other.getPrefix())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + HASH_FIELD_NUMBER;
      hash = (53 * hash) + hash_;
      hash = (37 * hash) + PREHASH_KEY_FIELD_NUMBER;
      hash = (53 * hash) + prehashKey_;
      hash = (37 * hash) + PREHASH_VALUE_FIELD_NUMBER;
      hash = (53 * hash) + prehashValue_;
      hash = (37 * hash) + LENGTH_FIELD_NUMBER;
      hash = (53 * hash) + length_;
      hash = (37 * hash) + PREFIX_FIELD_NUMBER;
      hash = (53 * hash) + getPrefix().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cosmos.ics23.v1.ProofsProto.LeafOp parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.LeafOp parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.LeafOp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.LeafOp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.LeafOp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.LeafOp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.LeafOp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.LeafOp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.cosmos.ics23.v1.ProofsProto.LeafOp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.cosmos.ics23.v1.ProofsProto.LeafOp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.LeafOp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.LeafOp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cosmos.ics23.v1.ProofsProto.LeafOp prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     *LeafOp represents the raw key-value data we wish to prove, and
     *must be flexible to represent the internal transformation from
     *the original key-value pairs into the basis hash, for many existing
     *merkle trees.
     *
     *key and value are passed in. So that the signature of this operation is:
     *leafOp(key, value) -&gt; output
     *
     *To process this, first prehash the keys and values if needed (ANY means no hash in this case):
     *hkey = prehashKey(key)
     *hvalue = prehashValue(value)
     *
     *Then combine the bytes, and hash it
     *output = hash(prefix || length(hkey) || hkey || length(hvalue) || hvalue)
     * </pre>
     *
     * Protobuf type {@code cosmos.ics23.v1.LeafOp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.LeafOp)
        com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_LeafOp_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_LeafOp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cosmos.ics23.v1.ProofsProto.LeafOp.class, com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder.class);
      }

      // Construct using com.cosmos.ics23.v1.ProofsProto.LeafOp.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        hash_ = 0;
        prehashKey_ = 0;
        prehashValue_ = 0;
        length_ = 0;
        prefix_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_LeafOp_descriptor;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.LeafOp getDefaultInstanceForType() {
        return com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance();
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.LeafOp build() {
        com.cosmos.ics23.v1.ProofsProto.LeafOp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.LeafOp buildPartial() {
        com.cosmos.ics23.v1.ProofsProto.LeafOp result = new com.cosmos.ics23.v1.ProofsProto.LeafOp(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.cosmos.ics23.v1.ProofsProto.LeafOp result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.hash_ = hash_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.prehashKey_ = prehashKey_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.prehashValue_ = prehashValue_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.length_ = length_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.prefix_ = prefix_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cosmos.ics23.v1.ProofsProto.LeafOp) {
          return mergeFrom((com.cosmos.ics23.v1.ProofsProto.LeafOp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cosmos.ics23.v1.ProofsProto.LeafOp other) {
        if (other == com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance()) return this;
        if (other.hash_ != 0) {
          setHashValue(other.getHashValue());
        }
        if (other.prehashKey_ != 0) {
          setPrehashKeyValue(other.getPrehashKeyValue());
        }
        if (other.prehashValue_ != 0) {
          setPrehashValueValue(other.getPrehashValueValue());
        }
        if (other.length_ != 0) {
          setLengthValue(other.getLengthValue());
        }
        if (other.getPrefix() != com.google.protobuf.ByteString.EMPTY) {
          setPrefix(other.getPrefix());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                hash_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                prehashKey_ = input.readEnum();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                prehashValue_ = input.readEnum();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                length_ = input.readEnum();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 42: {
                prefix_ = input.readBytes();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int hash_ = 0;
      /**
       * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
       * @return The enum numeric value on the wire for hash.
       */
      @java.lang.Override public int getHashValue() {
        return hash_;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
       * @param value The enum numeric value on the wire for hash to set.
       * @return This builder for chaining.
       */
      public Builder setHashValue(int value) {
        hash_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
       * @return The hash.
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.HashOp getHash() {
        com.cosmos.ics23.v1.ProofsProto.HashOp result = com.cosmos.ics23.v1.ProofsProto.HashOp.forNumber(hash_);
        return result == null ? com.cosmos.ics23.v1.ProofsProto.HashOp.UNRECOGNIZED : result;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
       * @param value The hash to set.
       * @return This builder for chaining.
       */
      public Builder setHash(com.cosmos.ics23.v1.ProofsProto.HashOp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        hash_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
       * @return This builder for chaining.
       */
      public Builder clearHash() {
        bitField0_ = (bitField0_ & ~0x00000001);
        hash_ = 0;
        onChanged();
        return this;
      }

      private int prehashKey_ = 0;
      /**
       * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
       * @return The enum numeric value on the wire for prehashKey.
       */
      @java.lang.Override public int getPrehashKeyValue() {
        return prehashKey_;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
       * @param value The enum numeric value on the wire for prehashKey to set.
       * @return This builder for chaining.
       */
      public Builder setPrehashKeyValue(int value) {
        prehashKey_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
       * @return The prehashKey.
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.HashOp getPrehashKey() {
        com.cosmos.ics23.v1.ProofsProto.HashOp result = com.cosmos.ics23.v1.ProofsProto.HashOp.forNumber(prehashKey_);
        return result == null ? com.cosmos.ics23.v1.ProofsProto.HashOp.UNRECOGNIZED : result;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
       * @param value The prehashKey to set.
       * @return This builder for chaining.
       */
      public Builder setPrehashKey(com.cosmos.ics23.v1.ProofsProto.HashOp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        prehashKey_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp prehash_key = 2 [json_name = "prehashKey"];</code>
       * @return This builder for chaining.
       */
      public Builder clearPrehashKey() {
        bitField0_ = (bitField0_ & ~0x00000002);
        prehashKey_ = 0;
        onChanged();
        return this;
      }

      private int prehashValue_ = 0;
      /**
       * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
       * @return The enum numeric value on the wire for prehashValue.
       */
      @java.lang.Override public int getPrehashValueValue() {
        return prehashValue_;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
       * @param value The enum numeric value on the wire for prehashValue to set.
       * @return This builder for chaining.
       */
      public Builder setPrehashValueValue(int value) {
        prehashValue_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
       * @return The prehashValue.
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.HashOp getPrehashValue() {
        com.cosmos.ics23.v1.ProofsProto.HashOp result = com.cosmos.ics23.v1.ProofsProto.HashOp.forNumber(prehashValue_);
        return result == null ? com.cosmos.ics23.v1.ProofsProto.HashOp.UNRECOGNIZED : result;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
       * @param value The prehashValue to set.
       * @return This builder for chaining.
       */
      public Builder setPrehashValue(com.cosmos.ics23.v1.ProofsProto.HashOp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        prehashValue_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp prehash_value = 3 [json_name = "prehashValue"];</code>
       * @return This builder for chaining.
       */
      public Builder clearPrehashValue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prehashValue_ = 0;
        onChanged();
        return this;
      }

      private int length_ = 0;
      /**
       * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
       * @return The enum numeric value on the wire for length.
       */
      @java.lang.Override public int getLengthValue() {
        return length_;
      }
      /**
       * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
       * @param value The enum numeric value on the wire for length to set.
       * @return This builder for chaining.
       */
      public Builder setLengthValue(int value) {
        length_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
       * @return The length.
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.LengthOp getLength() {
        com.cosmos.ics23.v1.ProofsProto.LengthOp result = com.cosmos.ics23.v1.ProofsProto.LengthOp.forNumber(length_);
        return result == null ? com.cosmos.ics23.v1.ProofsProto.LengthOp.UNRECOGNIZED : result;
      }
      /**
       * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
       * @param value The length to set.
       * @return This builder for chaining.
       */
      public Builder setLength(com.cosmos.ics23.v1.ProofsProto.LengthOp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        length_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.LengthOp length = 4 [json_name = "length"];</code>
       * @return This builder for chaining.
       */
      public Builder clearLength() {
        bitField0_ = (bitField0_ & ~0x00000008);
        length_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString prefix_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
       * a leaf node from an inner node.
       * </pre>
       *
       * <code>bytes prefix = 5 [json_name = "prefix"];</code>
       * @return The prefix.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPrefix() {
        return prefix_;
      }
      /**
       * <pre>
       * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
       * a leaf node from an inner node.
       * </pre>
       *
       * <code>bytes prefix = 5 [json_name = "prefix"];</code>
       * @param value The prefix to set.
       * @return This builder for chaining.
       */
      public Builder setPrefix(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        prefix_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * prefix is a fixed bytes that may optionally be included at the beginning to differentiate
       * a leaf node from an inner node.
       * </pre>
       *
       * <code>bytes prefix = 5 [json_name = "prefix"];</code>
       * @return This builder for chaining.
       */
      public Builder clearPrefix() {
        bitField0_ = (bitField0_ & ~0x00000010);
        prefix_ = getDefaultInstance().getPrefix();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.LeafOp)
    }

    // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.LeafOp)
    private static final com.cosmos.ics23.v1.ProofsProto.LeafOp DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cosmos.ics23.v1.ProofsProto.LeafOp();
    }

    public static com.cosmos.ics23.v1.ProofsProto.LeafOp getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LeafOp>
        PARSER = new com.google.protobuf.AbstractParser<LeafOp>() {
      @java.lang.Override
      public LeafOp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<LeafOp> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LeafOp> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.LeafOp getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InnerOpOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.ics23.v1.InnerOp)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
     * @return The enum numeric value on the wire for hash.
     */
    int getHashValue();
    /**
     * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
     * @return The hash.
     */
    com.cosmos.ics23.v1.ProofsProto.HashOp getHash();

    /**
     * <code>bytes prefix = 2 [json_name = "prefix"];</code>
     * @return The prefix.
     */
    com.google.protobuf.ByteString getPrefix();

    /**
     * <code>bytes suffix = 3 [json_name = "suffix"];</code>
     * @return The suffix.
     */
    com.google.protobuf.ByteString getSuffix();
  }
  /**
   * <pre>
   **
   *InnerOp represents a merkle-proof step that is not a leaf.
   *It represents concatenating two children and hashing them to provide the next result.
   *
   *The result of the previous step is passed in, so the signature of this op is:
   *innerOp(child) -&gt; output
   *
   *The result of applying InnerOp should be:
   *output = op.hash(op.prefix || child || op.suffix)
   *
   *where the || operator is concatenation of binary data,
   *and child is the result of hashing all the tree below this step.
   *
   *Any special data, like prepending child with the length, or prepending the entire operation with
   *some value to differentiate from leaf nodes, should be included in prefix and suffix.
   *If either of prefix or suffix is empty, we just treat it as an empty string
   * </pre>
   *
   * Protobuf type {@code cosmos.ics23.v1.InnerOp}
   */
  public static final class InnerOp extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.InnerOp)
      InnerOpOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InnerOp.newBuilder() to construct.
    private InnerOp(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InnerOp() {
      hash_ = 0;
      prefix_ = com.google.protobuf.ByteString.EMPTY;
      suffix_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new InnerOp();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_InnerOp_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_InnerOp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.ics23.v1.ProofsProto.InnerOp.class, com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder.class);
    }

    public static final int HASH_FIELD_NUMBER = 1;
    private int hash_ = 0;
    /**
     * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
     * @return The enum numeric value on the wire for hash.
     */
    @java.lang.Override public int getHashValue() {
      return hash_;
    }
    /**
     * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
     * @return The hash.
     */
    @java.lang.Override public com.cosmos.ics23.v1.ProofsProto.HashOp getHash() {
      com.cosmos.ics23.v1.ProofsProto.HashOp result = com.cosmos.ics23.v1.ProofsProto.HashOp.forNumber(hash_);
      return result == null ? com.cosmos.ics23.v1.ProofsProto.HashOp.UNRECOGNIZED : result;
    }

    public static final int PREFIX_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString prefix_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes prefix = 2 [json_name = "prefix"];</code>
     * @return The prefix.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPrefix() {
      return prefix_;
    }

    public static final int SUFFIX_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString suffix_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes suffix = 3 [json_name = "suffix"];</code>
     * @return The suffix.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSuffix() {
      return suffix_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hash_ != com.cosmos.ics23.v1.ProofsProto.HashOp.NO_HASH.getNumber()) {
        output.writeEnum(1, hash_);
      }
      if (!prefix_.isEmpty()) {
        output.writeBytes(2, prefix_);
      }
      if (!suffix_.isEmpty()) {
        output.writeBytes(3, suffix_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (hash_ != com.cosmos.ics23.v1.ProofsProto.HashOp.NO_HASH.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, hash_);
      }
      if (!prefix_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, prefix_);
      }
      if (!suffix_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, suffix_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cosmos.ics23.v1.ProofsProto.InnerOp)) {
        return super.equals(obj);
      }
      com.cosmos.ics23.v1.ProofsProto.InnerOp other = (com.cosmos.ics23.v1.ProofsProto.InnerOp) obj;

      if (hash_ != other.hash_) return false;
      if (!getPrefix()
          .equals(other.getPrefix())) return false;
      if (!getSuffix()
          .equals(other.getSuffix())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + HASH_FIELD_NUMBER;
      hash = (53 * hash) + hash_;
      hash = (37 * hash) + PREFIX_FIELD_NUMBER;
      hash = (53 * hash) + getPrefix().hashCode();
      hash = (37 * hash) + SUFFIX_FIELD_NUMBER;
      hash = (53 * hash) + getSuffix().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cosmos.ics23.v1.ProofsProto.InnerOp parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerOp parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerOp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerOp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerOp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerOp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerOp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerOp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.cosmos.ics23.v1.ProofsProto.InnerOp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.cosmos.ics23.v1.ProofsProto.InnerOp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerOp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerOp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cosmos.ics23.v1.ProofsProto.InnerOp prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     *InnerOp represents a merkle-proof step that is not a leaf.
     *It represents concatenating two children and hashing them to provide the next result.
     *
     *The result of the previous step is passed in, so the signature of this op is:
     *innerOp(child) -&gt; output
     *
     *The result of applying InnerOp should be:
     *output = op.hash(op.prefix || child || op.suffix)
     *
     *where the || operator is concatenation of binary data,
     *and child is the result of hashing all the tree below this step.
     *
     *Any special data, like prepending child with the length, or prepending the entire operation with
     *some value to differentiate from leaf nodes, should be included in prefix and suffix.
     *If either of prefix or suffix is empty, we just treat it as an empty string
     * </pre>
     *
     * Protobuf type {@code cosmos.ics23.v1.InnerOp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.InnerOp)
        com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_InnerOp_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_InnerOp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cosmos.ics23.v1.ProofsProto.InnerOp.class, com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder.class);
      }

      // Construct using com.cosmos.ics23.v1.ProofsProto.InnerOp.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        hash_ = 0;
        prefix_ = com.google.protobuf.ByteString.EMPTY;
        suffix_ = com.google.protobuf.ByteString.EMPTY;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_InnerOp_descriptor;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.InnerOp getDefaultInstanceForType() {
        return com.cosmos.ics23.v1.ProofsProto.InnerOp.getDefaultInstance();
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.InnerOp build() {
        com.cosmos.ics23.v1.ProofsProto.InnerOp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.InnerOp buildPartial() {
        com.cosmos.ics23.v1.ProofsProto.InnerOp result = new com.cosmos.ics23.v1.ProofsProto.InnerOp(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.cosmos.ics23.v1.ProofsProto.InnerOp result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.hash_ = hash_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.prefix_ = prefix_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.suffix_ = suffix_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cosmos.ics23.v1.ProofsProto.InnerOp) {
          return mergeFrom((com.cosmos.ics23.v1.ProofsProto.InnerOp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cosmos.ics23.v1.ProofsProto.InnerOp other) {
        if (other == com.cosmos.ics23.v1.ProofsProto.InnerOp.getDefaultInstance()) return this;
        if (other.hash_ != 0) {
          setHashValue(other.getHashValue());
        }
        if (other.getPrefix() != com.google.protobuf.ByteString.EMPTY) {
          setPrefix(other.getPrefix());
        }
        if (other.getSuffix() != com.google.protobuf.ByteString.EMPTY) {
          setSuffix(other.getSuffix());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                hash_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                prefix_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                suffix_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int hash_ = 0;
      /**
       * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
       * @return The enum numeric value on the wire for hash.
       */
      @java.lang.Override public int getHashValue() {
        return hash_;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
       * @param value The enum numeric value on the wire for hash to set.
       * @return This builder for chaining.
       */
      public Builder setHashValue(int value) {
        hash_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
       * @return The hash.
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.HashOp getHash() {
        com.cosmos.ics23.v1.ProofsProto.HashOp result = com.cosmos.ics23.v1.ProofsProto.HashOp.forNumber(hash_);
        return result == null ? com.cosmos.ics23.v1.ProofsProto.HashOp.UNRECOGNIZED : result;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
       * @param value The hash to set.
       * @return This builder for chaining.
       */
      public Builder setHash(com.cosmos.ics23.v1.ProofsProto.HashOp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        hash_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.HashOp hash = 1 [json_name = "hash"];</code>
       * @return This builder for chaining.
       */
      public Builder clearHash() {
        bitField0_ = (bitField0_ & ~0x00000001);
        hash_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString prefix_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes prefix = 2 [json_name = "prefix"];</code>
       * @return The prefix.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPrefix() {
        return prefix_;
      }
      /**
       * <code>bytes prefix = 2 [json_name = "prefix"];</code>
       * @param value The prefix to set.
       * @return This builder for chaining.
       */
      public Builder setPrefix(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        prefix_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>bytes prefix = 2 [json_name = "prefix"];</code>
       * @return This builder for chaining.
       */
      public Builder clearPrefix() {
        bitField0_ = (bitField0_ & ~0x00000002);
        prefix_ = getDefaultInstance().getPrefix();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString suffix_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes suffix = 3 [json_name = "suffix"];</code>
       * @return The suffix.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getSuffix() {
        return suffix_;
      }
      /**
       * <code>bytes suffix = 3 [json_name = "suffix"];</code>
       * @param value The suffix to set.
       * @return This builder for chaining.
       */
      public Builder setSuffix(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        suffix_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>bytes suffix = 3 [json_name = "suffix"];</code>
       * @return This builder for chaining.
       */
      public Builder clearSuffix() {
        bitField0_ = (bitField0_ & ~0x00000004);
        suffix_ = getDefaultInstance().getSuffix();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.InnerOp)
    }

    // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.InnerOp)
    private static final com.cosmos.ics23.v1.ProofsProto.InnerOp DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cosmos.ics23.v1.ProofsProto.InnerOp();
    }

    public static com.cosmos.ics23.v1.ProofsProto.InnerOp getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InnerOp>
        PARSER = new com.google.protobuf.AbstractParser<InnerOp>() {
      @java.lang.Override
      public InnerOp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<InnerOp> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InnerOp> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.InnerOp getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProofSpecOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.ics23.v1.ProofSpec)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * any field in the ExistenceProof must be the same as in this spec.
     * except Prefix, which is just the first bytes of prefix (spec can be longer)
     * </pre>
     *
     * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
     * @return Whether the leafSpec field is set.
     */
    boolean hasLeafSpec();
    /**
     * <pre>
     * any field in the ExistenceProof must be the same as in this spec.
     * except Prefix, which is just the first bytes of prefix (spec can be longer)
     * </pre>
     *
     * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
     * @return The leafSpec.
     */
    com.cosmos.ics23.v1.ProofsProto.LeafOp getLeafSpec();
    /**
     * <pre>
     * any field in the ExistenceProof must be the same as in this spec.
     * except Prefix, which is just the first bytes of prefix (spec can be longer)
     * </pre>
     *
     * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder getLeafSpecOrBuilder();

    /**
     * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
     * @return Whether the innerSpec field is set.
     */
    boolean hasInnerSpec();
    /**
     * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
     * @return The innerSpec.
     */
    com.cosmos.ics23.v1.ProofsProto.InnerSpec getInnerSpec();
    /**
     * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.InnerSpecOrBuilder getInnerSpecOrBuilder();

    /**
     * <pre>
     * max_depth (if &gt; 0) is the maximum number of InnerOps allowed (mainly for fixed-depth tries)
     * </pre>
     *
     * <code>int32 max_depth = 3 [json_name = "maxDepth"];</code>
     * @return The maxDepth.
     */
    int getMaxDepth();

    /**
     * <pre>
     * min_depth (if &gt; 0) is the minimum number of InnerOps allowed (mainly for fixed-depth tries)
     * </pre>
     *
     * <code>int32 min_depth = 4 [json_name = "minDepth"];</code>
     * @return The minDepth.
     */
    int getMinDepth();

    /**
     * <pre>
     * prehash_key_before_comparison is a flag that indicates whether to use the
     * prehash_key specified by LeafOp to compare lexical ordering of keys for
     * non-existence proofs.
     * </pre>
     *
     * <code>bool prehash_key_before_comparison = 5 [json_name = "prehashKeyBeforeComparison"];</code>
     * @return The prehashKeyBeforeComparison.
     */
    boolean getPrehashKeyBeforeComparison();
  }
  /**
   * <pre>
   **
   *ProofSpec defines what the expected parameters are for a given proof type.
   *This can be stored in the client and used to validate any incoming proofs.
   *
   *verify(ProofSpec, Proof) -&gt; Proof | Error
   *
   *As demonstrated in tests, if we don't fix the algorithm used to calculate the
   *LeafHash for a given tree, there are many possible key-value pairs that can
   *generate a given hash (by interpretting the preimage differently).
   *We need this for proper security, requires client knows a priori what
   *tree format server uses. But not in code, rather a configuration object.
   * </pre>
   *
   * Protobuf type {@code cosmos.ics23.v1.ProofSpec}
   */
  public static final class ProofSpec extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.ProofSpec)
      ProofSpecOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ProofSpec.newBuilder() to construct.
    private ProofSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProofSpec() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ProofSpec();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_ProofSpec_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_ProofSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.ics23.v1.ProofsProto.ProofSpec.class, com.cosmos.ics23.v1.ProofsProto.ProofSpec.Builder.class);
    }

    public static final int LEAF_SPEC_FIELD_NUMBER = 1;
    private com.cosmos.ics23.v1.ProofsProto.LeafOp leafSpec_;
    /**
     * <pre>
     * any field in the ExistenceProof must be the same as in this spec.
     * except Prefix, which is just the first bytes of prefix (spec can be longer)
     * </pre>
     *
     * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
     * @return Whether the leafSpec field is set.
     */
    @java.lang.Override
    public boolean hasLeafSpec() {
      return leafSpec_ != null;
    }
    /**
     * <pre>
     * any field in the ExistenceProof must be the same as in this spec.
     * except Prefix, which is just the first bytes of prefix (spec can be longer)
     * </pre>
     *
     * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
     * @return The leafSpec.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.LeafOp getLeafSpec() {
      return leafSpec_ == null ? com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance() : leafSpec_;
    }
    /**
     * <pre>
     * any field in the ExistenceProof must be the same as in this spec.
     * except Prefix, which is just the first bytes of prefix (spec can be longer)
     * </pre>
     *
     * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder getLeafSpecOrBuilder() {
      return leafSpec_ == null ? com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance() : leafSpec_;
    }

    public static final int INNER_SPEC_FIELD_NUMBER = 2;
    private com.cosmos.ics23.v1.ProofsProto.InnerSpec innerSpec_;
    /**
     * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
     * @return Whether the innerSpec field is set.
     */
    @java.lang.Override
    public boolean hasInnerSpec() {
      return innerSpec_ != null;
    }
    /**
     * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
     * @return The innerSpec.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.InnerSpec getInnerSpec() {
      return innerSpec_ == null ? com.cosmos.ics23.v1.ProofsProto.InnerSpec.getDefaultInstance() : innerSpec_;
    }
    /**
     * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.InnerSpecOrBuilder getInnerSpecOrBuilder() {
      return innerSpec_ == null ? com.cosmos.ics23.v1.ProofsProto.InnerSpec.getDefaultInstance() : innerSpec_;
    }

    public static final int MAX_DEPTH_FIELD_NUMBER = 3;
    private int maxDepth_ = 0;
    /**
     * <pre>
     * max_depth (if &gt; 0) is the maximum number of InnerOps allowed (mainly for fixed-depth tries)
     * </pre>
     *
     * <code>int32 max_depth = 3 [json_name = "maxDepth"];</code>
     * @return The maxDepth.
     */
    @java.lang.Override
    public int getMaxDepth() {
      return maxDepth_;
    }

    public static final int MIN_DEPTH_FIELD_NUMBER = 4;
    private int minDepth_ = 0;
    /**
     * <pre>
     * min_depth (if &gt; 0) is the minimum number of InnerOps allowed (mainly for fixed-depth tries)
     * </pre>
     *
     * <code>int32 min_depth = 4 [json_name = "minDepth"];</code>
     * @return The minDepth.
     */
    @java.lang.Override
    public int getMinDepth() {
      return minDepth_;
    }

    public static final int PREHASH_KEY_BEFORE_COMPARISON_FIELD_NUMBER = 5;
    private boolean prehashKeyBeforeComparison_ = false;
    /**
     * <pre>
     * prehash_key_before_comparison is a flag that indicates whether to use the
     * prehash_key specified by LeafOp to compare lexical ordering of keys for
     * non-existence proofs.
     * </pre>
     *
     * <code>bool prehash_key_before_comparison = 5 [json_name = "prehashKeyBeforeComparison"];</code>
     * @return The prehashKeyBeforeComparison.
     */
    @java.lang.Override
    public boolean getPrehashKeyBeforeComparison() {
      return prehashKeyBeforeComparison_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (leafSpec_ != null) {
        output.writeMessage(1, getLeafSpec());
      }
      if (innerSpec_ != null) {
        output.writeMessage(2, getInnerSpec());
      }
      if (maxDepth_ != 0) {
        output.writeInt32(3, maxDepth_);
      }
      if (minDepth_ != 0) {
        output.writeInt32(4, minDepth_);
      }
      if (prehashKeyBeforeComparison_ != false) {
        output.writeBool(5, prehashKeyBeforeComparison_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (leafSpec_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getLeafSpec());
      }
      if (innerSpec_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getInnerSpec());
      }
      if (maxDepth_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, maxDepth_);
      }
      if (minDepth_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, minDepth_);
      }
      if (prehashKeyBeforeComparison_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, prehashKeyBeforeComparison_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cosmos.ics23.v1.ProofsProto.ProofSpec)) {
        return super.equals(obj);
      }
      com.cosmos.ics23.v1.ProofsProto.ProofSpec other = (com.cosmos.ics23.v1.ProofsProto.ProofSpec) obj;

      if (hasLeafSpec() != other.hasLeafSpec()) return false;
      if (hasLeafSpec()) {
        if (!getLeafSpec()
            .equals(other.getLeafSpec())) return false;
      }
      if (hasInnerSpec() != other.hasInnerSpec()) return false;
      if (hasInnerSpec()) {
        if (!getInnerSpec()
            .equals(other.getInnerSpec())) return false;
      }
      if (getMaxDepth()
          != other.getMaxDepth()) return false;
      if (getMinDepth()
          != other.getMinDepth()) return false;
      if (getPrehashKeyBeforeComparison()
          != other.getPrehashKeyBeforeComparison()) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasLeafSpec()) {
        hash = (37 * hash) + LEAF_SPEC_FIELD_NUMBER;
        hash = (53 * hash) + getLeafSpec().hashCode();
      }
      if (hasInnerSpec()) {
        hash = (37 * hash) + INNER_SPEC_FIELD_NUMBER;
        hash = (53 * hash) + getInnerSpec().hashCode();
      }
      hash = (37 * hash) + MAX_DEPTH_FIELD_NUMBER;
      hash = (53 * hash) + getMaxDepth();
      hash = (37 * hash) + MIN_DEPTH_FIELD_NUMBER;
      hash = (53 * hash) + getMinDepth();
      hash = (37 * hash) + PREHASH_KEY_BEFORE_COMPARISON_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getPrehashKeyBeforeComparison());
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cosmos.ics23.v1.ProofsProto.ProofSpec parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ProofSpec parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ProofSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ProofSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ProofSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ProofSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ProofSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ProofSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.cosmos.ics23.v1.ProofsProto.ProofSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.cosmos.ics23.v1.ProofsProto.ProofSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ProofSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.ProofSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cosmos.ics23.v1.ProofsProto.ProofSpec prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     **
     *ProofSpec defines what the expected parameters are for a given proof type.
     *This can be stored in the client and used to validate any incoming proofs.
     *
     *verify(ProofSpec, Proof) -&gt; Proof | Error
     *
     *As demonstrated in tests, if we don't fix the algorithm used to calculate the
     *LeafHash for a given tree, there are many possible key-value pairs that can
     *generate a given hash (by interpretting the preimage differently).
     *We need this for proper security, requires client knows a priori what
     *tree format server uses. But not in code, rather a configuration object.
     * </pre>
     *
     * Protobuf type {@code cosmos.ics23.v1.ProofSpec}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.ProofSpec)
        com.cosmos.ics23.v1.ProofsProto.ProofSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_ProofSpec_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_ProofSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cosmos.ics23.v1.ProofsProto.ProofSpec.class, com.cosmos.ics23.v1.ProofsProto.ProofSpec.Builder.class);
      }

      // Construct using com.cosmos.ics23.v1.ProofsProto.ProofSpec.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        leafSpec_ = null;
        if (leafSpecBuilder_ != null) {
          leafSpecBuilder_.dispose();
          leafSpecBuilder_ = null;
        }
        innerSpec_ = null;
        if (innerSpecBuilder_ != null) {
          innerSpecBuilder_.dispose();
          innerSpecBuilder_ = null;
        }
        maxDepth_ = 0;
        minDepth_ = 0;
        prehashKeyBeforeComparison_ = false;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_ProofSpec_descriptor;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.ProofSpec getDefaultInstanceForType() {
        return com.cosmos.ics23.v1.ProofsProto.ProofSpec.getDefaultInstance();
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.ProofSpec build() {
        com.cosmos.ics23.v1.ProofsProto.ProofSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.ProofSpec buildPartial() {
        com.cosmos.ics23.v1.ProofsProto.ProofSpec result = new com.cosmos.ics23.v1.ProofsProto.ProofSpec(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.cosmos.ics23.v1.ProofsProto.ProofSpec result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.leafSpec_ = leafSpecBuilder_ == null
              ? leafSpec_
              : leafSpecBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.innerSpec_ = innerSpecBuilder_ == null
              ? innerSpec_
              : innerSpecBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.maxDepth_ = maxDepth_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.minDepth_ = minDepth_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.prehashKeyBeforeComparison_ = prehashKeyBeforeComparison_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cosmos.ics23.v1.ProofsProto.ProofSpec) {
          return mergeFrom((com.cosmos.ics23.v1.ProofsProto.ProofSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cosmos.ics23.v1.ProofsProto.ProofSpec other) {
        if (other == com.cosmos.ics23.v1.ProofsProto.ProofSpec.getDefaultInstance()) return this;
        if (other.hasLeafSpec()) {
          mergeLeafSpec(other.getLeafSpec());
        }
        if (other.hasInnerSpec()) {
          mergeInnerSpec(other.getInnerSpec());
        }
        if (other.getMaxDepth() != 0) {
          setMaxDepth(other.getMaxDepth());
        }
        if (other.getMinDepth() != 0) {
          setMinDepth(other.getMinDepth());
        }
        if (other.getPrehashKeyBeforeComparison() != false) {
          setPrehashKeyBeforeComparison(other.getPrehashKeyBeforeComparison());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getLeafSpecFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getInnerSpecFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 24: {
                maxDepth_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                minDepth_ = input.readInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                prehashKeyBeforeComparison_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.cosmos.ics23.v1.ProofsProto.LeafOp leafSpec_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.LeafOp, com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder, com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder> leafSpecBuilder_;
      /**
       * <pre>
       * any field in the ExistenceProof must be the same as in this spec.
       * except Prefix, which is just the first bytes of prefix (spec can be longer)
       * </pre>
       *
       * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
       * @return Whether the leafSpec field is set.
       */
      public boolean hasLeafSpec() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * any field in the ExistenceProof must be the same as in this spec.
       * except Prefix, which is just the first bytes of prefix (spec can be longer)
       * </pre>
       *
       * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
       * @return The leafSpec.
       */
      public com.cosmos.ics23.v1.ProofsProto.LeafOp getLeafSpec() {
        if (leafSpecBuilder_ == null) {
          return leafSpec_ == null ? com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance() : leafSpec_;
        } else {
          return leafSpecBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * any field in the ExistenceProof must be the same as in this spec.
       * except Prefix, which is just the first bytes of prefix (spec can be longer)
       * </pre>
       *
       * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
       */
      public Builder setLeafSpec(com.cosmos.ics23.v1.ProofsProto.LeafOp value) {
        if (leafSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          leafSpec_ = value;
        } else {
          leafSpecBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * any field in the ExistenceProof must be the same as in this spec.
       * except Prefix, which is just the first bytes of prefix (spec can be longer)
       * </pre>
       *
       * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
       */
      public Builder setLeafSpec(
          com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder builderForValue) {
        if (leafSpecBuilder_ == null) {
          leafSpec_ = builderForValue.build();
        } else {
          leafSpecBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * any field in the ExistenceProof must be the same as in this spec.
       * except Prefix, which is just the first bytes of prefix (spec can be longer)
       * </pre>
       *
       * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
       */
      public Builder mergeLeafSpec(com.cosmos.ics23.v1.ProofsProto.LeafOp value) {
        if (leafSpecBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            leafSpec_ != null &&
            leafSpec_ != com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance()) {
            getLeafSpecBuilder().mergeFrom(value);
          } else {
            leafSpec_ = value;
          }
        } else {
          leafSpecBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * any field in the ExistenceProof must be the same as in this spec.
       * except Prefix, which is just the first bytes of prefix (spec can be longer)
       * </pre>
       *
       * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
       */
      public Builder clearLeafSpec() {
        bitField0_ = (bitField0_ & ~0x00000001);
        leafSpec_ = null;
        if (leafSpecBuilder_ != null) {
          leafSpecBuilder_.dispose();
          leafSpecBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * any field in the ExistenceProof must be the same as in this spec.
       * except Prefix, which is just the first bytes of prefix (spec can be longer)
       * </pre>
       *
       * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder getLeafSpecBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getLeafSpecFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * any field in the ExistenceProof must be the same as in this spec.
       * except Prefix, which is just the first bytes of prefix (spec can be longer)
       * </pre>
       *
       * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder getLeafSpecOrBuilder() {
        if (leafSpecBuilder_ != null) {
          return leafSpecBuilder_.getMessageOrBuilder();
        } else {
          return leafSpec_ == null ?
              com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance() : leafSpec_;
        }
      }
      /**
       * <pre>
       * any field in the ExistenceProof must be the same as in this spec.
       * except Prefix, which is just the first bytes of prefix (spec can be longer)
       * </pre>
       *
       * <code>.cosmos.ics23.v1.LeafOp leaf_spec = 1 [json_name = "leafSpec"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.LeafOp, com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder, com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder> 
          getLeafSpecFieldBuilder() {
        if (leafSpecBuilder_ == null) {
          leafSpecBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.LeafOp, com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder, com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder>(
                  getLeafSpec(),
                  getParentForChildren(),
                  isClean());
          leafSpec_ = null;
        }
        return leafSpecBuilder_;
      }

      private com.cosmos.ics23.v1.ProofsProto.InnerSpec innerSpec_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.InnerSpec, com.cosmos.ics23.v1.ProofsProto.InnerSpec.Builder, com.cosmos.ics23.v1.ProofsProto.InnerSpecOrBuilder> innerSpecBuilder_;
      /**
       * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
       * @return Whether the innerSpec field is set.
       */
      public boolean hasInnerSpec() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
       * @return The innerSpec.
       */
      public com.cosmos.ics23.v1.ProofsProto.InnerSpec getInnerSpec() {
        if (innerSpecBuilder_ == null) {
          return innerSpec_ == null ? com.cosmos.ics23.v1.ProofsProto.InnerSpec.getDefaultInstance() : innerSpec_;
        } else {
          return innerSpecBuilder_.getMessage();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
       */
      public Builder setInnerSpec(com.cosmos.ics23.v1.ProofsProto.InnerSpec value) {
        if (innerSpecBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          innerSpec_ = value;
        } else {
          innerSpecBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
       */
      public Builder setInnerSpec(
          com.cosmos.ics23.v1.ProofsProto.InnerSpec.Builder builderForValue) {
        if (innerSpecBuilder_ == null) {
          innerSpec_ = builderForValue.build();
        } else {
          innerSpecBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
       */
      public Builder mergeInnerSpec(com.cosmos.ics23.v1.ProofsProto.InnerSpec value) {
        if (innerSpecBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            innerSpec_ != null &&
            innerSpec_ != com.cosmos.ics23.v1.ProofsProto.InnerSpec.getDefaultInstance()) {
            getInnerSpecBuilder().mergeFrom(value);
          } else {
            innerSpec_ = value;
          }
        } else {
          innerSpecBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
       */
      public Builder clearInnerSpec() {
        bitField0_ = (bitField0_ & ~0x00000002);
        innerSpec_ = null;
        if (innerSpecBuilder_ != null) {
          innerSpecBuilder_.dispose();
          innerSpecBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.InnerSpec.Builder getInnerSpecBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getInnerSpecFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.InnerSpecOrBuilder getInnerSpecOrBuilder() {
        if (innerSpecBuilder_ != null) {
          return innerSpecBuilder_.getMessageOrBuilder();
        } else {
          return innerSpec_ == null ?
              com.cosmos.ics23.v1.ProofsProto.InnerSpec.getDefaultInstance() : innerSpec_;
        }
      }
      /**
       * <code>.cosmos.ics23.v1.InnerSpec inner_spec = 2 [json_name = "innerSpec"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.InnerSpec, com.cosmos.ics23.v1.ProofsProto.InnerSpec.Builder, com.cosmos.ics23.v1.ProofsProto.InnerSpecOrBuilder> 
          getInnerSpecFieldBuilder() {
        if (innerSpecBuilder_ == null) {
          innerSpecBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.InnerSpec, com.cosmos.ics23.v1.ProofsProto.InnerSpec.Builder, com.cosmos.ics23.v1.ProofsProto.InnerSpecOrBuilder>(
                  getInnerSpec(),
                  getParentForChildren(),
                  isClean());
          innerSpec_ = null;
        }
        return innerSpecBuilder_;
      }

      private int maxDepth_ ;
      /**
       * <pre>
       * max_depth (if &gt; 0) is the maximum number of InnerOps allowed (mainly for fixed-depth tries)
       * </pre>
       *
       * <code>int32 max_depth = 3 [json_name = "maxDepth"];</code>
       * @return The maxDepth.
       */
      @java.lang.Override
      public int getMaxDepth() {
        return maxDepth_;
      }
      /**
       * <pre>
       * max_depth (if &gt; 0) is the maximum number of InnerOps allowed (mainly for fixed-depth tries)
       * </pre>
       *
       * <code>int32 max_depth = 3 [json_name = "maxDepth"];</code>
       * @param value The maxDepth to set.
       * @return This builder for chaining.
       */
      public Builder setMaxDepth(int value) {

        maxDepth_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * max_depth (if &gt; 0) is the maximum number of InnerOps allowed (mainly for fixed-depth tries)
       * </pre>
       *
       * <code>int32 max_depth = 3 [json_name = "maxDepth"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxDepth() {
        bitField0_ = (bitField0_ & ~0x00000004);
        maxDepth_ = 0;
        onChanged();
        return this;
      }

      private int minDepth_ ;
      /**
       * <pre>
       * min_depth (if &gt; 0) is the minimum number of InnerOps allowed (mainly for fixed-depth tries)
       * </pre>
       *
       * <code>int32 min_depth = 4 [json_name = "minDepth"];</code>
       * @return The minDepth.
       */
      @java.lang.Override
      public int getMinDepth() {
        return minDepth_;
      }
      /**
       * <pre>
       * min_depth (if &gt; 0) is the minimum number of InnerOps allowed (mainly for fixed-depth tries)
       * </pre>
       *
       * <code>int32 min_depth = 4 [json_name = "minDepth"];</code>
       * @param value The minDepth to set.
       * @return This builder for chaining.
       */
      public Builder setMinDepth(int value) {

        minDepth_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * min_depth (if &gt; 0) is the minimum number of InnerOps allowed (mainly for fixed-depth tries)
       * </pre>
       *
       * <code>int32 min_depth = 4 [json_name = "minDepth"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMinDepth() {
        bitField0_ = (bitField0_ & ~0x00000008);
        minDepth_ = 0;
        onChanged();
        return this;
      }

      private boolean prehashKeyBeforeComparison_ ;
      /**
       * <pre>
       * prehash_key_before_comparison is a flag that indicates whether to use the
       * prehash_key specified by LeafOp to compare lexical ordering of keys for
       * non-existence proofs.
       * </pre>
       *
       * <code>bool prehash_key_before_comparison = 5 [json_name = "prehashKeyBeforeComparison"];</code>
       * @return The prehashKeyBeforeComparison.
       */
      @java.lang.Override
      public boolean getPrehashKeyBeforeComparison() {
        return prehashKeyBeforeComparison_;
      }
      /**
       * <pre>
       * prehash_key_before_comparison is a flag that indicates whether to use the
       * prehash_key specified by LeafOp to compare lexical ordering of keys for
       * non-existence proofs.
       * </pre>
       *
       * <code>bool prehash_key_before_comparison = 5 [json_name = "prehashKeyBeforeComparison"];</code>
       * @param value The prehashKeyBeforeComparison to set.
       * @return This builder for chaining.
       */
      public Builder setPrehashKeyBeforeComparison(boolean value) {

        prehashKeyBeforeComparison_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * prehash_key_before_comparison is a flag that indicates whether to use the
       * prehash_key specified by LeafOp to compare lexical ordering of keys for
       * non-existence proofs.
       * </pre>
       *
       * <code>bool prehash_key_before_comparison = 5 [json_name = "prehashKeyBeforeComparison"];</code>
       * @return This builder for chaining.
       */
      public Builder clearPrehashKeyBeforeComparison() {
        bitField0_ = (bitField0_ & ~0x00000010);
        prehashKeyBeforeComparison_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.ProofSpec)
    }

    // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.ProofSpec)
    private static final com.cosmos.ics23.v1.ProofsProto.ProofSpec DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cosmos.ics23.v1.ProofsProto.ProofSpec();
    }

    public static com.cosmos.ics23.v1.ProofsProto.ProofSpec getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ProofSpec>
        PARSER = new com.google.protobuf.AbstractParser<ProofSpec>() {
      @java.lang.Override
      public ProofSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ProofSpec> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProofSpec> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.ProofSpec getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InnerSpecOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.ics23.v1.InnerSpec)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
     * @return A list containing the childOrder.
     */
    java.util.List<java.lang.Integer> getChildOrderList();
    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
     * @return The count of childOrder.
     */
    int getChildOrderCount();
    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
     * @param index The index of the element to return.
     * @return The childOrder at the given index.
     */
    int getChildOrder(int index);

    /**
     * <code>int32 child_size = 2 [json_name = "childSize"];</code>
     * @return The childSize.
     */
    int getChildSize();

    /**
     * <code>int32 min_prefix_length = 3 [json_name = "minPrefixLength"];</code>
     * @return The minPrefixLength.
     */
    int getMinPrefixLength();

    /**
     * <code>int32 max_prefix_length = 4 [json_name = "maxPrefixLength"];</code>
     * @return The maxPrefixLength.
     */
    int getMaxPrefixLength();

    /**
     * <pre>
     * empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
     * </pre>
     *
     * <code>bytes empty_child = 5 [json_name = "emptyChild"];</code>
     * @return The emptyChild.
     */
    com.google.protobuf.ByteString getEmptyChild();

    /**
     * <pre>
     * hash is the algorithm that must be used for each InnerOp
     * </pre>
     *
     * <code>.cosmos.ics23.v1.HashOp hash = 6 [json_name = "hash"];</code>
     * @return The enum numeric value on the wire for hash.
     */
    int getHashValue();
    /**
     * <pre>
     * hash is the algorithm that must be used for each InnerOp
     * </pre>
     *
     * <code>.cosmos.ics23.v1.HashOp hash = 6 [json_name = "hash"];</code>
     * @return The hash.
     */
    com.cosmos.ics23.v1.ProofsProto.HashOp getHash();
  }
  /**
   * <pre>
   *
   *InnerSpec contains all store-specific structure info to determine if two proofs from a
   *given store are neighbors.
   *
   *This enables:
   *
   *isLeftMost(spec: InnerSpec, op: InnerOp)
   *isRightMost(spec: InnerSpec, op: InnerOp)
   *isLeftNeighbor(spec: InnerSpec, left: InnerOp, right: InnerOp)
   * </pre>
   *
   * Protobuf type {@code cosmos.ics23.v1.InnerSpec}
   */
  public static final class InnerSpec extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.InnerSpec)
      InnerSpecOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InnerSpec.newBuilder() to construct.
    private InnerSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InnerSpec() {
      childOrder_ = emptyIntList();
      emptyChild_ = com.google.protobuf.ByteString.EMPTY;
      hash_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new InnerSpec();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_InnerSpec_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_InnerSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.ics23.v1.ProofsProto.InnerSpec.class, com.cosmos.ics23.v1.ProofsProto.InnerSpec.Builder.class);
    }

    public static final int CHILD_ORDER_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList childOrder_;
    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
     * @return A list containing the childOrder.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getChildOrderList() {
      return childOrder_;
    }
    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
     * @return The count of childOrder.
     */
    public int getChildOrderCount() {
      return childOrder_.size();
    }
    /**
     * <pre>
     * Child order is the ordering of the children node, must count from 0
     * iavl tree is [0, 1] (left then right)
     * merk is [0, 2, 1] (left, right, here)
     * </pre>
     *
     * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
     * @param index The index of the element to return.
     * @return The childOrder at the given index.
     */
    public int getChildOrder(int index) {
      return childOrder_.getInt(index);
    }
    private int childOrderMemoizedSerializedSize = -1;

    public static final int CHILD_SIZE_FIELD_NUMBER = 2;
    private int childSize_ = 0;
    /**
     * <code>int32 child_size = 2 [json_name = "childSize"];</code>
     * @return The childSize.
     */
    @java.lang.Override
    public int getChildSize() {
      return childSize_;
    }

    public static final int MIN_PREFIX_LENGTH_FIELD_NUMBER = 3;
    private int minPrefixLength_ = 0;
    /**
     * <code>int32 min_prefix_length = 3 [json_name = "minPrefixLength"];</code>
     * @return The minPrefixLength.
     */
    @java.lang.Override
    public int getMinPrefixLength() {
      return minPrefixLength_;
    }

    public static final int MAX_PREFIX_LENGTH_FIELD_NUMBER = 4;
    private int maxPrefixLength_ = 0;
    /**
     * <code>int32 max_prefix_length = 4 [json_name = "maxPrefixLength"];</code>
     * @return The maxPrefixLength.
     */
    @java.lang.Override
    public int getMaxPrefixLength() {
      return maxPrefixLength_;
    }

    public static final int EMPTY_CHILD_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString emptyChild_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
     * </pre>
     *
     * <code>bytes empty_child = 5 [json_name = "emptyChild"];</code>
     * @return The emptyChild.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getEmptyChild() {
      return emptyChild_;
    }

    public static final int HASH_FIELD_NUMBER = 6;
    private int hash_ = 0;
    /**
     * <pre>
     * hash is the algorithm that must be used for each InnerOp
     * </pre>
     *
     * <code>.cosmos.ics23.v1.HashOp hash = 6 [json_name = "hash"];</code>
     * @return The enum numeric value on the wire for hash.
     */
    @java.lang.Override public int getHashValue() {
      return hash_;
    }
    /**
     * <pre>
     * hash is the algorithm that must be used for each InnerOp
     * </pre>
     *
     * <code>.cosmos.ics23.v1.HashOp hash = 6 [json_name = "hash"];</code>
     * @return The hash.
     */
    @java.lang.Override public com.cosmos.ics23.v1.ProofsProto.HashOp getHash() {
      com.cosmos.ics23.v1.ProofsProto.HashOp result = com.cosmos.ics23.v1.ProofsProto.HashOp.forNumber(hash_);
      return result == null ? com.cosmos.ics23.v1.ProofsProto.HashOp.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getChildOrderList().size() > 0) {
        output.writeUInt32NoTag(10);
        output.writeUInt32NoTag(childOrderMemoizedSerializedSize);
      }
      for (int i = 0; i < childOrder_.size(); i++) {
        output.writeInt32NoTag(childOrder_.getInt(i));
      }
      if (childSize_ != 0) {
        output.writeInt32(2, childSize_);
      }
      if (minPrefixLength_ != 0) {
        output.writeInt32(3, minPrefixLength_);
      }
      if (maxPrefixLength_ != 0) {
        output.writeInt32(4, maxPrefixLength_);
      }
      if (!emptyChild_.isEmpty()) {
        output.writeBytes(5, emptyChild_);
      }
      if (hash_ != com.cosmos.ics23.v1.ProofsProto.HashOp.NO_HASH.getNumber()) {
        output.writeEnum(6, hash_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < childOrder_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(childOrder_.getInt(i));
        }
        size += dataSize;
        if (!getChildOrderList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        childOrderMemoizedSerializedSize = dataSize;
      }
      if (childSize_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, childSize_);
      }
      if (minPrefixLength_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, minPrefixLength_);
      }
      if (maxPrefixLength_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, maxPrefixLength_);
      }
      if (!emptyChild_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, emptyChild_);
      }
      if (hash_ != com.cosmos.ics23.v1.ProofsProto.HashOp.NO_HASH.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, hash_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cosmos.ics23.v1.ProofsProto.InnerSpec)) {
        return super.equals(obj);
      }
      com.cosmos.ics23.v1.ProofsProto.InnerSpec other = (com.cosmos.ics23.v1.ProofsProto.InnerSpec) obj;

      if (!getChildOrderList()
          .equals(other.getChildOrderList())) return false;
      if (getChildSize()
          != other.getChildSize()) return false;
      if (getMinPrefixLength()
          != other.getMinPrefixLength()) return false;
      if (getMaxPrefixLength()
          != other.getMaxPrefixLength()) return false;
      if (!getEmptyChild()
          .equals(other.getEmptyChild())) return false;
      if (hash_ != other.hash_) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getChildOrderCount() > 0) {
        hash = (37 * hash) + CHILD_ORDER_FIELD_NUMBER;
        hash = (53 * hash) + getChildOrderList().hashCode();
      }
      hash = (37 * hash) + CHILD_SIZE_FIELD_NUMBER;
      hash = (53 * hash) + getChildSize();
      hash = (37 * hash) + MIN_PREFIX_LENGTH_FIELD_NUMBER;
      hash = (53 * hash) + getMinPrefixLength();
      hash = (37 * hash) + MAX_PREFIX_LENGTH_FIELD_NUMBER;
      hash = (53 * hash) + getMaxPrefixLength();
      hash = (37 * hash) + EMPTY_CHILD_FIELD_NUMBER;
      hash = (53 * hash) + getEmptyChild().hashCode();
      hash = (37 * hash) + HASH_FIELD_NUMBER;
      hash = (53 * hash) + hash_;
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cosmos.ics23.v1.ProofsProto.InnerSpec parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerSpec parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.cosmos.ics23.v1.ProofsProto.InnerSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.cosmos.ics23.v1.ProofsProto.InnerSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.InnerSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cosmos.ics23.v1.ProofsProto.InnerSpec prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *
     *InnerSpec contains all store-specific structure info to determine if two proofs from a
     *given store are neighbors.
     *
     *This enables:
     *
     *isLeftMost(spec: InnerSpec, op: InnerOp)
     *isRightMost(spec: InnerSpec, op: InnerOp)
     *isLeftNeighbor(spec: InnerSpec, left: InnerOp, right: InnerOp)
     * </pre>
     *
     * Protobuf type {@code cosmos.ics23.v1.InnerSpec}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.InnerSpec)
        com.cosmos.ics23.v1.ProofsProto.InnerSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_InnerSpec_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_InnerSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cosmos.ics23.v1.ProofsProto.InnerSpec.class, com.cosmos.ics23.v1.ProofsProto.InnerSpec.Builder.class);
      }

      // Construct using com.cosmos.ics23.v1.ProofsProto.InnerSpec.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        childOrder_ = emptyIntList();
        childSize_ = 0;
        minPrefixLength_ = 0;
        maxPrefixLength_ = 0;
        emptyChild_ = com.google.protobuf.ByteString.EMPTY;
        hash_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_InnerSpec_descriptor;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.InnerSpec getDefaultInstanceForType() {
        return com.cosmos.ics23.v1.ProofsProto.InnerSpec.getDefaultInstance();
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.InnerSpec build() {
        com.cosmos.ics23.v1.ProofsProto.InnerSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.InnerSpec buildPartial() {
        com.cosmos.ics23.v1.ProofsProto.InnerSpec result = new com.cosmos.ics23.v1.ProofsProto.InnerSpec(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.cosmos.ics23.v1.ProofsProto.InnerSpec result) {
        if (((bitField0_ & 0x00000001) != 0)) {
          childOrder_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.childOrder_ = childOrder_;
      }

      private void buildPartial0(com.cosmos.ics23.v1.ProofsProto.InnerSpec result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.childSize_ = childSize_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.minPrefixLength_ = minPrefixLength_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.maxPrefixLength_ = maxPrefixLength_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.emptyChild_ = emptyChild_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.hash_ = hash_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cosmos.ics23.v1.ProofsProto.InnerSpec) {
          return mergeFrom((com.cosmos.ics23.v1.ProofsProto.InnerSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cosmos.ics23.v1.ProofsProto.InnerSpec other) {
        if (other == com.cosmos.ics23.v1.ProofsProto.InnerSpec.getDefaultInstance()) return this;
        if (!other.childOrder_.isEmpty()) {
          if (childOrder_.isEmpty()) {
            childOrder_ = other.childOrder_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureChildOrderIsMutable();
            childOrder_.addAll(other.childOrder_);
          }
          onChanged();
        }
        if (other.getChildSize() != 0) {
          setChildSize(other.getChildSize());
        }
        if (other.getMinPrefixLength() != 0) {
          setMinPrefixLength(other.getMinPrefixLength());
        }
        if (other.getMaxPrefixLength() != 0) {
          setMaxPrefixLength(other.getMaxPrefixLength());
        }
        if (other.getEmptyChild() != com.google.protobuf.ByteString.EMPTY) {
          setEmptyChild(other.getEmptyChild());
        }
        if (other.hash_ != 0) {
          setHashValue(other.getHashValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                int v = input.readInt32();
                ensureChildOrderIsMutable();
                childOrder_.addInt(v);
                break;
              } // case 8
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensureChildOrderIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  childOrder_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 10
              case 16: {
                childSize_ = input.readInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                minPrefixLength_ = input.readInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 32: {
                maxPrefixLength_ = input.readInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 42: {
                emptyChild_ = input.readBytes();
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 48: {
                hash_ = input.readEnum();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.Internal.IntList childOrder_ = emptyIntList();
      private void ensureChildOrderIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          childOrder_ = mutableCopy(childOrder_);
          bitField0_ |= 0x00000001;
        }
      }
      /**
       * <pre>
       * Child order is the ordering of the children node, must count from 0
       * iavl tree is [0, 1] (left then right)
       * merk is [0, 2, 1] (left, right, here)
       * </pre>
       *
       * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
       * @return A list containing the childOrder.
       */
      public java.util.List<java.lang.Integer>
          getChildOrderList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(childOrder_) : childOrder_;
      }
      /**
       * <pre>
       * Child order is the ordering of the children node, must count from 0
       * iavl tree is [0, 1] (left then right)
       * merk is [0, 2, 1] (left, right, here)
       * </pre>
       *
       * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
       * @return The count of childOrder.
       */
      public int getChildOrderCount() {
        return childOrder_.size();
      }
      /**
       * <pre>
       * Child order is the ordering of the children node, must count from 0
       * iavl tree is [0, 1] (left then right)
       * merk is [0, 2, 1] (left, right, here)
       * </pre>
       *
       * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
       * @param index The index of the element to return.
       * @return The childOrder at the given index.
       */
      public int getChildOrder(int index) {
        return childOrder_.getInt(index);
      }
      /**
       * <pre>
       * Child order is the ordering of the children node, must count from 0
       * iavl tree is [0, 1] (left then right)
       * merk is [0, 2, 1] (left, right, here)
       * </pre>
       *
       * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
       * @param index The index to set the value at.
       * @param value The childOrder to set.
       * @return This builder for chaining.
       */
      public Builder setChildOrder(
          int index, int value) {

        ensureChildOrderIsMutable();
        childOrder_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Child order is the ordering of the children node, must count from 0
       * iavl tree is [0, 1] (left then right)
       * merk is [0, 2, 1] (left, right, here)
       * </pre>
       *
       * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
       * @param value The childOrder to add.
       * @return This builder for chaining.
       */
      public Builder addChildOrder(int value) {

        ensureChildOrderIsMutable();
        childOrder_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Child order is the ordering of the children node, must count from 0
       * iavl tree is [0, 1] (left then right)
       * merk is [0, 2, 1] (left, right, here)
       * </pre>
       *
       * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
       * @param values The childOrder to add.
       * @return This builder for chaining.
       */
      public Builder addAllChildOrder(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureChildOrderIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, childOrder_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Child order is the ordering of the children node, must count from 0
       * iavl tree is [0, 1] (left then right)
       * merk is [0, 2, 1] (left, right, here)
       * </pre>
       *
       * <code>repeated int32 child_order = 1 [json_name = "childOrder"];</code>
       * @return This builder for chaining.
       */
      public Builder clearChildOrder() {
        childOrder_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private int childSize_ ;
      /**
       * <code>int32 child_size = 2 [json_name = "childSize"];</code>
       * @return The childSize.
       */
      @java.lang.Override
      public int getChildSize() {
        return childSize_;
      }
      /**
       * <code>int32 child_size = 2 [json_name = "childSize"];</code>
       * @param value The childSize to set.
       * @return This builder for chaining.
       */
      public Builder setChildSize(int value) {

        childSize_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>int32 child_size = 2 [json_name = "childSize"];</code>
       * @return This builder for chaining.
       */
      public Builder clearChildSize() {
        bitField0_ = (bitField0_ & ~0x00000002);
        childSize_ = 0;
        onChanged();
        return this;
      }

      private int minPrefixLength_ ;
      /**
       * <code>int32 min_prefix_length = 3 [json_name = "minPrefixLength"];</code>
       * @return The minPrefixLength.
       */
      @java.lang.Override
      public int getMinPrefixLength() {
        return minPrefixLength_;
      }
      /**
       * <code>int32 min_prefix_length = 3 [json_name = "minPrefixLength"];</code>
       * @param value The minPrefixLength to set.
       * @return This builder for chaining.
       */
      public Builder setMinPrefixLength(int value) {

        minPrefixLength_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>int32 min_prefix_length = 3 [json_name = "minPrefixLength"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMinPrefixLength() {
        bitField0_ = (bitField0_ & ~0x00000004);
        minPrefixLength_ = 0;
        onChanged();
        return this;
      }

      private int maxPrefixLength_ ;
      /**
       * <code>int32 max_prefix_length = 4 [json_name = "maxPrefixLength"];</code>
       * @return The maxPrefixLength.
       */
      @java.lang.Override
      public int getMaxPrefixLength() {
        return maxPrefixLength_;
      }
      /**
       * <code>int32 max_prefix_length = 4 [json_name = "maxPrefixLength"];</code>
       * @param value The maxPrefixLength to set.
       * @return This builder for chaining.
       */
      public Builder setMaxPrefixLength(int value) {

        maxPrefixLength_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>int32 max_prefix_length = 4 [json_name = "maxPrefixLength"];</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxPrefixLength() {
        bitField0_ = (bitField0_ & ~0x00000008);
        maxPrefixLength_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString emptyChild_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
       * </pre>
       *
       * <code>bytes empty_child = 5 [json_name = "emptyChild"];</code>
       * @return The emptyChild.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getEmptyChild() {
        return emptyChild_;
      }
      /**
       * <pre>
       * empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
       * </pre>
       *
       * <code>bytes empty_child = 5 [json_name = "emptyChild"];</code>
       * @param value The emptyChild to set.
       * @return This builder for chaining.
       */
      public Builder setEmptyChild(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        emptyChild_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * empty child is the prehash image that is used when one child is nil (eg. 20 bytes of 0)
       * </pre>
       *
       * <code>bytes empty_child = 5 [json_name = "emptyChild"];</code>
       * @return This builder for chaining.
       */
      public Builder clearEmptyChild() {
        bitField0_ = (bitField0_ & ~0x00000010);
        emptyChild_ = getDefaultInstance().getEmptyChild();
        onChanged();
        return this;
      }

      private int hash_ = 0;
      /**
       * <pre>
       * hash is the algorithm that must be used for each InnerOp
       * </pre>
       *
       * <code>.cosmos.ics23.v1.HashOp hash = 6 [json_name = "hash"];</code>
       * @return The enum numeric value on the wire for hash.
       */
      @java.lang.Override public int getHashValue() {
        return hash_;
      }
      /**
       * <pre>
       * hash is the algorithm that must be used for each InnerOp
       * </pre>
       *
       * <code>.cosmos.ics23.v1.HashOp hash = 6 [json_name = "hash"];</code>
       * @param value The enum numeric value on the wire for hash to set.
       * @return This builder for chaining.
       */
      public Builder setHashValue(int value) {
        hash_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * hash is the algorithm that must be used for each InnerOp
       * </pre>
       *
       * <code>.cosmos.ics23.v1.HashOp hash = 6 [json_name = "hash"];</code>
       * @return The hash.
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.HashOp getHash() {
        com.cosmos.ics23.v1.ProofsProto.HashOp result = com.cosmos.ics23.v1.ProofsProto.HashOp.forNumber(hash_);
        return result == null ? com.cosmos.ics23.v1.ProofsProto.HashOp.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * hash is the algorithm that must be used for each InnerOp
       * </pre>
       *
       * <code>.cosmos.ics23.v1.HashOp hash = 6 [json_name = "hash"];</code>
       * @param value The hash to set.
       * @return This builder for chaining.
       */
      public Builder setHash(com.cosmos.ics23.v1.ProofsProto.HashOp value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        hash_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * hash is the algorithm that must be used for each InnerOp
       * </pre>
       *
       * <code>.cosmos.ics23.v1.HashOp hash = 6 [json_name = "hash"];</code>
       * @return This builder for chaining.
       */
      public Builder clearHash() {
        bitField0_ = (bitField0_ & ~0x00000020);
        hash_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.InnerSpec)
    }

    // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.InnerSpec)
    private static final com.cosmos.ics23.v1.ProofsProto.InnerSpec DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cosmos.ics23.v1.ProofsProto.InnerSpec();
    }

    public static com.cosmos.ics23.v1.ProofsProto.InnerSpec getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InnerSpec>
        PARSER = new com.google.protobuf.AbstractParser<InnerSpec>() {
      @java.lang.Override
      public InnerSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<InnerSpec> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InnerSpec> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.InnerSpec getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BatchProofOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.ics23.v1.BatchProof)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
     */
    java.util.List<com.cosmos.ics23.v1.ProofsProto.BatchEntry> 
        getEntriesList();
    /**
     * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.BatchEntry getEntries(int index);
    /**
     * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
     */
    int getEntriesCount();
    /**
     * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
     */
    java.util.List<? extends com.cosmos.ics23.v1.ProofsProto.BatchEntryOrBuilder> 
        getEntriesOrBuilderList();
    /**
     * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.BatchEntryOrBuilder getEntriesOrBuilder(
        int index);
  }
  /**
   * <pre>
   *
   *BatchProof is a group of multiple proof types than can be compressed
   * </pre>
   *
   * Protobuf type {@code cosmos.ics23.v1.BatchProof}
   */
  public static final class BatchProof extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.BatchProof)
      BatchProofOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BatchProof.newBuilder() to construct.
    private BatchProof(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BatchProof() {
      entries_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BatchProof();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_BatchProof_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_BatchProof_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.ics23.v1.ProofsProto.BatchProof.class, com.cosmos.ics23.v1.ProofsProto.BatchProof.Builder.class);
    }

    public static final int ENTRIES_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<com.cosmos.ics23.v1.ProofsProto.BatchEntry> entries_;
    /**
     * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
     */
    @java.lang.Override
    public java.util.List<com.cosmos.ics23.v1.ProofsProto.BatchEntry> getEntriesList() {
      return entries_;
    }
    /**
     * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.cosmos.ics23.v1.ProofsProto.BatchEntryOrBuilder> 
        getEntriesOrBuilderList() {
      return entries_;
    }
    /**
     * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
     */
    @java.lang.Override
    public int getEntriesCount() {
      return entries_.size();
    }
    /**
     * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.BatchEntry getEntries(int index) {
      return entries_.get(index);
    }
    /**
     * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.BatchEntryOrBuilder getEntriesOrBuilder(
        int index) {
      return entries_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < entries_.size(); i++) {
        output.writeMessage(1, entries_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < entries_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, entries_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cosmos.ics23.v1.ProofsProto.BatchProof)) {
        return super.equals(obj);
      }
      com.cosmos.ics23.v1.ProofsProto.BatchProof other = (com.cosmos.ics23.v1.ProofsProto.BatchProof) obj;

      if (!getEntriesList()
          .equals(other.getEntriesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getEntriesCount() > 0) {
        hash = (37 * hash) + ENTRIES_FIELD_NUMBER;
        hash = (53 * hash) + getEntriesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cosmos.ics23.v1.ProofsProto.BatchProof parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchProof parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchProof parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchProof parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchProof parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchProof parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchProof parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchProof parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.cosmos.ics23.v1.ProofsProto.BatchProof parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.cosmos.ics23.v1.ProofsProto.BatchProof parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchProof parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchProof parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cosmos.ics23.v1.ProofsProto.BatchProof prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *
     *BatchProof is a group of multiple proof types than can be compressed
     * </pre>
     *
     * Protobuf type {@code cosmos.ics23.v1.BatchProof}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.BatchProof)
        com.cosmos.ics23.v1.ProofsProto.BatchProofOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_BatchProof_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_BatchProof_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cosmos.ics23.v1.ProofsProto.BatchProof.class, com.cosmos.ics23.v1.ProofsProto.BatchProof.Builder.class);
      }

      // Construct using com.cosmos.ics23.v1.ProofsProto.BatchProof.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (entriesBuilder_ == null) {
          entries_ = java.util.Collections.emptyList();
        } else {
          entries_ = null;
          entriesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_BatchProof_descriptor;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.BatchProof getDefaultInstanceForType() {
        return com.cosmos.ics23.v1.ProofsProto.BatchProof.getDefaultInstance();
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.BatchProof build() {
        com.cosmos.ics23.v1.ProofsProto.BatchProof result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.BatchProof buildPartial() {
        com.cosmos.ics23.v1.ProofsProto.BatchProof result = new com.cosmos.ics23.v1.ProofsProto.BatchProof(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.cosmos.ics23.v1.ProofsProto.BatchProof result) {
        if (entriesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            entries_ = java.util.Collections.unmodifiableList(entries_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.entries_ = entries_;
        } else {
          result.entries_ = entriesBuilder_.build();
        }
      }

      private void buildPartial0(com.cosmos.ics23.v1.ProofsProto.BatchProof result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cosmos.ics23.v1.ProofsProto.BatchProof) {
          return mergeFrom((com.cosmos.ics23.v1.ProofsProto.BatchProof)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cosmos.ics23.v1.ProofsProto.BatchProof other) {
        if (other == com.cosmos.ics23.v1.ProofsProto.BatchProof.getDefaultInstance()) return this;
        if (entriesBuilder_ == null) {
          if (!other.entries_.isEmpty()) {
            if (entries_.isEmpty()) {
              entries_ = other.entries_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureEntriesIsMutable();
              entries_.addAll(other.entries_);
            }
            onChanged();
          }
        } else {
          if (!other.entries_.isEmpty()) {
            if (entriesBuilder_.isEmpty()) {
              entriesBuilder_.dispose();
              entriesBuilder_ = null;
              entries_ = other.entries_;
              bitField0_ = (bitField0_ & ~0x00000001);
              entriesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getEntriesFieldBuilder() : null;
            } else {
              entriesBuilder_.addAllMessages(other.entries_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.cosmos.ics23.v1.ProofsProto.BatchEntry m =
                    input.readMessage(
                        com.cosmos.ics23.v1.ProofsProto.BatchEntry.parser(),
                        extensionRegistry);
                if (entriesBuilder_ == null) {
                  ensureEntriesIsMutable();
                  entries_.add(m);
                } else {
                  entriesBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<com.cosmos.ics23.v1.ProofsProto.BatchEntry> entries_ =
        java.util.Collections.emptyList();
      private void ensureEntriesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          entries_ = new java.util.ArrayList<com.cosmos.ics23.v1.ProofsProto.BatchEntry>(entries_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.BatchEntry, com.cosmos.ics23.v1.ProofsProto.BatchEntry.Builder, com.cosmos.ics23.v1.ProofsProto.BatchEntryOrBuilder> entriesBuilder_;

      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public java.util.List<com.cosmos.ics23.v1.ProofsProto.BatchEntry> getEntriesList() {
        if (entriesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(entries_);
        } else {
          return entriesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public int getEntriesCount() {
        if (entriesBuilder_ == null) {
          return entries_.size();
        } else {
          return entriesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.BatchEntry getEntries(int index) {
        if (entriesBuilder_ == null) {
          return entries_.get(index);
        } else {
          return entriesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder setEntries(
          int index, com.cosmos.ics23.v1.ProofsProto.BatchEntry value) {
        if (entriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntriesIsMutable();
          entries_.set(index, value);
          onChanged();
        } else {
          entriesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder setEntries(
          int index, com.cosmos.ics23.v1.ProofsProto.BatchEntry.Builder builderForValue) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          entries_.set(index, builderForValue.build());
          onChanged();
        } else {
          entriesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder addEntries(com.cosmos.ics23.v1.ProofsProto.BatchEntry value) {
        if (entriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntriesIsMutable();
          entries_.add(value);
          onChanged();
        } else {
          entriesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder addEntries(
          int index, com.cosmos.ics23.v1.ProofsProto.BatchEntry value) {
        if (entriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntriesIsMutable();
          entries_.add(index, value);
          onChanged();
        } else {
          entriesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder addEntries(
          com.cosmos.ics23.v1.ProofsProto.BatchEntry.Builder builderForValue) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          entries_.add(builderForValue.build());
          onChanged();
        } else {
          entriesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder addEntries(
          int index, com.cosmos.ics23.v1.ProofsProto.BatchEntry.Builder builderForValue) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          entries_.add(index, builderForValue.build());
          onChanged();
        } else {
          entriesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder addAllEntries(
          java.lang.Iterable<? extends com.cosmos.ics23.v1.ProofsProto.BatchEntry> values) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, entries_);
          onChanged();
        } else {
          entriesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder clearEntries() {
        if (entriesBuilder_ == null) {
          entries_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          entriesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder removeEntries(int index) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          entries_.remove(index);
          onChanged();
        } else {
          entriesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.BatchEntry.Builder getEntriesBuilder(
          int index) {
        return getEntriesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.BatchEntryOrBuilder getEntriesOrBuilder(
          int index) {
        if (entriesBuilder_ == null) {
          return entries_.get(index);  } else {
          return entriesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public java.util.List<? extends com.cosmos.ics23.v1.ProofsProto.BatchEntryOrBuilder> 
           getEntriesOrBuilderList() {
        if (entriesBuilder_ != null) {
          return entriesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(entries_);
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.BatchEntry.Builder addEntriesBuilder() {
        return getEntriesFieldBuilder().addBuilder(
            com.cosmos.ics23.v1.ProofsProto.BatchEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.BatchEntry.Builder addEntriesBuilder(
          int index) {
        return getEntriesFieldBuilder().addBuilder(
            index, com.cosmos.ics23.v1.ProofsProto.BatchEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .cosmos.ics23.v1.BatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public java.util.List<com.cosmos.ics23.v1.ProofsProto.BatchEntry.Builder> 
           getEntriesBuilderList() {
        return getEntriesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.BatchEntry, com.cosmos.ics23.v1.ProofsProto.BatchEntry.Builder, com.cosmos.ics23.v1.ProofsProto.BatchEntryOrBuilder> 
          getEntriesFieldBuilder() {
        if (entriesBuilder_ == null) {
          entriesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.BatchEntry, com.cosmos.ics23.v1.ProofsProto.BatchEntry.Builder, com.cosmos.ics23.v1.ProofsProto.BatchEntryOrBuilder>(
                  entries_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          entries_ = null;
        }
        return entriesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.BatchProof)
    }

    // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.BatchProof)
    private static final com.cosmos.ics23.v1.ProofsProto.BatchProof DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cosmos.ics23.v1.ProofsProto.BatchProof();
    }

    public static com.cosmos.ics23.v1.ProofsProto.BatchProof getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BatchProof>
        PARSER = new com.google.protobuf.AbstractParser<BatchProof>() {
      @java.lang.Override
      public BatchProof parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BatchProof> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BatchProof> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.BatchProof getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BatchEntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.ics23.v1.BatchEntry)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     * @return Whether the exist field is set.
     */
    boolean hasExist();
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     * @return The exist.
     */
    com.cosmos.ics23.v1.ProofsProto.ExistenceProof getExist();
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder getExistOrBuilder();

    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     * @return Whether the nonexist field is set.
     */
    boolean hasNonexist();
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     * @return The nonexist.
     */
    com.cosmos.ics23.v1.ProofsProto.NonExistenceProof getNonexist();
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.NonExistenceProofOrBuilder getNonexistOrBuilder();

    com.cosmos.ics23.v1.ProofsProto.BatchEntry.ProofCase getProofCase();
  }
  /**
   * <pre>
   * Use BatchEntry not CommitmentProof, to avoid recursion
   * </pre>
   *
   * Protobuf type {@code cosmos.ics23.v1.BatchEntry}
   */
  public static final class BatchEntry extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.BatchEntry)
      BatchEntryOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BatchEntry.newBuilder() to construct.
    private BatchEntry(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BatchEntry() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BatchEntry();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_BatchEntry_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_BatchEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.ics23.v1.ProofsProto.BatchEntry.class, com.cosmos.ics23.v1.ProofsProto.BatchEntry.Builder.class);
    }

    private int proofCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object proof_;
    public enum ProofCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      EXIST(1),
      NONEXIST(2),
      PROOF_NOT_SET(0);
      private final int value;
      private ProofCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ProofCase valueOf(int value) {
        return forNumber(value);
      }

      public static ProofCase forNumber(int value) {
        switch (value) {
          case 1: return EXIST;
          case 2: return NONEXIST;
          case 0: return PROOF_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ProofCase
    getProofCase() {
      return ProofCase.forNumber(
          proofCase_);
    }

    public static final int EXIST_FIELD_NUMBER = 1;
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     * @return Whether the exist field is set.
     */
    @java.lang.Override
    public boolean hasExist() {
      return proofCase_ == 1;
    }
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     * @return The exist.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.ExistenceProof getExist() {
      if (proofCase_ == 1) {
         return (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance();
    }
    /**
     * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder getExistOrBuilder() {
      if (proofCase_ == 1) {
         return (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance();
    }

    public static final int NONEXIST_FIELD_NUMBER = 2;
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     * @return Whether the nonexist field is set.
     */
    @java.lang.Override
    public boolean hasNonexist() {
      return proofCase_ == 2;
    }
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     * @return The nonexist.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.NonExistenceProof getNonexist() {
      if (proofCase_ == 2) {
         return (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance();
    }
    /**
     * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.NonExistenceProofOrBuilder getNonexistOrBuilder() {
      if (proofCase_ == 2) {
         return (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (proofCase_ == 1) {
        output.writeMessage(1, (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_);
      }
      if (proofCase_ == 2) {
        output.writeMessage(2, (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (proofCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_);
      }
      if (proofCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cosmos.ics23.v1.ProofsProto.BatchEntry)) {
        return super.equals(obj);
      }
      com.cosmos.ics23.v1.ProofsProto.BatchEntry other = (com.cosmos.ics23.v1.ProofsProto.BatchEntry) obj;

      if (!getProofCase().equals(other.getProofCase())) return false;
      switch (proofCase_) {
        case 1:
          if (!getExist()
              .equals(other.getExist())) return false;
          break;
        case 2:
          if (!getNonexist()
              .equals(other.getNonexist())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (proofCase_) {
        case 1:
          hash = (37 * hash) + EXIST_FIELD_NUMBER;
          hash = (53 * hash) + getExist().hashCode();
          break;
        case 2:
          hash = (37 * hash) + NONEXIST_FIELD_NUMBER;
          hash = (53 * hash) + getNonexist().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cosmos.ics23.v1.ProofsProto.BatchEntry parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchEntry parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchEntry parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchEntry parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchEntry parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchEntry parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchEntry parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.cosmos.ics23.v1.ProofsProto.BatchEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.cosmos.ics23.v1.ProofsProto.BatchEntry parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchEntry parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.BatchEntry parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cosmos.ics23.v1.ProofsProto.BatchEntry prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Use BatchEntry not CommitmentProof, to avoid recursion
     * </pre>
     *
     * Protobuf type {@code cosmos.ics23.v1.BatchEntry}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.BatchEntry)
        com.cosmos.ics23.v1.ProofsProto.BatchEntryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_BatchEntry_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_BatchEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cosmos.ics23.v1.ProofsProto.BatchEntry.class, com.cosmos.ics23.v1.ProofsProto.BatchEntry.Builder.class);
      }

      // Construct using com.cosmos.ics23.v1.ProofsProto.BatchEntry.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (existBuilder_ != null) {
          existBuilder_.clear();
        }
        if (nonexistBuilder_ != null) {
          nonexistBuilder_.clear();
        }
        proofCase_ = 0;
        proof_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_BatchEntry_descriptor;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.BatchEntry getDefaultInstanceForType() {
        return com.cosmos.ics23.v1.ProofsProto.BatchEntry.getDefaultInstance();
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.BatchEntry build() {
        com.cosmos.ics23.v1.ProofsProto.BatchEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.BatchEntry buildPartial() {
        com.cosmos.ics23.v1.ProofsProto.BatchEntry result = new com.cosmos.ics23.v1.ProofsProto.BatchEntry(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(com.cosmos.ics23.v1.ProofsProto.BatchEntry result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(com.cosmos.ics23.v1.ProofsProto.BatchEntry result) {
        result.proofCase_ = proofCase_;
        result.proof_ = this.proof_;
        if (proofCase_ == 1 &&
            existBuilder_ != null) {
          result.proof_ = existBuilder_.build();
        }
        if (proofCase_ == 2 &&
            nonexistBuilder_ != null) {
          result.proof_ = nonexistBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cosmos.ics23.v1.ProofsProto.BatchEntry) {
          return mergeFrom((com.cosmos.ics23.v1.ProofsProto.BatchEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cosmos.ics23.v1.ProofsProto.BatchEntry other) {
        if (other == com.cosmos.ics23.v1.ProofsProto.BatchEntry.getDefaultInstance()) return this;
        switch (other.getProofCase()) {
          case EXIST: {
            mergeExist(other.getExist());
            break;
          }
          case NONEXIST: {
            mergeNonexist(other.getNonexist());
            break;
          }
          case PROOF_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getExistFieldBuilder().getBuilder(),
                    extensionRegistry);
                proofCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getNonexistFieldBuilder().getBuilder(),
                    extensionRegistry);
                proofCase_ = 2;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int proofCase_ = 0;
      private java.lang.Object proof_;
      public ProofCase
          getProofCase() {
        return ProofCase.forNumber(
            proofCase_);
      }

      public Builder clearProof() {
        proofCase_ = 0;
        proof_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.ExistenceProof, com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder> existBuilder_;
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       * @return Whether the exist field is set.
       */
      @java.lang.Override
      public boolean hasExist() {
        return proofCase_ == 1;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       * @return The exist.
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProof getExist() {
        if (existBuilder_ == null) {
          if (proofCase_ == 1) {
            return (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance();
        } else {
          if (proofCase_ == 1) {
            return existBuilder_.getMessage();
          }
          return com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public Builder setExist(com.cosmos.ics23.v1.ProofsProto.ExistenceProof value) {
        if (existBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          proof_ = value;
          onChanged();
        } else {
          existBuilder_.setMessage(value);
        }
        proofCase_ = 1;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public Builder setExist(
          com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder builderForValue) {
        if (existBuilder_ == null) {
          proof_ = builderForValue.build();
          onChanged();
        } else {
          existBuilder_.setMessage(builderForValue.build());
        }
        proofCase_ = 1;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public Builder mergeExist(com.cosmos.ics23.v1.ProofsProto.ExistenceProof value) {
        if (existBuilder_ == null) {
          if (proofCase_ == 1 &&
              proof_ != com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance()) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.ExistenceProof.newBuilder((com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_)
                .mergeFrom(value).buildPartial();
          } else {
            proof_ = value;
          }
          onChanged();
        } else {
          if (proofCase_ == 1) {
            existBuilder_.mergeFrom(value);
          } else {
            existBuilder_.setMessage(value);
          }
        }
        proofCase_ = 1;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public Builder clearExist() {
        if (existBuilder_ == null) {
          if (proofCase_ == 1) {
            proofCase_ = 0;
            proof_ = null;
            onChanged();
          }
        } else {
          if (proofCase_ == 1) {
            proofCase_ = 0;
            proof_ = null;
          }
          existBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder getExistBuilder() {
        return getExistFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder getExistOrBuilder() {
        if ((proofCase_ == 1) && (existBuilder_ != null)) {
          return existBuilder_.getMessageOrBuilder();
        } else {
          if (proofCase_ == 1) {
            return (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.ExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.ExistenceProof, com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder> 
          getExistFieldBuilder() {
        if (existBuilder_ == null) {
          if (!(proofCase_ == 1)) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.ExistenceProof.getDefaultInstance();
          }
          existBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.ExistenceProof, com.cosmos.ics23.v1.ProofsProto.ExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.ExistenceProofOrBuilder>(
                  (com.cosmos.ics23.v1.ProofsProto.ExistenceProof) proof_,
                  getParentForChildren(),
                  isClean());
          proof_ = null;
        }
        proofCase_ = 1;
        onChanged();
        return existBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.NonExistenceProof, com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.NonExistenceProofOrBuilder> nonexistBuilder_;
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       * @return Whether the nonexist field is set.
       */
      @java.lang.Override
      public boolean hasNonexist() {
        return proofCase_ == 2;
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       * @return The nonexist.
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.NonExistenceProof getNonexist() {
        if (nonexistBuilder_ == null) {
          if (proofCase_ == 2) {
            return (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance();
        } else {
          if (proofCase_ == 2) {
            return nonexistBuilder_.getMessage();
          }
          return com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public Builder setNonexist(com.cosmos.ics23.v1.ProofsProto.NonExistenceProof value) {
        if (nonexistBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          proof_ = value;
          onChanged();
        } else {
          nonexistBuilder_.setMessage(value);
        }
        proofCase_ = 2;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public Builder setNonexist(
          com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.Builder builderForValue) {
        if (nonexistBuilder_ == null) {
          proof_ = builderForValue.build();
          onChanged();
        } else {
          nonexistBuilder_.setMessage(builderForValue.build());
        }
        proofCase_ = 2;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public Builder mergeNonexist(com.cosmos.ics23.v1.ProofsProto.NonExistenceProof value) {
        if (nonexistBuilder_ == null) {
          if (proofCase_ == 2 &&
              proof_ != com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance()) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.newBuilder((com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_)
                .mergeFrom(value).buildPartial();
          } else {
            proof_ = value;
          }
          onChanged();
        } else {
          if (proofCase_ == 2) {
            nonexistBuilder_.mergeFrom(value);
          } else {
            nonexistBuilder_.setMessage(value);
          }
        }
        proofCase_ = 2;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public Builder clearNonexist() {
        if (nonexistBuilder_ == null) {
          if (proofCase_ == 2) {
            proofCase_ = 0;
            proof_ = null;
            onChanged();
          }
        } else {
          if (proofCase_ == 2) {
            proofCase_ = 0;
            proof_ = null;
          }
          nonexistBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.Builder getNonexistBuilder() {
        return getNonexistFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.NonExistenceProofOrBuilder getNonexistOrBuilder() {
        if ((proofCase_ == 2) && (nonexistBuilder_ != null)) {
          return nonexistBuilder_.getMessageOrBuilder();
        } else {
          if (proofCase_ == 2) {
            return (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.NonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.NonExistenceProof, com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.NonExistenceProofOrBuilder> 
          getNonexistFieldBuilder() {
        if (nonexistBuilder_ == null) {
          if (!(proofCase_ == 2)) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.getDefaultInstance();
          }
          nonexistBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.NonExistenceProof, com.cosmos.ics23.v1.ProofsProto.NonExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.NonExistenceProofOrBuilder>(
                  (com.cosmos.ics23.v1.ProofsProto.NonExistenceProof) proof_,
                  getParentForChildren(),
                  isClean());
          proof_ = null;
        }
        proofCase_ = 2;
        onChanged();
        return nonexistBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.BatchEntry)
    }

    // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.BatchEntry)
    private static final com.cosmos.ics23.v1.ProofsProto.BatchEntry DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cosmos.ics23.v1.ProofsProto.BatchEntry();
    }

    public static com.cosmos.ics23.v1.ProofsProto.BatchEntry getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BatchEntry>
        PARSER = new com.google.protobuf.AbstractParser<BatchEntry>() {
      @java.lang.Override
      public BatchEntry parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<BatchEntry> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BatchEntry> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.BatchEntry getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CompressedBatchProofOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.ics23.v1.CompressedBatchProof)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
     */
    java.util.List<com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry> 
        getEntriesList();
    /**
     * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry getEntries(int index);
    /**
     * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
     */
    int getEntriesCount();
    /**
     * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
     */
    java.util.List<? extends com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntryOrBuilder> 
        getEntriesOrBuilderList();
    /**
     * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntryOrBuilder getEntriesOrBuilder(
        int index);

    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
     */
    java.util.List<com.cosmos.ics23.v1.ProofsProto.InnerOp> 
        getLookupInnersList();
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.InnerOp getLookupInners(int index);
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
     */
    int getLookupInnersCount();
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
     */
    java.util.List<? extends com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder> 
        getLookupInnersOrBuilderList();
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder getLookupInnersOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code cosmos.ics23.v1.CompressedBatchProof}
   */
  public static final class CompressedBatchProof extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.CompressedBatchProof)
      CompressedBatchProofOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CompressedBatchProof.newBuilder() to construct.
    private CompressedBatchProof(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CompressedBatchProof() {
      entries_ = java.util.Collections.emptyList();
      lookupInners_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CompressedBatchProof();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedBatchProof_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedBatchProof_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.class, com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.Builder.class);
    }

    public static final int ENTRIES_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry> entries_;
    /**
     * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
     */
    @java.lang.Override
    public java.util.List<com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry> getEntriesList() {
      return entries_;
    }
    /**
     * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntryOrBuilder> 
        getEntriesOrBuilderList() {
      return entries_;
    }
    /**
     * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
     */
    @java.lang.Override
    public int getEntriesCount() {
      return entries_.size();
    }
    /**
     * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry getEntries(int index) {
      return entries_.get(index);
    }
    /**
     * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntryOrBuilder getEntriesOrBuilder(
        int index) {
      return entries_.get(index);
    }

    public static final int LOOKUP_INNERS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<com.cosmos.ics23.v1.ProofsProto.InnerOp> lookupInners_;
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
     */
    @java.lang.Override
    public java.util.List<com.cosmos.ics23.v1.ProofsProto.InnerOp> getLookupInnersList() {
      return lookupInners_;
    }
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder> 
        getLookupInnersOrBuilderList() {
      return lookupInners_;
    }
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
     */
    @java.lang.Override
    public int getLookupInnersCount() {
      return lookupInners_.size();
    }
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.InnerOp getLookupInners(int index) {
      return lookupInners_.get(index);
    }
    /**
     * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder getLookupInnersOrBuilder(
        int index) {
      return lookupInners_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < entries_.size(); i++) {
        output.writeMessage(1, entries_.get(i));
      }
      for (int i = 0; i < lookupInners_.size(); i++) {
        output.writeMessage(2, lookupInners_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < entries_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, entries_.get(i));
      }
      for (int i = 0; i < lookupInners_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, lookupInners_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof)) {
        return super.equals(obj);
      }
      com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof other = (com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof) obj;

      if (!getEntriesList()
          .equals(other.getEntriesList())) return false;
      if (!getLookupInnersList()
          .equals(other.getLookupInnersList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getEntriesCount() > 0) {
        hash = (37 * hash) + ENTRIES_FIELD_NUMBER;
        hash = (53 * hash) + getEntriesList().hashCode();
      }
      if (getLookupInnersCount() > 0) {
        hash = (37 * hash) + LOOKUP_INNERS_FIELD_NUMBER;
        hash = (53 * hash) + getLookupInnersList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cosmos.ics23.v1.CompressedBatchProof}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.CompressedBatchProof)
        com.cosmos.ics23.v1.ProofsProto.CompressedBatchProofOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedBatchProof_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedBatchProof_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.class, com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.Builder.class);
      }

      // Construct using com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (entriesBuilder_ == null) {
          entries_ = java.util.Collections.emptyList();
        } else {
          entries_ = null;
          entriesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (lookupInnersBuilder_ == null) {
          lookupInners_ = java.util.Collections.emptyList();
        } else {
          lookupInners_ = null;
          lookupInnersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedBatchProof_descriptor;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof getDefaultInstanceForType() {
        return com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.getDefaultInstance();
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof build() {
        com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof buildPartial() {
        com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof result = new com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof result) {
        if (entriesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            entries_ = java.util.Collections.unmodifiableList(entries_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.entries_ = entries_;
        } else {
          result.entries_ = entriesBuilder_.build();
        }
        if (lookupInnersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            lookupInners_ = java.util.Collections.unmodifiableList(lookupInners_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.lookupInners_ = lookupInners_;
        } else {
          result.lookupInners_ = lookupInnersBuilder_.build();
        }
      }

      private void buildPartial0(com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof) {
          return mergeFrom((com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof other) {
        if (other == com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof.getDefaultInstance()) return this;
        if (entriesBuilder_ == null) {
          if (!other.entries_.isEmpty()) {
            if (entries_.isEmpty()) {
              entries_ = other.entries_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureEntriesIsMutable();
              entries_.addAll(other.entries_);
            }
            onChanged();
          }
        } else {
          if (!other.entries_.isEmpty()) {
            if (entriesBuilder_.isEmpty()) {
              entriesBuilder_.dispose();
              entriesBuilder_ = null;
              entries_ = other.entries_;
              bitField0_ = (bitField0_ & ~0x00000001);
              entriesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getEntriesFieldBuilder() : null;
            } else {
              entriesBuilder_.addAllMessages(other.entries_);
            }
          }
        }
        if (lookupInnersBuilder_ == null) {
          if (!other.lookupInners_.isEmpty()) {
            if (lookupInners_.isEmpty()) {
              lookupInners_ = other.lookupInners_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureLookupInnersIsMutable();
              lookupInners_.addAll(other.lookupInners_);
            }
            onChanged();
          }
        } else {
          if (!other.lookupInners_.isEmpty()) {
            if (lookupInnersBuilder_.isEmpty()) {
              lookupInnersBuilder_.dispose();
              lookupInnersBuilder_ = null;
              lookupInners_ = other.lookupInners_;
              bitField0_ = (bitField0_ & ~0x00000002);
              lookupInnersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getLookupInnersFieldBuilder() : null;
            } else {
              lookupInnersBuilder_.addAllMessages(other.lookupInners_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry m =
                    input.readMessage(
                        com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.parser(),
                        extensionRegistry);
                if (entriesBuilder_ == null) {
                  ensureEntriesIsMutable();
                  entries_.add(m);
                } else {
                  entriesBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                com.cosmos.ics23.v1.ProofsProto.InnerOp m =
                    input.readMessage(
                        com.cosmos.ics23.v1.ProofsProto.InnerOp.parser(),
                        extensionRegistry);
                if (lookupInnersBuilder_ == null) {
                  ensureLookupInnersIsMutable();
                  lookupInners_.add(m);
                } else {
                  lookupInnersBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry> entries_ =
        java.util.Collections.emptyList();
      private void ensureEntriesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          entries_ = new java.util.ArrayList<com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry>(entries_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry, com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntryOrBuilder> entriesBuilder_;

      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public java.util.List<com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry> getEntriesList() {
        if (entriesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(entries_);
        } else {
          return entriesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public int getEntriesCount() {
        if (entriesBuilder_ == null) {
          return entries_.size();
        } else {
          return entriesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry getEntries(int index) {
        if (entriesBuilder_ == null) {
          return entries_.get(index);
        } else {
          return entriesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder setEntries(
          int index, com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry value) {
        if (entriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntriesIsMutable();
          entries_.set(index, value);
          onChanged();
        } else {
          entriesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder setEntries(
          int index, com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.Builder builderForValue) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          entries_.set(index, builderForValue.build());
          onChanged();
        } else {
          entriesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder addEntries(com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry value) {
        if (entriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntriesIsMutable();
          entries_.add(value);
          onChanged();
        } else {
          entriesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder addEntries(
          int index, com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry value) {
        if (entriesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureEntriesIsMutable();
          entries_.add(index, value);
          onChanged();
        } else {
          entriesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder addEntries(
          com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.Builder builderForValue) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          entries_.add(builderForValue.build());
          onChanged();
        } else {
          entriesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder addEntries(
          int index, com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.Builder builderForValue) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          entries_.add(index, builderForValue.build());
          onChanged();
        } else {
          entriesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder addAllEntries(
          java.lang.Iterable<? extends com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry> values) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, entries_);
          onChanged();
        } else {
          entriesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder clearEntries() {
        if (entriesBuilder_ == null) {
          entries_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          entriesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public Builder removeEntries(int index) {
        if (entriesBuilder_ == null) {
          ensureEntriesIsMutable();
          entries_.remove(index);
          onChanged();
        } else {
          entriesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.Builder getEntriesBuilder(
          int index) {
        return getEntriesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntryOrBuilder getEntriesOrBuilder(
          int index) {
        if (entriesBuilder_ == null) {
          return entries_.get(index);  } else {
          return entriesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public java.util.List<? extends com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntryOrBuilder> 
           getEntriesOrBuilderList() {
        if (entriesBuilder_ != null) {
          return entriesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(entries_);
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.Builder addEntriesBuilder() {
        return getEntriesFieldBuilder().addBuilder(
            com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.Builder addEntriesBuilder(
          int index) {
        return getEntriesFieldBuilder().addBuilder(
            index, com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.getDefaultInstance());
      }
      /**
       * <code>repeated .cosmos.ics23.v1.CompressedBatchEntry entries = 1 [json_name = "entries"];</code>
       */
      public java.util.List<com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.Builder> 
           getEntriesBuilderList() {
        return getEntriesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry, com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntryOrBuilder> 
          getEntriesFieldBuilder() {
        if (entriesBuilder_ == null) {
          entriesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry, com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntryOrBuilder>(
                  entries_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          entries_ = null;
        }
        return entriesBuilder_;
      }

      private java.util.List<com.cosmos.ics23.v1.ProofsProto.InnerOp> lookupInners_ =
        java.util.Collections.emptyList();
      private void ensureLookupInnersIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          lookupInners_ = new java.util.ArrayList<com.cosmos.ics23.v1.ProofsProto.InnerOp>(lookupInners_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.InnerOp, com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder, com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder> lookupInnersBuilder_;

      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public java.util.List<com.cosmos.ics23.v1.ProofsProto.InnerOp> getLookupInnersList() {
        if (lookupInnersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(lookupInners_);
        } else {
          return lookupInnersBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public int getLookupInnersCount() {
        if (lookupInnersBuilder_ == null) {
          return lookupInners_.size();
        } else {
          return lookupInnersBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.InnerOp getLookupInners(int index) {
        if (lookupInnersBuilder_ == null) {
          return lookupInners_.get(index);
        } else {
          return lookupInnersBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public Builder setLookupInners(
          int index, com.cosmos.ics23.v1.ProofsProto.InnerOp value) {
        if (lookupInnersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLookupInnersIsMutable();
          lookupInners_.set(index, value);
          onChanged();
        } else {
          lookupInnersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public Builder setLookupInners(
          int index, com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder builderForValue) {
        if (lookupInnersBuilder_ == null) {
          ensureLookupInnersIsMutable();
          lookupInners_.set(index, builderForValue.build());
          onChanged();
        } else {
          lookupInnersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public Builder addLookupInners(com.cosmos.ics23.v1.ProofsProto.InnerOp value) {
        if (lookupInnersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLookupInnersIsMutable();
          lookupInners_.add(value);
          onChanged();
        } else {
          lookupInnersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public Builder addLookupInners(
          int index, com.cosmos.ics23.v1.ProofsProto.InnerOp value) {
        if (lookupInnersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureLookupInnersIsMutable();
          lookupInners_.add(index, value);
          onChanged();
        } else {
          lookupInnersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public Builder addLookupInners(
          com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder builderForValue) {
        if (lookupInnersBuilder_ == null) {
          ensureLookupInnersIsMutable();
          lookupInners_.add(builderForValue.build());
          onChanged();
        } else {
          lookupInnersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public Builder addLookupInners(
          int index, com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder builderForValue) {
        if (lookupInnersBuilder_ == null) {
          ensureLookupInnersIsMutable();
          lookupInners_.add(index, builderForValue.build());
          onChanged();
        } else {
          lookupInnersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public Builder addAllLookupInners(
          java.lang.Iterable<? extends com.cosmos.ics23.v1.ProofsProto.InnerOp> values) {
        if (lookupInnersBuilder_ == null) {
          ensureLookupInnersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, lookupInners_);
          onChanged();
        } else {
          lookupInnersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public Builder clearLookupInners() {
        if (lookupInnersBuilder_ == null) {
          lookupInners_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          lookupInnersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public Builder removeLookupInners(int index) {
        if (lookupInnersBuilder_ == null) {
          ensureLookupInnersIsMutable();
          lookupInners_.remove(index);
          onChanged();
        } else {
          lookupInnersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder getLookupInnersBuilder(
          int index) {
        return getLookupInnersFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder getLookupInnersOrBuilder(
          int index) {
        if (lookupInnersBuilder_ == null) {
          return lookupInners_.get(index);  } else {
          return lookupInnersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public java.util.List<? extends com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder> 
           getLookupInnersOrBuilderList() {
        if (lookupInnersBuilder_ != null) {
          return lookupInnersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(lookupInners_);
        }
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder addLookupInnersBuilder() {
        return getLookupInnersFieldBuilder().addBuilder(
            com.cosmos.ics23.v1.ProofsProto.InnerOp.getDefaultInstance());
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder addLookupInnersBuilder(
          int index) {
        return getLookupInnersFieldBuilder().addBuilder(
            index, com.cosmos.ics23.v1.ProofsProto.InnerOp.getDefaultInstance());
      }
      /**
       * <code>repeated .cosmos.ics23.v1.InnerOp lookup_inners = 2 [json_name = "lookupInners"];</code>
       */
      public java.util.List<com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder> 
           getLookupInnersBuilderList() {
        return getLookupInnersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.InnerOp, com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder, com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder> 
          getLookupInnersFieldBuilder() {
        if (lookupInnersBuilder_ == null) {
          lookupInnersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.InnerOp, com.cosmos.ics23.v1.ProofsProto.InnerOp.Builder, com.cosmos.ics23.v1.ProofsProto.InnerOpOrBuilder>(
                  lookupInners_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          lookupInners_ = null;
        }
        return lookupInnersBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.CompressedBatchProof)
    }

    // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.CompressedBatchProof)
    private static final com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof();
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CompressedBatchProof>
        PARSER = new com.google.protobuf.AbstractParser<CompressedBatchProof>() {
      @java.lang.Override
      public CompressedBatchProof parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CompressedBatchProof> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CompressedBatchProof> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedBatchProof getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CompressedBatchEntryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.ics23.v1.CompressedBatchEntry)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
     * @return Whether the exist field is set.
     */
    boolean hasExist();
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
     * @return The exist.
     */
    com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof getExist();
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder getExistOrBuilder();

    /**
     * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     * @return Whether the nonexist field is set.
     */
    boolean hasNonexist();
    /**
     * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     * @return The nonexist.
     */
    com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof getNonexist();
    /**
     * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProofOrBuilder getNonexistOrBuilder();

    com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.ProofCase getProofCase();
  }
  /**
   * <pre>
   * Use BatchEntry not CommitmentProof, to avoid recursion
   * </pre>
   *
   * Protobuf type {@code cosmos.ics23.v1.CompressedBatchEntry}
   */
  public static final class CompressedBatchEntry extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.CompressedBatchEntry)
      CompressedBatchEntryOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CompressedBatchEntry.newBuilder() to construct.
    private CompressedBatchEntry(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CompressedBatchEntry() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CompressedBatchEntry();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedBatchEntry_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedBatchEntry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.class, com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.Builder.class);
    }

    private int proofCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object proof_;
    public enum ProofCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      EXIST(1),
      NONEXIST(2),
      PROOF_NOT_SET(0);
      private final int value;
      private ProofCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ProofCase valueOf(int value) {
        return forNumber(value);
      }

      public static ProofCase forNumber(int value) {
        switch (value) {
          case 1: return EXIST;
          case 2: return NONEXIST;
          case 0: return PROOF_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ProofCase
    getProofCase() {
      return ProofCase.forNumber(
          proofCase_);
    }

    public static final int EXIST_FIELD_NUMBER = 1;
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
     * @return Whether the exist field is set.
     */
    @java.lang.Override
    public boolean hasExist() {
      return proofCase_ == 1;
    }
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
     * @return The exist.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof getExist() {
      if (proofCase_ == 1) {
         return (com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance();
    }
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder getExistOrBuilder() {
      if (proofCase_ == 1) {
         return (com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance();
    }

    public static final int NONEXIST_FIELD_NUMBER = 2;
    /**
     * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     * @return Whether the nonexist field is set.
     */
    @java.lang.Override
    public boolean hasNonexist() {
      return proofCase_ == 2;
    }
    /**
     * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     * @return The nonexist.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof getNonexist() {
      if (proofCase_ == 2) {
         return (com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.getDefaultInstance();
    }
    /**
     * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProofOrBuilder getNonexistOrBuilder() {
      if (proofCase_ == 2) {
         return (com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof) proof_;
      }
      return com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (proofCase_ == 1) {
        output.writeMessage(1, (com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof) proof_);
      }
      if (proofCase_ == 2) {
        output.writeMessage(2, (com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof) proof_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (proofCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof) proof_);
      }
      if (proofCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof) proof_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry)) {
        return super.equals(obj);
      }
      com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry other = (com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry) obj;

      if (!getProofCase().equals(other.getProofCase())) return false;
      switch (proofCase_) {
        case 1:
          if (!getExist()
              .equals(other.getExist())) return false;
          break;
        case 2:
          if (!getNonexist()
              .equals(other.getNonexist())) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (proofCase_) {
        case 1:
          hash = (37 * hash) + EXIST_FIELD_NUMBER;
          hash = (53 * hash) + getExist().hashCode();
          break;
        case 2:
          hash = (37 * hash) + NONEXIST_FIELD_NUMBER;
          hash = (53 * hash) + getNonexist().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Use BatchEntry not CommitmentProof, to avoid recursion
     * </pre>
     *
     * Protobuf type {@code cosmos.ics23.v1.CompressedBatchEntry}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.CompressedBatchEntry)
        com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedBatchEntry_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedBatchEntry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.class, com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.Builder.class);
      }

      // Construct using com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (existBuilder_ != null) {
          existBuilder_.clear();
        }
        if (nonexistBuilder_ != null) {
          nonexistBuilder_.clear();
        }
        proofCase_ = 0;
        proof_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedBatchEntry_descriptor;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry getDefaultInstanceForType() {
        return com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.getDefaultInstance();
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry build() {
        com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry buildPartial() {
        com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry result = new com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry result) {
        int from_bitField0_ = bitField0_;
      }

      private void buildPartialOneofs(com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry result) {
        result.proofCase_ = proofCase_;
        result.proof_ = this.proof_;
        if (proofCase_ == 1 &&
            existBuilder_ != null) {
          result.proof_ = existBuilder_.build();
        }
        if (proofCase_ == 2 &&
            nonexistBuilder_ != null) {
          result.proof_ = nonexistBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry) {
          return mergeFrom((com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry other) {
        if (other == com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry.getDefaultInstance()) return this;
        switch (other.getProofCase()) {
          case EXIST: {
            mergeExist(other.getExist());
            break;
          }
          case NONEXIST: {
            mergeNonexist(other.getNonexist());
            break;
          }
          case PROOF_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getExistFieldBuilder().getBuilder(),
                    extensionRegistry);
                proofCase_ = 1;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getNonexistFieldBuilder().getBuilder(),
                    extensionRegistry);
                proofCase_ = 2;
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int proofCase_ = 0;
      private java.lang.Object proof_;
      public ProofCase
          getProofCase() {
        return ProofCase.forNumber(
            proofCase_);
      }

      public Builder clearProof() {
        proofCase_ = 0;
        proof_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder> existBuilder_;
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
       * @return Whether the exist field is set.
       */
      @java.lang.Override
      public boolean hasExist() {
        return proofCase_ == 1;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
       * @return The exist.
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof getExist() {
        if (existBuilder_ == null) {
          if (proofCase_ == 1) {
            return (com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance();
        } else {
          if (proofCase_ == 1) {
            return existBuilder_.getMessage();
          }
          return com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public Builder setExist(com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof value) {
        if (existBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          proof_ = value;
          onChanged();
        } else {
          existBuilder_.setMessage(value);
        }
        proofCase_ = 1;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public Builder setExist(
          com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder builderForValue) {
        if (existBuilder_ == null) {
          proof_ = builderForValue.build();
          onChanged();
        } else {
          existBuilder_.setMessage(builderForValue.build());
        }
        proofCase_ = 1;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public Builder mergeExist(com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof value) {
        if (existBuilder_ == null) {
          if (proofCase_ == 1 &&
              proof_ != com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance()) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.newBuilder((com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof) proof_)
                .mergeFrom(value).buildPartial();
          } else {
            proof_ = value;
          }
          onChanged();
        } else {
          if (proofCase_ == 1) {
            existBuilder_.mergeFrom(value);
          } else {
            existBuilder_.setMessage(value);
          }
        }
        proofCase_ = 1;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public Builder clearExist() {
        if (existBuilder_ == null) {
          if (proofCase_ == 1) {
            proofCase_ = 0;
            proof_ = null;
            onChanged();
          }
        } else {
          if (proofCase_ == 1) {
            proofCase_ = 0;
            proof_ = null;
          }
          existBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder getExistBuilder() {
        return getExistFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder getExistOrBuilder() {
        if ((proofCase_ == 1) && (existBuilder_ != null)) {
          return existBuilder_.getMessageOrBuilder();
        } else {
          if (proofCase_ == 1) {
            return (com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof exist = 1 [json_name = "exist"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder> 
          getExistFieldBuilder() {
        if (existBuilder_ == null) {
          if (!(proofCase_ == 1)) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance();
          }
          existBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder>(
                  (com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof) proof_,
                  getParentForChildren(),
                  isClean());
          proof_ = null;
        }
        proofCase_ = 1;
        onChanged();
        return existBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof, com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProofOrBuilder> nonexistBuilder_;
      /**
       * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       * @return Whether the nonexist field is set.
       */
      @java.lang.Override
      public boolean hasNonexist() {
        return proofCase_ == 2;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       * @return The nonexist.
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof getNonexist() {
        if (nonexistBuilder_ == null) {
          if (proofCase_ == 2) {
            return (com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.getDefaultInstance();
        } else {
          if (proofCase_ == 2) {
            return nonexistBuilder_.getMessage();
          }
          return com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public Builder setNonexist(com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof value) {
        if (nonexistBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          proof_ = value;
          onChanged();
        } else {
          nonexistBuilder_.setMessage(value);
        }
        proofCase_ = 2;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public Builder setNonexist(
          com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.Builder builderForValue) {
        if (nonexistBuilder_ == null) {
          proof_ = builderForValue.build();
          onChanged();
        } else {
          nonexistBuilder_.setMessage(builderForValue.build());
        }
        proofCase_ = 2;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public Builder mergeNonexist(com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof value) {
        if (nonexistBuilder_ == null) {
          if (proofCase_ == 2 &&
              proof_ != com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.getDefaultInstance()) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.newBuilder((com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof) proof_)
                .mergeFrom(value).buildPartial();
          } else {
            proof_ = value;
          }
          onChanged();
        } else {
          if (proofCase_ == 2) {
            nonexistBuilder_.mergeFrom(value);
          } else {
            nonexistBuilder_.setMessage(value);
          }
        }
        proofCase_ = 2;
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public Builder clearNonexist() {
        if (nonexistBuilder_ == null) {
          if (proofCase_ == 2) {
            proofCase_ = 0;
            proof_ = null;
            onChanged();
          }
        } else {
          if (proofCase_ == 2) {
            proofCase_ = 0;
            proof_ = null;
          }
          nonexistBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.Builder getNonexistBuilder() {
        return getNonexistFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProofOrBuilder getNonexistOrBuilder() {
        if ((proofCase_ == 2) && (nonexistBuilder_ != null)) {
          return nonexistBuilder_.getMessageOrBuilder();
        } else {
          if (proofCase_ == 2) {
            return (com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof) proof_;
          }
          return com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.getDefaultInstance();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedNonExistenceProof nonexist = 2 [json_name = "nonexist"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof, com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProofOrBuilder> 
          getNonexistFieldBuilder() {
        if (nonexistBuilder_ == null) {
          if (!(proofCase_ == 2)) {
            proof_ = com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.getDefaultInstance();
          }
          nonexistBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof, com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProofOrBuilder>(
                  (com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof) proof_,
                  getParentForChildren(),
                  isClean());
          proof_ = null;
        }
        proofCase_ = 2;
        onChanged();
        return nonexistBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.CompressedBatchEntry)
    }

    // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.CompressedBatchEntry)
    private static final com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry();
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CompressedBatchEntry>
        PARSER = new com.google.protobuf.AbstractParser<CompressedBatchEntry>() {
      @java.lang.Override
      public CompressedBatchEntry parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CompressedBatchEntry> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CompressedBatchEntry> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedBatchEntry getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CompressedExistenceProofOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.ics23.v1.CompressedExistenceProof)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>bytes key = 1 [json_name = "key"];</code>
     * @return The key.
     */
    com.google.protobuf.ByteString getKey();

    /**
     * <code>bytes value = 2 [json_name = "value"];</code>
     * @return The value.
     */
    com.google.protobuf.ByteString getValue();

    /**
     * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
     * @return Whether the leaf field is set.
     */
    boolean hasLeaf();
    /**
     * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
     * @return The leaf.
     */
    com.cosmos.ics23.v1.ProofsProto.LeafOp getLeaf();
    /**
     * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder getLeafOrBuilder();

    /**
     * <pre>
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * </pre>
     *
     * <code>repeated int32 path = 4 [json_name = "path"];</code>
     * @return A list containing the path.
     */
    java.util.List<java.lang.Integer> getPathList();
    /**
     * <pre>
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * </pre>
     *
     * <code>repeated int32 path = 4 [json_name = "path"];</code>
     * @return The count of path.
     */
    int getPathCount();
    /**
     * <pre>
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * </pre>
     *
     * <code>repeated int32 path = 4 [json_name = "path"];</code>
     * @param index The index of the element to return.
     * @return The path at the given index.
     */
    int getPath(int index);
  }
  /**
   * Protobuf type {@code cosmos.ics23.v1.CompressedExistenceProof}
   */
  public static final class CompressedExistenceProof extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.CompressedExistenceProof)
      CompressedExistenceProofOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CompressedExistenceProof.newBuilder() to construct.
    private CompressedExistenceProof(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CompressedExistenceProof() {
      key_ = com.google.protobuf.ByteString.EMPTY;
      value_ = com.google.protobuf.ByteString.EMPTY;
      path_ = emptyIntList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CompressedExistenceProof();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedExistenceProof_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedExistenceProof_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.class, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder.class);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes key = 1 [json_name = "key"];</code>
     * @return The key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getKey() {
      return key_;
    }

    public static final int VALUE_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString value_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <code>bytes value = 2 [json_name = "value"];</code>
     * @return The value.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getValue() {
      return value_;
    }

    public static final int LEAF_FIELD_NUMBER = 3;
    private com.cosmos.ics23.v1.ProofsProto.LeafOp leaf_;
    /**
     * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
     * @return Whether the leaf field is set.
     */
    @java.lang.Override
    public boolean hasLeaf() {
      return leaf_ != null;
    }
    /**
     * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
     * @return The leaf.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.LeafOp getLeaf() {
      return leaf_ == null ? com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance() : leaf_;
    }
    /**
     * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder getLeafOrBuilder() {
      return leaf_ == null ? com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance() : leaf_;
    }

    public static final int PATH_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private com.google.protobuf.Internal.IntList path_;
    /**
     * <pre>
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * </pre>
     *
     * <code>repeated int32 path = 4 [json_name = "path"];</code>
     * @return A list containing the path.
     */
    @java.lang.Override
    public java.util.List<java.lang.Integer>
        getPathList() {
      return path_;
    }
    /**
     * <pre>
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * </pre>
     *
     * <code>repeated int32 path = 4 [json_name = "path"];</code>
     * @return The count of path.
     */
    public int getPathCount() {
      return path_.size();
    }
    /**
     * <pre>
     * these are indexes into the lookup_inners table in CompressedBatchProof
     * </pre>
     *
     * <code>repeated int32 path = 4 [json_name = "path"];</code>
     * @param index The index of the element to return.
     * @return The path at the given index.
     */
    public int getPath(int index) {
      return path_.getInt(index);
    }
    private int pathMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (!key_.isEmpty()) {
        output.writeBytes(1, key_);
      }
      if (!value_.isEmpty()) {
        output.writeBytes(2, value_);
      }
      if (leaf_ != null) {
        output.writeMessage(3, getLeaf());
      }
      if (getPathList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(pathMemoizedSerializedSize);
      }
      for (int i = 0; i < path_.size(); i++) {
        output.writeInt32NoTag(path_.getInt(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!key_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, key_);
      }
      if (!value_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, value_);
      }
      if (leaf_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLeaf());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < path_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(path_.getInt(i));
        }
        size += dataSize;
        if (!getPathList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        pathMemoizedSerializedSize = dataSize;
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof)) {
        return super.equals(obj);
      }
      com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof other = (com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof) obj;

      if (!getKey()
          .equals(other.getKey())) return false;
      if (!getValue()
          .equals(other.getValue())) return false;
      if (hasLeaf() != other.hasLeaf()) return false;
      if (hasLeaf()) {
        if (!getLeaf()
            .equals(other.getLeaf())) return false;
      }
      if (!getPathList()
          .equals(other.getPathList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
      hash = (37 * hash) + VALUE_FIELD_NUMBER;
      hash = (53 * hash) + getValue().hashCode();
      if (hasLeaf()) {
        hash = (37 * hash) + LEAF_FIELD_NUMBER;
        hash = (53 * hash) + getLeaf().hashCode();
      }
      if (getPathCount() > 0) {
        hash = (37 * hash) + PATH_FIELD_NUMBER;
        hash = (53 * hash) + getPathList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cosmos.ics23.v1.CompressedExistenceProof}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.CompressedExistenceProof)
        com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedExistenceProof_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedExistenceProof_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.class, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder.class);
      }

      // Construct using com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        key_ = com.google.protobuf.ByteString.EMPTY;
        value_ = com.google.protobuf.ByteString.EMPTY;
        leaf_ = null;
        if (leafBuilder_ != null) {
          leafBuilder_.dispose();
          leafBuilder_ = null;
        }
        path_ = emptyIntList();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedExistenceProof_descriptor;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof getDefaultInstanceForType() {
        return com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance();
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof build() {
        com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof buildPartial() {
        com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof result = new com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof result) {
        if (((bitField0_ & 0x00000008) != 0)) {
          path_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.path_ = path_;
      }

      private void buildPartial0(com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.key_ = key_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.value_ = value_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.leaf_ = leafBuilder_ == null
              ? leaf_
              : leafBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof) {
          return mergeFrom((com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof other) {
        if (other == com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance()) return this;
        if (other.getKey() != com.google.protobuf.ByteString.EMPTY) {
          setKey(other.getKey());
        }
        if (other.getValue() != com.google.protobuf.ByteString.EMPTY) {
          setValue(other.getValue());
        }
        if (other.hasLeaf()) {
          mergeLeaf(other.getLeaf());
        }
        if (!other.path_.isEmpty()) {
          if (path_.isEmpty()) {
            path_ = other.path_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensurePathIsMutable();
            path_.addAll(other.path_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                key_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                value_ = input.readBytes();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getLeafFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                int v = input.readInt32();
                ensurePathIsMutable();
                path_.addInt(v);
                break;
              } // case 32
              case 34: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                ensurePathIsMutable();
                while (input.getBytesUntilLimit() > 0) {
                  path_.addInt(input.readInt32());
                }
                input.popLimit(limit);
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes key = 1 [json_name = "key"];</code>
       * @return The key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getKey() {
        return key_;
      }
      /**
       * <code>bytes key = 1 [json_name = "key"];</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        key_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>bytes key = 1 [json_name = "key"];</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        bitField0_ = (bitField0_ & ~0x00000001);
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString value_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>bytes value = 2 [json_name = "value"];</code>
       * @return The value.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getValue() {
        return value_;
      }
      /**
       * <code>bytes value = 2 [json_name = "value"];</code>
       * @param value The value to set.
       * @return This builder for chaining.
       */
      public Builder setValue(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        value_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>bytes value = 2 [json_name = "value"];</code>
       * @return This builder for chaining.
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = getDefaultInstance().getValue();
        onChanged();
        return this;
      }

      private com.cosmos.ics23.v1.ProofsProto.LeafOp leaf_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.LeafOp, com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder, com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder> leafBuilder_;
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       * @return Whether the leaf field is set.
       */
      public boolean hasLeaf() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       * @return The leaf.
       */
      public com.cosmos.ics23.v1.ProofsProto.LeafOp getLeaf() {
        if (leafBuilder_ == null) {
          return leaf_ == null ? com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance() : leaf_;
        } else {
          return leafBuilder_.getMessage();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       */
      public Builder setLeaf(com.cosmos.ics23.v1.ProofsProto.LeafOp value) {
        if (leafBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          leaf_ = value;
        } else {
          leafBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       */
      public Builder setLeaf(
          com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder builderForValue) {
        if (leafBuilder_ == null) {
          leaf_ = builderForValue.build();
        } else {
          leafBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       */
      public Builder mergeLeaf(com.cosmos.ics23.v1.ProofsProto.LeafOp value) {
        if (leafBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            leaf_ != null &&
            leaf_ != com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance()) {
            getLeafBuilder().mergeFrom(value);
          } else {
            leaf_ = value;
          }
        } else {
          leafBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       */
      public Builder clearLeaf() {
        bitField0_ = (bitField0_ & ~0x00000004);
        leaf_ = null;
        if (leafBuilder_ != null) {
          leafBuilder_.dispose();
          leafBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder getLeafBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getLeafFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder getLeafOrBuilder() {
        if (leafBuilder_ != null) {
          return leafBuilder_.getMessageOrBuilder();
        } else {
          return leaf_ == null ?
              com.cosmos.ics23.v1.ProofsProto.LeafOp.getDefaultInstance() : leaf_;
        }
      }
      /**
       * <code>.cosmos.ics23.v1.LeafOp leaf = 3 [json_name = "leaf"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.LeafOp, com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder, com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder> 
          getLeafFieldBuilder() {
        if (leafBuilder_ == null) {
          leafBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.LeafOp, com.cosmos.ics23.v1.ProofsProto.LeafOp.Builder, com.cosmos.ics23.v1.ProofsProto.LeafOpOrBuilder>(
                  getLeaf(),
                  getParentForChildren(),
                  isClean());
          leaf_ = null;
        }
        return leafBuilder_;
      }

      private com.google.protobuf.Internal.IntList path_ = emptyIntList();
      private void ensurePathIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          path_ = mutableCopy(path_);
          bitField0_ |= 0x00000008;
        }
      }
      /**
       * <pre>
       * these are indexes into the lookup_inners table in CompressedBatchProof
       * </pre>
       *
       * <code>repeated int32 path = 4 [json_name = "path"];</code>
       * @return A list containing the path.
       */
      public java.util.List<java.lang.Integer>
          getPathList() {
        return ((bitField0_ & 0x00000008) != 0) ?
                 java.util.Collections.unmodifiableList(path_) : path_;
      }
      /**
       * <pre>
       * these are indexes into the lookup_inners table in CompressedBatchProof
       * </pre>
       *
       * <code>repeated int32 path = 4 [json_name = "path"];</code>
       * @return The count of path.
       */
      public int getPathCount() {
        return path_.size();
      }
      /**
       * <pre>
       * these are indexes into the lookup_inners table in CompressedBatchProof
       * </pre>
       *
       * <code>repeated int32 path = 4 [json_name = "path"];</code>
       * @param index The index of the element to return.
       * @return The path at the given index.
       */
      public int getPath(int index) {
        return path_.getInt(index);
      }
      /**
       * <pre>
       * these are indexes into the lookup_inners table in CompressedBatchProof
       * </pre>
       *
       * <code>repeated int32 path = 4 [json_name = "path"];</code>
       * @param index The index to set the value at.
       * @param value The path to set.
       * @return This builder for chaining.
       */
      public Builder setPath(
          int index, int value) {

        ensurePathIsMutable();
        path_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * these are indexes into the lookup_inners table in CompressedBatchProof
       * </pre>
       *
       * <code>repeated int32 path = 4 [json_name = "path"];</code>
       * @param value The path to add.
       * @return This builder for chaining.
       */
      public Builder addPath(int value) {

        ensurePathIsMutable();
        path_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * these are indexes into the lookup_inners table in CompressedBatchProof
       * </pre>
       *
       * <code>repeated int32 path = 4 [json_name = "path"];</code>
       * @param values The path to add.
       * @return This builder for chaining.
       */
      public Builder addAllPath(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePathIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, path_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * these are indexes into the lookup_inners table in CompressedBatchProof
       * </pre>
       *
       * <code>repeated int32 path = 4 [json_name = "path"];</code>
       * @return This builder for chaining.
       */
      public Builder clearPath() {
        path_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.CompressedExistenceProof)
    }

    // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.CompressedExistenceProof)
    private static final com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof();
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CompressedExistenceProof>
        PARSER = new com.google.protobuf.AbstractParser<CompressedExistenceProof>() {
      @java.lang.Override
      public CompressedExistenceProof parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CompressedExistenceProof> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CompressedExistenceProof> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CompressedNonExistenceProofOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cosmos.ics23.v1.CompressedNonExistenceProof)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * TODO: remove this as unnecessary??? we prove a range
     * </pre>
     *
     * <code>bytes key = 1 [json_name = "key"];</code>
     * @return The key.
     */
    com.google.protobuf.ByteString getKey();

    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
     * @return Whether the left field is set.
     */
    boolean hasLeft();
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
     * @return The left.
     */
    com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof getLeft();
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder getLeftOrBuilder();

    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
     * @return Whether the right field is set.
     */
    boolean hasRight();
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
     * @return The right.
     */
    com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof getRight();
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
     */
    com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder getRightOrBuilder();
  }
  /**
   * Protobuf type {@code cosmos.ics23.v1.CompressedNonExistenceProof}
   */
  public static final class CompressedNonExistenceProof extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cosmos.ics23.v1.CompressedNonExistenceProof)
      CompressedNonExistenceProofOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CompressedNonExistenceProof.newBuilder() to construct.
    private CompressedNonExistenceProof(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CompressedNonExistenceProof() {
      key_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CompressedNonExistenceProof();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedNonExistenceProof_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedNonExistenceProof_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.class, com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.Builder.class);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * TODO: remove this as unnecessary??? we prove a range
     * </pre>
     *
     * <code>bytes key = 1 [json_name = "key"];</code>
     * @return The key.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getKey() {
      return key_;
    }

    public static final int LEFT_FIELD_NUMBER = 2;
    private com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof left_;
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
     * @return Whether the left field is set.
     */
    @java.lang.Override
    public boolean hasLeft() {
      return left_ != null;
    }
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
     * @return The left.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof getLeft() {
      return left_ == null ? com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance() : left_;
    }
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder getLeftOrBuilder() {
      return left_ == null ? com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance() : left_;
    }

    public static final int RIGHT_FIELD_NUMBER = 3;
    private com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof right_;
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
     * @return Whether the right field is set.
     */
    @java.lang.Override
    public boolean hasRight() {
      return right_ != null;
    }
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
     * @return The right.
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof getRight() {
      return right_ == null ? com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance() : right_;
    }
    /**
     * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
     */
    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder getRightOrBuilder() {
      return right_ == null ? com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance() : right_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!key_.isEmpty()) {
        output.writeBytes(1, key_);
      }
      if (left_ != null) {
        output.writeMessage(2, getLeft());
      }
      if (right_ != null) {
        output.writeMessage(3, getRight());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!key_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, key_);
      }
      if (left_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getLeft());
      }
      if (right_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getRight());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof)) {
        return super.equals(obj);
      }
      com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof other = (com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof) obj;

      if (!getKey()
          .equals(other.getKey())) return false;
      if (hasLeft() != other.hasLeft()) return false;
      if (hasLeft()) {
        if (!getLeft()
            .equals(other.getLeft())) return false;
      }
      if (hasRight() != other.hasRight()) return false;
      if (hasRight()) {
        if (!getRight()
            .equals(other.getRight())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
      if (hasLeft()) {
        hash = (37 * hash) + LEFT_FIELD_NUMBER;
        hash = (53 * hash) + getLeft().hashCode();
      }
      if (hasRight()) {
        hash = (37 * hash) + RIGHT_FIELD_NUMBER;
        hash = (53 * hash) + getRight().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cosmos.ics23.v1.CompressedNonExistenceProof}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cosmos.ics23.v1.CompressedNonExistenceProof)
        com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProofOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedNonExistenceProof_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedNonExistenceProof_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.class, com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.Builder.class);
      }

      // Construct using com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        key_ = com.google.protobuf.ByteString.EMPTY;
        left_ = null;
        if (leftBuilder_ != null) {
          leftBuilder_.dispose();
          leftBuilder_ = null;
        }
        right_ = null;
        if (rightBuilder_ != null) {
          rightBuilder_.dispose();
          rightBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.cosmos.ics23.v1.ProofsProto.internal_static_cosmos_ics23_v1_CompressedNonExistenceProof_descriptor;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof getDefaultInstanceForType() {
        return com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.getDefaultInstance();
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof build() {
        com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof buildPartial() {
        com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof result = new com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.key_ = key_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.left_ = leftBuilder_ == null
              ? left_
              : leftBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.right_ = rightBuilder_ == null
              ? right_
              : rightBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof) {
          return mergeFrom((com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof other) {
        if (other == com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof.getDefaultInstance()) return this;
        if (other.getKey() != com.google.protobuf.ByteString.EMPTY) {
          setKey(other.getKey());
        }
        if (other.hasLeft()) {
          mergeLeft(other.getLeft());
        }
        if (other.hasRight()) {
          mergeRight(other.getRight());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                key_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getLeftFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getRightFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString key_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * TODO: remove this as unnecessary??? we prove a range
       * </pre>
       *
       * <code>bytes key = 1 [json_name = "key"];</code>
       * @return The key.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getKey() {
        return key_;
      }
      /**
       * <pre>
       * TODO: remove this as unnecessary??? we prove a range
       * </pre>
       *
       * <code>bytes key = 1 [json_name = "key"];</code>
       * @param value The key to set.
       * @return This builder for chaining.
       */
      public Builder setKey(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        key_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * TODO: remove this as unnecessary??? we prove a range
       * </pre>
       *
       * <code>bytes key = 1 [json_name = "key"];</code>
       * @return This builder for chaining.
       */
      public Builder clearKey() {
        bitField0_ = (bitField0_ & ~0x00000001);
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }

      private com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof left_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder> leftBuilder_;
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
       * @return Whether the left field is set.
       */
      public boolean hasLeft() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
       * @return The left.
       */
      public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof getLeft() {
        if (leftBuilder_ == null) {
          return left_ == null ? com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance() : left_;
        } else {
          return leftBuilder_.getMessage();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
       */
      public Builder setLeft(com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof value) {
        if (leftBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          left_ = value;
        } else {
          leftBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
       */
      public Builder setLeft(
          com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder builderForValue) {
        if (leftBuilder_ == null) {
          left_ = builderForValue.build();
        } else {
          leftBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
       */
      public Builder mergeLeft(com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof value) {
        if (leftBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            left_ != null &&
            left_ != com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance()) {
            getLeftBuilder().mergeFrom(value);
          } else {
            left_ = value;
          }
        } else {
          leftBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
       */
      public Builder clearLeft() {
        bitField0_ = (bitField0_ & ~0x00000002);
        left_ = null;
        if (leftBuilder_ != null) {
          leftBuilder_.dispose();
          leftBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder getLeftBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getLeftFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder getLeftOrBuilder() {
        if (leftBuilder_ != null) {
          return leftBuilder_.getMessageOrBuilder();
        } else {
          return left_ == null ?
              com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance() : left_;
        }
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof left = 2 [json_name = "left"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder> 
          getLeftFieldBuilder() {
        if (leftBuilder_ == null) {
          leftBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder>(
                  getLeft(),
                  getParentForChildren(),
                  isClean());
          left_ = null;
        }
        return leftBuilder_;
      }

      private com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof right_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder> rightBuilder_;
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
       * @return Whether the right field is set.
       */
      public boolean hasRight() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
       * @return The right.
       */
      public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof getRight() {
        if (rightBuilder_ == null) {
          return right_ == null ? com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance() : right_;
        } else {
          return rightBuilder_.getMessage();
        }
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
       */
      public Builder setRight(com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof value) {
        if (rightBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          right_ = value;
        } else {
          rightBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
       */
      public Builder setRight(
          com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder builderForValue) {
        if (rightBuilder_ == null) {
          right_ = builderForValue.build();
        } else {
          rightBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
       */
      public Builder mergeRight(com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof value) {
        if (rightBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            right_ != null &&
            right_ != com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance()) {
            getRightBuilder().mergeFrom(value);
          } else {
            right_ = value;
          }
        } else {
          rightBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
       */
      public Builder clearRight() {
        bitField0_ = (bitField0_ & ~0x00000004);
        right_ = null;
        if (rightBuilder_ != null) {
          rightBuilder_.dispose();
          rightBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder getRightBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getRightFieldBuilder().getBuilder();
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
       */
      public com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder getRightOrBuilder() {
        if (rightBuilder_ != null) {
          return rightBuilder_.getMessageOrBuilder();
        } else {
          return right_ == null ?
              com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.getDefaultInstance() : right_;
        }
      }
      /**
       * <code>.cosmos.ics23.v1.CompressedExistenceProof right = 3 [json_name = "right"];</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder> 
          getRightFieldBuilder() {
        if (rightBuilder_ == null) {
          rightBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProof.Builder, com.cosmos.ics23.v1.ProofsProto.CompressedExistenceProofOrBuilder>(
                  getRight(),
                  getParentForChildren(),
                  isClean());
          right_ = null;
        }
        return rightBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cosmos.ics23.v1.CompressedNonExistenceProof)
    }

    // @@protoc_insertion_point(class_scope:cosmos.ics23.v1.CompressedNonExistenceProof)
    private static final com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof();
    }

    public static com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CompressedNonExistenceProof>
        PARSER = new com.google.protobuf.AbstractParser<CompressedNonExistenceProof>() {
      @java.lang.Override
      public CompressedNonExistenceProof parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CompressedNonExistenceProof> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CompressedNonExistenceProof> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.cosmos.ics23.v1.ProofsProto.CompressedNonExistenceProof getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_ics23_v1_ExistenceProof_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_ics23_v1_ExistenceProof_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_ics23_v1_NonExistenceProof_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_ics23_v1_NonExistenceProof_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_ics23_v1_CommitmentProof_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_ics23_v1_CommitmentProof_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_ics23_v1_LeafOp_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_ics23_v1_LeafOp_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_ics23_v1_InnerOp_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_ics23_v1_InnerOp_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_ics23_v1_ProofSpec_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_ics23_v1_ProofSpec_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_ics23_v1_InnerSpec_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_ics23_v1_InnerSpec_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_ics23_v1_BatchProof_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_ics23_v1_BatchProof_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_ics23_v1_BatchEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_ics23_v1_BatchEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_ics23_v1_CompressedBatchProof_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_ics23_v1_CompressedBatchProof_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_ics23_v1_CompressedBatchEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_ics23_v1_CompressedBatchEntry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_ics23_v1_CompressedExistenceProof_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_ics23_v1_CompressedExistenceProof_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cosmos_ics23_v1_CompressedNonExistenceProof_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cosmos_ics23_v1_CompressedNonExistenceProof_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034cosmos/ics23/v1/proofs.proto\022\017cosmos.i" +
      "cs23.v1\"\223\001\n\016ExistenceProof\022\020\n\003key\030\001 \001(\014R" +
      "\003key\022\024\n\005value\030\002 \001(\014R\005value\022+\n\004leaf\030\003 \001(\013" +
      "2\027.cosmos.ics23.v1.LeafOpR\004leaf\022,\n\004path\030" +
      "\004 \003(\0132\030.cosmos.ics23.v1.InnerOpR\004path\"\221\001" +
      "\n\021NonExistenceProof\022\020\n\003key\030\001 \001(\014R\003key\0223\n" +
      "\004left\030\002 \001(\0132\037.cosmos.ics23.v1.ExistenceP" +
      "roofR\004left\0225\n\005right\030\003 \001(\0132\037.cosmos.ics23" +
      ".v1.ExistenceProofR\005right\"\223\002\n\017Commitment" +
      "Proof\0227\n\005exist\030\001 \001(\0132\037.cosmos.ics23.v1.E" +
      "xistenceProofH\000R\005exist\022@\n\010nonexist\030\002 \001(\013" +
      "2\".cosmos.ics23.v1.NonExistenceProofH\000R\010" +
      "nonexist\0223\n\005batch\030\003 \001(\0132\033.cosmos.ics23.v" +
      "1.BatchProofH\000R\005batch\022G\n\ncompressed\030\004 \001(" +
      "\0132%.cosmos.ics23.v1.CompressedBatchProof" +
      "H\000R\ncompressedB\007\n\005proof\"\370\001\n\006LeafOp\022+\n\004ha" +
      "sh\030\001 \001(\0162\027.cosmos.ics23.v1.HashOpR\004hash\022" +
      "8\n\013prehash_key\030\002 \001(\0162\027.cosmos.ics23.v1.H" +
      "ashOpR\nprehashKey\022<\n\rprehash_value\030\003 \001(\016" +
      "2\027.cosmos.ics23.v1.HashOpR\014prehashValue\022" +
      "1\n\006length\030\004 \001(\0162\031.cosmos.ics23.v1.Length" +
      "OpR\006length\022\026\n\006prefix\030\005 \001(\014R\006prefix\"f\n\007In" +
      "nerOp\022+\n\004hash\030\001 \001(\0162\027.cosmos.ics23.v1.Ha" +
      "shOpR\004hash\022\026\n\006prefix\030\002 \001(\014R\006prefix\022\026\n\006su" +
      "ffix\030\003 \001(\014R\006suffix\"\371\001\n\tProofSpec\0224\n\tleaf" +
      "_spec\030\001 \001(\0132\027.cosmos.ics23.v1.LeafOpR\010le" +
      "afSpec\0229\n\ninner_spec\030\002 \001(\0132\032.cosmos.ics2" +
      "3.v1.InnerSpecR\tinnerSpec\022\033\n\tmax_depth\030\003" +
      " \001(\005R\010maxDepth\022\033\n\tmin_depth\030\004 \001(\005R\010minDe" +
      "pth\022A\n\035prehash_key_before_comparison\030\005 \001" +
      "(\010R\032prehashKeyBeforeComparison\"\361\001\n\tInner" +
      "Spec\022\037\n\013child_order\030\001 \003(\005R\nchildOrder\022\035\n" +
      "\nchild_size\030\002 \001(\005R\tchildSize\022*\n\021min_pref" +
      "ix_length\030\003 \001(\005R\017minPrefixLength\022*\n\021max_" +
      "prefix_length\030\004 \001(\005R\017maxPrefixLength\022\037\n\013" +
      "empty_child\030\005 \001(\014R\nemptyChild\022+\n\004hash\030\006 " +
      "\001(\0162\027.cosmos.ics23.v1.HashOpR\004hash\"C\n\nBa" +
      "tchProof\0225\n\007entries\030\001 \003(\0132\033.cosmos.ics23" +
      ".v1.BatchEntryR\007entries\"\220\001\n\nBatchEntry\0227" +
      "\n\005exist\030\001 \001(\0132\037.cosmos.ics23.v1.Existenc" +
      "eProofH\000R\005exist\022@\n\010nonexist\030\002 \001(\0132\".cosm" +
      "os.ics23.v1.NonExistenceProofH\000R\010nonexis" +
      "tB\007\n\005proof\"\226\001\n\024CompressedBatchProof\022?\n\007e" +
      "ntries\030\001 \003(\0132%.cosmos.ics23.v1.Compresse" +
      "dBatchEntryR\007entries\022=\n\rlookup_inners\030\002 " +
      "\003(\0132\030.cosmos.ics23.v1.InnerOpR\014lookupInn" +
      "ers\"\256\001\n\024CompressedBatchEntry\022A\n\005exist\030\001 " +
      "\001(\0132).cosmos.ics23.v1.CompressedExistenc" +
      "eProofH\000R\005exist\022J\n\010nonexist\030\002 \001(\0132,.cosm" +
      "os.ics23.v1.CompressedNonExistenceProofH" +
      "\000R\010nonexistB\007\n\005proof\"\203\001\n\030CompressedExist" +
      "enceProof\022\020\n\003key\030\001 \001(\014R\003key\022\024\n\005value\030\002 \001" +
      "(\014R\005value\022+\n\004leaf\030\003 \001(\0132\027.cosmos.ics23.v" +
      "1.LeafOpR\004leaf\022\022\n\004path\030\004 \003(\005R\004path\"\257\001\n\033C" +
      "ompressedNonExistenceProof\022\020\n\003key\030\001 \001(\014R" +
      "\003key\022=\n\004left\030\002 \001(\0132).cosmos.ics23.v1.Com" +
      "pressedExistenceProofR\004left\022?\n\005right\030\003 \001" +
      "(\0132).cosmos.ics23.v1.CompressedExistence" +
      "ProofR\005right*e\n\006HashOp\022\013\n\007NO_HASH\020\000\022\n\n\006S" +
      "HA256\020\001\022\n\n\006SHA512\020\002\022\n\n\006KECCAK\020\003\022\r\n\tRIPEM" +
      "D160\020\004\022\013\n\007BITCOIN\020\005\022\016\n\nSHA512_256\020\006*\253\001\n\010" +
      "LengthOp\022\r\n\tNO_PREFIX\020\000\022\r\n\tVAR_PROTO\020\001\022\013" +
      "\n\007VAR_RLP\020\002\022\017\n\013FIXED32_BIG\020\003\022\022\n\016FIXED32_" +
      "LITTLE\020\004\022\017\n\013FIXED64_BIG\020\005\022\022\n\016FIXED64_LIT" +
      "TLE\020\006\022\024\n\020REQUIRE_32_BYTES\020\007\022\024\n\020REQUIRE_6" +
      "4_BYTES\020\010B\240\001\n\023com.cosmos.ics23.v1B\013Proof" +
      "sProtoZ github.com/cosmos/ics23/go;ics23" +
      "\242\002\003CIX\252\002\017Cosmos.Ics23.V1\312\002\017Cosmos\\Ics23\\" +
      "V1\342\002\033Cosmos\\Ics23\\V1\\GPBMetadata\352\002\021Cosmo" +
      "s::Ics23::V1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_cosmos_ics23_v1_ExistenceProof_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_cosmos_ics23_v1_ExistenceProof_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_ics23_v1_ExistenceProof_descriptor,
        new java.lang.String[] { "Key", "Value", "Leaf", "Path", });
    internal_static_cosmos_ics23_v1_NonExistenceProof_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_cosmos_ics23_v1_NonExistenceProof_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_ics23_v1_NonExistenceProof_descriptor,
        new java.lang.String[] { "Key", "Left", "Right", });
    internal_static_cosmos_ics23_v1_CommitmentProof_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_cosmos_ics23_v1_CommitmentProof_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_ics23_v1_CommitmentProof_descriptor,
        new java.lang.String[] { "Exist", "Nonexist", "Batch", "Compressed", "Proof", });
    internal_static_cosmos_ics23_v1_LeafOp_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_cosmos_ics23_v1_LeafOp_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_ics23_v1_LeafOp_descriptor,
        new java.lang.String[] { "Hash", "PrehashKey", "PrehashValue", "Length", "Prefix", });
    internal_static_cosmos_ics23_v1_InnerOp_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_cosmos_ics23_v1_InnerOp_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_ics23_v1_InnerOp_descriptor,
        new java.lang.String[] { "Hash", "Prefix", "Suffix", });
    internal_static_cosmos_ics23_v1_ProofSpec_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_cosmos_ics23_v1_ProofSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_ics23_v1_ProofSpec_descriptor,
        new java.lang.String[] { "LeafSpec", "InnerSpec", "MaxDepth", "MinDepth", "PrehashKeyBeforeComparison", });
    internal_static_cosmos_ics23_v1_InnerSpec_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_cosmos_ics23_v1_InnerSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_ics23_v1_InnerSpec_descriptor,
        new java.lang.String[] { "ChildOrder", "ChildSize", "MinPrefixLength", "MaxPrefixLength", "EmptyChild", "Hash", });
    internal_static_cosmos_ics23_v1_BatchProof_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_cosmos_ics23_v1_BatchProof_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_ics23_v1_BatchProof_descriptor,
        new java.lang.String[] { "Entries", });
    internal_static_cosmos_ics23_v1_BatchEntry_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_cosmos_ics23_v1_BatchEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_ics23_v1_BatchEntry_descriptor,
        new java.lang.String[] { "Exist", "Nonexist", "Proof", });
    internal_static_cosmos_ics23_v1_CompressedBatchProof_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_cosmos_ics23_v1_CompressedBatchProof_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_ics23_v1_CompressedBatchProof_descriptor,
        new java.lang.String[] { "Entries", "LookupInners", });
    internal_static_cosmos_ics23_v1_CompressedBatchEntry_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_cosmos_ics23_v1_CompressedBatchEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_ics23_v1_CompressedBatchEntry_descriptor,
        new java.lang.String[] { "Exist", "Nonexist", "Proof", });
    internal_static_cosmos_ics23_v1_CompressedExistenceProof_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_cosmos_ics23_v1_CompressedExistenceProof_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_ics23_v1_CompressedExistenceProof_descriptor,
        new java.lang.String[] { "Key", "Value", "Leaf", "Path", });
    internal_static_cosmos_ics23_v1_CompressedNonExistenceProof_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_cosmos_ics23_v1_CompressedNonExistenceProof_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cosmos_ics23_v1_CompressedNonExistenceProof_descriptor,
        new java.lang.String[] { "Key", "Left", "Right", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
