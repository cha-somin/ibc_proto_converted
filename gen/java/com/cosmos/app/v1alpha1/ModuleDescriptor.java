// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/app/v1alpha1/module.proto

package com.cosmos.app.v1alpha1;

/**
 * <pre>
 * ModuleDescriptor describes an app module.
 * </pre>
 *
 * Protobuf type {@code cosmos.app.v1alpha1.ModuleDescriptor}
 */
public final class ModuleDescriptor extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:cosmos.app.v1alpha1.ModuleDescriptor)
    ModuleDescriptorOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ModuleDescriptor.newBuilder() to construct.
  private ModuleDescriptor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ModuleDescriptor() {
    goImport_ = "";
    usePackage_ = java.util.Collections.emptyList();
    canMigrateFrom_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ModuleDescriptor();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.cosmos.app.v1alpha1.ModuleProto.internal_static_cosmos_app_v1alpha1_ModuleDescriptor_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.cosmos.app.v1alpha1.ModuleProto.internal_static_cosmos_app_v1alpha1_ModuleDescriptor_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.cosmos.app.v1alpha1.ModuleDescriptor.class, com.cosmos.app.v1alpha1.ModuleDescriptor.Builder.class);
  }

  public static final int GO_IMPORT_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object goImport_ = "";
  /**
   * <pre>
   * go_import names the package that should be imported by an app to load the
   * module in the runtime module registry. It is required to make debugging
   * of configuration errors easier for users.
   * </pre>
   *
   * <code>string go_import = 1 [json_name = "goImport"];</code>
   * @return The goImport.
   */
  @java.lang.Override
  public java.lang.String getGoImport() {
    java.lang.Object ref = goImport_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      goImport_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * go_import names the package that should be imported by an app to load the
   * module in the runtime module registry. It is required to make debugging
   * of configuration errors easier for users.
   * </pre>
   *
   * <code>string go_import = 1 [json_name = "goImport"];</code>
   * @return The bytes for goImport.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getGoImportBytes() {
    java.lang.Object ref = goImport_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      goImport_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int USE_PACKAGE_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<com.cosmos.app.v1alpha1.PackageReference> usePackage_;
  /**
   * <pre>
   * use_package refers to a protobuf package that this module
   * uses and exposes to the world. In an app, only one module should "use"
   * or own a single protobuf package. It is assumed that the module uses
   * all of the .proto files in a single package.
   * </pre>
   *
   * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
   */
  @java.lang.Override
  public java.util.List<com.cosmos.app.v1alpha1.PackageReference> getUsePackageList() {
    return usePackage_;
  }
  /**
   * <pre>
   * use_package refers to a protobuf package that this module
   * uses and exposes to the world. In an app, only one module should "use"
   * or own a single protobuf package. It is assumed that the module uses
   * all of the .proto files in a single package.
   * </pre>
   *
   * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.cosmos.app.v1alpha1.PackageReferenceOrBuilder> 
      getUsePackageOrBuilderList() {
    return usePackage_;
  }
  /**
   * <pre>
   * use_package refers to a protobuf package that this module
   * uses and exposes to the world. In an app, only one module should "use"
   * or own a single protobuf package. It is assumed that the module uses
   * all of the .proto files in a single package.
   * </pre>
   *
   * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
   */
  @java.lang.Override
  public int getUsePackageCount() {
    return usePackage_.size();
  }
  /**
   * <pre>
   * use_package refers to a protobuf package that this module
   * uses and exposes to the world. In an app, only one module should "use"
   * or own a single protobuf package. It is assumed that the module uses
   * all of the .proto files in a single package.
   * </pre>
   *
   * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
   */
  @java.lang.Override
  public com.cosmos.app.v1alpha1.PackageReference getUsePackage(int index) {
    return usePackage_.get(index);
  }
  /**
   * <pre>
   * use_package refers to a protobuf package that this module
   * uses and exposes to the world. In an app, only one module should "use"
   * or own a single protobuf package. It is assumed that the module uses
   * all of the .proto files in a single package.
   * </pre>
   *
   * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
   */
  @java.lang.Override
  public com.cosmos.app.v1alpha1.PackageReferenceOrBuilder getUsePackageOrBuilder(
      int index) {
    return usePackage_.get(index);
  }

  public static final int CAN_MIGRATE_FROM_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<com.cosmos.app.v1alpha1.MigrateFromInfo> canMigrateFrom_;
  /**
   * <pre>
   * can_migrate_from defines which module versions this module can migrate
   * state from. The framework will check that one module version is able to
   * migrate from a previous module version before attempting to update its
   * config. It is assumed that modules can transitively migrate from earlier
   * versions. For instance if v3 declares it can migrate from v2, and v2
   * declares it can migrate from v1, the framework knows how to migrate
   * from v1 to v3, assuming all 3 module versions are registered at runtime.
   * </pre>
   *
   * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
   */
  @java.lang.Override
  public java.util.List<com.cosmos.app.v1alpha1.MigrateFromInfo> getCanMigrateFromList() {
    return canMigrateFrom_;
  }
  /**
   * <pre>
   * can_migrate_from defines which module versions this module can migrate
   * state from. The framework will check that one module version is able to
   * migrate from a previous module version before attempting to update its
   * config. It is assumed that modules can transitively migrate from earlier
   * versions. For instance if v3 declares it can migrate from v2, and v2
   * declares it can migrate from v1, the framework knows how to migrate
   * from v1 to v3, assuming all 3 module versions are registered at runtime.
   * </pre>
   *
   * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.cosmos.app.v1alpha1.MigrateFromInfoOrBuilder> 
      getCanMigrateFromOrBuilderList() {
    return canMigrateFrom_;
  }
  /**
   * <pre>
   * can_migrate_from defines which module versions this module can migrate
   * state from. The framework will check that one module version is able to
   * migrate from a previous module version before attempting to update its
   * config. It is assumed that modules can transitively migrate from earlier
   * versions. For instance if v3 declares it can migrate from v2, and v2
   * declares it can migrate from v1, the framework knows how to migrate
   * from v1 to v3, assuming all 3 module versions are registered at runtime.
   * </pre>
   *
   * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
   */
  @java.lang.Override
  public int getCanMigrateFromCount() {
    return canMigrateFrom_.size();
  }
  /**
   * <pre>
   * can_migrate_from defines which module versions this module can migrate
   * state from. The framework will check that one module version is able to
   * migrate from a previous module version before attempting to update its
   * config. It is assumed that modules can transitively migrate from earlier
   * versions. For instance if v3 declares it can migrate from v2, and v2
   * declares it can migrate from v1, the framework knows how to migrate
   * from v1 to v3, assuming all 3 module versions are registered at runtime.
   * </pre>
   *
   * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
   */
  @java.lang.Override
  public com.cosmos.app.v1alpha1.MigrateFromInfo getCanMigrateFrom(int index) {
    return canMigrateFrom_.get(index);
  }
  /**
   * <pre>
   * can_migrate_from defines which module versions this module can migrate
   * state from. The framework will check that one module version is able to
   * migrate from a previous module version before attempting to update its
   * config. It is assumed that modules can transitively migrate from earlier
   * versions. For instance if v3 declares it can migrate from v2, and v2
   * declares it can migrate from v1, the framework knows how to migrate
   * from v1 to v3, assuming all 3 module versions are registered at runtime.
   * </pre>
   *
   * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
   */
  @java.lang.Override
  public com.cosmos.app.v1alpha1.MigrateFromInfoOrBuilder getCanMigrateFromOrBuilder(
      int index) {
    return canMigrateFrom_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(goImport_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, goImport_);
    }
    for (int i = 0; i < usePackage_.size(); i++) {
      output.writeMessage(2, usePackage_.get(i));
    }
    for (int i = 0; i < canMigrateFrom_.size(); i++) {
      output.writeMessage(3, canMigrateFrom_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(goImport_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, goImport_);
    }
    for (int i = 0; i < usePackage_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, usePackage_.get(i));
    }
    for (int i = 0; i < canMigrateFrom_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, canMigrateFrom_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.cosmos.app.v1alpha1.ModuleDescriptor)) {
      return super.equals(obj);
    }
    com.cosmos.app.v1alpha1.ModuleDescriptor other = (com.cosmos.app.v1alpha1.ModuleDescriptor) obj;

    if (!getGoImport()
        .equals(other.getGoImport())) return false;
    if (!getUsePackageList()
        .equals(other.getUsePackageList())) return false;
    if (!getCanMigrateFromList()
        .equals(other.getCanMigrateFromList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + GO_IMPORT_FIELD_NUMBER;
    hash = (53 * hash) + getGoImport().hashCode();
    if (getUsePackageCount() > 0) {
      hash = (37 * hash) + USE_PACKAGE_FIELD_NUMBER;
      hash = (53 * hash) + getUsePackageList().hashCode();
    }
    if (getCanMigrateFromCount() > 0) {
      hash = (37 * hash) + CAN_MIGRATE_FROM_FIELD_NUMBER;
      hash = (53 * hash) + getCanMigrateFromList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.cosmos.app.v1alpha1.ModuleDescriptor parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cosmos.app.v1alpha1.ModuleDescriptor parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cosmos.app.v1alpha1.ModuleDescriptor parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cosmos.app.v1alpha1.ModuleDescriptor parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cosmos.app.v1alpha1.ModuleDescriptor parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cosmos.app.v1alpha1.ModuleDescriptor parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cosmos.app.v1alpha1.ModuleDescriptor parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.cosmos.app.v1alpha1.ModuleDescriptor parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.cosmos.app.v1alpha1.ModuleDescriptor parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.cosmos.app.v1alpha1.ModuleDescriptor parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.cosmos.app.v1alpha1.ModuleDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.cosmos.app.v1alpha1.ModuleDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.cosmos.app.v1alpha1.ModuleDescriptor prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * ModuleDescriptor describes an app module.
   * </pre>
   *
   * Protobuf type {@code cosmos.app.v1alpha1.ModuleDescriptor}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:cosmos.app.v1alpha1.ModuleDescriptor)
      com.cosmos.app.v1alpha1.ModuleDescriptorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.app.v1alpha1.ModuleProto.internal_static_cosmos_app_v1alpha1_ModuleDescriptor_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.app.v1alpha1.ModuleProto.internal_static_cosmos_app_v1alpha1_ModuleDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.app.v1alpha1.ModuleDescriptor.class, com.cosmos.app.v1alpha1.ModuleDescriptor.Builder.class);
    }

    // Construct using com.cosmos.app.v1alpha1.ModuleDescriptor.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      goImport_ = "";
      if (usePackageBuilder_ == null) {
        usePackage_ = java.util.Collections.emptyList();
      } else {
        usePackage_ = null;
        usePackageBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      if (canMigrateFromBuilder_ == null) {
        canMigrateFrom_ = java.util.Collections.emptyList();
      } else {
        canMigrateFrom_ = null;
        canMigrateFromBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.cosmos.app.v1alpha1.ModuleProto.internal_static_cosmos_app_v1alpha1_ModuleDescriptor_descriptor;
    }

    @java.lang.Override
    public com.cosmos.app.v1alpha1.ModuleDescriptor getDefaultInstanceForType() {
      return com.cosmos.app.v1alpha1.ModuleDescriptor.getDefaultInstance();
    }

    @java.lang.Override
    public com.cosmos.app.v1alpha1.ModuleDescriptor build() {
      com.cosmos.app.v1alpha1.ModuleDescriptor result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.cosmos.app.v1alpha1.ModuleDescriptor buildPartial() {
      com.cosmos.app.v1alpha1.ModuleDescriptor result = new com.cosmos.app.v1alpha1.ModuleDescriptor(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.cosmos.app.v1alpha1.ModuleDescriptor result) {
      if (usePackageBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          usePackage_ = java.util.Collections.unmodifiableList(usePackage_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.usePackage_ = usePackage_;
      } else {
        result.usePackage_ = usePackageBuilder_.build();
      }
      if (canMigrateFromBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          canMigrateFrom_ = java.util.Collections.unmodifiableList(canMigrateFrom_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.canMigrateFrom_ = canMigrateFrom_;
      } else {
        result.canMigrateFrom_ = canMigrateFromBuilder_.build();
      }
    }

    private void buildPartial0(com.cosmos.app.v1alpha1.ModuleDescriptor result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.goImport_ = goImport_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.cosmos.app.v1alpha1.ModuleDescriptor) {
        return mergeFrom((com.cosmos.app.v1alpha1.ModuleDescriptor)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.cosmos.app.v1alpha1.ModuleDescriptor other) {
      if (other == com.cosmos.app.v1alpha1.ModuleDescriptor.getDefaultInstance()) return this;
      if (!other.getGoImport().isEmpty()) {
        goImport_ = other.goImport_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (usePackageBuilder_ == null) {
        if (!other.usePackage_.isEmpty()) {
          if (usePackage_.isEmpty()) {
            usePackage_ = other.usePackage_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureUsePackageIsMutable();
            usePackage_.addAll(other.usePackage_);
          }
          onChanged();
        }
      } else {
        if (!other.usePackage_.isEmpty()) {
          if (usePackageBuilder_.isEmpty()) {
            usePackageBuilder_.dispose();
            usePackageBuilder_ = null;
            usePackage_ = other.usePackage_;
            bitField0_ = (bitField0_ & ~0x00000002);
            usePackageBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getUsePackageFieldBuilder() : null;
          } else {
            usePackageBuilder_.addAllMessages(other.usePackage_);
          }
        }
      }
      if (canMigrateFromBuilder_ == null) {
        if (!other.canMigrateFrom_.isEmpty()) {
          if (canMigrateFrom_.isEmpty()) {
            canMigrateFrom_ = other.canMigrateFrom_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureCanMigrateFromIsMutable();
            canMigrateFrom_.addAll(other.canMigrateFrom_);
          }
          onChanged();
        }
      } else {
        if (!other.canMigrateFrom_.isEmpty()) {
          if (canMigrateFromBuilder_.isEmpty()) {
            canMigrateFromBuilder_.dispose();
            canMigrateFromBuilder_ = null;
            canMigrateFrom_ = other.canMigrateFrom_;
            bitField0_ = (bitField0_ & ~0x00000004);
            canMigrateFromBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getCanMigrateFromFieldBuilder() : null;
          } else {
            canMigrateFromBuilder_.addAllMessages(other.canMigrateFrom_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              goImport_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              com.cosmos.app.v1alpha1.PackageReference m =
                  input.readMessage(
                      com.cosmos.app.v1alpha1.PackageReference.parser(),
                      extensionRegistry);
              if (usePackageBuilder_ == null) {
                ensureUsePackageIsMutable();
                usePackage_.add(m);
              } else {
                usePackageBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 26: {
              com.cosmos.app.v1alpha1.MigrateFromInfo m =
                  input.readMessage(
                      com.cosmos.app.v1alpha1.MigrateFromInfo.parser(),
                      extensionRegistry);
              if (canMigrateFromBuilder_ == null) {
                ensureCanMigrateFromIsMutable();
                canMigrateFrom_.add(m);
              } else {
                canMigrateFromBuilder_.addMessage(m);
              }
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object goImport_ = "";
    /**
     * <pre>
     * go_import names the package that should be imported by an app to load the
     * module in the runtime module registry. It is required to make debugging
     * of configuration errors easier for users.
     * </pre>
     *
     * <code>string go_import = 1 [json_name = "goImport"];</code>
     * @return The goImport.
     */
    public java.lang.String getGoImport() {
      java.lang.Object ref = goImport_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        goImport_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * go_import names the package that should be imported by an app to load the
     * module in the runtime module registry. It is required to make debugging
     * of configuration errors easier for users.
     * </pre>
     *
     * <code>string go_import = 1 [json_name = "goImport"];</code>
     * @return The bytes for goImport.
     */
    public com.google.protobuf.ByteString
        getGoImportBytes() {
      java.lang.Object ref = goImport_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        goImport_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * go_import names the package that should be imported by an app to load the
     * module in the runtime module registry. It is required to make debugging
     * of configuration errors easier for users.
     * </pre>
     *
     * <code>string go_import = 1 [json_name = "goImport"];</code>
     * @param value The goImport to set.
     * @return This builder for chaining.
     */
    public Builder setGoImport(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      goImport_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * go_import names the package that should be imported by an app to load the
     * module in the runtime module registry. It is required to make debugging
     * of configuration errors easier for users.
     * </pre>
     *
     * <code>string go_import = 1 [json_name = "goImport"];</code>
     * @return This builder for chaining.
     */
    public Builder clearGoImport() {
      goImport_ = getDefaultInstance().getGoImport();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * go_import names the package that should be imported by an app to load the
     * module in the runtime module registry. It is required to make debugging
     * of configuration errors easier for users.
     * </pre>
     *
     * <code>string go_import = 1 [json_name = "goImport"];</code>
     * @param value The bytes for goImport to set.
     * @return This builder for chaining.
     */
    public Builder setGoImportBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      goImport_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.util.List<com.cosmos.app.v1alpha1.PackageReference> usePackage_ =
      java.util.Collections.emptyList();
    private void ensureUsePackageIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        usePackage_ = new java.util.ArrayList<com.cosmos.app.v1alpha1.PackageReference>(usePackage_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.app.v1alpha1.PackageReference, com.cosmos.app.v1alpha1.PackageReference.Builder, com.cosmos.app.v1alpha1.PackageReferenceOrBuilder> usePackageBuilder_;

    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public java.util.List<com.cosmos.app.v1alpha1.PackageReference> getUsePackageList() {
      if (usePackageBuilder_ == null) {
        return java.util.Collections.unmodifiableList(usePackage_);
      } else {
        return usePackageBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public int getUsePackageCount() {
      if (usePackageBuilder_ == null) {
        return usePackage_.size();
      } else {
        return usePackageBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public com.cosmos.app.v1alpha1.PackageReference getUsePackage(int index) {
      if (usePackageBuilder_ == null) {
        return usePackage_.get(index);
      } else {
        return usePackageBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public Builder setUsePackage(
        int index, com.cosmos.app.v1alpha1.PackageReference value) {
      if (usePackageBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUsePackageIsMutable();
        usePackage_.set(index, value);
        onChanged();
      } else {
        usePackageBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public Builder setUsePackage(
        int index, com.cosmos.app.v1alpha1.PackageReference.Builder builderForValue) {
      if (usePackageBuilder_ == null) {
        ensureUsePackageIsMutable();
        usePackage_.set(index, builderForValue.build());
        onChanged();
      } else {
        usePackageBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public Builder addUsePackage(com.cosmos.app.v1alpha1.PackageReference value) {
      if (usePackageBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUsePackageIsMutable();
        usePackage_.add(value);
        onChanged();
      } else {
        usePackageBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public Builder addUsePackage(
        int index, com.cosmos.app.v1alpha1.PackageReference value) {
      if (usePackageBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureUsePackageIsMutable();
        usePackage_.add(index, value);
        onChanged();
      } else {
        usePackageBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public Builder addUsePackage(
        com.cosmos.app.v1alpha1.PackageReference.Builder builderForValue) {
      if (usePackageBuilder_ == null) {
        ensureUsePackageIsMutable();
        usePackage_.add(builderForValue.build());
        onChanged();
      } else {
        usePackageBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public Builder addUsePackage(
        int index, com.cosmos.app.v1alpha1.PackageReference.Builder builderForValue) {
      if (usePackageBuilder_ == null) {
        ensureUsePackageIsMutable();
        usePackage_.add(index, builderForValue.build());
        onChanged();
      } else {
        usePackageBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public Builder addAllUsePackage(
        java.lang.Iterable<? extends com.cosmos.app.v1alpha1.PackageReference> values) {
      if (usePackageBuilder_ == null) {
        ensureUsePackageIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, usePackage_);
        onChanged();
      } else {
        usePackageBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public Builder clearUsePackage() {
      if (usePackageBuilder_ == null) {
        usePackage_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        usePackageBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public Builder removeUsePackage(int index) {
      if (usePackageBuilder_ == null) {
        ensureUsePackageIsMutable();
        usePackage_.remove(index);
        onChanged();
      } else {
        usePackageBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public com.cosmos.app.v1alpha1.PackageReference.Builder getUsePackageBuilder(
        int index) {
      return getUsePackageFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public com.cosmos.app.v1alpha1.PackageReferenceOrBuilder getUsePackageOrBuilder(
        int index) {
      if (usePackageBuilder_ == null) {
        return usePackage_.get(index);  } else {
        return usePackageBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public java.util.List<? extends com.cosmos.app.v1alpha1.PackageReferenceOrBuilder> 
         getUsePackageOrBuilderList() {
      if (usePackageBuilder_ != null) {
        return usePackageBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(usePackage_);
      }
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public com.cosmos.app.v1alpha1.PackageReference.Builder addUsePackageBuilder() {
      return getUsePackageFieldBuilder().addBuilder(
          com.cosmos.app.v1alpha1.PackageReference.getDefaultInstance());
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public com.cosmos.app.v1alpha1.PackageReference.Builder addUsePackageBuilder(
        int index) {
      return getUsePackageFieldBuilder().addBuilder(
          index, com.cosmos.app.v1alpha1.PackageReference.getDefaultInstance());
    }
    /**
     * <pre>
     * use_package refers to a protobuf package that this module
     * uses and exposes to the world. In an app, only one module should "use"
     * or own a single protobuf package. It is assumed that the module uses
     * all of the .proto files in a single package.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.PackageReference use_package = 2 [json_name = "usePackage"];</code>
     */
    public java.util.List<com.cosmos.app.v1alpha1.PackageReference.Builder> 
         getUsePackageBuilderList() {
      return getUsePackageFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.app.v1alpha1.PackageReference, com.cosmos.app.v1alpha1.PackageReference.Builder, com.cosmos.app.v1alpha1.PackageReferenceOrBuilder> 
        getUsePackageFieldBuilder() {
      if (usePackageBuilder_ == null) {
        usePackageBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.cosmos.app.v1alpha1.PackageReference, com.cosmos.app.v1alpha1.PackageReference.Builder, com.cosmos.app.v1alpha1.PackageReferenceOrBuilder>(
                usePackage_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        usePackage_ = null;
      }
      return usePackageBuilder_;
    }

    private java.util.List<com.cosmos.app.v1alpha1.MigrateFromInfo> canMigrateFrom_ =
      java.util.Collections.emptyList();
    private void ensureCanMigrateFromIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        canMigrateFrom_ = new java.util.ArrayList<com.cosmos.app.v1alpha1.MigrateFromInfo>(canMigrateFrom_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.app.v1alpha1.MigrateFromInfo, com.cosmos.app.v1alpha1.MigrateFromInfo.Builder, com.cosmos.app.v1alpha1.MigrateFromInfoOrBuilder> canMigrateFromBuilder_;

    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public java.util.List<com.cosmos.app.v1alpha1.MigrateFromInfo> getCanMigrateFromList() {
      if (canMigrateFromBuilder_ == null) {
        return java.util.Collections.unmodifiableList(canMigrateFrom_);
      } else {
        return canMigrateFromBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public int getCanMigrateFromCount() {
      if (canMigrateFromBuilder_ == null) {
        return canMigrateFrom_.size();
      } else {
        return canMigrateFromBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public com.cosmos.app.v1alpha1.MigrateFromInfo getCanMigrateFrom(int index) {
      if (canMigrateFromBuilder_ == null) {
        return canMigrateFrom_.get(index);
      } else {
        return canMigrateFromBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public Builder setCanMigrateFrom(
        int index, com.cosmos.app.v1alpha1.MigrateFromInfo value) {
      if (canMigrateFromBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCanMigrateFromIsMutable();
        canMigrateFrom_.set(index, value);
        onChanged();
      } else {
        canMigrateFromBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public Builder setCanMigrateFrom(
        int index, com.cosmos.app.v1alpha1.MigrateFromInfo.Builder builderForValue) {
      if (canMigrateFromBuilder_ == null) {
        ensureCanMigrateFromIsMutable();
        canMigrateFrom_.set(index, builderForValue.build());
        onChanged();
      } else {
        canMigrateFromBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public Builder addCanMigrateFrom(com.cosmos.app.v1alpha1.MigrateFromInfo value) {
      if (canMigrateFromBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCanMigrateFromIsMutable();
        canMigrateFrom_.add(value);
        onChanged();
      } else {
        canMigrateFromBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public Builder addCanMigrateFrom(
        int index, com.cosmos.app.v1alpha1.MigrateFromInfo value) {
      if (canMigrateFromBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCanMigrateFromIsMutable();
        canMigrateFrom_.add(index, value);
        onChanged();
      } else {
        canMigrateFromBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public Builder addCanMigrateFrom(
        com.cosmos.app.v1alpha1.MigrateFromInfo.Builder builderForValue) {
      if (canMigrateFromBuilder_ == null) {
        ensureCanMigrateFromIsMutable();
        canMigrateFrom_.add(builderForValue.build());
        onChanged();
      } else {
        canMigrateFromBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public Builder addCanMigrateFrom(
        int index, com.cosmos.app.v1alpha1.MigrateFromInfo.Builder builderForValue) {
      if (canMigrateFromBuilder_ == null) {
        ensureCanMigrateFromIsMutable();
        canMigrateFrom_.add(index, builderForValue.build());
        onChanged();
      } else {
        canMigrateFromBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public Builder addAllCanMigrateFrom(
        java.lang.Iterable<? extends com.cosmos.app.v1alpha1.MigrateFromInfo> values) {
      if (canMigrateFromBuilder_ == null) {
        ensureCanMigrateFromIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, canMigrateFrom_);
        onChanged();
      } else {
        canMigrateFromBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public Builder clearCanMigrateFrom() {
      if (canMigrateFromBuilder_ == null) {
        canMigrateFrom_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        canMigrateFromBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public Builder removeCanMigrateFrom(int index) {
      if (canMigrateFromBuilder_ == null) {
        ensureCanMigrateFromIsMutable();
        canMigrateFrom_.remove(index);
        onChanged();
      } else {
        canMigrateFromBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public com.cosmos.app.v1alpha1.MigrateFromInfo.Builder getCanMigrateFromBuilder(
        int index) {
      return getCanMigrateFromFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public com.cosmos.app.v1alpha1.MigrateFromInfoOrBuilder getCanMigrateFromOrBuilder(
        int index) {
      if (canMigrateFromBuilder_ == null) {
        return canMigrateFrom_.get(index);  } else {
        return canMigrateFromBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public java.util.List<? extends com.cosmos.app.v1alpha1.MigrateFromInfoOrBuilder> 
         getCanMigrateFromOrBuilderList() {
      if (canMigrateFromBuilder_ != null) {
        return canMigrateFromBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(canMigrateFrom_);
      }
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public com.cosmos.app.v1alpha1.MigrateFromInfo.Builder addCanMigrateFromBuilder() {
      return getCanMigrateFromFieldBuilder().addBuilder(
          com.cosmos.app.v1alpha1.MigrateFromInfo.getDefaultInstance());
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public com.cosmos.app.v1alpha1.MigrateFromInfo.Builder addCanMigrateFromBuilder(
        int index) {
      return getCanMigrateFromFieldBuilder().addBuilder(
          index, com.cosmos.app.v1alpha1.MigrateFromInfo.getDefaultInstance());
    }
    /**
     * <pre>
     * can_migrate_from defines which module versions this module can migrate
     * state from. The framework will check that one module version is able to
     * migrate from a previous module version before attempting to update its
     * config. It is assumed that modules can transitively migrate from earlier
     * versions. For instance if v3 declares it can migrate from v2, and v2
     * declares it can migrate from v1, the framework knows how to migrate
     * from v1 to v3, assuming all 3 module versions are registered at runtime.
     * </pre>
     *
     * <code>repeated .cosmos.app.v1alpha1.MigrateFromInfo can_migrate_from = 3 [json_name = "canMigrateFrom"];</code>
     */
    public java.util.List<com.cosmos.app.v1alpha1.MigrateFromInfo.Builder> 
         getCanMigrateFromBuilderList() {
      return getCanMigrateFromFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.app.v1alpha1.MigrateFromInfo, com.cosmos.app.v1alpha1.MigrateFromInfo.Builder, com.cosmos.app.v1alpha1.MigrateFromInfoOrBuilder> 
        getCanMigrateFromFieldBuilder() {
      if (canMigrateFromBuilder_ == null) {
        canMigrateFromBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.cosmos.app.v1alpha1.MigrateFromInfo, com.cosmos.app.v1alpha1.MigrateFromInfo.Builder, com.cosmos.app.v1alpha1.MigrateFromInfoOrBuilder>(
                canMigrateFrom_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        canMigrateFrom_ = null;
      }
      return canMigrateFromBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:cosmos.app.v1alpha1.ModuleDescriptor)
  }

  // @@protoc_insertion_point(class_scope:cosmos.app.v1alpha1.ModuleDescriptor)
  private static final com.cosmos.app.v1alpha1.ModuleDescriptor DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.cosmos.app.v1alpha1.ModuleDescriptor();
  }

  public static com.cosmos.app.v1alpha1.ModuleDescriptor getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ModuleDescriptor>
      PARSER = new com.google.protobuf.AbstractParser<ModuleDescriptor>() {
    @java.lang.Override
    public ModuleDescriptor parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ModuleDescriptor> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ModuleDescriptor> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.cosmos.app.v1alpha1.ModuleDescriptor getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

