// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/autocli/v1/options.proto

package com.cosmos.autocli.v1;

public interface ServiceCommandDescriptorOrBuilder extends
    // @@protoc_insertion_point(interface_extends:cosmos.autocli.v1.ServiceCommandDescriptor)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * service is the fully qualified name of the protobuf service to build
   * the command from. It can be left empty if sub_commands are used instead
   * which may be the case if a module provides multiple tx and/or query services.
   * </pre>
   *
   * <code>string service = 1 [json_name = "service"];</code>
   * @return The service.
   */
  java.lang.String getService();
  /**
   * <pre>
   * service is the fully qualified name of the protobuf service to build
   * the command from. It can be left empty if sub_commands are used instead
   * which may be the case if a module provides multiple tx and/or query services.
   * </pre>
   *
   * <code>string service = 1 [json_name = "service"];</code>
   * @return The bytes for service.
   */
  com.google.protobuf.ByteString
      getServiceBytes();

  /**
   * <pre>
   * rpc_command_options are options for commands generated from rpc methods.
   * If no options are specified for a given rpc method on the service, a
   * command will be generated for that method with the default options.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
   */
  java.util.List<com.cosmos.autocli.v1.RpcCommandOptions> 
      getRpcCommandOptionsList();
  /**
   * <pre>
   * rpc_command_options are options for commands generated from rpc methods.
   * If no options are specified for a given rpc method on the service, a
   * command will be generated for that method with the default options.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
   */
  com.cosmos.autocli.v1.RpcCommandOptions getRpcCommandOptions(int index);
  /**
   * <pre>
   * rpc_command_options are options for commands generated from rpc methods.
   * If no options are specified for a given rpc method on the service, a
   * command will be generated for that method with the default options.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
   */
  int getRpcCommandOptionsCount();
  /**
   * <pre>
   * rpc_command_options are options for commands generated from rpc methods.
   * If no options are specified for a given rpc method on the service, a
   * command will be generated for that method with the default options.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
   */
  java.util.List<? extends com.cosmos.autocli.v1.RpcCommandOptionsOrBuilder> 
      getRpcCommandOptionsOrBuilderList();
  /**
   * <pre>
   * rpc_command_options are options for commands generated from rpc methods.
   * If no options are specified for a given rpc method on the service, a
   * command will be generated for that method with the default options.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
   */
  com.cosmos.autocli.v1.RpcCommandOptionsOrBuilder getRpcCommandOptionsOrBuilder(
      int index);

  /**
   * <pre>
   * sub_commands is a map of optional sub-commands for this command based on
   * different protobuf services. The map key is used as the name of the
   * sub-command.
   * </pre>
   *
   * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
   */
  int getSubCommandsCount();
  /**
   * <pre>
   * sub_commands is a map of optional sub-commands for this command based on
   * different protobuf services. The map key is used as the name of the
   * sub-command.
   * </pre>
   *
   * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
   */
  boolean containsSubCommands(
      java.lang.String key);
  /**
   * Use {@link #getSubCommandsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor>
  getSubCommands();
  /**
   * <pre>
   * sub_commands is a map of optional sub-commands for this command based on
   * different protobuf services. The map key is used as the name of the
   * sub-command.
   * </pre>
   *
   * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
   */
  java.util.Map<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor>
  getSubCommandsMap();
  /**
   * <pre>
   * sub_commands is a map of optional sub-commands for this command based on
   * different protobuf services. The map key is used as the name of the
   * sub-command.
   * </pre>
   *
   * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
   */
  /* nullable */
com.cosmos.autocli.v1.ServiceCommandDescriptor getSubCommandsOrDefault(
      java.lang.String key,
      /* nullable */
com.cosmos.autocli.v1.ServiceCommandDescriptor defaultValue);
  /**
   * <pre>
   * sub_commands is a map of optional sub-commands for this command based on
   * different protobuf services. The map key is used as the name of the
   * sub-command.
   * </pre>
   *
   * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
   */
  com.cosmos.autocli.v1.ServiceCommandDescriptor getSubCommandsOrThrow(
      java.lang.String key);
}
