// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/autocli/v1/options.proto

package com.cosmos.autocli.v1;

/**
 * <pre>
 * ServiceCommandDescriptor describes a CLI command based on a protobuf service.
 * </pre>
 *
 * Protobuf type {@code cosmos.autocli.v1.ServiceCommandDescriptor}
 */
public final class ServiceCommandDescriptor extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:cosmos.autocli.v1.ServiceCommandDescriptor)
    ServiceCommandDescriptorOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ServiceCommandDescriptor.newBuilder() to construct.
  private ServiceCommandDescriptor(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ServiceCommandDescriptor() {
    service_ = "";
    rpcCommandOptions_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ServiceCommandDescriptor();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.cosmos.autocli.v1.OptionsProto.internal_static_cosmos_autocli_v1_ServiceCommandDescriptor_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 3:
        return internalGetSubCommands();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.cosmos.autocli.v1.OptionsProto.internal_static_cosmos_autocli_v1_ServiceCommandDescriptor_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.cosmos.autocli.v1.ServiceCommandDescriptor.class, com.cosmos.autocli.v1.ServiceCommandDescriptor.Builder.class);
  }

  public static final int SERVICE_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object service_ = "";
  /**
   * <pre>
   * service is the fully qualified name of the protobuf service to build
   * the command from. It can be left empty if sub_commands are used instead
   * which may be the case if a module provides multiple tx and/or query services.
   * </pre>
   *
   * <code>string service = 1 [json_name = "service"];</code>
   * @return The service.
   */
  @java.lang.Override
  public java.lang.String getService() {
    java.lang.Object ref = service_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      service_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * service is the fully qualified name of the protobuf service to build
   * the command from. It can be left empty if sub_commands are used instead
   * which may be the case if a module provides multiple tx and/or query services.
   * </pre>
   *
   * <code>string service = 1 [json_name = "service"];</code>
   * @return The bytes for service.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getServiceBytes() {
    java.lang.Object ref = service_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      service_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int RPC_COMMAND_OPTIONS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<com.cosmos.autocli.v1.RpcCommandOptions> rpcCommandOptions_;
  /**
   * <pre>
   * rpc_command_options are options for commands generated from rpc methods.
   * If no options are specified for a given rpc method on the service, a
   * command will be generated for that method with the default options.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
   */
  @java.lang.Override
  public java.util.List<com.cosmos.autocli.v1.RpcCommandOptions> getRpcCommandOptionsList() {
    return rpcCommandOptions_;
  }
  /**
   * <pre>
   * rpc_command_options are options for commands generated from rpc methods.
   * If no options are specified for a given rpc method on the service, a
   * command will be generated for that method with the default options.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.cosmos.autocli.v1.RpcCommandOptionsOrBuilder> 
      getRpcCommandOptionsOrBuilderList() {
    return rpcCommandOptions_;
  }
  /**
   * <pre>
   * rpc_command_options are options for commands generated from rpc methods.
   * If no options are specified for a given rpc method on the service, a
   * command will be generated for that method with the default options.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
   */
  @java.lang.Override
  public int getRpcCommandOptionsCount() {
    return rpcCommandOptions_.size();
  }
  /**
   * <pre>
   * rpc_command_options are options for commands generated from rpc methods.
   * If no options are specified for a given rpc method on the service, a
   * command will be generated for that method with the default options.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
   */
  @java.lang.Override
  public com.cosmos.autocli.v1.RpcCommandOptions getRpcCommandOptions(int index) {
    return rpcCommandOptions_.get(index);
  }
  /**
   * <pre>
   * rpc_command_options are options for commands generated from rpc methods.
   * If no options are specified for a given rpc method on the service, a
   * command will be generated for that method with the default options.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
   */
  @java.lang.Override
  public com.cosmos.autocli.v1.RpcCommandOptionsOrBuilder getRpcCommandOptionsOrBuilder(
      int index) {
    return rpcCommandOptions_.get(index);
  }

  public static final int SUB_COMMANDS_FIELD_NUMBER = 3;
  private static final class SubCommandsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor>newDefaultInstance(
                com.cosmos.autocli.v1.OptionsProto.internal_static_cosmos_autocli_v1_ServiceCommandDescriptor_SubCommandsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.cosmos.autocli.v1.ServiceCommandDescriptor.getDefaultInstance());
  }
  @SuppressWarnings("serial")
  private com.google.protobuf.MapField<
      java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor> subCommands_;
  private com.google.protobuf.MapField<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor>
  internalGetSubCommands() {
    if (subCommands_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          SubCommandsDefaultEntryHolder.defaultEntry);
    }
    return subCommands_;
  }
  public int getSubCommandsCount() {
    return internalGetSubCommands().getMap().size();
  }
  /**
   * <pre>
   * sub_commands is a map of optional sub-commands for this command based on
   * different protobuf services. The map key is used as the name of the
   * sub-command.
   * </pre>
   *
   * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
   */
  @java.lang.Override
  public boolean containsSubCommands(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetSubCommands().getMap().containsKey(key);
  }
  /**
   * Use {@link #getSubCommandsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor> getSubCommands() {
    return getSubCommandsMap();
  }
  /**
   * <pre>
   * sub_commands is a map of optional sub-commands for this command based on
   * different protobuf services. The map key is used as the name of the
   * sub-command.
   * </pre>
   *
   * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
   */
  @java.lang.Override
  public java.util.Map<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor> getSubCommandsMap() {
    return internalGetSubCommands().getMap();
  }
  /**
   * <pre>
   * sub_commands is a map of optional sub-commands for this command based on
   * different protobuf services. The map key is used as the name of the
   * sub-command.
   * </pre>
   *
   * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
   */
  @java.lang.Override
  public /* nullable */
com.cosmos.autocli.v1.ServiceCommandDescriptor getSubCommandsOrDefault(
      java.lang.String key,
      /* nullable */
com.cosmos.autocli.v1.ServiceCommandDescriptor defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor> map =
        internalGetSubCommands().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * sub_commands is a map of optional sub-commands for this command based on
   * different protobuf services. The map key is used as the name of the
   * sub-command.
   * </pre>
   *
   * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
   */
  @java.lang.Override
  public com.cosmos.autocli.v1.ServiceCommandDescriptor getSubCommandsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor> map =
        internalGetSubCommands().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(service_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, service_);
    }
    for (int i = 0; i < rpcCommandOptions_.size(); i++) {
      output.writeMessage(2, rpcCommandOptions_.get(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetSubCommands(),
        SubCommandsDefaultEntryHolder.defaultEntry,
        3);
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(service_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, service_);
    }
    for (int i = 0; i < rpcCommandOptions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, rpcCommandOptions_.get(i));
    }
    for (java.util.Map.Entry<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor> entry
         : internalGetSubCommands().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor>
      subCommands__ = SubCommandsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, subCommands__);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.cosmos.autocli.v1.ServiceCommandDescriptor)) {
      return super.equals(obj);
    }
    com.cosmos.autocli.v1.ServiceCommandDescriptor other = (com.cosmos.autocli.v1.ServiceCommandDescriptor) obj;

    if (!getService()
        .equals(other.getService())) return false;
    if (!getRpcCommandOptionsList()
        .equals(other.getRpcCommandOptionsList())) return false;
    if (!internalGetSubCommands().equals(
        other.internalGetSubCommands())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + SERVICE_FIELD_NUMBER;
    hash = (53 * hash) + getService().hashCode();
    if (getRpcCommandOptionsCount() > 0) {
      hash = (37 * hash) + RPC_COMMAND_OPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + getRpcCommandOptionsList().hashCode();
    }
    if (!internalGetSubCommands().getMap().isEmpty()) {
      hash = (37 * hash) + SUB_COMMANDS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetSubCommands().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.cosmos.autocli.v1.ServiceCommandDescriptor parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cosmos.autocli.v1.ServiceCommandDescriptor parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cosmos.autocli.v1.ServiceCommandDescriptor parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cosmos.autocli.v1.ServiceCommandDescriptor parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cosmos.autocli.v1.ServiceCommandDescriptor parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cosmos.autocli.v1.ServiceCommandDescriptor parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cosmos.autocli.v1.ServiceCommandDescriptor parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.cosmos.autocli.v1.ServiceCommandDescriptor parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.cosmos.autocli.v1.ServiceCommandDescriptor parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.cosmos.autocli.v1.ServiceCommandDescriptor parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.cosmos.autocli.v1.ServiceCommandDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.cosmos.autocli.v1.ServiceCommandDescriptor parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.cosmos.autocli.v1.ServiceCommandDescriptor prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * ServiceCommandDescriptor describes a CLI command based on a protobuf service.
   * </pre>
   *
   * Protobuf type {@code cosmos.autocli.v1.ServiceCommandDescriptor}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:cosmos.autocli.v1.ServiceCommandDescriptor)
      com.cosmos.autocli.v1.ServiceCommandDescriptorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.autocli.v1.OptionsProto.internal_static_cosmos_autocli_v1_ServiceCommandDescriptor_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetSubCommands();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 3:
          return internalGetMutableSubCommands();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.autocli.v1.OptionsProto.internal_static_cosmos_autocli_v1_ServiceCommandDescriptor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.autocli.v1.ServiceCommandDescriptor.class, com.cosmos.autocli.v1.ServiceCommandDescriptor.Builder.class);
    }

    // Construct using com.cosmos.autocli.v1.ServiceCommandDescriptor.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      service_ = "";
      if (rpcCommandOptionsBuilder_ == null) {
        rpcCommandOptions_ = java.util.Collections.emptyList();
      } else {
        rpcCommandOptions_ = null;
        rpcCommandOptionsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      internalGetMutableSubCommands().clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.cosmos.autocli.v1.OptionsProto.internal_static_cosmos_autocli_v1_ServiceCommandDescriptor_descriptor;
    }

    @java.lang.Override
    public com.cosmos.autocli.v1.ServiceCommandDescriptor getDefaultInstanceForType() {
      return com.cosmos.autocli.v1.ServiceCommandDescriptor.getDefaultInstance();
    }

    @java.lang.Override
    public com.cosmos.autocli.v1.ServiceCommandDescriptor build() {
      com.cosmos.autocli.v1.ServiceCommandDescriptor result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.cosmos.autocli.v1.ServiceCommandDescriptor buildPartial() {
      com.cosmos.autocli.v1.ServiceCommandDescriptor result = new com.cosmos.autocli.v1.ServiceCommandDescriptor(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.cosmos.autocli.v1.ServiceCommandDescriptor result) {
      if (rpcCommandOptionsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          rpcCommandOptions_ = java.util.Collections.unmodifiableList(rpcCommandOptions_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.rpcCommandOptions_ = rpcCommandOptions_;
      } else {
        result.rpcCommandOptions_ = rpcCommandOptionsBuilder_.build();
      }
    }

    private void buildPartial0(com.cosmos.autocli.v1.ServiceCommandDescriptor result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.service_ = service_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.subCommands_ = internalGetSubCommands();
        result.subCommands_.makeImmutable();
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.cosmos.autocli.v1.ServiceCommandDescriptor) {
        return mergeFrom((com.cosmos.autocli.v1.ServiceCommandDescriptor)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.cosmos.autocli.v1.ServiceCommandDescriptor other) {
      if (other == com.cosmos.autocli.v1.ServiceCommandDescriptor.getDefaultInstance()) return this;
      if (!other.getService().isEmpty()) {
        service_ = other.service_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (rpcCommandOptionsBuilder_ == null) {
        if (!other.rpcCommandOptions_.isEmpty()) {
          if (rpcCommandOptions_.isEmpty()) {
            rpcCommandOptions_ = other.rpcCommandOptions_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureRpcCommandOptionsIsMutable();
            rpcCommandOptions_.addAll(other.rpcCommandOptions_);
          }
          onChanged();
        }
      } else {
        if (!other.rpcCommandOptions_.isEmpty()) {
          if (rpcCommandOptionsBuilder_.isEmpty()) {
            rpcCommandOptionsBuilder_.dispose();
            rpcCommandOptionsBuilder_ = null;
            rpcCommandOptions_ = other.rpcCommandOptions_;
            bitField0_ = (bitField0_ & ~0x00000002);
            rpcCommandOptionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getRpcCommandOptionsFieldBuilder() : null;
          } else {
            rpcCommandOptionsBuilder_.addAllMessages(other.rpcCommandOptions_);
          }
        }
      }
      internalGetMutableSubCommands().mergeFrom(
          other.internalGetSubCommands());
      bitField0_ |= 0x00000004;
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              service_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              com.cosmos.autocli.v1.RpcCommandOptions m =
                  input.readMessage(
                      com.cosmos.autocli.v1.RpcCommandOptions.parser(),
                      extensionRegistry);
              if (rpcCommandOptionsBuilder_ == null) {
                ensureRpcCommandOptionsIsMutable();
                rpcCommandOptions_.add(m);
              } else {
                rpcCommandOptionsBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 26: {
              com.google.protobuf.MapEntry<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor>
              subCommands__ = input.readMessage(
                  SubCommandsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableSubCommands().getMutableMap().put(
                  subCommands__.getKey(), subCommands__.getValue());
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object service_ = "";
    /**
     * <pre>
     * service is the fully qualified name of the protobuf service to build
     * the command from. It can be left empty if sub_commands are used instead
     * which may be the case if a module provides multiple tx and/or query services.
     * </pre>
     *
     * <code>string service = 1 [json_name = "service"];</code>
     * @return The service.
     */
    public java.lang.String getService() {
      java.lang.Object ref = service_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        service_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * service is the fully qualified name of the protobuf service to build
     * the command from. It can be left empty if sub_commands are used instead
     * which may be the case if a module provides multiple tx and/or query services.
     * </pre>
     *
     * <code>string service = 1 [json_name = "service"];</code>
     * @return The bytes for service.
     */
    public com.google.protobuf.ByteString
        getServiceBytes() {
      java.lang.Object ref = service_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        service_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * service is the fully qualified name of the protobuf service to build
     * the command from. It can be left empty if sub_commands are used instead
     * which may be the case if a module provides multiple tx and/or query services.
     * </pre>
     *
     * <code>string service = 1 [json_name = "service"];</code>
     * @param value The service to set.
     * @return This builder for chaining.
     */
    public Builder setService(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      service_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * service is the fully qualified name of the protobuf service to build
     * the command from. It can be left empty if sub_commands are used instead
     * which may be the case if a module provides multiple tx and/or query services.
     * </pre>
     *
     * <code>string service = 1 [json_name = "service"];</code>
     * @return This builder for chaining.
     */
    public Builder clearService() {
      service_ = getDefaultInstance().getService();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * service is the fully qualified name of the protobuf service to build
     * the command from. It can be left empty if sub_commands are used instead
     * which may be the case if a module provides multiple tx and/or query services.
     * </pre>
     *
     * <code>string service = 1 [json_name = "service"];</code>
     * @param value The bytes for service to set.
     * @return This builder for chaining.
     */
    public Builder setServiceBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      service_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.util.List<com.cosmos.autocli.v1.RpcCommandOptions> rpcCommandOptions_ =
      java.util.Collections.emptyList();
    private void ensureRpcCommandOptionsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        rpcCommandOptions_ = new java.util.ArrayList<com.cosmos.autocli.v1.RpcCommandOptions>(rpcCommandOptions_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.autocli.v1.RpcCommandOptions, com.cosmos.autocli.v1.RpcCommandOptions.Builder, com.cosmos.autocli.v1.RpcCommandOptionsOrBuilder> rpcCommandOptionsBuilder_;

    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public java.util.List<com.cosmos.autocli.v1.RpcCommandOptions> getRpcCommandOptionsList() {
      if (rpcCommandOptionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(rpcCommandOptions_);
      } else {
        return rpcCommandOptionsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public int getRpcCommandOptionsCount() {
      if (rpcCommandOptionsBuilder_ == null) {
        return rpcCommandOptions_.size();
      } else {
        return rpcCommandOptionsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public com.cosmos.autocli.v1.RpcCommandOptions getRpcCommandOptions(int index) {
      if (rpcCommandOptionsBuilder_ == null) {
        return rpcCommandOptions_.get(index);
      } else {
        return rpcCommandOptionsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public Builder setRpcCommandOptions(
        int index, com.cosmos.autocli.v1.RpcCommandOptions value) {
      if (rpcCommandOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRpcCommandOptionsIsMutable();
        rpcCommandOptions_.set(index, value);
        onChanged();
      } else {
        rpcCommandOptionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public Builder setRpcCommandOptions(
        int index, com.cosmos.autocli.v1.RpcCommandOptions.Builder builderForValue) {
      if (rpcCommandOptionsBuilder_ == null) {
        ensureRpcCommandOptionsIsMutable();
        rpcCommandOptions_.set(index, builderForValue.build());
        onChanged();
      } else {
        rpcCommandOptionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public Builder addRpcCommandOptions(com.cosmos.autocli.v1.RpcCommandOptions value) {
      if (rpcCommandOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRpcCommandOptionsIsMutable();
        rpcCommandOptions_.add(value);
        onChanged();
      } else {
        rpcCommandOptionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public Builder addRpcCommandOptions(
        int index, com.cosmos.autocli.v1.RpcCommandOptions value) {
      if (rpcCommandOptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureRpcCommandOptionsIsMutable();
        rpcCommandOptions_.add(index, value);
        onChanged();
      } else {
        rpcCommandOptionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public Builder addRpcCommandOptions(
        com.cosmos.autocli.v1.RpcCommandOptions.Builder builderForValue) {
      if (rpcCommandOptionsBuilder_ == null) {
        ensureRpcCommandOptionsIsMutable();
        rpcCommandOptions_.add(builderForValue.build());
        onChanged();
      } else {
        rpcCommandOptionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public Builder addRpcCommandOptions(
        int index, com.cosmos.autocli.v1.RpcCommandOptions.Builder builderForValue) {
      if (rpcCommandOptionsBuilder_ == null) {
        ensureRpcCommandOptionsIsMutable();
        rpcCommandOptions_.add(index, builderForValue.build());
        onChanged();
      } else {
        rpcCommandOptionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public Builder addAllRpcCommandOptions(
        java.lang.Iterable<? extends com.cosmos.autocli.v1.RpcCommandOptions> values) {
      if (rpcCommandOptionsBuilder_ == null) {
        ensureRpcCommandOptionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, rpcCommandOptions_);
        onChanged();
      } else {
        rpcCommandOptionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public Builder clearRpcCommandOptions() {
      if (rpcCommandOptionsBuilder_ == null) {
        rpcCommandOptions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        rpcCommandOptionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public Builder removeRpcCommandOptions(int index) {
      if (rpcCommandOptionsBuilder_ == null) {
        ensureRpcCommandOptionsIsMutable();
        rpcCommandOptions_.remove(index);
        onChanged();
      } else {
        rpcCommandOptionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public com.cosmos.autocli.v1.RpcCommandOptions.Builder getRpcCommandOptionsBuilder(
        int index) {
      return getRpcCommandOptionsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public com.cosmos.autocli.v1.RpcCommandOptionsOrBuilder getRpcCommandOptionsOrBuilder(
        int index) {
      if (rpcCommandOptionsBuilder_ == null) {
        return rpcCommandOptions_.get(index);  } else {
        return rpcCommandOptionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public java.util.List<? extends com.cosmos.autocli.v1.RpcCommandOptionsOrBuilder> 
         getRpcCommandOptionsOrBuilderList() {
      if (rpcCommandOptionsBuilder_ != null) {
        return rpcCommandOptionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(rpcCommandOptions_);
      }
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public com.cosmos.autocli.v1.RpcCommandOptions.Builder addRpcCommandOptionsBuilder() {
      return getRpcCommandOptionsFieldBuilder().addBuilder(
          com.cosmos.autocli.v1.RpcCommandOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public com.cosmos.autocli.v1.RpcCommandOptions.Builder addRpcCommandOptionsBuilder(
        int index) {
      return getRpcCommandOptionsFieldBuilder().addBuilder(
          index, com.cosmos.autocli.v1.RpcCommandOptions.getDefaultInstance());
    }
    /**
     * <pre>
     * rpc_command_options are options for commands generated from rpc methods.
     * If no options are specified for a given rpc method on the service, a
     * command will be generated for that method with the default options.
     * </pre>
     *
     * <code>repeated .cosmos.autocli.v1.RpcCommandOptions rpc_command_options = 2 [json_name = "rpcCommandOptions"];</code>
     */
    public java.util.List<com.cosmos.autocli.v1.RpcCommandOptions.Builder> 
         getRpcCommandOptionsBuilderList() {
      return getRpcCommandOptionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.autocli.v1.RpcCommandOptions, com.cosmos.autocli.v1.RpcCommandOptions.Builder, com.cosmos.autocli.v1.RpcCommandOptionsOrBuilder> 
        getRpcCommandOptionsFieldBuilder() {
      if (rpcCommandOptionsBuilder_ == null) {
        rpcCommandOptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.cosmos.autocli.v1.RpcCommandOptions, com.cosmos.autocli.v1.RpcCommandOptions.Builder, com.cosmos.autocli.v1.RpcCommandOptionsOrBuilder>(
                rpcCommandOptions_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        rpcCommandOptions_ = null;
      }
      return rpcCommandOptionsBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor> subCommands_;
    private com.google.protobuf.MapField<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor>
        internalGetSubCommands() {
      if (subCommands_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            SubCommandsDefaultEntryHolder.defaultEntry);
      }
      return subCommands_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor>
        internalGetMutableSubCommands() {
      if (subCommands_ == null) {
        subCommands_ = com.google.protobuf.MapField.newMapField(
            SubCommandsDefaultEntryHolder.defaultEntry);
      }
      if (!subCommands_.isMutable()) {
        subCommands_ = subCommands_.copy();
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return subCommands_;
    }
    public int getSubCommandsCount() {
      return internalGetSubCommands().getMap().size();
    }
    /**
     * <pre>
     * sub_commands is a map of optional sub-commands for this command based on
     * different protobuf services. The map key is used as the name of the
     * sub-command.
     * </pre>
     *
     * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
     */
    @java.lang.Override
    public boolean containsSubCommands(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetSubCommands().getMap().containsKey(key);
    }
    /**
     * Use {@link #getSubCommandsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor> getSubCommands() {
      return getSubCommandsMap();
    }
    /**
     * <pre>
     * sub_commands is a map of optional sub-commands for this command based on
     * different protobuf services. The map key is used as the name of the
     * sub-command.
     * </pre>
     *
     * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
     */
    @java.lang.Override
    public java.util.Map<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor> getSubCommandsMap() {
      return internalGetSubCommands().getMap();
    }
    /**
     * <pre>
     * sub_commands is a map of optional sub-commands for this command based on
     * different protobuf services. The map key is used as the name of the
     * sub-command.
     * </pre>
     *
     * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
     */
    @java.lang.Override
    public /* nullable */
com.cosmos.autocli.v1.ServiceCommandDescriptor getSubCommandsOrDefault(
        java.lang.String key,
        /* nullable */
com.cosmos.autocli.v1.ServiceCommandDescriptor defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor> map =
          internalGetSubCommands().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * sub_commands is a map of optional sub-commands for this command based on
     * different protobuf services. The map key is used as the name of the
     * sub-command.
     * </pre>
     *
     * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
     */
    @java.lang.Override
    public com.cosmos.autocli.v1.ServiceCommandDescriptor getSubCommandsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor> map =
          internalGetSubCommands().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    public Builder clearSubCommands() {
      bitField0_ = (bitField0_ & ~0x00000004);
      internalGetMutableSubCommands().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * sub_commands is a map of optional sub-commands for this command based on
     * different protobuf services. The map key is used as the name of the
     * sub-command.
     * </pre>
     *
     * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
     */
    public Builder removeSubCommands(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableSubCommands().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor>
        getMutableSubCommands() {
      bitField0_ |= 0x00000004;
      return internalGetMutableSubCommands().getMutableMap();
    }
    /**
     * <pre>
     * sub_commands is a map of optional sub-commands for this command based on
     * different protobuf services. The map key is used as the name of the
     * sub-command.
     * </pre>
     *
     * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
     */
    public Builder putSubCommands(
        java.lang.String key,
        com.cosmos.autocli.v1.ServiceCommandDescriptor value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) { throw new NullPointerException("map value"); }
      internalGetMutableSubCommands().getMutableMap()
          .put(key, value);
      bitField0_ |= 0x00000004;
      return this;
    }
    /**
     * <pre>
     * sub_commands is a map of optional sub-commands for this command based on
     * different protobuf services. The map key is used as the name of the
     * sub-command.
     * </pre>
     *
     * <code>map&lt;string, .cosmos.autocli.v1.ServiceCommandDescriptor&gt; sub_commands = 3 [json_name = "subCommands"];</code>
     */
    public Builder putAllSubCommands(
        java.util.Map<java.lang.String, com.cosmos.autocli.v1.ServiceCommandDescriptor> values) {
      internalGetMutableSubCommands().getMutableMap()
          .putAll(values);
      bitField0_ |= 0x00000004;
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:cosmos.autocli.v1.ServiceCommandDescriptor)
  }

  // @@protoc_insertion_point(class_scope:cosmos.autocli.v1.ServiceCommandDescriptor)
  private static final com.cosmos.autocli.v1.ServiceCommandDescriptor DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.cosmos.autocli.v1.ServiceCommandDescriptor();
  }

  public static com.cosmos.autocli.v1.ServiceCommandDescriptor getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ServiceCommandDescriptor>
      PARSER = new com.google.protobuf.AbstractParser<ServiceCommandDescriptor>() {
    @java.lang.Override
    public ServiceCommandDescriptor parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ServiceCommandDescriptor> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ServiceCommandDescriptor> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.cosmos.autocli.v1.ServiceCommandDescriptor getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

