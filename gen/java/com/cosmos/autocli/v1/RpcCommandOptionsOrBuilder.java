// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/autocli/v1/options.proto

package com.cosmos.autocli.v1;

public interface RpcCommandOptionsOrBuilder extends
    // @@protoc_insertion_point(interface_extends:cosmos.autocli.v1.RpcCommandOptions)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * rpc_method is short name of the protobuf rpc method that this command is
   * generated from.
   * </pre>
   *
   * <code>string rpc_method = 1 [json_name = "rpcMethod"];</code>
   * @return The rpcMethod.
   */
  java.lang.String getRpcMethod();
  /**
   * <pre>
   * rpc_method is short name of the protobuf rpc method that this command is
   * generated from.
   * </pre>
   *
   * <code>string rpc_method = 1 [json_name = "rpcMethod"];</code>
   * @return The bytes for rpcMethod.
   */
  com.google.protobuf.ByteString
      getRpcMethodBytes();

  /**
   * <pre>
   * use is the one-line usage method. It also allows specifying an alternate
   * name for the command as the first word of the usage text.
   *
   * By default the name of an rpc command is the kebab-case short name of the
   * rpc method.
   * </pre>
   *
   * <code>string use = 2 [json_name = "use"];</code>
   * @return The use.
   */
  java.lang.String getUse();
  /**
   * <pre>
   * use is the one-line usage method. It also allows specifying an alternate
   * name for the command as the first word of the usage text.
   *
   * By default the name of an rpc command is the kebab-case short name of the
   * rpc method.
   * </pre>
   *
   * <code>string use = 2 [json_name = "use"];</code>
   * @return The bytes for use.
   */
  com.google.protobuf.ByteString
      getUseBytes();

  /**
   * <pre>
   * long is the long message shown in the 'help &lt;this-command&gt;' output.
   * </pre>
   *
   * <code>string long = 3 [json_name = "long"];</code>
   * @return The long.
   */
  java.lang.String getLong();
  /**
   * <pre>
   * long is the long message shown in the 'help &lt;this-command&gt;' output.
   * </pre>
   *
   * <code>string long = 3 [json_name = "long"];</code>
   * @return The bytes for long.
   */
  com.google.protobuf.ByteString
      getLongBytes();

  /**
   * <pre>
   * short is the short description shown in the 'help' output.
   * </pre>
   *
   * <code>string short = 4 [json_name = "short"];</code>
   * @return The short.
   */
  java.lang.String getShort();
  /**
   * <pre>
   * short is the short description shown in the 'help' output.
   * </pre>
   *
   * <code>string short = 4 [json_name = "short"];</code>
   * @return The bytes for short.
   */
  com.google.protobuf.ByteString
      getShortBytes();

  /**
   * <pre>
   * example is examples of how to use the command.
   * </pre>
   *
   * <code>string example = 5 [json_name = "example"];</code>
   * @return The example.
   */
  java.lang.String getExample();
  /**
   * <pre>
   * example is examples of how to use the command.
   * </pre>
   *
   * <code>string example = 5 [json_name = "example"];</code>
   * @return The bytes for example.
   */
  com.google.protobuf.ByteString
      getExampleBytes();

  /**
   * <pre>
   * alias is an array of aliases that can be used instead of the first word in Use.
   * </pre>
   *
   * <code>repeated string alias = 6 [json_name = "alias"];</code>
   * @return A list containing the alias.
   */
  java.util.List<java.lang.String>
      getAliasList();
  /**
   * <pre>
   * alias is an array of aliases that can be used instead of the first word in Use.
   * </pre>
   *
   * <code>repeated string alias = 6 [json_name = "alias"];</code>
   * @return The count of alias.
   */
  int getAliasCount();
  /**
   * <pre>
   * alias is an array of aliases that can be used instead of the first word in Use.
   * </pre>
   *
   * <code>repeated string alias = 6 [json_name = "alias"];</code>
   * @param index The index of the element to return.
   * @return The alias at the given index.
   */
  java.lang.String getAlias(int index);
  /**
   * <pre>
   * alias is an array of aliases that can be used instead of the first word in Use.
   * </pre>
   *
   * <code>repeated string alias = 6 [json_name = "alias"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the alias at the given index.
   */
  com.google.protobuf.ByteString
      getAliasBytes(int index);

  /**
   * <pre>
   * suggest_for is an array of command names for which this command will be suggested -
   * similar to aliases but only suggests.
   * </pre>
   *
   * <code>repeated string suggest_for = 7 [json_name = "suggestFor"];</code>
   * @return A list containing the suggestFor.
   */
  java.util.List<java.lang.String>
      getSuggestForList();
  /**
   * <pre>
   * suggest_for is an array of command names for which this command will be suggested -
   * similar to aliases but only suggests.
   * </pre>
   *
   * <code>repeated string suggest_for = 7 [json_name = "suggestFor"];</code>
   * @return The count of suggestFor.
   */
  int getSuggestForCount();
  /**
   * <pre>
   * suggest_for is an array of command names for which this command will be suggested -
   * similar to aliases but only suggests.
   * </pre>
   *
   * <code>repeated string suggest_for = 7 [json_name = "suggestFor"];</code>
   * @param index The index of the element to return.
   * @return The suggestFor at the given index.
   */
  java.lang.String getSuggestFor(int index);
  /**
   * <pre>
   * suggest_for is an array of command names for which this command will be suggested -
   * similar to aliases but only suggests.
   * </pre>
   *
   * <code>repeated string suggest_for = 7 [json_name = "suggestFor"];</code>
   * @param index The index of the value to return.
   * @return The bytes of the suggestFor at the given index.
   */
  com.google.protobuf.ByteString
      getSuggestForBytes(int index);

  /**
   * <pre>
   * deprecated defines, if this command is deprecated and should print this string when used.
   * </pre>
   *
   * <code>string deprecated = 8 [json_name = "deprecated"];</code>
   * @return The deprecated.
   */
  java.lang.String getDeprecated();
  /**
   * <pre>
   * deprecated defines, if this command is deprecated and should print this string when used.
   * </pre>
   *
   * <code>string deprecated = 8 [json_name = "deprecated"];</code>
   * @return The bytes for deprecated.
   */
  com.google.protobuf.ByteString
      getDeprecatedBytes();

  /**
   * <pre>
   * version defines the version for this command. If this value is non-empty and the command does not
   * define a "version" flag, a "version" boolean flag will be added to the command and, if specified,
   * will print content of the "Version" variable. A shorthand "v" flag will also be added if the
   * command does not define one.
   * </pre>
   *
   * <code>string version = 9 [json_name = "version"];</code>
   * @return The version.
   */
  java.lang.String getVersion();
  /**
   * <pre>
   * version defines the version for this command. If this value is non-empty and the command does not
   * define a "version" flag, a "version" boolean flag will be added to the command and, if specified,
   * will print content of the "Version" variable. A shorthand "v" flag will also be added if the
   * command does not define one.
   * </pre>
   *
   * <code>string version = 9 [json_name = "version"];</code>
   * @return The bytes for version.
   */
  com.google.protobuf.ByteString
      getVersionBytes();

  /**
   * <pre>
   * flag_options are options for flags generated from rpc request fields.
   * By default all request fields are configured as flags. They can
   * also be configured as positional args instead using positional_args.
   * </pre>
   *
   * <code>map&lt;string, .cosmos.autocli.v1.FlagOptions&gt; flag_options = 10 [json_name = "flagOptions"];</code>
   */
  int getFlagOptionsCount();
  /**
   * <pre>
   * flag_options are options for flags generated from rpc request fields.
   * By default all request fields are configured as flags. They can
   * also be configured as positional args instead using positional_args.
   * </pre>
   *
   * <code>map&lt;string, .cosmos.autocli.v1.FlagOptions&gt; flag_options = 10 [json_name = "flagOptions"];</code>
   */
  boolean containsFlagOptions(
      java.lang.String key);
  /**
   * Use {@link #getFlagOptionsMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, com.cosmos.autocli.v1.FlagOptions>
  getFlagOptions();
  /**
   * <pre>
   * flag_options are options for flags generated from rpc request fields.
   * By default all request fields are configured as flags. They can
   * also be configured as positional args instead using positional_args.
   * </pre>
   *
   * <code>map&lt;string, .cosmos.autocli.v1.FlagOptions&gt; flag_options = 10 [json_name = "flagOptions"];</code>
   */
  java.util.Map<java.lang.String, com.cosmos.autocli.v1.FlagOptions>
  getFlagOptionsMap();
  /**
   * <pre>
   * flag_options are options for flags generated from rpc request fields.
   * By default all request fields are configured as flags. They can
   * also be configured as positional args instead using positional_args.
   * </pre>
   *
   * <code>map&lt;string, .cosmos.autocli.v1.FlagOptions&gt; flag_options = 10 [json_name = "flagOptions"];</code>
   */
  /* nullable */
com.cosmos.autocli.v1.FlagOptions getFlagOptionsOrDefault(
      java.lang.String key,
      /* nullable */
com.cosmos.autocli.v1.FlagOptions defaultValue);
  /**
   * <pre>
   * flag_options are options for flags generated from rpc request fields.
   * By default all request fields are configured as flags. They can
   * also be configured as positional args instead using positional_args.
   * </pre>
   *
   * <code>map&lt;string, .cosmos.autocli.v1.FlagOptions&gt; flag_options = 10 [json_name = "flagOptions"];</code>
   */
  com.cosmos.autocli.v1.FlagOptions getFlagOptionsOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * positional_args specifies positional arguments for the command.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11 [json_name = "positionalArgs"];</code>
   */
  java.util.List<com.cosmos.autocli.v1.PositionalArgDescriptor> 
      getPositionalArgsList();
  /**
   * <pre>
   * positional_args specifies positional arguments for the command.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11 [json_name = "positionalArgs"];</code>
   */
  com.cosmos.autocli.v1.PositionalArgDescriptor getPositionalArgs(int index);
  /**
   * <pre>
   * positional_args specifies positional arguments for the command.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11 [json_name = "positionalArgs"];</code>
   */
  int getPositionalArgsCount();
  /**
   * <pre>
   * positional_args specifies positional arguments for the command.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11 [json_name = "positionalArgs"];</code>
   */
  java.util.List<? extends com.cosmos.autocli.v1.PositionalArgDescriptorOrBuilder> 
      getPositionalArgsOrBuilderList();
  /**
   * <pre>
   * positional_args specifies positional arguments for the command.
   * </pre>
   *
   * <code>repeated .cosmos.autocli.v1.PositionalArgDescriptor positional_args = 11 [json_name = "positionalArgs"];</code>
   */
  com.cosmos.autocli.v1.PositionalArgDescriptorOrBuilder getPositionalArgsOrBuilder(
      int index);

  /**
   * <pre>
   * skip specifies whether to skip this rpc method when generating commands.
   * </pre>
   *
   * <code>bool skip = 12 [json_name = "skip"];</code>
   * @return The skip.
   */
  boolean getSkip();
}
