// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/staking/v1beta1/authz.proto

package com.cosmos.staking.v1beta1;

public interface StakeAuthorizationOrBuilder extends
    // @@protoc_insertion_point(interface_extends:cosmos.staking.v1beta1.StakeAuthorization)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
   * empty, there is no spend limit and any amount of coins can be delegated.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
   * @return Whether the maxTokens field is set.
   */
  boolean hasMaxTokens();
  /**
   * <pre>
   * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
   * empty, there is no spend limit and any amount of coins can be delegated.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
   * @return The maxTokens.
   */
  com.cosmos.base.v1beta1.Coin getMaxTokens();
  /**
   * <pre>
   * max_tokens specifies the maximum amount of tokens can be delegate to a validator. If it is
   * empty, there is no spend limit and any amount of coins can be delegated.
   * </pre>
   *
   * <code>.cosmos.base.v1beta1.Coin max_tokens = 1 [json_name = "maxTokens", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"];</code>
   */
  com.cosmos.base.v1beta1.CoinOrBuilder getMaxTokensOrBuilder();

  /**
   * <pre>
   * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
   * account.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList", (.amino.oneof_name) = "cosmos-sdk/StakeAuthorization/AllowList"];</code>
   * @return Whether the allowList field is set.
   */
  boolean hasAllowList();
  /**
   * <pre>
   * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
   * account.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList", (.amino.oneof_name) = "cosmos-sdk/StakeAuthorization/AllowList"];</code>
   * @return The allowList.
   */
  com.cosmos.staking.v1beta1.StakeAuthorization.Validators getAllowList();
  /**
   * <pre>
   * allow_list specifies list of validator addresses to whom grantee can delegate tokens on behalf of granter's
   * account.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators allow_list = 2 [json_name = "allowList", (.amino.oneof_name) = "cosmos-sdk/StakeAuthorization/AllowList"];</code>
   */
  com.cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOrBuilder getAllowListOrBuilder();

  /**
   * <pre>
   * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList", (.amino.oneof_name) = "cosmos-sdk/StakeAuthorization/DenyList"];</code>
   * @return Whether the denyList field is set.
   */
  boolean hasDenyList();
  /**
   * <pre>
   * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList", (.amino.oneof_name) = "cosmos-sdk/StakeAuthorization/DenyList"];</code>
   * @return The denyList.
   */
  com.cosmos.staking.v1beta1.StakeAuthorization.Validators getDenyList();
  /**
   * <pre>
   * deny_list specifies list of validator addresses to whom grantee can not delegate tokens.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.StakeAuthorization.Validators deny_list = 3 [json_name = "denyList", (.amino.oneof_name) = "cosmos-sdk/StakeAuthorization/DenyList"];</code>
   */
  com.cosmos.staking.v1beta1.StakeAuthorization.ValidatorsOrBuilder getDenyListOrBuilder();

  /**
   * <pre>
   * authorization_type defines one of AuthorizationType.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];</code>
   * @return The enum numeric value on the wire for authorizationType.
   */
  int getAuthorizationTypeValue();
  /**
   * <pre>
   * authorization_type defines one of AuthorizationType.
   * </pre>
   *
   * <code>.cosmos.staking.v1beta1.AuthorizationType authorization_type = 4 [json_name = "authorizationType"];</code>
   * @return The authorizationType.
   */
  com.cosmos.staking.v1beta1.AuthorizationType getAuthorizationType();

  com.cosmos.staking.v1beta1.StakeAuthorization.ValidatorsCase getValidatorsCase();
}
