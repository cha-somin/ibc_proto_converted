// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/tx/v1beta1/tx.proto

package com.cosmos.tx.v1beta1;

/**
 * <pre>
 * AuxSignerData is the intermediary format that an auxiliary signer (e.g. a
 * tipper) builds and sends to the fee payer (who will build and broadcast the
 * actual tx). AuxSignerData is not a valid tx in itself, and will be rejected
 * by the node if sent directly as-is.
 *
 * Since: cosmos-sdk 0.46
 * </pre>
 *
 * Protobuf type {@code cosmos.tx.v1beta1.AuxSignerData}
 */
public final class AuxSignerData extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:cosmos.tx.v1beta1.AuxSignerData)
    AuxSignerDataOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AuxSignerData.newBuilder() to construct.
  private AuxSignerData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AuxSignerData() {
    address_ = "";
    mode_ = 0;
    sig_ = com.google.protobuf.ByteString.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new AuxSignerData();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.cosmos.tx.v1beta1.TxProto.internal_static_cosmos_tx_v1beta1_AuxSignerData_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.cosmos.tx.v1beta1.TxProto.internal_static_cosmos_tx_v1beta1_AuxSignerData_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.cosmos.tx.v1beta1.AuxSignerData.class, com.cosmos.tx.v1beta1.AuxSignerData.Builder.class);
  }

  public static final int ADDRESS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object address_ = "";
  /**
   * <pre>
   * address is the bech32-encoded address of the auxiliary signer. If using
   * AuxSignerData across different chains, the bech32 prefix of the target
   * chain (where the final transaction is broadcasted) should be used.
   * </pre>
   *
   * <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
   * @return The address.
   */
  @java.lang.Override
  public java.lang.String getAddress() {
    java.lang.Object ref = address_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      address_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * address is the bech32-encoded address of the auxiliary signer. If using
   * AuxSignerData across different chains, the bech32 prefix of the target
   * chain (where the final transaction is broadcasted) should be used.
   * </pre>
   *
   * <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
   * @return The bytes for address.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAddressBytes() {
    java.lang.Object ref = address_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      address_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SIGN_DOC_FIELD_NUMBER = 2;
  private com.cosmos.tx.v1beta1.SignDocDirectAux signDoc_;
  /**
   * <pre>
   * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
   * signs. Note: we use the same sign doc even if we're signing with
   * LEGACY_AMINO_JSON.
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
   * @return Whether the signDoc field is set.
   */
  @java.lang.Override
  public boolean hasSignDoc() {
    return signDoc_ != null;
  }
  /**
   * <pre>
   * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
   * signs. Note: we use the same sign doc even if we're signing with
   * LEGACY_AMINO_JSON.
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
   * @return The signDoc.
   */
  @java.lang.Override
  public com.cosmos.tx.v1beta1.SignDocDirectAux getSignDoc() {
    return signDoc_ == null ? com.cosmos.tx.v1beta1.SignDocDirectAux.getDefaultInstance() : signDoc_;
  }
  /**
   * <pre>
   * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
   * signs. Note: we use the same sign doc even if we're signing with
   * LEGACY_AMINO_JSON.
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
   */
  @java.lang.Override
  public com.cosmos.tx.v1beta1.SignDocDirectAuxOrBuilder getSignDocOrBuilder() {
    return signDoc_ == null ? com.cosmos.tx.v1beta1.SignDocDirectAux.getDefaultInstance() : signDoc_;
  }

  public static final int MODE_FIELD_NUMBER = 3;
  private int mode_ = 0;
  /**
   * <pre>
   * mode is the signing mode of the single signer.
   * </pre>
   *
   * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];</code>
   * @return The enum numeric value on the wire for mode.
   */
  @java.lang.Override public int getModeValue() {
    return mode_;
  }
  /**
   * <pre>
   * mode is the signing mode of the single signer.
   * </pre>
   *
   * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];</code>
   * @return The mode.
   */
  @java.lang.Override public com.cosmos.tx.signing.v1beta1.SignMode getMode() {
    com.cosmos.tx.signing.v1beta1.SignMode result = com.cosmos.tx.signing.v1beta1.SignMode.forNumber(mode_);
    return result == null ? com.cosmos.tx.signing.v1beta1.SignMode.UNRECOGNIZED : result;
  }

  public static final int SIG_FIELD_NUMBER = 4;
  private com.google.protobuf.ByteString sig_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * sig is the signature of the sign doc.
   * </pre>
   *
   * <code>bytes sig = 4 [json_name = "sig"];</code>
   * @return The sig.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getSig() {
    return sig_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(address_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, address_);
    }
    if (signDoc_ != null) {
      output.writeMessage(2, getSignDoc());
    }
    if (mode_ != com.cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED.getNumber()) {
      output.writeEnum(3, mode_);
    }
    if (!sig_.isEmpty()) {
      output.writeBytes(4, sig_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(address_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, address_);
    }
    if (signDoc_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getSignDoc());
    }
    if (mode_ != com.cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(3, mode_);
    }
    if (!sig_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(4, sig_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.cosmos.tx.v1beta1.AuxSignerData)) {
      return super.equals(obj);
    }
    com.cosmos.tx.v1beta1.AuxSignerData other = (com.cosmos.tx.v1beta1.AuxSignerData) obj;

    if (!getAddress()
        .equals(other.getAddress())) return false;
    if (hasSignDoc() != other.hasSignDoc()) return false;
    if (hasSignDoc()) {
      if (!getSignDoc()
          .equals(other.getSignDoc())) return false;
    }
    if (mode_ != other.mode_) return false;
    if (!getSig()
        .equals(other.getSig())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ADDRESS_FIELD_NUMBER;
    hash = (53 * hash) + getAddress().hashCode();
    if (hasSignDoc()) {
      hash = (37 * hash) + SIGN_DOC_FIELD_NUMBER;
      hash = (53 * hash) + getSignDoc().hashCode();
    }
    hash = (37 * hash) + MODE_FIELD_NUMBER;
    hash = (53 * hash) + mode_;
    hash = (37 * hash) + SIG_FIELD_NUMBER;
    hash = (53 * hash) + getSig().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.cosmos.tx.v1beta1.AuxSignerData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cosmos.tx.v1beta1.AuxSignerData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cosmos.tx.v1beta1.AuxSignerData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cosmos.tx.v1beta1.AuxSignerData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cosmos.tx.v1beta1.AuxSignerData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cosmos.tx.v1beta1.AuxSignerData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cosmos.tx.v1beta1.AuxSignerData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.cosmos.tx.v1beta1.AuxSignerData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.cosmos.tx.v1beta1.AuxSignerData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.cosmos.tx.v1beta1.AuxSignerData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.cosmos.tx.v1beta1.AuxSignerData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.cosmos.tx.v1beta1.AuxSignerData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.cosmos.tx.v1beta1.AuxSignerData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * AuxSignerData is the intermediary format that an auxiliary signer (e.g. a
   * tipper) builds and sends to the fee payer (who will build and broadcast the
   * actual tx). AuxSignerData is not a valid tx in itself, and will be rejected
   * by the node if sent directly as-is.
   *
   * Since: cosmos-sdk 0.46
   * </pre>
   *
   * Protobuf type {@code cosmos.tx.v1beta1.AuxSignerData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:cosmos.tx.v1beta1.AuxSignerData)
      com.cosmos.tx.v1beta1.AuxSignerDataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.tx.v1beta1.TxProto.internal_static_cosmos_tx_v1beta1_AuxSignerData_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.tx.v1beta1.TxProto.internal_static_cosmos_tx_v1beta1_AuxSignerData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.tx.v1beta1.AuxSignerData.class, com.cosmos.tx.v1beta1.AuxSignerData.Builder.class);
    }

    // Construct using com.cosmos.tx.v1beta1.AuxSignerData.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      address_ = "";
      signDoc_ = null;
      if (signDocBuilder_ != null) {
        signDocBuilder_.dispose();
        signDocBuilder_ = null;
      }
      mode_ = 0;
      sig_ = com.google.protobuf.ByteString.EMPTY;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.cosmos.tx.v1beta1.TxProto.internal_static_cosmos_tx_v1beta1_AuxSignerData_descriptor;
    }

    @java.lang.Override
    public com.cosmos.tx.v1beta1.AuxSignerData getDefaultInstanceForType() {
      return com.cosmos.tx.v1beta1.AuxSignerData.getDefaultInstance();
    }

    @java.lang.Override
    public com.cosmos.tx.v1beta1.AuxSignerData build() {
      com.cosmos.tx.v1beta1.AuxSignerData result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.cosmos.tx.v1beta1.AuxSignerData buildPartial() {
      com.cosmos.tx.v1beta1.AuxSignerData result = new com.cosmos.tx.v1beta1.AuxSignerData(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.cosmos.tx.v1beta1.AuxSignerData result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.address_ = address_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.signDoc_ = signDocBuilder_ == null
            ? signDoc_
            : signDocBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.mode_ = mode_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.sig_ = sig_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.cosmos.tx.v1beta1.AuxSignerData) {
        return mergeFrom((com.cosmos.tx.v1beta1.AuxSignerData)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.cosmos.tx.v1beta1.AuxSignerData other) {
      if (other == com.cosmos.tx.v1beta1.AuxSignerData.getDefaultInstance()) return this;
      if (!other.getAddress().isEmpty()) {
        address_ = other.address_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (other.hasSignDoc()) {
        mergeSignDoc(other.getSignDoc());
      }
      if (other.mode_ != 0) {
        setModeValue(other.getModeValue());
      }
      if (other.getSig() != com.google.protobuf.ByteString.EMPTY) {
        setSig(other.getSig());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              address_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getSignDocFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 24: {
              mode_ = input.readEnum();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 34: {
              sig_ = input.readBytes();
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object address_ = "";
    /**
     * <pre>
     * address is the bech32-encoded address of the auxiliary signer. If using
     * AuxSignerData across different chains, the bech32 prefix of the target
     * chain (where the final transaction is broadcasted) should be used.
     * </pre>
     *
     * <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @return The address.
     */
    public java.lang.String getAddress() {
      java.lang.Object ref = address_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        address_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * address is the bech32-encoded address of the auxiliary signer. If using
     * AuxSignerData across different chains, the bech32 prefix of the target
     * chain (where the final transaction is broadcasted) should be used.
     * </pre>
     *
     * <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @return The bytes for address.
     */
    public com.google.protobuf.ByteString
        getAddressBytes() {
      java.lang.Object ref = address_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        address_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * address is the bech32-encoded address of the auxiliary signer. If using
     * AuxSignerData across different chains, the bech32 prefix of the target
     * chain (where the final transaction is broadcasted) should be used.
     * </pre>
     *
     * <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @param value The address to set.
     * @return This builder for chaining.
     */
    public Builder setAddress(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      address_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * address is the bech32-encoded address of the auxiliary signer. If using
     * AuxSignerData across different chains, the bech32 prefix of the target
     * chain (where the final transaction is broadcasted) should be used.
     * </pre>
     *
     * <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAddress() {
      address_ = getDefaultInstance().getAddress();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * address is the bech32-encoded address of the auxiliary signer. If using
     * AuxSignerData across different chains, the bech32 prefix of the target
     * chain (where the final transaction is broadcasted) should be used.
     * </pre>
     *
     * <code>string address = 1 [json_name = "address", (.cosmos_proto.scalar) = "cosmos.AddressString"];</code>
     * @param value The bytes for address to set.
     * @return This builder for chaining.
     */
    public Builder setAddressBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      address_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private com.cosmos.tx.v1beta1.SignDocDirectAux signDoc_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.cosmos.tx.v1beta1.SignDocDirectAux, com.cosmos.tx.v1beta1.SignDocDirectAux.Builder, com.cosmos.tx.v1beta1.SignDocDirectAuxOrBuilder> signDocBuilder_;
    /**
     * <pre>
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     * @return Whether the signDoc field is set.
     */
    public boolean hasSignDoc() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     * @return The signDoc.
     */
    public com.cosmos.tx.v1beta1.SignDocDirectAux getSignDoc() {
      if (signDocBuilder_ == null) {
        return signDoc_ == null ? com.cosmos.tx.v1beta1.SignDocDirectAux.getDefaultInstance() : signDoc_;
      } else {
        return signDocBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     */
    public Builder setSignDoc(com.cosmos.tx.v1beta1.SignDocDirectAux value) {
      if (signDocBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        signDoc_ = value;
      } else {
        signDocBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     */
    public Builder setSignDoc(
        com.cosmos.tx.v1beta1.SignDocDirectAux.Builder builderForValue) {
      if (signDocBuilder_ == null) {
        signDoc_ = builderForValue.build();
      } else {
        signDocBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     */
    public Builder mergeSignDoc(com.cosmos.tx.v1beta1.SignDocDirectAux value) {
      if (signDocBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          signDoc_ != null &&
          signDoc_ != com.cosmos.tx.v1beta1.SignDocDirectAux.getDefaultInstance()) {
          getSignDocBuilder().mergeFrom(value);
        } else {
          signDoc_ = value;
        }
      } else {
        signDocBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     */
    public Builder clearSignDoc() {
      bitField0_ = (bitField0_ & ~0x00000002);
      signDoc_ = null;
      if (signDocBuilder_ != null) {
        signDocBuilder_.dispose();
        signDocBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     */
    public com.cosmos.tx.v1beta1.SignDocDirectAux.Builder getSignDocBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getSignDocFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     */
    public com.cosmos.tx.v1beta1.SignDocDirectAuxOrBuilder getSignDocOrBuilder() {
      if (signDocBuilder_ != null) {
        return signDocBuilder_.getMessageOrBuilder();
      } else {
        return signDoc_ == null ?
            com.cosmos.tx.v1beta1.SignDocDirectAux.getDefaultInstance() : signDoc_;
      }
    }
    /**
     * <pre>
     * sign_doc is the SIGN_MODE_DIRECT_AUX sign doc that the auxiliary signer
     * signs. Note: we use the same sign doc even if we're signing with
     * LEGACY_AMINO_JSON.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.SignDocDirectAux sign_doc = 2 [json_name = "signDoc"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.cosmos.tx.v1beta1.SignDocDirectAux, com.cosmos.tx.v1beta1.SignDocDirectAux.Builder, com.cosmos.tx.v1beta1.SignDocDirectAuxOrBuilder> 
        getSignDocFieldBuilder() {
      if (signDocBuilder_ == null) {
        signDocBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.cosmos.tx.v1beta1.SignDocDirectAux, com.cosmos.tx.v1beta1.SignDocDirectAux.Builder, com.cosmos.tx.v1beta1.SignDocDirectAuxOrBuilder>(
                getSignDoc(),
                getParentForChildren(),
                isClean());
        signDoc_ = null;
      }
      return signDocBuilder_;
    }

    private int mode_ = 0;
    /**
     * <pre>
     * mode is the signing mode of the single signer.
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];</code>
     * @return The enum numeric value on the wire for mode.
     */
    @java.lang.Override public int getModeValue() {
      return mode_;
    }
    /**
     * <pre>
     * mode is the signing mode of the single signer.
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];</code>
     * @param value The enum numeric value on the wire for mode to set.
     * @return This builder for chaining.
     */
    public Builder setModeValue(int value) {
      mode_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mode is the signing mode of the single signer.
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];</code>
     * @return The mode.
     */
    @java.lang.Override
    public com.cosmos.tx.signing.v1beta1.SignMode getMode() {
      com.cosmos.tx.signing.v1beta1.SignMode result = com.cosmos.tx.signing.v1beta1.SignMode.forNumber(mode_);
      return result == null ? com.cosmos.tx.signing.v1beta1.SignMode.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * mode is the signing mode of the single signer.
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];</code>
     * @param value The mode to set.
     * @return This builder for chaining.
     */
    public Builder setMode(com.cosmos.tx.signing.v1beta1.SignMode value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      mode_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * mode is the signing mode of the single signer.
     * </pre>
     *
     * <code>.cosmos.tx.signing.v1beta1.SignMode mode = 3 [json_name = "mode"];</code>
     * @return This builder for chaining.
     */
    public Builder clearMode() {
      bitField0_ = (bitField0_ & ~0x00000004);
      mode_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString sig_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * sig is the signature of the sign doc.
     * </pre>
     *
     * <code>bytes sig = 4 [json_name = "sig"];</code>
     * @return The sig.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSig() {
      return sig_;
    }
    /**
     * <pre>
     * sig is the signature of the sign doc.
     * </pre>
     *
     * <code>bytes sig = 4 [json_name = "sig"];</code>
     * @param value The sig to set.
     * @return This builder for chaining.
     */
    public Builder setSig(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      sig_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * sig is the signature of the sign doc.
     * </pre>
     *
     * <code>bytes sig = 4 [json_name = "sig"];</code>
     * @return This builder for chaining.
     */
    public Builder clearSig() {
      bitField0_ = (bitField0_ & ~0x00000008);
      sig_ = getDefaultInstance().getSig();
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:cosmos.tx.v1beta1.AuxSignerData)
  }

  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.AuxSignerData)
  private static final com.cosmos.tx.v1beta1.AuxSignerData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.cosmos.tx.v1beta1.AuxSignerData();
  }

  public static com.cosmos.tx.v1beta1.AuxSignerData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AuxSignerData>
      PARSER = new com.google.protobuf.AbstractParser<AuxSignerData>() {
    @java.lang.Override
    public AuxSignerData parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<AuxSignerData> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AuxSignerData> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.cosmos.tx.v1beta1.AuxSignerData getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

