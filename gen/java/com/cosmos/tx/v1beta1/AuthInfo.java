// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/tx/v1beta1/tx.proto

package com.cosmos.tx.v1beta1;

/**
 * <pre>
 * AuthInfo describes the fee and signer modes that are used to sign a
 * transaction.
 * </pre>
 *
 * Protobuf type {@code cosmos.tx.v1beta1.AuthInfo}
 */
public final class AuthInfo extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:cosmos.tx.v1beta1.AuthInfo)
    AuthInfoOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AuthInfo.newBuilder() to construct.
  private AuthInfo(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AuthInfo() {
    signerInfos_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new AuthInfo();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.cosmos.tx.v1beta1.TxProto.internal_static_cosmos_tx_v1beta1_AuthInfo_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.cosmos.tx.v1beta1.TxProto.internal_static_cosmos_tx_v1beta1_AuthInfo_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.cosmos.tx.v1beta1.AuthInfo.class, com.cosmos.tx.v1beta1.AuthInfo.Builder.class);
  }

  public static final int SIGNER_INFOS_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<com.cosmos.tx.v1beta1.SignerInfo> signerInfos_;
  /**
   * <pre>
   * signer_infos defines the signing modes for the required signers. The number
   * and order of elements must match the required signers from TxBody's
   * messages. The first element is the primary signer and the one which pays
   * the fee.
   * </pre>
   *
   * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
   */
  @java.lang.Override
  public java.util.List<com.cosmos.tx.v1beta1.SignerInfo> getSignerInfosList() {
    return signerInfos_;
  }
  /**
   * <pre>
   * signer_infos defines the signing modes for the required signers. The number
   * and order of elements must match the required signers from TxBody's
   * messages. The first element is the primary signer and the one which pays
   * the fee.
   * </pre>
   *
   * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.cosmos.tx.v1beta1.SignerInfoOrBuilder> 
      getSignerInfosOrBuilderList() {
    return signerInfos_;
  }
  /**
   * <pre>
   * signer_infos defines the signing modes for the required signers. The number
   * and order of elements must match the required signers from TxBody's
   * messages. The first element is the primary signer and the one which pays
   * the fee.
   * </pre>
   *
   * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
   */
  @java.lang.Override
  public int getSignerInfosCount() {
    return signerInfos_.size();
  }
  /**
   * <pre>
   * signer_infos defines the signing modes for the required signers. The number
   * and order of elements must match the required signers from TxBody's
   * messages. The first element is the primary signer and the one which pays
   * the fee.
   * </pre>
   *
   * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
   */
  @java.lang.Override
  public com.cosmos.tx.v1beta1.SignerInfo getSignerInfos(int index) {
    return signerInfos_.get(index);
  }
  /**
   * <pre>
   * signer_infos defines the signing modes for the required signers. The number
   * and order of elements must match the required signers from TxBody's
   * messages. The first element is the primary signer and the one which pays
   * the fee.
   * </pre>
   *
   * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
   */
  @java.lang.Override
  public com.cosmos.tx.v1beta1.SignerInfoOrBuilder getSignerInfosOrBuilder(
      int index) {
    return signerInfos_.get(index);
  }

  public static final int FEE_FIELD_NUMBER = 2;
  private com.cosmos.tx.v1beta1.Fee fee_;
  /**
   * <pre>
   * Fee is the fee and gas limit for the transaction. The first signer is the
   * primary signer and the one which pays the fee. The fee can be calculated
   * based on the cost of evaluating the body and doing signature verification
   * of the signers. This can be estimated via simulation.
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];</code>
   * @return Whether the fee field is set.
   */
  @java.lang.Override
  public boolean hasFee() {
    return fee_ != null;
  }
  /**
   * <pre>
   * Fee is the fee and gas limit for the transaction. The first signer is the
   * primary signer and the one which pays the fee. The fee can be calculated
   * based on the cost of evaluating the body and doing signature verification
   * of the signers. This can be estimated via simulation.
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];</code>
   * @return The fee.
   */
  @java.lang.Override
  public com.cosmos.tx.v1beta1.Fee getFee() {
    return fee_ == null ? com.cosmos.tx.v1beta1.Fee.getDefaultInstance() : fee_;
  }
  /**
   * <pre>
   * Fee is the fee and gas limit for the transaction. The first signer is the
   * primary signer and the one which pays the fee. The fee can be calculated
   * based on the cost of evaluating the body and doing signature verification
   * of the signers. This can be estimated via simulation.
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];</code>
   */
  @java.lang.Override
  public com.cosmos.tx.v1beta1.FeeOrBuilder getFeeOrBuilder() {
    return fee_ == null ? com.cosmos.tx.v1beta1.Fee.getDefaultInstance() : fee_;
  }

  public static final int TIP_FIELD_NUMBER = 3;
  private com.cosmos.tx.v1beta1.Tip tip_;
  /**
   * <pre>
   * Tip is the optional tip used for transactions fees paid in another denom.
   *
   * This field is ignored if the chain didn't enable tips, i.e. didn't add the
   * `TipDecorator` in its posthandler.
   *
   * Since: cosmos-sdk 0.46
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip"];</code>
   * @return Whether the tip field is set.
   */
  @java.lang.Override
  public boolean hasTip() {
    return tip_ != null;
  }
  /**
   * <pre>
   * Tip is the optional tip used for transactions fees paid in another denom.
   *
   * This field is ignored if the chain didn't enable tips, i.e. didn't add the
   * `TipDecorator` in its posthandler.
   *
   * Since: cosmos-sdk 0.46
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip"];</code>
   * @return The tip.
   */
  @java.lang.Override
  public com.cosmos.tx.v1beta1.Tip getTip() {
    return tip_ == null ? com.cosmos.tx.v1beta1.Tip.getDefaultInstance() : tip_;
  }
  /**
   * <pre>
   * Tip is the optional tip used for transactions fees paid in another denom.
   *
   * This field is ignored if the chain didn't enable tips, i.e. didn't add the
   * `TipDecorator` in its posthandler.
   *
   * Since: cosmos-sdk 0.46
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip"];</code>
   */
  @java.lang.Override
  public com.cosmos.tx.v1beta1.TipOrBuilder getTipOrBuilder() {
    return tip_ == null ? com.cosmos.tx.v1beta1.Tip.getDefaultInstance() : tip_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < signerInfos_.size(); i++) {
      output.writeMessage(1, signerInfos_.get(i));
    }
    if (fee_ != null) {
      output.writeMessage(2, getFee());
    }
    if (tip_ != null) {
      output.writeMessage(3, getTip());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < signerInfos_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, signerInfos_.get(i));
    }
    if (fee_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getFee());
    }
    if (tip_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getTip());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.cosmos.tx.v1beta1.AuthInfo)) {
      return super.equals(obj);
    }
    com.cosmos.tx.v1beta1.AuthInfo other = (com.cosmos.tx.v1beta1.AuthInfo) obj;

    if (!getSignerInfosList()
        .equals(other.getSignerInfosList())) return false;
    if (hasFee() != other.hasFee()) return false;
    if (hasFee()) {
      if (!getFee()
          .equals(other.getFee())) return false;
    }
    if (hasTip() != other.hasTip()) return false;
    if (hasTip()) {
      if (!getTip()
          .equals(other.getTip())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getSignerInfosCount() > 0) {
      hash = (37 * hash) + SIGNER_INFOS_FIELD_NUMBER;
      hash = (53 * hash) + getSignerInfosList().hashCode();
    }
    if (hasFee()) {
      hash = (37 * hash) + FEE_FIELD_NUMBER;
      hash = (53 * hash) + getFee().hashCode();
    }
    if (hasTip()) {
      hash = (37 * hash) + TIP_FIELD_NUMBER;
      hash = (53 * hash) + getTip().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.cosmos.tx.v1beta1.AuthInfo parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cosmos.tx.v1beta1.AuthInfo parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cosmos.tx.v1beta1.AuthInfo parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cosmos.tx.v1beta1.AuthInfo parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cosmos.tx.v1beta1.AuthInfo parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.cosmos.tx.v1beta1.AuthInfo parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.cosmos.tx.v1beta1.AuthInfo parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.cosmos.tx.v1beta1.AuthInfo parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.cosmos.tx.v1beta1.AuthInfo parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.cosmos.tx.v1beta1.AuthInfo parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.cosmos.tx.v1beta1.AuthInfo parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.cosmos.tx.v1beta1.AuthInfo parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.cosmos.tx.v1beta1.AuthInfo prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * AuthInfo describes the fee and signer modes that are used to sign a
   * transaction.
   * </pre>
   *
   * Protobuf type {@code cosmos.tx.v1beta1.AuthInfo}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:cosmos.tx.v1beta1.AuthInfo)
      com.cosmos.tx.v1beta1.AuthInfoOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.cosmos.tx.v1beta1.TxProto.internal_static_cosmos_tx_v1beta1_AuthInfo_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.cosmos.tx.v1beta1.TxProto.internal_static_cosmos_tx_v1beta1_AuthInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.cosmos.tx.v1beta1.AuthInfo.class, com.cosmos.tx.v1beta1.AuthInfo.Builder.class);
    }

    // Construct using com.cosmos.tx.v1beta1.AuthInfo.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (signerInfosBuilder_ == null) {
        signerInfos_ = java.util.Collections.emptyList();
      } else {
        signerInfos_ = null;
        signerInfosBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      fee_ = null;
      if (feeBuilder_ != null) {
        feeBuilder_.dispose();
        feeBuilder_ = null;
      }
      tip_ = null;
      if (tipBuilder_ != null) {
        tipBuilder_.dispose();
        tipBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.cosmos.tx.v1beta1.TxProto.internal_static_cosmos_tx_v1beta1_AuthInfo_descriptor;
    }

    @java.lang.Override
    public com.cosmos.tx.v1beta1.AuthInfo getDefaultInstanceForType() {
      return com.cosmos.tx.v1beta1.AuthInfo.getDefaultInstance();
    }

    @java.lang.Override
    public com.cosmos.tx.v1beta1.AuthInfo build() {
      com.cosmos.tx.v1beta1.AuthInfo result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.cosmos.tx.v1beta1.AuthInfo buildPartial() {
      com.cosmos.tx.v1beta1.AuthInfo result = new com.cosmos.tx.v1beta1.AuthInfo(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.cosmos.tx.v1beta1.AuthInfo result) {
      if (signerInfosBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          signerInfos_ = java.util.Collections.unmodifiableList(signerInfos_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.signerInfos_ = signerInfos_;
      } else {
        result.signerInfos_ = signerInfosBuilder_.build();
      }
    }

    private void buildPartial0(com.cosmos.tx.v1beta1.AuthInfo result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.fee_ = feeBuilder_ == null
            ? fee_
            : feeBuilder_.build();
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.tip_ = tipBuilder_ == null
            ? tip_
            : tipBuilder_.build();
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.cosmos.tx.v1beta1.AuthInfo) {
        return mergeFrom((com.cosmos.tx.v1beta1.AuthInfo)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.cosmos.tx.v1beta1.AuthInfo other) {
      if (other == com.cosmos.tx.v1beta1.AuthInfo.getDefaultInstance()) return this;
      if (signerInfosBuilder_ == null) {
        if (!other.signerInfos_.isEmpty()) {
          if (signerInfos_.isEmpty()) {
            signerInfos_ = other.signerInfos_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSignerInfosIsMutable();
            signerInfos_.addAll(other.signerInfos_);
          }
          onChanged();
        }
      } else {
        if (!other.signerInfos_.isEmpty()) {
          if (signerInfosBuilder_.isEmpty()) {
            signerInfosBuilder_.dispose();
            signerInfosBuilder_ = null;
            signerInfos_ = other.signerInfos_;
            bitField0_ = (bitField0_ & ~0x00000001);
            signerInfosBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSignerInfosFieldBuilder() : null;
          } else {
            signerInfosBuilder_.addAllMessages(other.signerInfos_);
          }
        }
      }
      if (other.hasFee()) {
        mergeFee(other.getFee());
      }
      if (other.hasTip()) {
        mergeTip(other.getTip());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.cosmos.tx.v1beta1.SignerInfo m =
                  input.readMessage(
                      com.cosmos.tx.v1beta1.SignerInfo.parser(),
                      extensionRegistry);
              if (signerInfosBuilder_ == null) {
                ensureSignerInfosIsMutable();
                signerInfos_.add(m);
              } else {
                signerInfosBuilder_.addMessage(m);
              }
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getFeeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getTipFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<com.cosmos.tx.v1beta1.SignerInfo> signerInfos_ =
      java.util.Collections.emptyList();
    private void ensureSignerInfosIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        signerInfos_ = new java.util.ArrayList<com.cosmos.tx.v1beta1.SignerInfo>(signerInfos_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.tx.v1beta1.SignerInfo, com.cosmos.tx.v1beta1.SignerInfo.Builder, com.cosmos.tx.v1beta1.SignerInfoOrBuilder> signerInfosBuilder_;

    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public java.util.List<com.cosmos.tx.v1beta1.SignerInfo> getSignerInfosList() {
      if (signerInfosBuilder_ == null) {
        return java.util.Collections.unmodifiableList(signerInfos_);
      } else {
        return signerInfosBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public int getSignerInfosCount() {
      if (signerInfosBuilder_ == null) {
        return signerInfos_.size();
      } else {
        return signerInfosBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public com.cosmos.tx.v1beta1.SignerInfo getSignerInfos(int index) {
      if (signerInfosBuilder_ == null) {
        return signerInfos_.get(index);
      } else {
        return signerInfosBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public Builder setSignerInfos(
        int index, com.cosmos.tx.v1beta1.SignerInfo value) {
      if (signerInfosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSignerInfosIsMutable();
        signerInfos_.set(index, value);
        onChanged();
      } else {
        signerInfosBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public Builder setSignerInfos(
        int index, com.cosmos.tx.v1beta1.SignerInfo.Builder builderForValue) {
      if (signerInfosBuilder_ == null) {
        ensureSignerInfosIsMutable();
        signerInfos_.set(index, builderForValue.build());
        onChanged();
      } else {
        signerInfosBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public Builder addSignerInfos(com.cosmos.tx.v1beta1.SignerInfo value) {
      if (signerInfosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSignerInfosIsMutable();
        signerInfos_.add(value);
        onChanged();
      } else {
        signerInfosBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public Builder addSignerInfos(
        int index, com.cosmos.tx.v1beta1.SignerInfo value) {
      if (signerInfosBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSignerInfosIsMutable();
        signerInfos_.add(index, value);
        onChanged();
      } else {
        signerInfosBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public Builder addSignerInfos(
        com.cosmos.tx.v1beta1.SignerInfo.Builder builderForValue) {
      if (signerInfosBuilder_ == null) {
        ensureSignerInfosIsMutable();
        signerInfos_.add(builderForValue.build());
        onChanged();
      } else {
        signerInfosBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public Builder addSignerInfos(
        int index, com.cosmos.tx.v1beta1.SignerInfo.Builder builderForValue) {
      if (signerInfosBuilder_ == null) {
        ensureSignerInfosIsMutable();
        signerInfos_.add(index, builderForValue.build());
        onChanged();
      } else {
        signerInfosBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public Builder addAllSignerInfos(
        java.lang.Iterable<? extends com.cosmos.tx.v1beta1.SignerInfo> values) {
      if (signerInfosBuilder_ == null) {
        ensureSignerInfosIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, signerInfos_);
        onChanged();
      } else {
        signerInfosBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public Builder clearSignerInfos() {
      if (signerInfosBuilder_ == null) {
        signerInfos_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        signerInfosBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public Builder removeSignerInfos(int index) {
      if (signerInfosBuilder_ == null) {
        ensureSignerInfosIsMutable();
        signerInfos_.remove(index);
        onChanged();
      } else {
        signerInfosBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public com.cosmos.tx.v1beta1.SignerInfo.Builder getSignerInfosBuilder(
        int index) {
      return getSignerInfosFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public com.cosmos.tx.v1beta1.SignerInfoOrBuilder getSignerInfosOrBuilder(
        int index) {
      if (signerInfosBuilder_ == null) {
        return signerInfos_.get(index);  } else {
        return signerInfosBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public java.util.List<? extends com.cosmos.tx.v1beta1.SignerInfoOrBuilder> 
         getSignerInfosOrBuilderList() {
      if (signerInfosBuilder_ != null) {
        return signerInfosBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(signerInfos_);
      }
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public com.cosmos.tx.v1beta1.SignerInfo.Builder addSignerInfosBuilder() {
      return getSignerInfosFieldBuilder().addBuilder(
          com.cosmos.tx.v1beta1.SignerInfo.getDefaultInstance());
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public com.cosmos.tx.v1beta1.SignerInfo.Builder addSignerInfosBuilder(
        int index) {
      return getSignerInfosFieldBuilder().addBuilder(
          index, com.cosmos.tx.v1beta1.SignerInfo.getDefaultInstance());
    }
    /**
     * <pre>
     * signer_infos defines the signing modes for the required signers. The number
     * and order of elements must match the required signers from TxBody's
     * messages. The first element is the primary signer and the one which pays
     * the fee.
     * </pre>
     *
     * <code>repeated .cosmos.tx.v1beta1.SignerInfo signer_infos = 1 [json_name = "signerInfos"];</code>
     */
    public java.util.List<com.cosmos.tx.v1beta1.SignerInfo.Builder> 
         getSignerInfosBuilderList() {
      return getSignerInfosFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.tx.v1beta1.SignerInfo, com.cosmos.tx.v1beta1.SignerInfo.Builder, com.cosmos.tx.v1beta1.SignerInfoOrBuilder> 
        getSignerInfosFieldBuilder() {
      if (signerInfosBuilder_ == null) {
        signerInfosBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.cosmos.tx.v1beta1.SignerInfo, com.cosmos.tx.v1beta1.SignerInfo.Builder, com.cosmos.tx.v1beta1.SignerInfoOrBuilder>(
                signerInfos_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        signerInfos_ = null;
      }
      return signerInfosBuilder_;
    }

    private com.cosmos.tx.v1beta1.Fee fee_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.cosmos.tx.v1beta1.Fee, com.cosmos.tx.v1beta1.Fee.Builder, com.cosmos.tx.v1beta1.FeeOrBuilder> feeBuilder_;
    /**
     * <pre>
     * Fee is the fee and gas limit for the transaction. The first signer is the
     * primary signer and the one which pays the fee. The fee can be calculated
     * based on the cost of evaluating the body and doing signature verification
     * of the signers. This can be estimated via simulation.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];</code>
     * @return Whether the fee field is set.
     */
    public boolean hasFee() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Fee is the fee and gas limit for the transaction. The first signer is the
     * primary signer and the one which pays the fee. The fee can be calculated
     * based on the cost of evaluating the body and doing signature verification
     * of the signers. This can be estimated via simulation.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];</code>
     * @return The fee.
     */
    public com.cosmos.tx.v1beta1.Fee getFee() {
      if (feeBuilder_ == null) {
        return fee_ == null ? com.cosmos.tx.v1beta1.Fee.getDefaultInstance() : fee_;
      } else {
        return feeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Fee is the fee and gas limit for the transaction. The first signer is the
     * primary signer and the one which pays the fee. The fee can be calculated
     * based on the cost of evaluating the body and doing signature verification
     * of the signers. This can be estimated via simulation.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];</code>
     */
    public Builder setFee(com.cosmos.tx.v1beta1.Fee value) {
      if (feeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        fee_ = value;
      } else {
        feeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Fee is the fee and gas limit for the transaction. The first signer is the
     * primary signer and the one which pays the fee. The fee can be calculated
     * based on the cost of evaluating the body and doing signature verification
     * of the signers. This can be estimated via simulation.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];</code>
     */
    public Builder setFee(
        com.cosmos.tx.v1beta1.Fee.Builder builderForValue) {
      if (feeBuilder_ == null) {
        fee_ = builderForValue.build();
      } else {
        feeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Fee is the fee and gas limit for the transaction. The first signer is the
     * primary signer and the one which pays the fee. The fee can be calculated
     * based on the cost of evaluating the body and doing signature verification
     * of the signers. This can be estimated via simulation.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];</code>
     */
    public Builder mergeFee(com.cosmos.tx.v1beta1.Fee value) {
      if (feeBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          fee_ != null &&
          fee_ != com.cosmos.tx.v1beta1.Fee.getDefaultInstance()) {
          getFeeBuilder().mergeFrom(value);
        } else {
          fee_ = value;
        }
      } else {
        feeBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Fee is the fee and gas limit for the transaction. The first signer is the
     * primary signer and the one which pays the fee. The fee can be calculated
     * based on the cost of evaluating the body and doing signature verification
     * of the signers. This can be estimated via simulation.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];</code>
     */
    public Builder clearFee() {
      bitField0_ = (bitField0_ & ~0x00000002);
      fee_ = null;
      if (feeBuilder_ != null) {
        feeBuilder_.dispose();
        feeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Fee is the fee and gas limit for the transaction. The first signer is the
     * primary signer and the one which pays the fee. The fee can be calculated
     * based on the cost of evaluating the body and doing signature verification
     * of the signers. This can be estimated via simulation.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];</code>
     */
    public com.cosmos.tx.v1beta1.Fee.Builder getFeeBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getFeeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Fee is the fee and gas limit for the transaction. The first signer is the
     * primary signer and the one which pays the fee. The fee can be calculated
     * based on the cost of evaluating the body and doing signature verification
     * of the signers. This can be estimated via simulation.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];</code>
     */
    public com.cosmos.tx.v1beta1.FeeOrBuilder getFeeOrBuilder() {
      if (feeBuilder_ != null) {
        return feeBuilder_.getMessageOrBuilder();
      } else {
        return fee_ == null ?
            com.cosmos.tx.v1beta1.Fee.getDefaultInstance() : fee_;
      }
    }
    /**
     * <pre>
     * Fee is the fee and gas limit for the transaction. The first signer is the
     * primary signer and the one which pays the fee. The fee can be calculated
     * based on the cost of evaluating the body and doing signature verification
     * of the signers. This can be estimated via simulation.
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Fee fee = 2 [json_name = "fee"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.cosmos.tx.v1beta1.Fee, com.cosmos.tx.v1beta1.Fee.Builder, com.cosmos.tx.v1beta1.FeeOrBuilder> 
        getFeeFieldBuilder() {
      if (feeBuilder_ == null) {
        feeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.cosmos.tx.v1beta1.Fee, com.cosmos.tx.v1beta1.Fee.Builder, com.cosmos.tx.v1beta1.FeeOrBuilder>(
                getFee(),
                getParentForChildren(),
                isClean());
        fee_ = null;
      }
      return feeBuilder_;
    }

    private com.cosmos.tx.v1beta1.Tip tip_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.cosmos.tx.v1beta1.Tip, com.cosmos.tx.v1beta1.Tip.Builder, com.cosmos.tx.v1beta1.TipOrBuilder> tipBuilder_;
    /**
     * <pre>
     * Tip is the optional tip used for transactions fees paid in another denom.
     *
     * This field is ignored if the chain didn't enable tips, i.e. didn't add the
     * `TipDecorator` in its posthandler.
     *
     * Since: cosmos-sdk 0.46
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip"];</code>
     * @return Whether the tip field is set.
     */
    public boolean hasTip() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * Tip is the optional tip used for transactions fees paid in another denom.
     *
     * This field is ignored if the chain didn't enable tips, i.e. didn't add the
     * `TipDecorator` in its posthandler.
     *
     * Since: cosmos-sdk 0.46
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip"];</code>
     * @return The tip.
     */
    public com.cosmos.tx.v1beta1.Tip getTip() {
      if (tipBuilder_ == null) {
        return tip_ == null ? com.cosmos.tx.v1beta1.Tip.getDefaultInstance() : tip_;
      } else {
        return tipBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Tip is the optional tip used for transactions fees paid in another denom.
     *
     * This field is ignored if the chain didn't enable tips, i.e. didn't add the
     * `TipDecorator` in its posthandler.
     *
     * Since: cosmos-sdk 0.46
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip"];</code>
     */
    public Builder setTip(com.cosmos.tx.v1beta1.Tip value) {
      if (tipBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        tip_ = value;
      } else {
        tipBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Tip is the optional tip used for transactions fees paid in another denom.
     *
     * This field is ignored if the chain didn't enable tips, i.e. didn't add the
     * `TipDecorator` in its posthandler.
     *
     * Since: cosmos-sdk 0.46
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip"];</code>
     */
    public Builder setTip(
        com.cosmos.tx.v1beta1.Tip.Builder builderForValue) {
      if (tipBuilder_ == null) {
        tip_ = builderForValue.build();
      } else {
        tipBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Tip is the optional tip used for transactions fees paid in another denom.
     *
     * This field is ignored if the chain didn't enable tips, i.e. didn't add the
     * `TipDecorator` in its posthandler.
     *
     * Since: cosmos-sdk 0.46
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip"];</code>
     */
    public Builder mergeTip(com.cosmos.tx.v1beta1.Tip value) {
      if (tipBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          tip_ != null &&
          tip_ != com.cosmos.tx.v1beta1.Tip.getDefaultInstance()) {
          getTipBuilder().mergeFrom(value);
        } else {
          tip_ = value;
        }
      } else {
        tipBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Tip is the optional tip used for transactions fees paid in another denom.
     *
     * This field is ignored if the chain didn't enable tips, i.e. didn't add the
     * `TipDecorator` in its posthandler.
     *
     * Since: cosmos-sdk 0.46
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip"];</code>
     */
    public Builder clearTip() {
      bitField0_ = (bitField0_ & ~0x00000004);
      tip_ = null;
      if (tipBuilder_ != null) {
        tipBuilder_.dispose();
        tipBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Tip is the optional tip used for transactions fees paid in another denom.
     *
     * This field is ignored if the chain didn't enable tips, i.e. didn't add the
     * `TipDecorator` in its posthandler.
     *
     * Since: cosmos-sdk 0.46
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip"];</code>
     */
    public com.cosmos.tx.v1beta1.Tip.Builder getTipBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getTipFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Tip is the optional tip used for transactions fees paid in another denom.
     *
     * This field is ignored if the chain didn't enable tips, i.e. didn't add the
     * `TipDecorator` in its posthandler.
     *
     * Since: cosmos-sdk 0.46
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip"];</code>
     */
    public com.cosmos.tx.v1beta1.TipOrBuilder getTipOrBuilder() {
      if (tipBuilder_ != null) {
        return tipBuilder_.getMessageOrBuilder();
      } else {
        return tip_ == null ?
            com.cosmos.tx.v1beta1.Tip.getDefaultInstance() : tip_;
      }
    }
    /**
     * <pre>
     * Tip is the optional tip used for transactions fees paid in another denom.
     *
     * This field is ignored if the chain didn't enable tips, i.e. didn't add the
     * `TipDecorator` in its posthandler.
     *
     * Since: cosmos-sdk 0.46
     * </pre>
     *
     * <code>.cosmos.tx.v1beta1.Tip tip = 3 [json_name = "tip"];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.cosmos.tx.v1beta1.Tip, com.cosmos.tx.v1beta1.Tip.Builder, com.cosmos.tx.v1beta1.TipOrBuilder> 
        getTipFieldBuilder() {
      if (tipBuilder_ == null) {
        tipBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.cosmos.tx.v1beta1.Tip, com.cosmos.tx.v1beta1.Tip.Builder, com.cosmos.tx.v1beta1.TipOrBuilder>(
                getTip(),
                getParentForChildren(),
                isClean());
        tip_ = null;
      }
      return tipBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:cosmos.tx.v1beta1.AuthInfo)
  }

  // @@protoc_insertion_point(class_scope:cosmos.tx.v1beta1.AuthInfo)
  private static final com.cosmos.tx.v1beta1.AuthInfo DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.cosmos.tx.v1beta1.AuthInfo();
  }

  public static com.cosmos.tx.v1beta1.AuthInfo getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AuthInfo>
      PARSER = new com.google.protobuf.AbstractParser<AuthInfo>() {
    @java.lang.Override
    public AuthInfo parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<AuthInfo> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AuthInfo> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.cosmos.tx.v1beta1.AuthInfo getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

