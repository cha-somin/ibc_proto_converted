// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmos/tx/v1beta1/tx.proto

package com.cosmos.tx.v1beta1;

public interface SignDocDirectAuxOrBuilder extends
    // @@protoc_insertion_point(interface_extends:cosmos.tx.v1beta1.SignDocDirectAux)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * body_bytes is protobuf serialization of a TxBody that matches the
   * representation in TxRaw.
   * </pre>
   *
   * <code>bytes body_bytes = 1 [json_name = "bodyBytes"];</code>
   * @return The bodyBytes.
   */
  com.google.protobuf.ByteString getBodyBytes();

  /**
   * <pre>
   * public_key is the public key of the signing account.
   * </pre>
   *
   * <code>.google.protobuf.Any public_key = 2 [json_name = "publicKey"];</code>
   * @return Whether the publicKey field is set.
   */
  boolean hasPublicKey();
  /**
   * <pre>
   * public_key is the public key of the signing account.
   * </pre>
   *
   * <code>.google.protobuf.Any public_key = 2 [json_name = "publicKey"];</code>
   * @return The publicKey.
   */
  com.google.protobuf.Any getPublicKey();
  /**
   * <pre>
   * public_key is the public key of the signing account.
   * </pre>
   *
   * <code>.google.protobuf.Any public_key = 2 [json_name = "publicKey"];</code>
   */
  com.google.protobuf.AnyOrBuilder getPublicKeyOrBuilder();

  /**
   * <pre>
   * chain_id is the identifier of the chain this transaction targets.
   * It prevents signed transactions from being used on another chain by an
   * attacker.
   * </pre>
   *
   * <code>string chain_id = 3 [json_name = "chainId"];</code>
   * @return The chainId.
   */
  java.lang.String getChainId();
  /**
   * <pre>
   * chain_id is the identifier of the chain this transaction targets.
   * It prevents signed transactions from being used on another chain by an
   * attacker.
   * </pre>
   *
   * <code>string chain_id = 3 [json_name = "chainId"];</code>
   * @return The bytes for chainId.
   */
  com.google.protobuf.ByteString
      getChainIdBytes();

  /**
   * <pre>
   * account_number is the account number of the account in state.
   * </pre>
   *
   * <code>uint64 account_number = 4 [json_name = "accountNumber"];</code>
   * @return The accountNumber.
   */
  long getAccountNumber();

  /**
   * <pre>
   * sequence is the sequence number of the signing account.
   * </pre>
   *
   * <code>uint64 sequence = 5 [json_name = "sequence"];</code>
   * @return The sequence.
   */
  long getSequence();

  /**
   * <pre>
   * Tip is the optional tip used for transactions fees paid in another denom.
   * It should be left empty if the signer is not the tipper for this
   * transaction.
   *
   * This field is ignored if the chain didn't enable tips, i.e. didn't add the
   * `TipDecorator` in its posthandler.
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.Tip tip = 6 [json_name = "tip"];</code>
   * @return Whether the tip field is set.
   */
  boolean hasTip();
  /**
   * <pre>
   * Tip is the optional tip used for transactions fees paid in another denom.
   * It should be left empty if the signer is not the tipper for this
   * transaction.
   *
   * This field is ignored if the chain didn't enable tips, i.e. didn't add the
   * `TipDecorator` in its posthandler.
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.Tip tip = 6 [json_name = "tip"];</code>
   * @return The tip.
   */
  com.cosmos.tx.v1beta1.Tip getTip();
  /**
   * <pre>
   * Tip is the optional tip used for transactions fees paid in another denom.
   * It should be left empty if the signer is not the tipper for this
   * transaction.
   *
   * This field is ignored if the chain didn't enable tips, i.e. didn't add the
   * `TipDecorator` in its posthandler.
   * </pre>
   *
   * <code>.cosmos.tx.v1beta1.Tip tip = 6 [json_name = "tip"];</code>
   */
  com.cosmos.tx.v1beta1.TipOrBuilder getTipOrBuilder();
}
