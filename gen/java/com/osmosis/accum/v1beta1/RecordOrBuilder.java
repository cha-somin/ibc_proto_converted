// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmosis/accum/v1beta1/accum.proto

package com.osmosis.accum.v1beta1;

public interface RecordOrBuilder extends
    // @@protoc_insertion_point(interface_extends:osmosis.accum.v1beta1.Record)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * num_shares is the number of shares belonging to the position associated
   * with this record.
   * </pre>
   *
   * <code>string num_shares = 1 [json_name = "numShares", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
   * @return The numShares.
   */
  java.lang.String getNumShares();
  /**
   * <pre>
   * num_shares is the number of shares belonging to the position associated
   * with this record.
   * </pre>
   *
   * <code>string num_shares = 1 [json_name = "numShares", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec"];</code>
   * @return The bytes for numShares.
   */
  com.google.protobuf.ByteString
      getNumSharesBytes();

  /**
   * <pre>
   * accum_value_per_share is the subset of coins per shar of the global
   * accumulator value that allows to infer how much a position is entitled to
   * per share that it owns.
   *
   * In the default case with no intervals, this value equals to the global
   * accumulator value at the time of the position creation, the last update or
   * reward claim.
   *
   * In the interval case such as concentrated liquidity, this value equals to
   * the global growth of rewards inside the interval during one of: the time of
   * the position creation, the last update or reward claim. Note, that
   * immediately prior to claiming or updating rewards, this value must be
   * updated to "the growth inside at the time of last update + the growth
   * outside at the time of the current block". This is so that the claiming
   * logic can subtract this updated value from the global accumulator value to
   * get the growth inside the interval from the time of last update up until
   * the current block time.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin accum_value_per_share = 2 [json_name = "accumValuePerShare", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  java.util.List<com.cosmos.base.v1beta1.DecCoin> 
      getAccumValuePerShareList();
  /**
   * <pre>
   * accum_value_per_share is the subset of coins per shar of the global
   * accumulator value that allows to infer how much a position is entitled to
   * per share that it owns.
   *
   * In the default case with no intervals, this value equals to the global
   * accumulator value at the time of the position creation, the last update or
   * reward claim.
   *
   * In the interval case such as concentrated liquidity, this value equals to
   * the global growth of rewards inside the interval during one of: the time of
   * the position creation, the last update or reward claim. Note, that
   * immediately prior to claiming or updating rewards, this value must be
   * updated to "the growth inside at the time of last update + the growth
   * outside at the time of the current block". This is so that the claiming
   * logic can subtract this updated value from the global accumulator value to
   * get the growth inside the interval from the time of last update up until
   * the current block time.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin accum_value_per_share = 2 [json_name = "accumValuePerShare", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  com.cosmos.base.v1beta1.DecCoin getAccumValuePerShare(int index);
  /**
   * <pre>
   * accum_value_per_share is the subset of coins per shar of the global
   * accumulator value that allows to infer how much a position is entitled to
   * per share that it owns.
   *
   * In the default case with no intervals, this value equals to the global
   * accumulator value at the time of the position creation, the last update or
   * reward claim.
   *
   * In the interval case such as concentrated liquidity, this value equals to
   * the global growth of rewards inside the interval during one of: the time of
   * the position creation, the last update or reward claim. Note, that
   * immediately prior to claiming or updating rewards, this value must be
   * updated to "the growth inside at the time of last update + the growth
   * outside at the time of the current block". This is so that the claiming
   * logic can subtract this updated value from the global accumulator value to
   * get the growth inside the interval from the time of last update up until
   * the current block time.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin accum_value_per_share = 2 [json_name = "accumValuePerShare", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  int getAccumValuePerShareCount();
  /**
   * <pre>
   * accum_value_per_share is the subset of coins per shar of the global
   * accumulator value that allows to infer how much a position is entitled to
   * per share that it owns.
   *
   * In the default case with no intervals, this value equals to the global
   * accumulator value at the time of the position creation, the last update or
   * reward claim.
   *
   * In the interval case such as concentrated liquidity, this value equals to
   * the global growth of rewards inside the interval during one of: the time of
   * the position creation, the last update or reward claim. Note, that
   * immediately prior to claiming or updating rewards, this value must be
   * updated to "the growth inside at the time of last update + the growth
   * outside at the time of the current block". This is so that the claiming
   * logic can subtract this updated value from the global accumulator value to
   * get the growth inside the interval from the time of last update up until
   * the current block time.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin accum_value_per_share = 2 [json_name = "accumValuePerShare", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  java.util.List<? extends com.cosmos.base.v1beta1.DecCoinOrBuilder> 
      getAccumValuePerShareOrBuilderList();
  /**
   * <pre>
   * accum_value_per_share is the subset of coins per shar of the global
   * accumulator value that allows to infer how much a position is entitled to
   * per share that it owns.
   *
   * In the default case with no intervals, this value equals to the global
   * accumulator value at the time of the position creation, the last update or
   * reward claim.
   *
   * In the interval case such as concentrated liquidity, this value equals to
   * the global growth of rewards inside the interval during one of: the time of
   * the position creation, the last update or reward claim. Note, that
   * immediately prior to claiming or updating rewards, this value must be
   * updated to "the growth inside at the time of last update + the growth
   * outside at the time of the current block". This is so that the claiming
   * logic can subtract this updated value from the global accumulator value to
   * get the growth inside the interval from the time of last update up until
   * the current block time.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin accum_value_per_share = 2 [json_name = "accumValuePerShare", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  com.cosmos.base.v1beta1.DecCoinOrBuilder getAccumValuePerShareOrBuilder(
      int index);

  /**
   * <pre>
   * unclaimed_rewards_total is the total amount of unclaimed rewards that the
   * position is entitled to. This value is updated whenever shares are added or
   * removed from an existing position. We also expose API for manually updating
   * this value for some custom use cases such as merging pre-existing positions
   * into a single one.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin unclaimed_rewards_total = 3 [json_name = "unclaimedRewardsTotal", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  java.util.List<com.cosmos.base.v1beta1.DecCoin> 
      getUnclaimedRewardsTotalList();
  /**
   * <pre>
   * unclaimed_rewards_total is the total amount of unclaimed rewards that the
   * position is entitled to. This value is updated whenever shares are added or
   * removed from an existing position. We also expose API for manually updating
   * this value for some custom use cases such as merging pre-existing positions
   * into a single one.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin unclaimed_rewards_total = 3 [json_name = "unclaimedRewardsTotal", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  com.cosmos.base.v1beta1.DecCoin getUnclaimedRewardsTotal(int index);
  /**
   * <pre>
   * unclaimed_rewards_total is the total amount of unclaimed rewards that the
   * position is entitled to. This value is updated whenever shares are added or
   * removed from an existing position. We also expose API for manually updating
   * this value for some custom use cases such as merging pre-existing positions
   * into a single one.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin unclaimed_rewards_total = 3 [json_name = "unclaimedRewardsTotal", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  int getUnclaimedRewardsTotalCount();
  /**
   * <pre>
   * unclaimed_rewards_total is the total amount of unclaimed rewards that the
   * position is entitled to. This value is updated whenever shares are added or
   * removed from an existing position. We also expose API for manually updating
   * this value for some custom use cases such as merging pre-existing positions
   * into a single one.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin unclaimed_rewards_total = 3 [json_name = "unclaimedRewardsTotal", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  java.util.List<? extends com.cosmos.base.v1beta1.DecCoinOrBuilder> 
      getUnclaimedRewardsTotalOrBuilderList();
  /**
   * <pre>
   * unclaimed_rewards_total is the total amount of unclaimed rewards that the
   * position is entitled to. This value is updated whenever shares are added or
   * removed from an existing position. We also expose API for manually updating
   * this value for some custom use cases such as merging pre-existing positions
   * into a single one.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin unclaimed_rewards_total = 3 [json_name = "unclaimedRewardsTotal", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  com.cosmos.base.v1beta1.DecCoinOrBuilder getUnclaimedRewardsTotalOrBuilder(
      int index);

  /**
   * <code>.osmosis.accum.v1beta1.Options options = 4 [json_name = "options"];</code>
   * @return Whether the options field is set.
   */
  boolean hasOptions();
  /**
   * <code>.osmosis.accum.v1beta1.Options options = 4 [json_name = "options"];</code>
   * @return The options.
   */
  com.osmosis.accum.v1beta1.Options getOptions();
  /**
   * <code>.osmosis.accum.v1beta1.Options options = 4 [json_name = "options"];</code>
   */
  com.osmosis.accum.v1beta1.OptionsOrBuilder getOptionsOrBuilder();
}
