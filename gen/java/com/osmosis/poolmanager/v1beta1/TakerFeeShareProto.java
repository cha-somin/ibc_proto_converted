// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmosis/poolmanager/v1beta1/taker_fee_share.proto

package com.osmosis.poolmanager.v1beta1;

public final class TakerFeeShareProto {
  private TakerFeeShareProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TakerFeeShareAgreementOrBuilder extends
      // @@protoc_insertion_point(interface_extends:osmosis.poolmanager.v1beta1.TakerFeeShareAgreement)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * denom is the denom that has the taker fee share agreement.
     * </pre>
     *
     * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
     * @return The denom.
     */
    java.lang.String getDenom();
    /**
     * <pre>
     * denom is the denom that has the taker fee share agreement.
     * </pre>
     *
     * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
     * @return The bytes for denom.
     */
    com.google.protobuf.ByteString
        getDenomBytes();

    /**
     * <pre>
     * skim_percent is the percentage of taker fees that will be skimmed for the
     * denom, in the event that the denom is included in the swap route.
     * </pre>
     *
     * <code>string skim_percent = 2 [json_name = "skimPercent", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:&#92;"skim_percent&#92;""];</code>
     * @return The skimPercent.
     */
    java.lang.String getSkimPercent();
    /**
     * <pre>
     * skim_percent is the percentage of taker fees that will be skimmed for the
     * denom, in the event that the denom is included in the swap route.
     * </pre>
     *
     * <code>string skim_percent = 2 [json_name = "skimPercent", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:&#92;"skim_percent&#92;""];</code>
     * @return The bytes for skimPercent.
     */
    com.google.protobuf.ByteString
        getSkimPercentBytes();

    /**
     * <pre>
     * skim_address is the address belonging to the respective denom
     * that the skimmed taker fees will be sent to at the end of each epoch.
     * </pre>
     *
     * <code>string skim_address = 3 [json_name = "skimAddress", (.gogoproto.moretags) = "yaml:&#92;"skim_address&#92;""];</code>
     * @return The skimAddress.
     */
    java.lang.String getSkimAddress();
    /**
     * <pre>
     * skim_address is the address belonging to the respective denom
     * that the skimmed taker fees will be sent to at the end of each epoch.
     * </pre>
     *
     * <code>string skim_address = 3 [json_name = "skimAddress", (.gogoproto.moretags) = "yaml:&#92;"skim_address&#92;""];</code>
     * @return The bytes for skimAddress.
     */
    com.google.protobuf.ByteString
        getSkimAddressBytes();
  }
  /**
   * <pre>
   * TakerFeeShareAgreement represents the agreement between the Osmosis protocol
   * and a specific denom to share a certain percent of taker fees generated in
   * any route that contains said denom. For example, if the agreement specifies a
   * 10% skim_percent, this means 10% of the taker fees generated in a swap route
   * containing the specified denom will be sent to the address specified
   * in the skim_address field at the end of each epoch. These skim_percents are
   * additive, so if three taker fee agreements have skim percents of 10%, 20%,
   * and 30%, the total skim percent for the route will be 60%.
   * </pre>
   *
   * Protobuf type {@code osmosis.poolmanager.v1beta1.TakerFeeShareAgreement}
   */
  public static final class TakerFeeShareAgreement extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:osmosis.poolmanager.v1beta1.TakerFeeShareAgreement)
      TakerFeeShareAgreementOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TakerFeeShareAgreement.newBuilder() to construct.
    private TakerFeeShareAgreement(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TakerFeeShareAgreement() {
      denom_ = "";
      skimPercent_ = "";
      skimAddress_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TakerFeeShareAgreement();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_TakerFeeShareAgreement_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_TakerFeeShareAgreement_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.class, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.Builder.class);
    }

    public static final int DENOM_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object denom_ = "";
    /**
     * <pre>
     * denom is the denom that has the taker fee share agreement.
     * </pre>
     *
     * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
     * @return The denom.
     */
    @java.lang.Override
    public java.lang.String getDenom() {
      java.lang.Object ref = denom_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        denom_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * denom is the denom that has the taker fee share agreement.
     * </pre>
     *
     * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
     * @return The bytes for denom.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDenomBytes() {
      java.lang.Object ref = denom_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        denom_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SKIM_PERCENT_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object skimPercent_ = "";
    /**
     * <pre>
     * skim_percent is the percentage of taker fees that will be skimmed for the
     * denom, in the event that the denom is included in the swap route.
     * </pre>
     *
     * <code>string skim_percent = 2 [json_name = "skimPercent", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:&#92;"skim_percent&#92;""];</code>
     * @return The skimPercent.
     */
    @java.lang.Override
    public java.lang.String getSkimPercent() {
      java.lang.Object ref = skimPercent_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        skimPercent_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * skim_percent is the percentage of taker fees that will be skimmed for the
     * denom, in the event that the denom is included in the swap route.
     * </pre>
     *
     * <code>string skim_percent = 2 [json_name = "skimPercent", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:&#92;"skim_percent&#92;""];</code>
     * @return The bytes for skimPercent.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSkimPercentBytes() {
      java.lang.Object ref = skimPercent_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        skimPercent_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SKIM_ADDRESS_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object skimAddress_ = "";
    /**
     * <pre>
     * skim_address is the address belonging to the respective denom
     * that the skimmed taker fees will be sent to at the end of each epoch.
     * </pre>
     *
     * <code>string skim_address = 3 [json_name = "skimAddress", (.gogoproto.moretags) = "yaml:&#92;"skim_address&#92;""];</code>
     * @return The skimAddress.
     */
    @java.lang.Override
    public java.lang.String getSkimAddress() {
      java.lang.Object ref = skimAddress_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        skimAddress_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * skim_address is the address belonging to the respective denom
     * that the skimmed taker fees will be sent to at the end of each epoch.
     * </pre>
     *
     * <code>string skim_address = 3 [json_name = "skimAddress", (.gogoproto.moretags) = "yaml:&#92;"skim_address&#92;""];</code>
     * @return The bytes for skimAddress.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSkimAddressBytes() {
      java.lang.Object ref = skimAddress_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        skimAddress_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(denom_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, denom_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(skimPercent_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, skimPercent_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(skimAddress_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, skimAddress_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(denom_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, denom_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(skimPercent_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, skimPercent_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(skimAddress_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, skimAddress_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement)) {
        return super.equals(obj);
      }
      com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement other = (com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement) obj;

      if (!getDenom()
          .equals(other.getDenom())) return false;
      if (!getSkimPercent()
          .equals(other.getSkimPercent())) return false;
      if (!getSkimAddress()
          .equals(other.getSkimAddress())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DENOM_FIELD_NUMBER;
      hash = (53 * hash) + getDenom().hashCode();
      hash = (37 * hash) + SKIM_PERCENT_FIELD_NUMBER;
      hash = (53 * hash) + getSkimPercent().hashCode();
      hash = (37 * hash) + SKIM_ADDRESS_FIELD_NUMBER;
      hash = (53 * hash) + getSkimAddress().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * TakerFeeShareAgreement represents the agreement between the Osmosis protocol
     * and a specific denom to share a certain percent of taker fees generated in
     * any route that contains said denom. For example, if the agreement specifies a
     * 10% skim_percent, this means 10% of the taker fees generated in a swap route
     * containing the specified denom will be sent to the address specified
     * in the skim_address field at the end of each epoch. These skim_percents are
     * additive, so if three taker fee agreements have skim percents of 10%, 20%,
     * and 30%, the total skim percent for the route will be 60%.
     * </pre>
     *
     * Protobuf type {@code osmosis.poolmanager.v1beta1.TakerFeeShareAgreement}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:osmosis.poolmanager.v1beta1.TakerFeeShareAgreement)
        com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreementOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_TakerFeeShareAgreement_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_TakerFeeShareAgreement_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.class, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.Builder.class);
      }

      // Construct using com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        denom_ = "";
        skimPercent_ = "";
        skimAddress_ = "";
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_TakerFeeShareAgreement_descriptor;
      }

      @java.lang.Override
      public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement getDefaultInstanceForType() {
        return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.getDefaultInstance();
      }

      @java.lang.Override
      public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement build() {
        com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement buildPartial() {
        com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement result = new com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.denom_ = denom_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.skimPercent_ = skimPercent_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.skimAddress_ = skimAddress_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement) {
          return mergeFrom((com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement other) {
        if (other == com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.getDefaultInstance()) return this;
        if (!other.getDenom().isEmpty()) {
          denom_ = other.denom_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (!other.getSkimPercent().isEmpty()) {
          skimPercent_ = other.skimPercent_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (!other.getSkimAddress().isEmpty()) {
          skimAddress_ = other.skimAddress_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                denom_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                skimPercent_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                skimAddress_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object denom_ = "";
      /**
       * <pre>
       * denom is the denom that has the taker fee share agreement.
       * </pre>
       *
       * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
       * @return The denom.
       */
      public java.lang.String getDenom() {
        java.lang.Object ref = denom_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          denom_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * denom is the denom that has the taker fee share agreement.
       * </pre>
       *
       * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
       * @return The bytes for denom.
       */
      public com.google.protobuf.ByteString
          getDenomBytes() {
        java.lang.Object ref = denom_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          denom_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * denom is the denom that has the taker fee share agreement.
       * </pre>
       *
       * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
       * @param value The denom to set.
       * @return This builder for chaining.
       */
      public Builder setDenom(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        denom_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * denom is the denom that has the taker fee share agreement.
       * </pre>
       *
       * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
       * @return This builder for chaining.
       */
      public Builder clearDenom() {
        denom_ = getDefaultInstance().getDenom();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * denom is the denom that has the taker fee share agreement.
       * </pre>
       *
       * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
       * @param value The bytes for denom to set.
       * @return This builder for chaining.
       */
      public Builder setDenomBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        denom_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object skimPercent_ = "";
      /**
       * <pre>
       * skim_percent is the percentage of taker fees that will be skimmed for the
       * denom, in the event that the denom is included in the swap route.
       * </pre>
       *
       * <code>string skim_percent = 2 [json_name = "skimPercent", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:&#92;"skim_percent&#92;""];</code>
       * @return The skimPercent.
       */
      public java.lang.String getSkimPercent() {
        java.lang.Object ref = skimPercent_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          skimPercent_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * skim_percent is the percentage of taker fees that will be skimmed for the
       * denom, in the event that the denom is included in the swap route.
       * </pre>
       *
       * <code>string skim_percent = 2 [json_name = "skimPercent", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:&#92;"skim_percent&#92;""];</code>
       * @return The bytes for skimPercent.
       */
      public com.google.protobuf.ByteString
          getSkimPercentBytes() {
        java.lang.Object ref = skimPercent_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          skimPercent_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * skim_percent is the percentage of taker fees that will be skimmed for the
       * denom, in the event that the denom is included in the swap route.
       * </pre>
       *
       * <code>string skim_percent = 2 [json_name = "skimPercent", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:&#92;"skim_percent&#92;""];</code>
       * @param value The skimPercent to set.
       * @return This builder for chaining.
       */
      public Builder setSkimPercent(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        skimPercent_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * skim_percent is the percentage of taker fees that will be skimmed for the
       * denom, in the event that the denom is included in the swap route.
       * </pre>
       *
       * <code>string skim_percent = 2 [json_name = "skimPercent", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:&#92;"skim_percent&#92;""];</code>
       * @return This builder for chaining.
       */
      public Builder clearSkimPercent() {
        skimPercent_ = getDefaultInstance().getSkimPercent();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * skim_percent is the percentage of taker fees that will be skimmed for the
       * denom, in the event that the denom is included in the swap route.
       * </pre>
       *
       * <code>string skim_percent = 2 [json_name = "skimPercent", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "cosmossdk.io/math.LegacyDec", (.gogoproto.moretags) = "yaml:&#92;"skim_percent&#92;""];</code>
       * @param value The bytes for skimPercent to set.
       * @return This builder for chaining.
       */
      public Builder setSkimPercentBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        skimPercent_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object skimAddress_ = "";
      /**
       * <pre>
       * skim_address is the address belonging to the respective denom
       * that the skimmed taker fees will be sent to at the end of each epoch.
       * </pre>
       *
       * <code>string skim_address = 3 [json_name = "skimAddress", (.gogoproto.moretags) = "yaml:&#92;"skim_address&#92;""];</code>
       * @return The skimAddress.
       */
      public java.lang.String getSkimAddress() {
        java.lang.Object ref = skimAddress_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          skimAddress_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * skim_address is the address belonging to the respective denom
       * that the skimmed taker fees will be sent to at the end of each epoch.
       * </pre>
       *
       * <code>string skim_address = 3 [json_name = "skimAddress", (.gogoproto.moretags) = "yaml:&#92;"skim_address&#92;""];</code>
       * @return The bytes for skimAddress.
       */
      public com.google.protobuf.ByteString
          getSkimAddressBytes() {
        java.lang.Object ref = skimAddress_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          skimAddress_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * skim_address is the address belonging to the respective denom
       * that the skimmed taker fees will be sent to at the end of each epoch.
       * </pre>
       *
       * <code>string skim_address = 3 [json_name = "skimAddress", (.gogoproto.moretags) = "yaml:&#92;"skim_address&#92;""];</code>
       * @param value The skimAddress to set.
       * @return This builder for chaining.
       */
      public Builder setSkimAddress(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        skimAddress_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * skim_address is the address belonging to the respective denom
       * that the skimmed taker fees will be sent to at the end of each epoch.
       * </pre>
       *
       * <code>string skim_address = 3 [json_name = "skimAddress", (.gogoproto.moretags) = "yaml:&#92;"skim_address&#92;""];</code>
       * @return This builder for chaining.
       */
      public Builder clearSkimAddress() {
        skimAddress_ = getDefaultInstance().getSkimAddress();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * skim_address is the address belonging to the respective denom
       * that the skimmed taker fees will be sent to at the end of each epoch.
       * </pre>
       *
       * <code>string skim_address = 3 [json_name = "skimAddress", (.gogoproto.moretags) = "yaml:&#92;"skim_address&#92;""];</code>
       * @param value The bytes for skimAddress to set.
       * @return This builder for chaining.
       */
      public Builder setSkimAddressBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        skimAddress_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:osmosis.poolmanager.v1beta1.TakerFeeShareAgreement)
    }

    // @@protoc_insertion_point(class_scope:osmosis.poolmanager.v1beta1.TakerFeeShareAgreement)
    private static final com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement();
    }

    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TakerFeeShareAgreement>
        PARSER = new com.google.protobuf.AbstractParser<TakerFeeShareAgreement>() {
      @java.lang.Override
      public TakerFeeShareAgreement parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TakerFeeShareAgreement> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TakerFeeShareAgreement> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TakerFeeSkimAccumulatorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:osmosis.poolmanager.v1beta1.TakerFeeSkimAccumulator)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * denom is the denom that has the taker fee share agreement.
     * </pre>
     *
     * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
     * @return The denom.
     */
    java.lang.String getDenom();
    /**
     * <pre>
     * denom is the denom that has the taker fee share agreement.
     * </pre>
     *
     * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
     * @return The bytes for denom.
     */
    com.google.protobuf.ByteString
        getDenomBytes();

    /**
     * <pre>
     * skimmed_taker_fees is the total skimmed taker fees for the denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> 
        getSkimmedTakerFeesList();
    /**
     * <pre>
     * skimmed_taker_fees is the total skimmed taker fees for the denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    com.cosmos.base.v1beta1.CoinProto.Coin getSkimmedTakerFees(int index);
    /**
     * <pre>
     * skimmed_taker_fees is the total skimmed taker fees for the denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    int getSkimmedTakerFeesCount();
    /**
     * <pre>
     * skimmed_taker_fees is the total skimmed taker fees for the denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
        getSkimmedTakerFeesOrBuilderList();
    /**
     * <pre>
     * skimmed_taker_fees is the total skimmed taker fees for the denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getSkimmedTakerFeesOrBuilder(
        int index);
  }
  /**
   * <pre>
   * TakerFeeSkimAccumulator accumulates the total skimmed taker fees for each
   * denom that has a taker fee share agreement.
   * </pre>
   *
   * Protobuf type {@code osmosis.poolmanager.v1beta1.TakerFeeSkimAccumulator}
   */
  public static final class TakerFeeSkimAccumulator extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:osmosis.poolmanager.v1beta1.TakerFeeSkimAccumulator)
      TakerFeeSkimAccumulatorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TakerFeeSkimAccumulator.newBuilder() to construct.
    private TakerFeeSkimAccumulator(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TakerFeeSkimAccumulator() {
      denom_ = "";
      skimmedTakerFees_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TakerFeeSkimAccumulator();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_TakerFeeSkimAccumulator_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_TakerFeeSkimAccumulator_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator.class, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator.Builder.class);
    }

    public static final int DENOM_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object denom_ = "";
    /**
     * <pre>
     * denom is the denom that has the taker fee share agreement.
     * </pre>
     *
     * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
     * @return The denom.
     */
    @java.lang.Override
    public java.lang.String getDenom() {
      java.lang.Object ref = denom_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        denom_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * denom is the denom that has the taker fee share agreement.
     * </pre>
     *
     * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
     * @return The bytes for denom.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDenomBytes() {
      java.lang.Object ref = denom_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        denom_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SKIMMED_TAKER_FEES_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> skimmedTakerFees_;
    /**
     * <pre>
     * skimmed_taker_fees is the total skimmed taker fees for the denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> getSkimmedTakerFeesList() {
      return skimmedTakerFees_;
    }
    /**
     * <pre>
     * skimmed_taker_fees is the total skimmed taker fees for the denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
        getSkimmedTakerFeesOrBuilderList() {
      return skimmedTakerFees_;
    }
    /**
     * <pre>
     * skimmed_taker_fees is the total skimmed taker fees for the denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public int getSkimmedTakerFeesCount() {
      return skimmedTakerFees_.size();
    }
    /**
     * <pre>
     * skimmed_taker_fees is the total skimmed taker fees for the denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public com.cosmos.base.v1beta1.CoinProto.Coin getSkimmedTakerFees(int index) {
      return skimmedTakerFees_.get(index);
    }
    /**
     * <pre>
     * skimmed_taker_fees is the total skimmed taker fees for the denom.
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    @java.lang.Override
    public com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getSkimmedTakerFeesOrBuilder(
        int index) {
      return skimmedTakerFees_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(denom_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, denom_);
      }
      for (int i = 0; i < skimmedTakerFees_.size(); i++) {
        output.writeMessage(2, skimmedTakerFees_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(denom_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, denom_);
      }
      for (int i = 0; i < skimmedTakerFees_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, skimmedTakerFees_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator)) {
        return super.equals(obj);
      }
      com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator other = (com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator) obj;

      if (!getDenom()
          .equals(other.getDenom())) return false;
      if (!getSkimmedTakerFeesList()
          .equals(other.getSkimmedTakerFeesList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DENOM_FIELD_NUMBER;
      hash = (53 * hash) + getDenom().hashCode();
      if (getSkimmedTakerFeesCount() > 0) {
        hash = (37 * hash) + SKIMMED_TAKER_FEES_FIELD_NUMBER;
        hash = (53 * hash) + getSkimmedTakerFeesList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * TakerFeeSkimAccumulator accumulates the total skimmed taker fees for each
     * denom that has a taker fee share agreement.
     * </pre>
     *
     * Protobuf type {@code osmosis.poolmanager.v1beta1.TakerFeeSkimAccumulator}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:osmosis.poolmanager.v1beta1.TakerFeeSkimAccumulator)
        com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulatorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_TakerFeeSkimAccumulator_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_TakerFeeSkimAccumulator_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator.class, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator.Builder.class);
      }

      // Construct using com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        denom_ = "";
        if (skimmedTakerFeesBuilder_ == null) {
          skimmedTakerFees_ = java.util.Collections.emptyList();
        } else {
          skimmedTakerFees_ = null;
          skimmedTakerFeesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_TakerFeeSkimAccumulator_descriptor;
      }

      @java.lang.Override
      public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator getDefaultInstanceForType() {
        return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator.getDefaultInstance();
      }

      @java.lang.Override
      public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator build() {
        com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator buildPartial() {
        com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator result = new com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator result) {
        if (skimmedTakerFeesBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            skimmedTakerFees_ = java.util.Collections.unmodifiableList(skimmedTakerFees_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.skimmedTakerFees_ = skimmedTakerFees_;
        } else {
          result.skimmedTakerFees_ = skimmedTakerFeesBuilder_.build();
        }
      }

      private void buildPartial0(com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.denom_ = denom_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator) {
          return mergeFrom((com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator other) {
        if (other == com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator.getDefaultInstance()) return this;
        if (!other.getDenom().isEmpty()) {
          denom_ = other.denom_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (skimmedTakerFeesBuilder_ == null) {
          if (!other.skimmedTakerFees_.isEmpty()) {
            if (skimmedTakerFees_.isEmpty()) {
              skimmedTakerFees_ = other.skimmedTakerFees_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSkimmedTakerFeesIsMutable();
              skimmedTakerFees_.addAll(other.skimmedTakerFees_);
            }
            onChanged();
          }
        } else {
          if (!other.skimmedTakerFees_.isEmpty()) {
            if (skimmedTakerFeesBuilder_.isEmpty()) {
              skimmedTakerFeesBuilder_.dispose();
              skimmedTakerFeesBuilder_ = null;
              skimmedTakerFees_ = other.skimmedTakerFees_;
              bitField0_ = (bitField0_ & ~0x00000002);
              skimmedTakerFeesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSkimmedTakerFeesFieldBuilder() : null;
            } else {
              skimmedTakerFeesBuilder_.addAllMessages(other.skimmedTakerFees_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                denom_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                com.cosmos.base.v1beta1.CoinProto.Coin m =
                    input.readMessage(
                        com.cosmos.base.v1beta1.CoinProto.Coin.parser(),
                        extensionRegistry);
                if (skimmedTakerFeesBuilder_ == null) {
                  ensureSkimmedTakerFeesIsMutable();
                  skimmedTakerFees_.add(m);
                } else {
                  skimmedTakerFeesBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object denom_ = "";
      /**
       * <pre>
       * denom is the denom that has the taker fee share agreement.
       * </pre>
       *
       * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
       * @return The denom.
       */
      public java.lang.String getDenom() {
        java.lang.Object ref = denom_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          denom_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * denom is the denom that has the taker fee share agreement.
       * </pre>
       *
       * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
       * @return The bytes for denom.
       */
      public com.google.protobuf.ByteString
          getDenomBytes() {
        java.lang.Object ref = denom_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          denom_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * denom is the denom that has the taker fee share agreement.
       * </pre>
       *
       * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
       * @param value The denom to set.
       * @return This builder for chaining.
       */
      public Builder setDenom(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        denom_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * denom is the denom that has the taker fee share agreement.
       * </pre>
       *
       * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
       * @return This builder for chaining.
       */
      public Builder clearDenom() {
        denom_ = getDefaultInstance().getDenom();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * denom is the denom that has the taker fee share agreement.
       * </pre>
       *
       * <code>string denom = 1 [json_name = "denom", (.gogoproto.moretags) = "yaml:&#92;"denom&#92;""];</code>
       * @param value The bytes for denom to set.
       * @return This builder for chaining.
       */
      public Builder setDenomBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        denom_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> skimmedTakerFees_ =
        java.util.Collections.emptyList();
      private void ensureSkimmedTakerFeesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          skimmedTakerFees_ = new java.util.ArrayList<com.cosmos.base.v1beta1.CoinProto.Coin>(skimmedTakerFees_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> skimmedTakerFeesBuilder_;

      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin> getSkimmedTakerFeesList() {
        if (skimmedTakerFeesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(skimmedTakerFees_);
        } else {
          return skimmedTakerFeesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public int getSkimmedTakerFeesCount() {
        if (skimmedTakerFeesBuilder_ == null) {
          return skimmedTakerFees_.size();
        } else {
          return skimmedTakerFeesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin getSkimmedTakerFees(int index) {
        if (skimmedTakerFeesBuilder_ == null) {
          return skimmedTakerFees_.get(index);
        } else {
          return skimmedTakerFeesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder setSkimmedTakerFees(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (skimmedTakerFeesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSkimmedTakerFeesIsMutable();
          skimmedTakerFees_.set(index, value);
          onChanged();
        } else {
          skimmedTakerFeesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder setSkimmedTakerFees(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (skimmedTakerFeesBuilder_ == null) {
          ensureSkimmedTakerFeesIsMutable();
          skimmedTakerFees_.set(index, builderForValue.build());
          onChanged();
        } else {
          skimmedTakerFeesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addSkimmedTakerFees(com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (skimmedTakerFeesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSkimmedTakerFeesIsMutable();
          skimmedTakerFees_.add(value);
          onChanged();
        } else {
          skimmedTakerFeesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addSkimmedTakerFees(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin value) {
        if (skimmedTakerFeesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSkimmedTakerFeesIsMutable();
          skimmedTakerFees_.add(index, value);
          onChanged();
        } else {
          skimmedTakerFeesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addSkimmedTakerFees(
          com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (skimmedTakerFeesBuilder_ == null) {
          ensureSkimmedTakerFeesIsMutable();
          skimmedTakerFees_.add(builderForValue.build());
          onChanged();
        } else {
          skimmedTakerFeesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addSkimmedTakerFees(
          int index, com.cosmos.base.v1beta1.CoinProto.Coin.Builder builderForValue) {
        if (skimmedTakerFeesBuilder_ == null) {
          ensureSkimmedTakerFeesIsMutable();
          skimmedTakerFees_.add(index, builderForValue.build());
          onChanged();
        } else {
          skimmedTakerFeesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder addAllSkimmedTakerFees(
          java.lang.Iterable<? extends com.cosmos.base.v1beta1.CoinProto.Coin> values) {
        if (skimmedTakerFeesBuilder_ == null) {
          ensureSkimmedTakerFeesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, skimmedTakerFees_);
          onChanged();
        } else {
          skimmedTakerFeesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder clearSkimmedTakerFees() {
        if (skimmedTakerFeesBuilder_ == null) {
          skimmedTakerFees_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          skimmedTakerFeesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public Builder removeSkimmedTakerFees(int index) {
        if (skimmedTakerFeesBuilder_ == null) {
          ensureSkimmedTakerFeesIsMutable();
          skimmedTakerFees_.remove(index);
          onChanged();
        } else {
          skimmedTakerFeesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder getSkimmedTakerFeesBuilder(
          int index) {
        return getSkimmedTakerFeesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder getSkimmedTakerFeesOrBuilder(
          int index) {
        if (skimmedTakerFeesBuilder_ == null) {
          return skimmedTakerFees_.get(index);  } else {
          return skimmedTakerFeesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<? extends com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
           getSkimmedTakerFeesOrBuilderList() {
        if (skimmedTakerFeesBuilder_ != null) {
          return skimmedTakerFeesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(skimmedTakerFees_);
        }
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder addSkimmedTakerFeesBuilder() {
        return getSkimmedTakerFeesFieldBuilder().addBuilder(
            com.cosmos.base.v1beta1.CoinProto.Coin.getDefaultInstance());
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public com.cosmos.base.v1beta1.CoinProto.Coin.Builder addSkimmedTakerFeesBuilder(
          int index) {
        return getSkimmedTakerFeesFieldBuilder().addBuilder(
            index, com.cosmos.base.v1beta1.CoinProto.Coin.getDefaultInstance());
      }
      /**
       * <pre>
       * skimmed_taker_fees is the total skimmed taker fees for the denom.
       * </pre>
       *
       * <code>repeated .cosmos.base.v1beta1.Coin skimmed_taker_fees = 2 [json_name = "skimmedTakerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"skimmed_taker_fees&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
       */
      public java.util.List<com.cosmos.base.v1beta1.CoinProto.Coin.Builder> 
           getSkimmedTakerFeesBuilderList() {
        return getSkimmedTakerFeesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder> 
          getSkimmedTakerFeesFieldBuilder() {
        if (skimmedTakerFeesBuilder_ == null) {
          skimmedTakerFeesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.cosmos.base.v1beta1.CoinProto.Coin, com.cosmos.base.v1beta1.CoinProto.Coin.Builder, com.cosmos.base.v1beta1.CoinProto.CoinOrBuilder>(
                  skimmedTakerFees_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          skimmedTakerFees_ = null;
        }
        return skimmedTakerFeesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:osmosis.poolmanager.v1beta1.TakerFeeSkimAccumulator)
    }

    // @@protoc_insertion_point(class_scope:osmosis.poolmanager.v1beta1.TakerFeeSkimAccumulator)
    private static final com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator();
    }

    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TakerFeeSkimAccumulator>
        PARSER = new com.google.protobuf.AbstractParser<TakerFeeSkimAccumulator>() {
      @java.lang.Override
      public TakerFeeSkimAccumulator parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<TakerFeeSkimAccumulator> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TakerFeeSkimAccumulator> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeSkimAccumulator getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AlloyContractTakerFeeShareStateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:osmosis.poolmanager.v1beta1.AlloyContractTakerFeeShareState)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * contract_address is the address of the alloyed asset pool contract.
     * </pre>
     *
     * <code>string contract_address = 1 [json_name = "contractAddress", (.gogoproto.moretags) = "yaml:&#92;"contract_address&#92;""];</code>
     * @return The contractAddress.
     */
    java.lang.String getContractAddress();
    /**
     * <pre>
     * contract_address is the address of the alloyed asset pool contract.
     * </pre>
     *
     * <code>string contract_address = 1 [json_name = "contractAddress", (.gogoproto.moretags) = "yaml:&#92;"contract_address&#92;""];</code>
     * @return The bytes for contractAddress.
     */
    com.google.protobuf.ByteString
        getContractAddressBytes();

    /**
     * <pre>
     * taker_fee_share_agreements is the adjusted taker fee share agreements for
     * any asset within the alloyed asset pool that has a taker fee share
     * agreement.
     * </pre>
     *
     * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
     */
    java.util.List<com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement> 
        getTakerFeeShareAgreementsList();
    /**
     * <pre>
     * taker_fee_share_agreements is the adjusted taker fee share agreements for
     * any asset within the alloyed asset pool that has a taker fee share
     * agreement.
     * </pre>
     *
     * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
     */
    com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement getTakerFeeShareAgreements(int index);
    /**
     * <pre>
     * taker_fee_share_agreements is the adjusted taker fee share agreements for
     * any asset within the alloyed asset pool that has a taker fee share
     * agreement.
     * </pre>
     *
     * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
     */
    int getTakerFeeShareAgreementsCount();
    /**
     * <pre>
     * taker_fee_share_agreements is the adjusted taker fee share agreements for
     * any asset within the alloyed asset pool that has a taker fee share
     * agreement.
     * </pre>
     *
     * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
     */
    java.util.List<? extends com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreementOrBuilder> 
        getTakerFeeShareAgreementsOrBuilderList();
    /**
     * <pre>
     * taker_fee_share_agreements is the adjusted taker fee share agreements for
     * any asset within the alloyed asset pool that has a taker fee share
     * agreement.
     * </pre>
     *
     * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
     */
    com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreementOrBuilder getTakerFeeShareAgreementsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * AlloyContractTakerFeeShareState contains the contract address of the alloyed
   * asset pool, along with the adjusted taker fee share agreements for any asset
   * within the alloyed asset pool that has a taker fee share agreement. If for
   * instance there are two denoms, and denomA makes up 50 percent and denomB
   * makes up 50 percent, and denom A has a taker fee share agreement with a skim
   * percent of 10%, then the adjusted taker fee share agreement for denomA will
   * be 5%.
   * </pre>
   *
   * Protobuf type {@code osmosis.poolmanager.v1beta1.AlloyContractTakerFeeShareState}
   */
  public static final class AlloyContractTakerFeeShareState extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:osmosis.poolmanager.v1beta1.AlloyContractTakerFeeShareState)
      AlloyContractTakerFeeShareStateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AlloyContractTakerFeeShareState.newBuilder() to construct.
    private AlloyContractTakerFeeShareState(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AlloyContractTakerFeeShareState() {
      contractAddress_ = "";
      takerFeeShareAgreements_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new AlloyContractTakerFeeShareState();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_AlloyContractTakerFeeShareState_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_AlloyContractTakerFeeShareState_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState.class, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState.Builder.class);
    }

    public static final int CONTRACT_ADDRESS_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object contractAddress_ = "";
    /**
     * <pre>
     * contract_address is the address of the alloyed asset pool contract.
     * </pre>
     *
     * <code>string contract_address = 1 [json_name = "contractAddress", (.gogoproto.moretags) = "yaml:&#92;"contract_address&#92;""];</code>
     * @return The contractAddress.
     */
    @java.lang.Override
    public java.lang.String getContractAddress() {
      java.lang.Object ref = contractAddress_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        contractAddress_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * contract_address is the address of the alloyed asset pool contract.
     * </pre>
     *
     * <code>string contract_address = 1 [json_name = "contractAddress", (.gogoproto.moretags) = "yaml:&#92;"contract_address&#92;""];</code>
     * @return The bytes for contractAddress.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getContractAddressBytes() {
      java.lang.Object ref = contractAddress_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        contractAddress_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TAKER_FEE_SHARE_AGREEMENTS_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private java.util.List<com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement> takerFeeShareAgreements_;
    /**
     * <pre>
     * taker_fee_share_agreements is the adjusted taker fee share agreements for
     * any asset within the alloyed asset pool that has a taker fee share
     * agreement.
     * </pre>
     *
     * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
     */
    @java.lang.Override
    public java.util.List<com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement> getTakerFeeShareAgreementsList() {
      return takerFeeShareAgreements_;
    }
    /**
     * <pre>
     * taker_fee_share_agreements is the adjusted taker fee share agreements for
     * any asset within the alloyed asset pool that has a taker fee share
     * agreement.
     * </pre>
     *
     * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreementOrBuilder> 
        getTakerFeeShareAgreementsOrBuilderList() {
      return takerFeeShareAgreements_;
    }
    /**
     * <pre>
     * taker_fee_share_agreements is the adjusted taker fee share agreements for
     * any asset within the alloyed asset pool that has a taker fee share
     * agreement.
     * </pre>
     *
     * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
     */
    @java.lang.Override
    public int getTakerFeeShareAgreementsCount() {
      return takerFeeShareAgreements_.size();
    }
    /**
     * <pre>
     * taker_fee_share_agreements is the adjusted taker fee share agreements for
     * any asset within the alloyed asset pool that has a taker fee share
     * agreement.
     * </pre>
     *
     * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
     */
    @java.lang.Override
    public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement getTakerFeeShareAgreements(int index) {
      return takerFeeShareAgreements_.get(index);
    }
    /**
     * <pre>
     * taker_fee_share_agreements is the adjusted taker fee share agreements for
     * any asset within the alloyed asset pool that has a taker fee share
     * agreement.
     * </pre>
     *
     * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
     */
    @java.lang.Override
    public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreementOrBuilder getTakerFeeShareAgreementsOrBuilder(
        int index) {
      return takerFeeShareAgreements_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(contractAddress_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, contractAddress_);
      }
      for (int i = 0; i < takerFeeShareAgreements_.size(); i++) {
        output.writeMessage(2, takerFeeShareAgreements_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(contractAddress_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, contractAddress_);
      }
      for (int i = 0; i < takerFeeShareAgreements_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, takerFeeShareAgreements_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState)) {
        return super.equals(obj);
      }
      com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState other = (com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState) obj;

      if (!getContractAddress()
          .equals(other.getContractAddress())) return false;
      if (!getTakerFeeShareAgreementsList()
          .equals(other.getTakerFeeShareAgreementsList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CONTRACT_ADDRESS_FIELD_NUMBER;
      hash = (53 * hash) + getContractAddress().hashCode();
      if (getTakerFeeShareAgreementsCount() > 0) {
        hash = (37 * hash) + TAKER_FEE_SHARE_AGREEMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getTakerFeeShareAgreementsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * AlloyContractTakerFeeShareState contains the contract address of the alloyed
     * asset pool, along with the adjusted taker fee share agreements for any asset
     * within the alloyed asset pool that has a taker fee share agreement. If for
     * instance there are two denoms, and denomA makes up 50 percent and denomB
     * makes up 50 percent, and denom A has a taker fee share agreement with a skim
     * percent of 10%, then the adjusted taker fee share agreement for denomA will
     * be 5%.
     * </pre>
     *
     * Protobuf type {@code osmosis.poolmanager.v1beta1.AlloyContractTakerFeeShareState}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:osmosis.poolmanager.v1beta1.AlloyContractTakerFeeShareState)
        com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareStateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_AlloyContractTakerFeeShareState_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_AlloyContractTakerFeeShareState_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState.class, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState.Builder.class);
      }

      // Construct using com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        contractAddress_ = "";
        if (takerFeeShareAgreementsBuilder_ == null) {
          takerFeeShareAgreements_ = java.util.Collections.emptyList();
        } else {
          takerFeeShareAgreements_ = null;
          takerFeeShareAgreementsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.internal_static_osmosis_poolmanager_v1beta1_AlloyContractTakerFeeShareState_descriptor;
      }

      @java.lang.Override
      public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState getDefaultInstanceForType() {
        return com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState.getDefaultInstance();
      }

      @java.lang.Override
      public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState build() {
        com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState buildPartial() {
        com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState result = new com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState result) {
        if (takerFeeShareAgreementsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            takerFeeShareAgreements_ = java.util.Collections.unmodifiableList(takerFeeShareAgreements_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.takerFeeShareAgreements_ = takerFeeShareAgreements_;
        } else {
          result.takerFeeShareAgreements_ = takerFeeShareAgreementsBuilder_.build();
        }
      }

      private void buildPartial0(com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.contractAddress_ = contractAddress_;
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState) {
          return mergeFrom((com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState other) {
        if (other == com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState.getDefaultInstance()) return this;
        if (!other.getContractAddress().isEmpty()) {
          contractAddress_ = other.contractAddress_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (takerFeeShareAgreementsBuilder_ == null) {
          if (!other.takerFeeShareAgreements_.isEmpty()) {
            if (takerFeeShareAgreements_.isEmpty()) {
              takerFeeShareAgreements_ = other.takerFeeShareAgreements_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureTakerFeeShareAgreementsIsMutable();
              takerFeeShareAgreements_.addAll(other.takerFeeShareAgreements_);
            }
            onChanged();
          }
        } else {
          if (!other.takerFeeShareAgreements_.isEmpty()) {
            if (takerFeeShareAgreementsBuilder_.isEmpty()) {
              takerFeeShareAgreementsBuilder_.dispose();
              takerFeeShareAgreementsBuilder_ = null;
              takerFeeShareAgreements_ = other.takerFeeShareAgreements_;
              bitField0_ = (bitField0_ & ~0x00000002);
              takerFeeShareAgreementsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTakerFeeShareAgreementsFieldBuilder() : null;
            } else {
              takerFeeShareAgreementsBuilder_.addAllMessages(other.takerFeeShareAgreements_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                contractAddress_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement m =
                    input.readMessage(
                        com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.parser(),
                        extensionRegistry);
                if (takerFeeShareAgreementsBuilder_ == null) {
                  ensureTakerFeeShareAgreementsIsMutable();
                  takerFeeShareAgreements_.add(m);
                } else {
                  takerFeeShareAgreementsBuilder_.addMessage(m);
                }
                break;
              } // case 18
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object contractAddress_ = "";
      /**
       * <pre>
       * contract_address is the address of the alloyed asset pool contract.
       * </pre>
       *
       * <code>string contract_address = 1 [json_name = "contractAddress", (.gogoproto.moretags) = "yaml:&#92;"contract_address&#92;""];</code>
       * @return The contractAddress.
       */
      public java.lang.String getContractAddress() {
        java.lang.Object ref = contractAddress_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          contractAddress_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * contract_address is the address of the alloyed asset pool contract.
       * </pre>
       *
       * <code>string contract_address = 1 [json_name = "contractAddress", (.gogoproto.moretags) = "yaml:&#92;"contract_address&#92;""];</code>
       * @return The bytes for contractAddress.
       */
      public com.google.protobuf.ByteString
          getContractAddressBytes() {
        java.lang.Object ref = contractAddress_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          contractAddress_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * contract_address is the address of the alloyed asset pool contract.
       * </pre>
       *
       * <code>string contract_address = 1 [json_name = "contractAddress", (.gogoproto.moretags) = "yaml:&#92;"contract_address&#92;""];</code>
       * @param value The contractAddress to set.
       * @return This builder for chaining.
       */
      public Builder setContractAddress(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        contractAddress_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * contract_address is the address of the alloyed asset pool contract.
       * </pre>
       *
       * <code>string contract_address = 1 [json_name = "contractAddress", (.gogoproto.moretags) = "yaml:&#92;"contract_address&#92;""];</code>
       * @return This builder for chaining.
       */
      public Builder clearContractAddress() {
        contractAddress_ = getDefaultInstance().getContractAddress();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * contract_address is the address of the alloyed asset pool contract.
       * </pre>
       *
       * <code>string contract_address = 1 [json_name = "contractAddress", (.gogoproto.moretags) = "yaml:&#92;"contract_address&#92;""];</code>
       * @param value The bytes for contractAddress to set.
       * @return This builder for chaining.
       */
      public Builder setContractAddressBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        contractAddress_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.util.List<com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement> takerFeeShareAgreements_ =
        java.util.Collections.emptyList();
      private void ensureTakerFeeShareAgreementsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          takerFeeShareAgreements_ = new java.util.ArrayList<com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement>(takerFeeShareAgreements_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.Builder, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreementOrBuilder> takerFeeShareAgreementsBuilder_;

      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public java.util.List<com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement> getTakerFeeShareAgreementsList() {
        if (takerFeeShareAgreementsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(takerFeeShareAgreements_);
        } else {
          return takerFeeShareAgreementsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public int getTakerFeeShareAgreementsCount() {
        if (takerFeeShareAgreementsBuilder_ == null) {
          return takerFeeShareAgreements_.size();
        } else {
          return takerFeeShareAgreementsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement getTakerFeeShareAgreements(int index) {
        if (takerFeeShareAgreementsBuilder_ == null) {
          return takerFeeShareAgreements_.get(index);
        } else {
          return takerFeeShareAgreementsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public Builder setTakerFeeShareAgreements(
          int index, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement value) {
        if (takerFeeShareAgreementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTakerFeeShareAgreementsIsMutable();
          takerFeeShareAgreements_.set(index, value);
          onChanged();
        } else {
          takerFeeShareAgreementsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public Builder setTakerFeeShareAgreements(
          int index, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.Builder builderForValue) {
        if (takerFeeShareAgreementsBuilder_ == null) {
          ensureTakerFeeShareAgreementsIsMutable();
          takerFeeShareAgreements_.set(index, builderForValue.build());
          onChanged();
        } else {
          takerFeeShareAgreementsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public Builder addTakerFeeShareAgreements(com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement value) {
        if (takerFeeShareAgreementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTakerFeeShareAgreementsIsMutable();
          takerFeeShareAgreements_.add(value);
          onChanged();
        } else {
          takerFeeShareAgreementsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public Builder addTakerFeeShareAgreements(
          int index, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement value) {
        if (takerFeeShareAgreementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTakerFeeShareAgreementsIsMutable();
          takerFeeShareAgreements_.add(index, value);
          onChanged();
        } else {
          takerFeeShareAgreementsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public Builder addTakerFeeShareAgreements(
          com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.Builder builderForValue) {
        if (takerFeeShareAgreementsBuilder_ == null) {
          ensureTakerFeeShareAgreementsIsMutable();
          takerFeeShareAgreements_.add(builderForValue.build());
          onChanged();
        } else {
          takerFeeShareAgreementsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public Builder addTakerFeeShareAgreements(
          int index, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.Builder builderForValue) {
        if (takerFeeShareAgreementsBuilder_ == null) {
          ensureTakerFeeShareAgreementsIsMutable();
          takerFeeShareAgreements_.add(index, builderForValue.build());
          onChanged();
        } else {
          takerFeeShareAgreementsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public Builder addAllTakerFeeShareAgreements(
          java.lang.Iterable<? extends com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement> values) {
        if (takerFeeShareAgreementsBuilder_ == null) {
          ensureTakerFeeShareAgreementsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, takerFeeShareAgreements_);
          onChanged();
        } else {
          takerFeeShareAgreementsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public Builder clearTakerFeeShareAgreements() {
        if (takerFeeShareAgreementsBuilder_ == null) {
          takerFeeShareAgreements_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          takerFeeShareAgreementsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public Builder removeTakerFeeShareAgreements(int index) {
        if (takerFeeShareAgreementsBuilder_ == null) {
          ensureTakerFeeShareAgreementsIsMutable();
          takerFeeShareAgreements_.remove(index);
          onChanged();
        } else {
          takerFeeShareAgreementsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.Builder getTakerFeeShareAgreementsBuilder(
          int index) {
        return getTakerFeeShareAgreementsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreementOrBuilder getTakerFeeShareAgreementsOrBuilder(
          int index) {
        if (takerFeeShareAgreementsBuilder_ == null) {
          return takerFeeShareAgreements_.get(index);  } else {
          return takerFeeShareAgreementsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public java.util.List<? extends com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreementOrBuilder> 
           getTakerFeeShareAgreementsOrBuilderList() {
        if (takerFeeShareAgreementsBuilder_ != null) {
          return takerFeeShareAgreementsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(takerFeeShareAgreements_);
        }
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.Builder addTakerFeeShareAgreementsBuilder() {
        return getTakerFeeShareAgreementsFieldBuilder().addBuilder(
            com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.getDefaultInstance());
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.Builder addTakerFeeShareAgreementsBuilder(
          int index) {
        return getTakerFeeShareAgreementsFieldBuilder().addBuilder(
            index, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.getDefaultInstance());
      }
      /**
       * <pre>
       * taker_fee_share_agreements is the adjusted taker fee share agreements for
       * any asset within the alloyed asset pool that has a taker fee share
       * agreement.
       * </pre>
       *
       * <code>repeated .osmosis.poolmanager.v1beta1.TakerFeeShareAgreement taker_fee_share_agreements = 2 [json_name = "takerFeeShareAgreements", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"taker_fee_share_agreements&#92;""];</code>
       */
      public java.util.List<com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.Builder> 
           getTakerFeeShareAgreementsBuilderList() {
        return getTakerFeeShareAgreementsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.Builder, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreementOrBuilder> 
          getTakerFeeShareAgreementsFieldBuilder() {
        if (takerFeeShareAgreementsBuilder_ == null) {
          takerFeeShareAgreementsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreement.Builder, com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.TakerFeeShareAgreementOrBuilder>(
                  takerFeeShareAgreements_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          takerFeeShareAgreements_ = null;
        }
        return takerFeeShareAgreementsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:osmosis.poolmanager.v1beta1.AlloyContractTakerFeeShareState)
    }

    // @@protoc_insertion_point(class_scope:osmosis.poolmanager.v1beta1.AlloyContractTakerFeeShareState)
    private static final com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState();
    }

    public static com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AlloyContractTakerFeeShareState>
        PARSER = new com.google.protobuf.AbstractParser<AlloyContractTakerFeeShareState>() {
      @java.lang.Override
      public AlloyContractTakerFeeShareState parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<AlloyContractTakerFeeShareState> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AlloyContractTakerFeeShareState> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.osmosis.poolmanager.v1beta1.TakerFeeShareProto.AlloyContractTakerFeeShareState getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_osmosis_poolmanager_v1beta1_TakerFeeShareAgreement_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_osmosis_poolmanager_v1beta1_TakerFeeShareAgreement_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_osmosis_poolmanager_v1beta1_TakerFeeSkimAccumulator_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_osmosis_poolmanager_v1beta1_TakerFeeSkimAccumulator_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_osmosis_poolmanager_v1beta1_AlloyContractTakerFeeShareState_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_osmosis_poolmanager_v1beta1_AlloyContractTakerFeeShareState_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n1osmosis/poolmanager/v1beta1/taker_fee_" +
      "share.proto\022\033osmosis.poolmanager.v1beta1" +
      "\032\024gogoproto/gogo.proto\032\036cosmos/base/v1be" +
      "ta1/coin.proto\"\333\001\n\026TakerFeeShareAgreemen" +
      "t\022&\n\005denom\030\001 \001(\tB\020\362\336\037\014yaml:\"denom\"R\005deno" +
      "m\022]\n\014skim_percent\030\002 \001(\tB:\310\336\037\000\332\336\037\033cosmoss" +
      "dk.io/math.LegacyDec\362\336\037\023yaml:\"skim_perce" +
      "nt\"R\013skimPercent\022:\n\014skim_address\030\003 \001(\tB\027" +
      "\362\336\037\023yaml:\"skim_address\"R\013skimAddress\"\332\001\n" +
      "\027TakerFeeSkimAccumulator\022&\n\005denom\030\001 \001(\tB" +
      "\020\362\336\037\014yaml:\"denom\"R\005denom\022\226\001\n\022skimmed_tak" +
      "er_fees\030\002 \003(\0132\031.cosmos.base.v1beta1.Coin" +
      "BM\310\336\037\000\362\336\037\031yaml:\"skimmed_taker_fees\"\252\337\037(g" +
      "ithub.com/cosmos/cosmos-sdk/types.CoinsR" +
      "\020skimmedTakerFees\"\207\002\n\037AlloyContractTaker" +
      "FeeShareState\022F\n\020contract_address\030\001 \001(\tB" +
      "\033\362\336\037\027yaml:\"contract_address\"R\017contractAd" +
      "dress\022\233\001\n\032taker_fee_share_agreements\030\002 \003" +
      "(\01323.osmosis.poolmanager.v1beta1.TakerFe" +
      "eShareAgreementB)\310\336\037\000\362\336\037!yaml:\"taker_fee" +
      "_share_agreements\"R\027takerFeeShareAgreeme" +
      "ntsB\372\001\n\037com.osmosis.poolmanager.v1beta1B" +
      "\022TakerFeeShareProtoZ7github.com/osmosis-" +
      "labs/osmosis/v26/x/poolmanager/types\242\002\003O" +
      "PX\252\002\033Osmosis.Poolmanager.V1beta1\312\002\033Osmos" +
      "is\\Poolmanager\\V1beta1\342\002\'Osmosis\\Poolman" +
      "ager\\V1beta1\\GPBMetadata\352\002\035Osmosis::Pool" +
      "manager::V1beta1b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.gogoproto.GogoProto.getDescriptor(),
          com.cosmos.base.v1beta1.CoinProto.getDescriptor(),
        });
    internal_static_osmosis_poolmanager_v1beta1_TakerFeeShareAgreement_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_osmosis_poolmanager_v1beta1_TakerFeeShareAgreement_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_osmosis_poolmanager_v1beta1_TakerFeeShareAgreement_descriptor,
        new java.lang.String[] { "Denom", "SkimPercent", "SkimAddress", });
    internal_static_osmosis_poolmanager_v1beta1_TakerFeeSkimAccumulator_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_osmosis_poolmanager_v1beta1_TakerFeeSkimAccumulator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_osmosis_poolmanager_v1beta1_TakerFeeSkimAccumulator_descriptor,
        new java.lang.String[] { "Denom", "SkimmedTakerFees", });
    internal_static_osmosis_poolmanager_v1beta1_AlloyContractTakerFeeShareState_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_osmosis_poolmanager_v1beta1_AlloyContractTakerFeeShareState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_osmosis_poolmanager_v1beta1_AlloyContractTakerFeeShareState_descriptor,
        new java.lang.String[] { "ContractAddress", "TakerFeeShareAgreements", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.gogoproto.GogoProto.castrepeated);
    registry.add(com.gogoproto.GogoProto.customtype);
    registry.add(com.gogoproto.GogoProto.moretags);
    registry.add(com.gogoproto.GogoProto.nullable);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.gogoproto.GogoProto.getDescriptor();
    com.cosmos.base.v1beta1.CoinProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
