// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmosis/incentives/tx.proto

package com.osmosis.incentives;

public interface MsgCreateGaugeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:osmosis.incentives.MsgCreateGauge)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * is_perpetual shows if it's a perpetual or non-perpetual gauge
   * Non-perpetual gauges distribute their tokens equally per epoch while the
   * gauge is in the active period. Perpetual gauges distribute all their tokens
   * at a single time and only distribute their tokens again once the gauge is
   * refilled
   * </pre>
   *
   * <code>bool is_perpetual = 1 [json_name = "isPerpetual"];</code>
   * @return The isPerpetual.
   */
  boolean getIsPerpetual();

  /**
   * <pre>
   * owner is the address of gauge creator
   * </pre>
   *
   * <code>string owner = 2 [json_name = "owner", (.gogoproto.moretags) = "yaml:&#92;"owner&#92;""];</code>
   * @return The owner.
   */
  java.lang.String getOwner();
  /**
   * <pre>
   * owner is the address of gauge creator
   * </pre>
   *
   * <code>string owner = 2 [json_name = "owner", (.gogoproto.moretags) = "yaml:&#92;"owner&#92;""];</code>
   * @return The bytes for owner.
   */
  com.google.protobuf.ByteString
      getOwnerBytes();

  /**
   * <pre>
   * distribute_to show which lock the gauge should distribute to by time
   * duration or by timestamp
   * </pre>
   *
   * <code>.osmosis.lockup.QueryCondition distribute_to = 3 [json_name = "distributeTo", (.gogoproto.nullable) = false];</code>
   * @return Whether the distributeTo field is set.
   */
  boolean hasDistributeTo();
  /**
   * <pre>
   * distribute_to show which lock the gauge should distribute to by time
   * duration or by timestamp
   * </pre>
   *
   * <code>.osmosis.lockup.QueryCondition distribute_to = 3 [json_name = "distributeTo", (.gogoproto.nullable) = false];</code>
   * @return The distributeTo.
   */
  com.osmosis.lockup.QueryCondition getDistributeTo();
  /**
   * <pre>
   * distribute_to show which lock the gauge should distribute to by time
   * duration or by timestamp
   * </pre>
   *
   * <code>.osmosis.lockup.QueryCondition distribute_to = 3 [json_name = "distributeTo", (.gogoproto.nullable) = false];</code>
   */
  com.osmosis.lockup.QueryConditionOrBuilder getDistributeToOrBuilder();

  /**
   * <pre>
   * coins are coin(s) to be distributed by the gauge
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin coins = 4 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<com.cosmos.base.v1beta1.Coin> 
      getCoinsList();
  /**
   * <pre>
   * coins are coin(s) to be distributed by the gauge
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin coins = 4 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  com.cosmos.base.v1beta1.Coin getCoins(int index);
  /**
   * <pre>
   * coins are coin(s) to be distributed by the gauge
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin coins = 4 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  int getCoinsCount();
  /**
   * <pre>
   * coins are coin(s) to be distributed by the gauge
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin coins = 4 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getCoinsOrBuilderList();
  /**
   * <pre>
   * coins are coin(s) to be distributed by the gauge
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin coins = 4 [json_name = "coins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  com.cosmos.base.v1beta1.CoinOrBuilder getCoinsOrBuilder(
      int index);

  /**
   * <pre>
   * start_time is the distribution start time
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"timestamp&#92;"", (.gogoproto.stdtime) = true];</code>
   * @return Whether the startTime field is set.
   */
  boolean hasStartTime();
  /**
   * <pre>
   * start_time is the distribution start time
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"timestamp&#92;"", (.gogoproto.stdtime) = true];</code>
   * @return The startTime.
   */
  com.google.protobuf.Timestamp getStartTime();
  /**
   * <pre>
   * start_time is the distribution start time
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 5 [json_name = "startTime", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"timestamp&#92;"", (.gogoproto.stdtime) = true];</code>
   */
  com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder();

  /**
   * <pre>
   * num_epochs_paid_over is the number of epochs distribution will be completed
   * over
   * </pre>
   *
   * <code>uint64 num_epochs_paid_over = 6 [json_name = "numEpochsPaidOver"];</code>
   * @return The numEpochsPaidOver.
   */
  long getNumEpochsPaidOver();
}
