// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmosis/protorev/v1beta1/genesis.proto

package com.osmosis.protorev.v1beta1;

public interface GenesisStateOrBuilder extends
    // @@protoc_insertion_point(interface_extends:osmosis.protorev.v1beta1.GenesisState)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Parameters for the protorev module.
   * </pre>
   *
   * <code>.osmosis.protorev.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];</code>
   * @return Whether the params field is set.
   */
  boolean hasParams();
  /**
   * <pre>
   * Parameters for the protorev module.
   * </pre>
   *
   * <code>.osmosis.protorev.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];</code>
   * @return The params.
   */
  com.osmosis.protorev.v1beta1.Params getParams();
  /**
   * <pre>
   * Parameters for the protorev module.
   * </pre>
   *
   * <code>.osmosis.protorev.v1beta1.Params params = 1 [json_name = "params", (.gogoproto.nullable) = false];</code>
   */
  com.osmosis.protorev.v1beta1.ParamsOrBuilder getParamsOrBuilder();

  /**
   * <pre>
   * Token pair arb routes for the protorev module (hot routes).
   * </pre>
   *
   * <code>repeated .osmosis.protorev.v1beta1.TokenPairArbRoutes token_pair_arb_routes = 2 [json_name = "tokenPairArbRoutes", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"token_pair_arb_routes&#92;""];</code>
   */
  java.util.List<com.osmosis.protorev.v1beta1.TokenPairArbRoutes> 
      getTokenPairArbRoutesList();
  /**
   * <pre>
   * Token pair arb routes for the protorev module (hot routes).
   * </pre>
   *
   * <code>repeated .osmosis.protorev.v1beta1.TokenPairArbRoutes token_pair_arb_routes = 2 [json_name = "tokenPairArbRoutes", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"token_pair_arb_routes&#92;""];</code>
   */
  com.osmosis.protorev.v1beta1.TokenPairArbRoutes getTokenPairArbRoutes(int index);
  /**
   * <pre>
   * Token pair arb routes for the protorev module (hot routes).
   * </pre>
   *
   * <code>repeated .osmosis.protorev.v1beta1.TokenPairArbRoutes token_pair_arb_routes = 2 [json_name = "tokenPairArbRoutes", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"token_pair_arb_routes&#92;""];</code>
   */
  int getTokenPairArbRoutesCount();
  /**
   * <pre>
   * Token pair arb routes for the protorev module (hot routes).
   * </pre>
   *
   * <code>repeated .osmosis.protorev.v1beta1.TokenPairArbRoutes token_pair_arb_routes = 2 [json_name = "tokenPairArbRoutes", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"token_pair_arb_routes&#92;""];</code>
   */
  java.util.List<? extends com.osmosis.protorev.v1beta1.TokenPairArbRoutesOrBuilder> 
      getTokenPairArbRoutesOrBuilderList();
  /**
   * <pre>
   * Token pair arb routes for the protorev module (hot routes).
   * </pre>
   *
   * <code>repeated .osmosis.protorev.v1beta1.TokenPairArbRoutes token_pair_arb_routes = 2 [json_name = "tokenPairArbRoutes", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"token_pair_arb_routes&#92;""];</code>
   */
  com.osmosis.protorev.v1beta1.TokenPairArbRoutesOrBuilder getTokenPairArbRoutesOrBuilder(
      int index);

  /**
   * <pre>
   * The base denominations being used to create cyclic arbitrage routes via the
   * highest liquidity method.
   * </pre>
   *
   * <code>repeated .osmosis.protorev.v1beta1.BaseDenom base_denoms = 3 [json_name = "baseDenoms", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"base_denoms&#92;""];</code>
   */
  java.util.List<com.osmosis.protorev.v1beta1.BaseDenom> 
      getBaseDenomsList();
  /**
   * <pre>
   * The base denominations being used to create cyclic arbitrage routes via the
   * highest liquidity method.
   * </pre>
   *
   * <code>repeated .osmosis.protorev.v1beta1.BaseDenom base_denoms = 3 [json_name = "baseDenoms", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"base_denoms&#92;""];</code>
   */
  com.osmosis.protorev.v1beta1.BaseDenom getBaseDenoms(int index);
  /**
   * <pre>
   * The base denominations being used to create cyclic arbitrage routes via the
   * highest liquidity method.
   * </pre>
   *
   * <code>repeated .osmosis.protorev.v1beta1.BaseDenom base_denoms = 3 [json_name = "baseDenoms", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"base_denoms&#92;""];</code>
   */
  int getBaseDenomsCount();
  /**
   * <pre>
   * The base denominations being used to create cyclic arbitrage routes via the
   * highest liquidity method.
   * </pre>
   *
   * <code>repeated .osmosis.protorev.v1beta1.BaseDenom base_denoms = 3 [json_name = "baseDenoms", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"base_denoms&#92;""];</code>
   */
  java.util.List<? extends com.osmosis.protorev.v1beta1.BaseDenomOrBuilder> 
      getBaseDenomsOrBuilderList();
  /**
   * <pre>
   * The base denominations being used to create cyclic arbitrage routes via the
   * highest liquidity method.
   * </pre>
   *
   * <code>repeated .osmosis.protorev.v1beta1.BaseDenom base_denoms = 3 [json_name = "baseDenoms", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"base_denoms&#92;""];</code>
   */
  com.osmosis.protorev.v1beta1.BaseDenomOrBuilder getBaseDenomsOrBuilder(
      int index);

  /**
   * <pre>
   * The pool weights that are being used to calculate the weight (compute cost)
   * of each route.
   * </pre>
   *
   * <code>.osmosis.protorev.v1beta1.PoolWeights pool_weights = 4 [json_name = "poolWeights", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"pool_weights&#92;""];</code>
   * @return Whether the poolWeights field is set.
   */
  boolean hasPoolWeights();
  /**
   * <pre>
   * The pool weights that are being used to calculate the weight (compute cost)
   * of each route.
   * </pre>
   *
   * <code>.osmosis.protorev.v1beta1.PoolWeights pool_weights = 4 [json_name = "poolWeights", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"pool_weights&#92;""];</code>
   * @return The poolWeights.
   */
  com.osmosis.protorev.v1beta1.PoolWeights getPoolWeights();
  /**
   * <pre>
   * The pool weights that are being used to calculate the weight (compute cost)
   * of each route.
   * </pre>
   *
   * <code>.osmosis.protorev.v1beta1.PoolWeights pool_weights = 4 [json_name = "poolWeights", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"pool_weights&#92;""];</code>
   */
  com.osmosis.protorev.v1beta1.PoolWeightsOrBuilder getPoolWeightsOrBuilder();

  /**
   * <pre>
   * The number of days since module genesis.
   * </pre>
   *
   * <code>uint64 days_since_module_genesis = 5 [json_name = "daysSinceModuleGenesis", (.gogoproto.moretags) = "yaml:&#92;"days_since_module_genesis&#92;""];</code>
   * @return The daysSinceModuleGenesis.
   */
  long getDaysSinceModuleGenesis();

  /**
   * <pre>
   * The fees the developer account has accumulated over time.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin developer_fees = 6 [json_name = "developerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"developer_fees&#92;""];</code>
   */
  java.util.List<com.cosmos.base.v1beta1.Coin> 
      getDeveloperFeesList();
  /**
   * <pre>
   * The fees the developer account has accumulated over time.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin developer_fees = 6 [json_name = "developerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"developer_fees&#92;""];</code>
   */
  com.cosmos.base.v1beta1.Coin getDeveloperFees(int index);
  /**
   * <pre>
   * The fees the developer account has accumulated over time.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin developer_fees = 6 [json_name = "developerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"developer_fees&#92;""];</code>
   */
  int getDeveloperFeesCount();
  /**
   * <pre>
   * The fees the developer account has accumulated over time.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin developer_fees = 6 [json_name = "developerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"developer_fees&#92;""];</code>
   */
  java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getDeveloperFeesOrBuilderList();
  /**
   * <pre>
   * The fees the developer account has accumulated over time.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin developer_fees = 6 [json_name = "developerFees", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"developer_fees&#92;""];</code>
   */
  com.cosmos.base.v1beta1.CoinOrBuilder getDeveloperFeesOrBuilder(
      int index);

  /**
   * <pre>
   * The latest block height that the module has processed.
   * </pre>
   *
   * <code>uint64 latest_block_height = 7 [json_name = "latestBlockHeight", (.gogoproto.moretags) = "yaml:&#92;"latest_block_height&#92;""];</code>
   * @return The latestBlockHeight.
   */
  long getLatestBlockHeight();

  /**
   * <pre>
   * The developer account address of the module.
   * </pre>
   *
   * <code>string developer_address = 8 [json_name = "developerAddress", (.gogoproto.moretags) = "yaml:&#92;"developer_address&#92;"", (.cosmos_proto.scalar) = "cosmos.Address"];</code>
   * @return The developerAddress.
   */
  java.lang.String getDeveloperAddress();
  /**
   * <pre>
   * The developer account address of the module.
   * </pre>
   *
   * <code>string developer_address = 8 [json_name = "developerAddress", (.gogoproto.moretags) = "yaml:&#92;"developer_address&#92;"", (.cosmos_proto.scalar) = "cosmos.Address"];</code>
   * @return The bytes for developerAddress.
   */
  com.google.protobuf.ByteString
      getDeveloperAddressBytes();

  /**
   * <pre>
   * Max pool points per block i.e. the maximum compute time (in ms)
   * that protorev can use per block.
   * </pre>
   *
   * <code>uint64 max_pool_points_per_block = 9 [json_name = "maxPoolPointsPerBlock", (.gogoproto.moretags) = "yaml:&#92;"max_pool_points_per_block&#92;""];</code>
   * @return The maxPoolPointsPerBlock.
   */
  long getMaxPoolPointsPerBlock();

  /**
   * <pre>
   * Max pool points per tx i.e. the maximum compute time (in ms) that
   * protorev can use per tx.
   * </pre>
   *
   * <code>uint64 max_pool_points_per_tx = 10 [json_name = "maxPoolPointsPerTx", (.gogoproto.moretags) = "yaml:&#92;"max_pool_points_per_tx&#92;""];</code>
   * @return The maxPoolPointsPerTx.
   */
  long getMaxPoolPointsPerTx();

  /**
   * <pre>
   * The number of pool points that have been consumed in the current block.
   * </pre>
   *
   * <code>uint64 point_count_for_block = 11 [json_name = "pointCountForBlock", (.gogoproto.moretags) = "yaml:&#92;"point_count_for_block&#92;""];</code>
   * @return The pointCountForBlock.
   */
  long getPointCountForBlock();
}
