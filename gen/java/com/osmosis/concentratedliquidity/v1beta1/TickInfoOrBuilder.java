// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmosis/concentrated-liquidity/tickInfo.proto

package com.osmosis.concentratedliquidity.v1beta1;

public interface TickInfoOrBuilder extends
    // @@protoc_insertion_point(interface_extends:osmosis.concentratedliquidity.v1beta1.TickInfo)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string liquidity_gross = 1 [json_name = "liquidityGross", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"liquidity_gross&#92;""];</code>
   * @return The liquidityGross.
   */
  java.lang.String getLiquidityGross();
  /**
   * <code>string liquidity_gross = 1 [json_name = "liquidityGross", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"liquidity_gross&#92;""];</code>
   * @return The bytes for liquidityGross.
   */
  com.google.protobuf.ByteString
      getLiquidityGrossBytes();

  /**
   * <code>string liquidity_net = 2 [json_name = "liquidityNet", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"liquidity_net&#92;""];</code>
   * @return The liquidityNet.
   */
  java.lang.String getLiquidityNet();
  /**
   * <code>string liquidity_net = 2 [json_name = "liquidityNet", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"liquidity_net&#92;""];</code>
   * @return The bytes for liquidityNet.
   */
  com.google.protobuf.ByteString
      getLiquidityNetBytes();

  /**
   * <pre>
   * Total spread rewards accumulated in the opposite direction that the tick
   * was last crossed. i.e. if the current tick is to the right of this tick
   * (meaning its currently a greater price), then this is the total spread
   * rewards accumulated below the tick. If the current tick is to the left of
   * this tick (meaning its currently at a lower price), then this is the total
   * spread rewards accumulated above the tick.
   *
   * Note: the way this value is used depends on the direction of spread rewards
   * we are calculating for. If we are calculating spread rewards below the
   * lower tick and the lower tick is the active tick, then this is the
   * spreadRewardGrowthGlobal - the lower tick's
   * spreadRewardGrowthOppositeDirectionOfLastTraversal. If we are calculating
   * spread rewards above the upper tick and the upper tick is the active tick,
   * then this is just the tick's
   * spreadRewardGrowthOppositeDirectionOfLastTraversal value.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin spread_reward_growth_opposite_direction_of_last_traversal = 3 [json_name = "spreadRewardGrowthOppositeDirectionOfLastTraversal", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  java.util.List<com.cosmos.base.v1beta1.DecCoin> 
      getSpreadRewardGrowthOppositeDirectionOfLastTraversalList();
  /**
   * <pre>
   * Total spread rewards accumulated in the opposite direction that the tick
   * was last crossed. i.e. if the current tick is to the right of this tick
   * (meaning its currently a greater price), then this is the total spread
   * rewards accumulated below the tick. If the current tick is to the left of
   * this tick (meaning its currently at a lower price), then this is the total
   * spread rewards accumulated above the tick.
   *
   * Note: the way this value is used depends on the direction of spread rewards
   * we are calculating for. If we are calculating spread rewards below the
   * lower tick and the lower tick is the active tick, then this is the
   * spreadRewardGrowthGlobal - the lower tick's
   * spreadRewardGrowthOppositeDirectionOfLastTraversal. If we are calculating
   * spread rewards above the upper tick and the upper tick is the active tick,
   * then this is just the tick's
   * spreadRewardGrowthOppositeDirectionOfLastTraversal value.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin spread_reward_growth_opposite_direction_of_last_traversal = 3 [json_name = "spreadRewardGrowthOppositeDirectionOfLastTraversal", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  com.cosmos.base.v1beta1.DecCoin getSpreadRewardGrowthOppositeDirectionOfLastTraversal(int index);
  /**
   * <pre>
   * Total spread rewards accumulated in the opposite direction that the tick
   * was last crossed. i.e. if the current tick is to the right of this tick
   * (meaning its currently a greater price), then this is the total spread
   * rewards accumulated below the tick. If the current tick is to the left of
   * this tick (meaning its currently at a lower price), then this is the total
   * spread rewards accumulated above the tick.
   *
   * Note: the way this value is used depends on the direction of spread rewards
   * we are calculating for. If we are calculating spread rewards below the
   * lower tick and the lower tick is the active tick, then this is the
   * spreadRewardGrowthGlobal - the lower tick's
   * spreadRewardGrowthOppositeDirectionOfLastTraversal. If we are calculating
   * spread rewards above the upper tick and the upper tick is the active tick,
   * then this is just the tick's
   * spreadRewardGrowthOppositeDirectionOfLastTraversal value.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin spread_reward_growth_opposite_direction_of_last_traversal = 3 [json_name = "spreadRewardGrowthOppositeDirectionOfLastTraversal", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  int getSpreadRewardGrowthOppositeDirectionOfLastTraversalCount();
  /**
   * <pre>
   * Total spread rewards accumulated in the opposite direction that the tick
   * was last crossed. i.e. if the current tick is to the right of this tick
   * (meaning its currently a greater price), then this is the total spread
   * rewards accumulated below the tick. If the current tick is to the left of
   * this tick (meaning its currently at a lower price), then this is the total
   * spread rewards accumulated above the tick.
   *
   * Note: the way this value is used depends on the direction of spread rewards
   * we are calculating for. If we are calculating spread rewards below the
   * lower tick and the lower tick is the active tick, then this is the
   * spreadRewardGrowthGlobal - the lower tick's
   * spreadRewardGrowthOppositeDirectionOfLastTraversal. If we are calculating
   * spread rewards above the upper tick and the upper tick is the active tick,
   * then this is just the tick's
   * spreadRewardGrowthOppositeDirectionOfLastTraversal value.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin spread_reward_growth_opposite_direction_of_last_traversal = 3 [json_name = "spreadRewardGrowthOppositeDirectionOfLastTraversal", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  java.util.List<? extends com.cosmos.base.v1beta1.DecCoinOrBuilder> 
      getSpreadRewardGrowthOppositeDirectionOfLastTraversalOrBuilderList();
  /**
   * <pre>
   * Total spread rewards accumulated in the opposite direction that the tick
   * was last crossed. i.e. if the current tick is to the right of this tick
   * (meaning its currently a greater price), then this is the total spread
   * rewards accumulated below the tick. If the current tick is to the left of
   * this tick (meaning its currently at a lower price), then this is the total
   * spread rewards accumulated above the tick.
   *
   * Note: the way this value is used depends on the direction of spread rewards
   * we are calculating for. If we are calculating spread rewards below the
   * lower tick and the lower tick is the active tick, then this is the
   * spreadRewardGrowthGlobal - the lower tick's
   * spreadRewardGrowthOppositeDirectionOfLastTraversal. If we are calculating
   * spread rewards above the upper tick and the upper tick is the active tick,
   * then this is just the tick's
   * spreadRewardGrowthOppositeDirectionOfLastTraversal value.
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin spread_reward_growth_opposite_direction_of_last_traversal = 3 [json_name = "spreadRewardGrowthOppositeDirectionOfLastTraversal", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  com.cosmos.base.v1beta1.DecCoinOrBuilder getSpreadRewardGrowthOppositeDirectionOfLastTraversalOrBuilder(
      int index);

  /**
   * <code>repeated .osmosis.concentratedliquidity.v1beta1.UptimeTracker uptime_trackers = 4 [json_name = "uptimeTrackers", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"uptime_trackers&#92;""];</code>
   */
  java.util.List<com.osmosis.concentratedliquidity.v1beta1.UptimeTracker> 
      getUptimeTrackersList();
  /**
   * <code>repeated .osmosis.concentratedliquidity.v1beta1.UptimeTracker uptime_trackers = 4 [json_name = "uptimeTrackers", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"uptime_trackers&#92;""];</code>
   */
  com.osmosis.concentratedliquidity.v1beta1.UptimeTracker getUptimeTrackers(int index);
  /**
   * <code>repeated .osmosis.concentratedliquidity.v1beta1.UptimeTracker uptime_trackers = 4 [json_name = "uptimeTrackers", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"uptime_trackers&#92;""];</code>
   */
  int getUptimeTrackersCount();
  /**
   * <code>repeated .osmosis.concentratedliquidity.v1beta1.UptimeTracker uptime_trackers = 4 [json_name = "uptimeTrackers", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"uptime_trackers&#92;""];</code>
   */
  java.util.List<? extends com.osmosis.concentratedliquidity.v1beta1.UptimeTrackerOrBuilder> 
      getUptimeTrackersOrBuilderList();
  /**
   * <code>repeated .osmosis.concentratedliquidity.v1beta1.UptimeTracker uptime_trackers = 4 [json_name = "uptimeTrackers", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"uptime_trackers&#92;""];</code>
   */
  com.osmosis.concentratedliquidity.v1beta1.UptimeTrackerOrBuilder getUptimeTrackersOrBuilder(
      int index);
}
