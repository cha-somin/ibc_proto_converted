// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osmosis/concentrated-liquidity/tickInfo.proto

package com.osmosis.concentratedliquidity.v1beta1;

public final class TickInfoProto {
  private TickInfoProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_osmosis_concentratedliquidity_v1beta1_TickInfo_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_osmosis_concentratedliquidity_v1beta1_TickInfo_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_osmosis_concentratedliquidity_v1beta1_UptimeTracker_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_osmosis_concentratedliquidity_v1beta1_UptimeTracker_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n-osmosis/concentrated-liquidity/tickInf" +
      "o.proto\022%osmosis.concentratedliquidity.v" +
      "1beta1\032\031cosmos_proto/cosmos.proto\032\024gogop" +
      "roto/gogo.proto\032\036cosmos/base/v1beta1/coi" +
      "n.proto\"\264\004\n\010TickInfo\022q\n\017liquidity_gross\030" +
      "\001 \001(\tBH\310\336\037\000\332\336\037&github.com/cosmos/cosmos-" +
      "sdk/types.Dec\362\336\037\026yaml:\"liquidity_gross\"R" +
      "\016liquidityGross\022k\n\rliquidity_net\030\002 \001(\tBF" +
      "\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/typ" +
      "es.Dec\362\336\037\024yaml:\"liquidity_net\"R\014liquidit" +
      "yNet\022\310\001\n9spread_reward_growth_opposite_d" +
      "irection_of_last_traversal\030\003 \003(\0132\034.cosmo" +
      "s.base.v1beta1.DecCoinB3\310\336\037\000\252\337\037+github.c" +
      "om/cosmos/cosmos-sdk/types.DecCoinsR2spr" +
      "eadRewardGrowthOppositeDirectionOfLastTr" +
      "aversal\022}\n\017uptime_trackers\030\004 \003(\01324.osmos" +
      "is.concentratedliquidity.v1beta1.UptimeT" +
      "rackerB\036\310\336\037\000\362\336\037\026yaml:\"uptime_trackers\"R\016" +
      "uptimeTrackers\"\227\001\n\rUptimeTracker\022\205\001\n\025upt" +
      "ime_growth_outside\030\001 \003(\0132\034.cosmos.base.v" +
      "1beta1.DecCoinB3\310\336\037\000\252\337\037+github.com/cosmo" +
      "s/cosmos-sdk/types.DecCoinsR\023uptimeGrowt" +
      "hOutsideB\264\002\n)com.osmosis.concentratedliq" +
      "uidity.v1beta1B\rTickInfoProtoP\001ZBgithub." +
      "com/osmosis-labs/osmosis/v15/x/concentra" +
      "ted-liquidity/model\242\002\003OCX\252\002%Osmosis.Conc" +
      "entratedliquidity.V1beta1\312\002%Osmosis\\Conc" +
      "entratedliquidity\\V1beta1\342\0021Osmosis\\Conc" +
      "entratedliquidity\\V1beta1\\GPBMetadata\352\002\'" +
      "Osmosis::Concentratedliquidity::V1beta1b" +
      "\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.cosmos_proto.CosmosProto.getDescriptor(),
          com.gogoproto.GogoProto.getDescriptor(),
          com.cosmos.base.v1beta1.CoinProto.getDescriptor(),
        });
    internal_static_osmosis_concentratedliquidity_v1beta1_TickInfo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_osmosis_concentratedliquidity_v1beta1_TickInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_osmosis_concentratedliquidity_v1beta1_TickInfo_descriptor,
        new java.lang.String[] { "LiquidityGross", "LiquidityNet", "SpreadRewardGrowthOppositeDirectionOfLastTraversal", "UptimeTrackers", });
    internal_static_osmosis_concentratedliquidity_v1beta1_UptimeTracker_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_osmosis_concentratedliquidity_v1beta1_UptimeTracker_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_osmosis_concentratedliquidity_v1beta1_UptimeTracker_descriptor,
        new java.lang.String[] { "UptimeGrowthOutside", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.gogoproto.GogoProto.castrepeated);
    registry.add(com.gogoproto.GogoProto.customtype);
    registry.add(com.gogoproto.GogoProto.moretags);
    registry.add(com.gogoproto.GogoProto.nullable);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.cosmos_proto.CosmosProto.getDescriptor();
    com.gogoproto.GogoProto.getDescriptor();
    com.cosmos.base.v1beta1.CoinProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
