// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cosmwasm/wasm/v1/types.proto

package com.cosmwasm.wasm.v1;

/**
 * <pre>
 * AccessType permission types
 * </pre>
 *
 * Protobuf enum {@code cosmwasm.wasm.v1.AccessType}
 */
public enum AccessType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * AccessTypeUnspecified placeholder for empty value
   * </pre>
   *
   * <code>ACCESS_TYPE_UNSPECIFIED = 0 [(.gogoproto.enumvalue_customname) = "AccessTypeUnspecified"];</code>
   */
  ACCESS_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   * AccessTypeNobody forbidden
   * </pre>
   *
   * <code>ACCESS_TYPE_NOBODY = 1 [(.gogoproto.enumvalue_customname) = "AccessTypeNobody"];</code>
   */
  ACCESS_TYPE_NOBODY(1),
  /**
   * <pre>
   * AccessTypeOnlyAddress restricted to a single address
   * Deprecated: use AccessTypeAnyOfAddresses instead
   * </pre>
   *
   * <code>ACCESS_TYPE_ONLY_ADDRESS = 2 [(.gogoproto.enumvalue_customname) = "AccessTypeOnlyAddress"];</code>
   */
  ACCESS_TYPE_ONLY_ADDRESS(2),
  /**
   * <pre>
   * AccessTypeEverybody unrestricted
   * </pre>
   *
   * <code>ACCESS_TYPE_EVERYBODY = 3 [(.gogoproto.enumvalue_customname) = "AccessTypeEverybody"];</code>
   */
  ACCESS_TYPE_EVERYBODY(3),
  /**
   * <pre>
   * AccessTypeAnyOfAddresses allow any of the addresses
   * </pre>
   *
   * <code>ACCESS_TYPE_ANY_OF_ADDRESSES = 4 [(.gogoproto.enumvalue_customname) = "AccessTypeAnyOfAddresses"];</code>
   */
  ACCESS_TYPE_ANY_OF_ADDRESSES(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * AccessTypeUnspecified placeholder for empty value
   * </pre>
   *
   * <code>ACCESS_TYPE_UNSPECIFIED = 0 [(.gogoproto.enumvalue_customname) = "AccessTypeUnspecified"];</code>
   */
  public static final int ACCESS_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * AccessTypeNobody forbidden
   * </pre>
   *
   * <code>ACCESS_TYPE_NOBODY = 1 [(.gogoproto.enumvalue_customname) = "AccessTypeNobody"];</code>
   */
  public static final int ACCESS_TYPE_NOBODY_VALUE = 1;
  /**
   * <pre>
   * AccessTypeOnlyAddress restricted to a single address
   * Deprecated: use AccessTypeAnyOfAddresses instead
   * </pre>
   *
   * <code>ACCESS_TYPE_ONLY_ADDRESS = 2 [(.gogoproto.enumvalue_customname) = "AccessTypeOnlyAddress"];</code>
   */
  public static final int ACCESS_TYPE_ONLY_ADDRESS_VALUE = 2;
  /**
   * <pre>
   * AccessTypeEverybody unrestricted
   * </pre>
   *
   * <code>ACCESS_TYPE_EVERYBODY = 3 [(.gogoproto.enumvalue_customname) = "AccessTypeEverybody"];</code>
   */
  public static final int ACCESS_TYPE_EVERYBODY_VALUE = 3;
  /**
   * <pre>
   * AccessTypeAnyOfAddresses allow any of the addresses
   * </pre>
   *
   * <code>ACCESS_TYPE_ANY_OF_ADDRESSES = 4 [(.gogoproto.enumvalue_customname) = "AccessTypeAnyOfAddresses"];</code>
   */
  public static final int ACCESS_TYPE_ANY_OF_ADDRESSES_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static AccessType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static AccessType forNumber(int value) {
    switch (value) {
      case 0: return ACCESS_TYPE_UNSPECIFIED;
      case 1: return ACCESS_TYPE_NOBODY;
      case 2: return ACCESS_TYPE_ONLY_ADDRESS;
      case 3: return ACCESS_TYPE_EVERYBODY;
      case 4: return ACCESS_TYPE_ANY_OF_ADDRESSES;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<AccessType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      AccessType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<AccessType>() {
          public AccessType findValueByNumber(int number) {
            return AccessType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.cosmwasm.wasm.v1.TypesProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final AccessType[] VALUES = values();

  public static AccessType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private AccessType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:cosmwasm.wasm.v1.AccessType)
}

