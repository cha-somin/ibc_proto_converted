// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pstake/lspersistence/v1beta1/liquidstaking.proto

package com.pstake.lspersistence.v1beta1;

public final class LiquidstakingProto {
  private LiquidstakingProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pstake_lspersistence_v1beta1_Params_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_pstake_lspersistence_v1beta1_Params_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pstake_lspersistence_v1beta1_WhitelistedValidator_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_pstake_lspersistence_v1beta1_WhitelistedValidator_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pstake_lspersistence_v1beta1_LiquidValidator_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_pstake_lspersistence_v1beta1_LiquidValidator_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pstake_lspersistence_v1beta1_LiquidValidatorState_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_pstake_lspersistence_v1beta1_LiquidValidatorState_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pstake_lspersistence_v1beta1_NetAmountState_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_pstake_lspersistence_v1beta1_NetAmountState_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pstake_lspersistence_v1beta1_VotingPower_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_pstake_lspersistence_v1beta1_VotingPower_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n0pstake/lspersistence/v1beta1/liquidsta" +
      "king.proto\022\034pstake.lspersistence.v1beta1" +
      "\032\024gogoproto/gogo.proto\032\031cosmos_proto/cos" +
      "mos.proto\032\036cosmos/base/v1beta1/coin.prot" +
      "o\032\037google/protobuf/timestamp.proto\"\307\010\n\006P" +
      "arams\022H\n\021liquid_bond_denom\030\001 \001(\tB\034\362\336\037\030ya" +
      "ml:\"liquid_bond_denom\"R\017liquidBondDenom\022" +
      "\220\001\n\026whitelisted_validators\030\002 \003(\01322.pstak" +
      "e.lspersistence.v1beta1.WhitelistedValid" +
      "atorB%\310\336\037\000\362\336\037\035yaml:\"whitelisted_validato" +
      "rs\"R\025whitelistedValidators\022{\n\016stake_fee_" +
      "rate\030\003 \001(\tBU\310\336\037\000\332\336\037&github.com/cosmos/co" +
      "smos-sdk/types.Dec\362\336\037\025yaml:\"stake_fee_ra" +
      "te\"\322\264-\ncosmos.DecR\014stakeFeeRate\022\201\001\n\020unst" +
      "ake_fee_rate\030\004 \001(\tBW\310\336\037\000\332\336\037&github.com/c" +
      "osmos/cosmos-sdk/types.Dec\362\336\037\027yaml:\"unst" +
      "ake_fee_rate\"\322\264-\ncosmos.DecR\016unstakeFeeR" +
      "ate\022\212\001\n\023redemption_fee_rate\030\005 \001(\tBZ\310\336\037\000\332" +
      "\336\037&github.com/cosmos/cosmos-sdk/types.De" +
      "c\362\336\037\032yaml:\"redemption_fee_rate\"\322\264-\ncosmo" +
      "s.DecR\021redemptionFeeRate\022\201\001\n\020restake_fee" +
      "_rate\030\006 \001(\tBW\310\336\037\000\332\336\037&github.com/cosmos/c" +
      "osmos-sdk/types.Dec\362\336\037\027yaml:\"restake_fee" +
      "_rate\"\322\264-\ncosmos.DecR\016restakeFeeRate\022\233\001\n" +
      "\031min_liquid_staking_amount\030\007 \001(\tB`\310\336\037\000\332\336" +
      "\037&github.com/cosmos/cosmos-sdk/types.Int" +
      "\362\336\037 yaml:\"min_liquid_staking_amount\"\322\264-\n" +
      "cosmos.IntR\026minLiquidStakingAmount\022U\n\rad" +
      "min_address\030\010 \001(\tB0\362\336\037\024yaml:\"admin_addre" +
      "ss\"\322\264-\024cosmos.AddressStringR\014adminAddres" +
      "s\022O\n\013fee_address\030\t \001(\tB.\362\336\037\022yaml:\"fee_ad" +
      "dress\"\322\264-\024cosmos.AddressStringR\nfeeAddre" +
      "ss:\010\210\240\037\000\230\240\037\000\"\342\001\n\024WhitelistedValidator\022I\n" +
      "\021validator_address\030\001 \001(\tB\034\362\336\037\030yaml:\"vali" +
      "dator_address\"R\020validatorAddress\022y\n\rtarg" +
      "et_weight\030\002 \001(\tBT\310\336\037\000\332\336\037&github.com/cosm" +
      "os/cosmos-sdk/types.Int\362\336\037\024yaml:\"target_" +
      "weight\"\322\264-\ncosmos.IntR\014targetWeight:\004\210\240\037" +
      "\000\"c\n\017LiquidValidator\022F\n\020operator_address" +
      "\030\001 \001(\tB\033\362\336\037\027yaml:\"operator_address\"R\017ope" +
      "ratorAddress:\010\210\240\037\000\350\240\037\000\"\326\003\n\024LiquidValidat" +
      "orState\022F\n\020operator_address\030\001 \001(\tB\033\362\336\037\027y" +
      "aml:\"operator_address\"R\017operatorAddress\022" +
      "e\n\006weight\030\002 \001(\tBM\310\336\037\000\332\336\037&github.com/cosm" +
      "os/cosmos-sdk/types.Int\362\336\037\ryaml:\"weight\"" +
      "\322\264-\ncosmos.IntR\006weight\022E\n\006status\030\003 \001(\0162-" +
      ".pstake.lspersistence.v1beta1.ValidatorS" +
      "tatusR\006status\022[\n\ndel_shares\030\004 \001(\tB<\310\336\037\000\332" +
      "\336\037&github.com/cosmos/cosmos-sdk/types.De" +
      "c\322\264-\ncosmos.DecR\tdelShares\022a\n\rliquid_tok" +
      "ens\030\005 \001(\tB<\310\336\037\000\332\336\037&github.com/cosmos/cos" +
      "mos-sdk/types.Int\322\264-\ncosmos.IntR\014liquidT" +
      "okens:\010\210\240\037\000\350\240\037\000\"\354\006\n\016NetAmountState\022Y\n\tmi" +
      "nt_rate\030\001 \001(\tB<\310\336\037\000\332\336\037&github.com/cosmos" +
      "/cosmos-sdk/types.Dec\322\264-\ncosmos.DecR\010min" +
      "tRate\022l\n\023btoken_total_supply\030\002 \001(\tB<\310\336\037\000" +
      "\332\336\037&github.com/cosmos/cosmos-sdk/types.I" +
      "nt\322\264-\ncosmos.IntR\021btokenTotalSupply\022[\n\nn" +
      "et_amount\030\003 \001(\tB<\310\336\037\000\332\336\037&github.com/cosm" +
      "os/cosmos-sdk/types.Dec\322\264-\ncosmos.DecR\tn" +
      "etAmount\022f\n\020total_del_shares\030\004 \001(\tB<\310\336\037\000" +
      "\332\336\037&github.com/cosmos/cosmos-sdk/types.D" +
      "ec\322\264-\ncosmos.DecR\016totalDelShares\022l\n\023tota" +
      "l_liquid_tokens\030\005 \001(\tB<\310\336\037\000\332\336\037&github.co" +
      "m/cosmos/cosmos-sdk/types.Int\322\264-\ncosmos." +
      "IntR\021totalLiquidTokens\022t\n\027total_remainin" +
      "g_rewards\030\006 \001(\tB<\310\336\037\000\332\336\037&github.com/cosm" +
      "os/cosmos-sdk/types.Dec\322\264-\ncosmos.DecR\025t" +
      "otalRemainingRewards\022t\n\027total_unbonding_" +
      "balance\030\007 \001(\tB<\310\336\037\000\332\336\037&github.com/cosmos" +
      "/cosmos-sdk/types.Int\322\264-\ncosmos.IntR\025tot" +
      "alUnbondingBalance\022h\n\021proxy_acc_balance\030" +
      "\010 \001(\tB<\310\336\037\000\332\336\037&github.com/cosmos/cosmos-" +
      "sdk/types.Int\322\264-\ncosmos.IntR\017proxyAccBal" +
      "ance:\010\210\240\037\001\350\240\037\000\"\200\003\n\013VotingPower\022\024\n\005voter\030" +
      "\001 \001(\tR\005voter\022n\n\024staking_voting_power\030\002 \001" +
      "(\tB<\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk" +
      "/types.Int\322\264-\ncosmos.IntR\022stakingVotingP" +
      "ower\022{\n\033liquid_staking_voting_power\030\003 \001(" +
      "\tB<\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/" +
      "types.Int\322\264-\ncosmos.IntR\030liquidStakingVo" +
      "tingPower\022d\n\026validator_voting_power\030\004 \001(" +
      "\tB.\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/" +
      "types.IntR\024validatorVotingPower:\010\210\240\037\000\350\240\037" +
      "\000*\315\001\n\017ValidatorStatus\022@\n\034VALIDATOR_STATU" +
      "S_UNSPECIFIED\020\000\032\036\212\235 \032ValidatorStatusUnsp" +
      "ecified\0226\n\027VALIDATOR_STATUS_ACTIVE\020\001\032\031\212\235" +
      " \025ValidatorStatusActive\022:\n\031VALIDATOR_STA" +
      "TUS_INACTIVE\020\002\032\033\212\235 \027ValidatorStatusInact" +
      "ive\032\004\210\243\036\000B\212\002\n com.pstake.lspersistence.v" +
      "1beta1B\022LiquidstakingProtoP\001Z@github.com" +
      "/persistenceOne/pstake-native/v2/x/lsper" +
      "sistence/types\242\002\003PLX\252\002\034Pstake.Lspersiste" +
      "nce.V1beta1\312\002\034Pstake\\Lspersistence\\V1bet" +
      "a1\342\002(Pstake\\Lspersistence\\V1beta1\\GPBMet" +
      "adata\352\002\036Pstake::Lspersistence::V1beta1b\006" +
      "proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.gogoproto.GogoProto.getDescriptor(),
          com.cosmos_proto.CosmosProto.getDescriptor(),
          com.cosmos.base.v1beta1.CoinProto.getDescriptor(),
          com.google.protobuf.TimestampProto.getDescriptor(),
        });
    internal_static_pstake_lspersistence_v1beta1_Params_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_pstake_lspersistence_v1beta1_Params_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_pstake_lspersistence_v1beta1_Params_descriptor,
        new java.lang.String[] { "LiquidBondDenom", "WhitelistedValidators", "StakeFeeRate", "UnstakeFeeRate", "RedemptionFeeRate", "RestakeFeeRate", "MinLiquidStakingAmount", "AdminAddress", "FeeAddress", });
    internal_static_pstake_lspersistence_v1beta1_WhitelistedValidator_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_pstake_lspersistence_v1beta1_WhitelistedValidator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_pstake_lspersistence_v1beta1_WhitelistedValidator_descriptor,
        new java.lang.String[] { "ValidatorAddress", "TargetWeight", });
    internal_static_pstake_lspersistence_v1beta1_LiquidValidator_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_pstake_lspersistence_v1beta1_LiquidValidator_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_pstake_lspersistence_v1beta1_LiquidValidator_descriptor,
        new java.lang.String[] { "OperatorAddress", });
    internal_static_pstake_lspersistence_v1beta1_LiquidValidatorState_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_pstake_lspersistence_v1beta1_LiquidValidatorState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_pstake_lspersistence_v1beta1_LiquidValidatorState_descriptor,
        new java.lang.String[] { "OperatorAddress", "Weight", "Status", "DelShares", "LiquidTokens", });
    internal_static_pstake_lspersistence_v1beta1_NetAmountState_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_pstake_lspersistence_v1beta1_NetAmountState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_pstake_lspersistence_v1beta1_NetAmountState_descriptor,
        new java.lang.String[] { "MintRate", "BtokenTotalSupply", "NetAmount", "TotalDelShares", "TotalLiquidTokens", "TotalRemainingRewards", "TotalUnbondingBalance", "ProxyAccBalance", });
    internal_static_pstake_lspersistence_v1beta1_VotingPower_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_pstake_lspersistence_v1beta1_VotingPower_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_pstake_lspersistence_v1beta1_VotingPower_descriptor,
        new java.lang.String[] { "Voter", "StakingVotingPower", "LiquidStakingVotingPower", "ValidatorVotingPower", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.cosmos_proto.CosmosProto.scalar);
    registry.add(com.gogoproto.GogoProto.customtype);
    registry.add(com.gogoproto.GogoProto.enumvalueCustomname);
    registry.add(com.gogoproto.GogoProto.equal);
    registry.add(com.gogoproto.GogoProto.goprotoEnumPrefix);
    registry.add(com.gogoproto.GogoProto.goprotoGetters);
    registry.add(com.gogoproto.GogoProto.goprotoStringer);
    registry.add(com.gogoproto.GogoProto.moretags);
    registry.add(com.gogoproto.GogoProto.nullable);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.gogoproto.GogoProto.getDescriptor();
    com.cosmos_proto.CosmosProto.getDescriptor();
    com.cosmos.base.v1beta1.CoinProto.getDescriptor();
    com.google.protobuf.TimestampProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
