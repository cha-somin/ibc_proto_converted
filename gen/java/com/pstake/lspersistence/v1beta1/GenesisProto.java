// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pstake/lspersistence/v1beta1/genesis.proto

package com.pstake.lspersistence.v1beta1;

public final class GenesisProto {
  private GenesisProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_pstake_lspersistence_v1beta1_GenesisState_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_pstake_lspersistence_v1beta1_GenesisState_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n*pstake/lspersistence/v1beta1/genesis.p" +
      "roto\022\034pstake.lspersistence.v1beta1\032\024gogo" +
      "proto/gogo.proto\0320pstake/lspersistence/v" +
      "1beta1/liquidstaking.proto\"\332\001\n\014GenesisSt" +
      "ate\022B\n\006params\030\001 \001(\0132$.pstake.lspersisten" +
      "ce.v1beta1.ParamsB\004\310\336\037\000R\006params\022|\n\021liqui" +
      "d_validators\030\002 \003(\0132-.pstake.lspersistenc" +
      "e.v1beta1.LiquidValidatorB \310\336\037\000\362\336\037\030yaml:" +
      "\"liquid_validators\"R\020liquidValidators:\010\210" +
      "\240\037\000\350\240\037\000B\210\002\n com.pstake.lspersistence.v1b" +
      "eta1B\014GenesisProtoP\001Z@github.com/persist" +
      "enceOne/pstake-native/v2/x/lspersistence" +
      "/types\242\002\003PLX\252\002\034Pstake.Lspersistence.V1be" +
      "ta1\312\002\034Pstake\\Lspersistence\\V1beta1\342\002(Pst" +
      "ake\\Lspersistence\\V1beta1\\GPBMetadata\352\002\036" +
      "Pstake::Lspersistence::V1beta1\250\342\036\001b\006prot" +
      "o3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.gogoproto.GogoProto.getDescriptor(),
          com.pstake.lspersistence.v1beta1.LiquidstakingProto.getDescriptor(),
        });
    internal_static_pstake_lspersistence_v1beta1_GenesisState_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_pstake_lspersistence_v1beta1_GenesisState_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_pstake_lspersistence_v1beta1_GenesisState_descriptor,
        new java.lang.String[] { "Params", "LiquidValidators", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.gogoproto.GogoProto.equal);
    registry.add(com.gogoproto.GogoProto.equalAll);
    registry.add(com.gogoproto.GogoProto.goprotoGetters);
    registry.add(com.gogoproto.GogoProto.moretags);
    registry.add(com.gogoproto.GogoProto.nullable);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.gogoproto.GogoProto.getDescriptor();
    com.pstake.lspersistence.v1beta1.LiquidstakingProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
