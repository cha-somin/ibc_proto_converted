// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crescent/claim/v1beta1/claim.proto

package com.crescent.claim.v1beta1;

/**
 * <pre>
 * ClaimRecord defines claim record that corresponds to the airdrop.
 * </pre>
 *
 * Protobuf type {@code crescent.claim.v1beta1.ClaimRecord}
 */
public final class ClaimRecord extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:crescent.claim.v1beta1.ClaimRecord)
    ClaimRecordOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ClaimRecord.newBuilder() to construct.
  private ClaimRecord(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ClaimRecord() {
    recipient_ = "";
    initialClaimableCoins_ = java.util.Collections.emptyList();
    claimableCoins_ = java.util.Collections.emptyList();
    claimedConditions_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new ClaimRecord();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.crescent.claim.v1beta1.ClaimProto.internal_static_crescent_claim_v1beta1_ClaimRecord_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.crescent.claim.v1beta1.ClaimProto.internal_static_crescent_claim_v1beta1_ClaimRecord_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.crescent.claim.v1beta1.ClaimRecord.class, com.crescent.claim.v1beta1.ClaimRecord.Builder.class);
  }

  public static final int AIRDROP_ID_FIELD_NUMBER = 1;
  private long airdropId_ = 0L;
  /**
   * <pre>
   * airdrop_id specifies airdrop id
   * </pre>
   *
   * <code>uint64 airdrop_id = 1 [json_name = "airdropId"];</code>
   * @return The airdropId.
   */
  @java.lang.Override
  public long getAirdropId() {
    return airdropId_;
  }

  public static final int RECIPIENT_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object recipient_ = "";
  /**
   * <pre>
   * recipient specifies the bech32-encoded address that is eligible to claim airdrop
   * </pre>
   *
   * <code>string recipient = 2 [json_name = "recipient"];</code>
   * @return The recipient.
   */
  @java.lang.Override
  public java.lang.String getRecipient() {
    java.lang.Object ref = recipient_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      recipient_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * recipient specifies the bech32-encoded address that is eligible to claim airdrop
   * </pre>
   *
   * <code>string recipient = 2 [json_name = "recipient"];</code>
   * @return The bytes for recipient.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getRecipientBytes() {
    java.lang.Object ref = recipient_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      recipient_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int INITIAL_CLAIMABLE_COINS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<com.cosmos.base.v1beta1.Coin> initialClaimableCoins_;
  /**
   * <pre>
   * initial_claimable_coins specifies the initial claimable coins
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<com.cosmos.base.v1beta1.Coin> getInitialClaimableCoinsList() {
    return initialClaimableCoins_;
  }
  /**
   * <pre>
   * initial_claimable_coins specifies the initial claimable coins
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getInitialClaimableCoinsOrBuilderList() {
    return initialClaimableCoins_;
  }
  /**
   * <pre>
   * initial_claimable_coins specifies the initial claimable coins
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public int getInitialClaimableCoinsCount() {
    return initialClaimableCoins_.size();
  }
  /**
   * <pre>
   * initial_claimable_coins specifies the initial claimable coins
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public com.cosmos.base.v1beta1.Coin getInitialClaimableCoins(int index) {
    return initialClaimableCoins_.get(index);
  }
  /**
   * <pre>
   * initial_claimable_coins specifies the initial claimable coins
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public com.cosmos.base.v1beta1.CoinOrBuilder getInitialClaimableCoinsOrBuilder(
      int index) {
    return initialClaimableCoins_.get(index);
  }

  public static final int CLAIMABLE_COINS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<com.cosmos.base.v1beta1.Coin> claimableCoins_;
  /**
   * <pre>
   * claimable_coins specifies the unclaimed claimable coins
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<com.cosmos.base.v1beta1.Coin> getClaimableCoinsList() {
    return claimableCoins_;
  }
  /**
   * <pre>
   * claimable_coins specifies the unclaimed claimable coins
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getClaimableCoinsOrBuilderList() {
    return claimableCoins_;
  }
  /**
   * <pre>
   * claimable_coins specifies the unclaimed claimable coins
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public int getClaimableCoinsCount() {
    return claimableCoins_.size();
  }
  /**
   * <pre>
   * claimable_coins specifies the unclaimed claimable coins
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public com.cosmos.base.v1beta1.Coin getClaimableCoins(int index) {
    return claimableCoins_.get(index);
  }
  /**
   * <pre>
   * claimable_coins specifies the unclaimed claimable coins
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public com.cosmos.base.v1beta1.CoinOrBuilder getClaimableCoinsOrBuilder(
      int index) {
    return claimableCoins_.get(index);
  }

  public static final int CLAIMED_CONDITIONS_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private java.util.List<java.lang.Integer> claimedConditions_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, com.crescent.claim.v1beta1.ConditionType> claimedConditions_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, com.crescent.claim.v1beta1.ConditionType>() {
            public com.crescent.claim.v1beta1.ConditionType convert(java.lang.Integer from) {
              com.crescent.claim.v1beta1.ConditionType result = com.crescent.claim.v1beta1.ConditionType.forNumber(from);
              return result == null ? com.crescent.claim.v1beta1.ConditionType.UNRECOGNIZED : result;
            }
          };
  /**
   * <pre>
   * claimed_conditions specifies a list of condition types
   * initial values are empty and each condition type gets appended when claim is successfully executed
   * </pre>
   *
   * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
   * @return A list containing the claimedConditions.
   */
  @java.lang.Override
  public java.util.List<com.crescent.claim.v1beta1.ConditionType> getClaimedConditionsList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, com.crescent.claim.v1beta1.ConditionType>(claimedConditions_, claimedConditions_converter_);
  }
  /**
   * <pre>
   * claimed_conditions specifies a list of condition types
   * initial values are empty and each condition type gets appended when claim is successfully executed
   * </pre>
   *
   * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
   * @return The count of claimedConditions.
   */
  @java.lang.Override
  public int getClaimedConditionsCount() {
    return claimedConditions_.size();
  }
  /**
   * <pre>
   * claimed_conditions specifies a list of condition types
   * initial values are empty and each condition type gets appended when claim is successfully executed
   * </pre>
   *
   * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
   * @param index The index of the element to return.
   * @return The claimedConditions at the given index.
   */
  @java.lang.Override
  public com.crescent.claim.v1beta1.ConditionType getClaimedConditions(int index) {
    return claimedConditions_converter_.convert(claimedConditions_.get(index));
  }
  /**
   * <pre>
   * claimed_conditions specifies a list of condition types
   * initial values are empty and each condition type gets appended when claim is successfully executed
   * </pre>
   *
   * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
   * @return A list containing the enum numeric values on the wire for claimedConditions.
   */
  @java.lang.Override
  public java.util.List<java.lang.Integer>
  getClaimedConditionsValueList() {
    return claimedConditions_;
  }
  /**
   * <pre>
   * claimed_conditions specifies a list of condition types
   * initial values are empty and each condition type gets appended when claim is successfully executed
   * </pre>
   *
   * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of claimedConditions at the given index.
   */
  @java.lang.Override
  public int getClaimedConditionsValue(int index) {
    return claimedConditions_.get(index);
  }
  private int claimedConditionsMemoizedSerializedSize;

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (airdropId_ != 0L) {
      output.writeUInt64(1, airdropId_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(recipient_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, recipient_);
    }
    for (int i = 0; i < initialClaimableCoins_.size(); i++) {
      output.writeMessage(3, initialClaimableCoins_.get(i));
    }
    for (int i = 0; i < claimableCoins_.size(); i++) {
      output.writeMessage(4, claimableCoins_.get(i));
    }
    if (getClaimedConditionsList().size() > 0) {
      output.writeUInt32NoTag(42);
      output.writeUInt32NoTag(claimedConditionsMemoizedSerializedSize);
    }
    for (int i = 0; i < claimedConditions_.size(); i++) {
      output.writeEnumNoTag(claimedConditions_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (airdropId_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt64Size(1, airdropId_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(recipient_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, recipient_);
    }
    for (int i = 0; i < initialClaimableCoins_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, initialClaimableCoins_.get(i));
    }
    for (int i = 0; i < claimableCoins_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, claimableCoins_.get(i));
    }
    {
      int dataSize = 0;
      for (int i = 0; i < claimedConditions_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(claimedConditions_.get(i));
      }
      size += dataSize;
      if (!getClaimedConditionsList().isEmpty()) {  size += 1;
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32SizeNoTag(dataSize);
      }claimedConditionsMemoizedSerializedSize = dataSize;
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.crescent.claim.v1beta1.ClaimRecord)) {
      return super.equals(obj);
    }
    com.crescent.claim.v1beta1.ClaimRecord other = (com.crescent.claim.v1beta1.ClaimRecord) obj;

    if (getAirdropId()
        != other.getAirdropId()) return false;
    if (!getRecipient()
        .equals(other.getRecipient())) return false;
    if (!getInitialClaimableCoinsList()
        .equals(other.getInitialClaimableCoinsList())) return false;
    if (!getClaimableCoinsList()
        .equals(other.getClaimableCoinsList())) return false;
    if (!claimedConditions_.equals(other.claimedConditions_)) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + AIRDROP_ID_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getAirdropId());
    hash = (37 * hash) + RECIPIENT_FIELD_NUMBER;
    hash = (53 * hash) + getRecipient().hashCode();
    if (getInitialClaimableCoinsCount() > 0) {
      hash = (37 * hash) + INITIAL_CLAIMABLE_COINS_FIELD_NUMBER;
      hash = (53 * hash) + getInitialClaimableCoinsList().hashCode();
    }
    if (getClaimableCoinsCount() > 0) {
      hash = (37 * hash) + CLAIMABLE_COINS_FIELD_NUMBER;
      hash = (53 * hash) + getClaimableCoinsList().hashCode();
    }
    if (getClaimedConditionsCount() > 0) {
      hash = (37 * hash) + CLAIMED_CONDITIONS_FIELD_NUMBER;
      hash = (53 * hash) + claimedConditions_.hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.crescent.claim.v1beta1.ClaimRecord parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.crescent.claim.v1beta1.ClaimRecord parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.crescent.claim.v1beta1.ClaimRecord parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.crescent.claim.v1beta1.ClaimRecord parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.crescent.claim.v1beta1.ClaimRecord parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.crescent.claim.v1beta1.ClaimRecord parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.crescent.claim.v1beta1.ClaimRecord parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.crescent.claim.v1beta1.ClaimRecord parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.crescent.claim.v1beta1.ClaimRecord parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.crescent.claim.v1beta1.ClaimRecord parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.crescent.claim.v1beta1.ClaimRecord parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.crescent.claim.v1beta1.ClaimRecord parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.crescent.claim.v1beta1.ClaimRecord prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * ClaimRecord defines claim record that corresponds to the airdrop.
   * </pre>
   *
   * Protobuf type {@code crescent.claim.v1beta1.ClaimRecord}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:crescent.claim.v1beta1.ClaimRecord)
      com.crescent.claim.v1beta1.ClaimRecordOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.crescent.claim.v1beta1.ClaimProto.internal_static_crescent_claim_v1beta1_ClaimRecord_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.crescent.claim.v1beta1.ClaimProto.internal_static_crescent_claim_v1beta1_ClaimRecord_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.crescent.claim.v1beta1.ClaimRecord.class, com.crescent.claim.v1beta1.ClaimRecord.Builder.class);
    }

    // Construct using com.crescent.claim.v1beta1.ClaimRecord.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      airdropId_ = 0L;
      recipient_ = "";
      if (initialClaimableCoinsBuilder_ == null) {
        initialClaimableCoins_ = java.util.Collections.emptyList();
      } else {
        initialClaimableCoins_ = null;
        initialClaimableCoinsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      if (claimableCoinsBuilder_ == null) {
        claimableCoins_ = java.util.Collections.emptyList();
      } else {
        claimableCoins_ = null;
        claimableCoinsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      claimedConditions_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.crescent.claim.v1beta1.ClaimProto.internal_static_crescent_claim_v1beta1_ClaimRecord_descriptor;
    }

    @java.lang.Override
    public com.crescent.claim.v1beta1.ClaimRecord getDefaultInstanceForType() {
      return com.crescent.claim.v1beta1.ClaimRecord.getDefaultInstance();
    }

    @java.lang.Override
    public com.crescent.claim.v1beta1.ClaimRecord build() {
      com.crescent.claim.v1beta1.ClaimRecord result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.crescent.claim.v1beta1.ClaimRecord buildPartial() {
      com.crescent.claim.v1beta1.ClaimRecord result = new com.crescent.claim.v1beta1.ClaimRecord(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.crescent.claim.v1beta1.ClaimRecord result) {
      if (initialClaimableCoinsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          initialClaimableCoins_ = java.util.Collections.unmodifiableList(initialClaimableCoins_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.initialClaimableCoins_ = initialClaimableCoins_;
      } else {
        result.initialClaimableCoins_ = initialClaimableCoinsBuilder_.build();
      }
      if (claimableCoinsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          claimableCoins_ = java.util.Collections.unmodifiableList(claimableCoins_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.claimableCoins_ = claimableCoins_;
      } else {
        result.claimableCoins_ = claimableCoinsBuilder_.build();
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        claimedConditions_ = java.util.Collections.unmodifiableList(claimedConditions_);
        bitField0_ = (bitField0_ & ~0x00000010);
      }
      result.claimedConditions_ = claimedConditions_;
    }

    private void buildPartial0(com.crescent.claim.v1beta1.ClaimRecord result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.airdropId_ = airdropId_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.recipient_ = recipient_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.crescent.claim.v1beta1.ClaimRecord) {
        return mergeFrom((com.crescent.claim.v1beta1.ClaimRecord)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.crescent.claim.v1beta1.ClaimRecord other) {
      if (other == com.crescent.claim.v1beta1.ClaimRecord.getDefaultInstance()) return this;
      if (other.getAirdropId() != 0L) {
        setAirdropId(other.getAirdropId());
      }
      if (!other.getRecipient().isEmpty()) {
        recipient_ = other.recipient_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (initialClaimableCoinsBuilder_ == null) {
        if (!other.initialClaimableCoins_.isEmpty()) {
          if (initialClaimableCoins_.isEmpty()) {
            initialClaimableCoins_ = other.initialClaimableCoins_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureInitialClaimableCoinsIsMutable();
            initialClaimableCoins_.addAll(other.initialClaimableCoins_);
          }
          onChanged();
        }
      } else {
        if (!other.initialClaimableCoins_.isEmpty()) {
          if (initialClaimableCoinsBuilder_.isEmpty()) {
            initialClaimableCoinsBuilder_.dispose();
            initialClaimableCoinsBuilder_ = null;
            initialClaimableCoins_ = other.initialClaimableCoins_;
            bitField0_ = (bitField0_ & ~0x00000004);
            initialClaimableCoinsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getInitialClaimableCoinsFieldBuilder() : null;
          } else {
            initialClaimableCoinsBuilder_.addAllMessages(other.initialClaimableCoins_);
          }
        }
      }
      if (claimableCoinsBuilder_ == null) {
        if (!other.claimableCoins_.isEmpty()) {
          if (claimableCoins_.isEmpty()) {
            claimableCoins_ = other.claimableCoins_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureClaimableCoinsIsMutable();
            claimableCoins_.addAll(other.claimableCoins_);
          }
          onChanged();
        }
      } else {
        if (!other.claimableCoins_.isEmpty()) {
          if (claimableCoinsBuilder_.isEmpty()) {
            claimableCoinsBuilder_.dispose();
            claimableCoinsBuilder_ = null;
            claimableCoins_ = other.claimableCoins_;
            bitField0_ = (bitField0_ & ~0x00000008);
            claimableCoinsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getClaimableCoinsFieldBuilder() : null;
          } else {
            claimableCoinsBuilder_.addAllMessages(other.claimableCoins_);
          }
        }
      }
      if (!other.claimedConditions_.isEmpty()) {
        if (claimedConditions_.isEmpty()) {
          claimedConditions_ = other.claimedConditions_;
          bitField0_ = (bitField0_ & ~0x00000010);
        } else {
          ensureClaimedConditionsIsMutable();
          claimedConditions_.addAll(other.claimedConditions_);
        }
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              airdropId_ = input.readUInt64();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              recipient_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              com.cosmos.base.v1beta1.Coin m =
                  input.readMessage(
                      com.cosmos.base.v1beta1.Coin.parser(),
                      extensionRegistry);
              if (initialClaimableCoinsBuilder_ == null) {
                ensureInitialClaimableCoinsIsMutable();
                initialClaimableCoins_.add(m);
              } else {
                initialClaimableCoinsBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              com.cosmos.base.v1beta1.Coin m =
                  input.readMessage(
                      com.cosmos.base.v1beta1.Coin.parser(),
                      extensionRegistry);
              if (claimableCoinsBuilder_ == null) {
                ensureClaimableCoinsIsMutable();
                claimableCoins_.add(m);
              } else {
                claimableCoinsBuilder_.addMessage(m);
              }
              break;
            } // case 34
            case 40: {
              int tmpRaw = input.readEnum();
              ensureClaimedConditionsIsMutable();
              claimedConditions_.add(tmpRaw);
              break;
            } // case 40
            case 42: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int tmpRaw = input.readEnum();
                ensureClaimedConditionsIsMutable();
                claimedConditions_.add(tmpRaw);
              }
              input.popLimit(oldLimit);
              break;
            } // case 42
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private long airdropId_ ;
    /**
     * <pre>
     * airdrop_id specifies airdrop id
     * </pre>
     *
     * <code>uint64 airdrop_id = 1 [json_name = "airdropId"];</code>
     * @return The airdropId.
     */
    @java.lang.Override
    public long getAirdropId() {
      return airdropId_;
    }
    /**
     * <pre>
     * airdrop_id specifies airdrop id
     * </pre>
     *
     * <code>uint64 airdrop_id = 1 [json_name = "airdropId"];</code>
     * @param value The airdropId to set.
     * @return This builder for chaining.
     */
    public Builder setAirdropId(long value) {

      airdropId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * airdrop_id specifies airdrop id
     * </pre>
     *
     * <code>uint64 airdrop_id = 1 [json_name = "airdropId"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAirdropId() {
      bitField0_ = (bitField0_ & ~0x00000001);
      airdropId_ = 0L;
      onChanged();
      return this;
    }

    private java.lang.Object recipient_ = "";
    /**
     * <pre>
     * recipient specifies the bech32-encoded address that is eligible to claim airdrop
     * </pre>
     *
     * <code>string recipient = 2 [json_name = "recipient"];</code>
     * @return The recipient.
     */
    public java.lang.String getRecipient() {
      java.lang.Object ref = recipient_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        recipient_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * recipient specifies the bech32-encoded address that is eligible to claim airdrop
     * </pre>
     *
     * <code>string recipient = 2 [json_name = "recipient"];</code>
     * @return The bytes for recipient.
     */
    public com.google.protobuf.ByteString
        getRecipientBytes() {
      java.lang.Object ref = recipient_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        recipient_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * recipient specifies the bech32-encoded address that is eligible to claim airdrop
     * </pre>
     *
     * <code>string recipient = 2 [json_name = "recipient"];</code>
     * @param value The recipient to set.
     * @return This builder for chaining.
     */
    public Builder setRecipient(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      recipient_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * recipient specifies the bech32-encoded address that is eligible to claim airdrop
     * </pre>
     *
     * <code>string recipient = 2 [json_name = "recipient"];</code>
     * @return This builder for chaining.
     */
    public Builder clearRecipient() {
      recipient_ = getDefaultInstance().getRecipient();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * recipient specifies the bech32-encoded address that is eligible to claim airdrop
     * </pre>
     *
     * <code>string recipient = 2 [json_name = "recipient"];</code>
     * @param value The bytes for recipient to set.
     * @return This builder for chaining.
     */
    public Builder setRecipientBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      recipient_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private java.util.List<com.cosmos.base.v1beta1.Coin> initialClaimableCoins_ =
      java.util.Collections.emptyList();
    private void ensureInitialClaimableCoinsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        initialClaimableCoins_ = new java.util.ArrayList<com.cosmos.base.v1beta1.Coin>(initialClaimableCoins_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> initialClaimableCoinsBuilder_;

    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin> getInitialClaimableCoinsList() {
      if (initialClaimableCoinsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(initialClaimableCoins_);
      } else {
        return initialClaimableCoinsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public int getInitialClaimableCoinsCount() {
      if (initialClaimableCoinsBuilder_ == null) {
        return initialClaimableCoins_.size();
      } else {
        return initialClaimableCoinsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin getInitialClaimableCoins(int index) {
      if (initialClaimableCoinsBuilder_ == null) {
        return initialClaimableCoins_.get(index);
      } else {
        return initialClaimableCoinsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setInitialClaimableCoins(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (initialClaimableCoinsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInitialClaimableCoinsIsMutable();
        initialClaimableCoins_.set(index, value);
        onChanged();
      } else {
        initialClaimableCoinsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setInitialClaimableCoins(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (initialClaimableCoinsBuilder_ == null) {
        ensureInitialClaimableCoinsIsMutable();
        initialClaimableCoins_.set(index, builderForValue.build());
        onChanged();
      } else {
        initialClaimableCoinsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addInitialClaimableCoins(com.cosmos.base.v1beta1.Coin value) {
      if (initialClaimableCoinsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInitialClaimableCoinsIsMutable();
        initialClaimableCoins_.add(value);
        onChanged();
      } else {
        initialClaimableCoinsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addInitialClaimableCoins(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (initialClaimableCoinsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureInitialClaimableCoinsIsMutable();
        initialClaimableCoins_.add(index, value);
        onChanged();
      } else {
        initialClaimableCoinsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addInitialClaimableCoins(
        com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (initialClaimableCoinsBuilder_ == null) {
        ensureInitialClaimableCoinsIsMutable();
        initialClaimableCoins_.add(builderForValue.build());
        onChanged();
      } else {
        initialClaimableCoinsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addInitialClaimableCoins(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (initialClaimableCoinsBuilder_ == null) {
        ensureInitialClaimableCoinsIsMutable();
        initialClaimableCoins_.add(index, builderForValue.build());
        onChanged();
      } else {
        initialClaimableCoinsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addAllInitialClaimableCoins(
        java.lang.Iterable<? extends com.cosmos.base.v1beta1.Coin> values) {
      if (initialClaimableCoinsBuilder_ == null) {
        ensureInitialClaimableCoinsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, initialClaimableCoins_);
        onChanged();
      } else {
        initialClaimableCoinsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder clearInitialClaimableCoins() {
      if (initialClaimableCoinsBuilder_ == null) {
        initialClaimableCoins_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        initialClaimableCoinsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder removeInitialClaimableCoins(int index) {
      if (initialClaimableCoinsBuilder_ == null) {
        ensureInitialClaimableCoinsIsMutable();
        initialClaimableCoins_.remove(index);
        onChanged();
      } else {
        initialClaimableCoinsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder getInitialClaimableCoinsBuilder(
        int index) {
      return getInitialClaimableCoinsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.CoinOrBuilder getInitialClaimableCoinsOrBuilder(
        int index) {
      if (initialClaimableCoinsBuilder_ == null) {
        return initialClaimableCoins_.get(index);  } else {
        return initialClaimableCoinsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
         getInitialClaimableCoinsOrBuilderList() {
      if (initialClaimableCoinsBuilder_ != null) {
        return initialClaimableCoinsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(initialClaimableCoins_);
      }
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addInitialClaimableCoinsBuilder() {
      return getInitialClaimableCoinsFieldBuilder().addBuilder(
          com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addInitialClaimableCoinsBuilder(
        int index) {
      return getInitialClaimableCoinsFieldBuilder().addBuilder(
          index, com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * initial_claimable_coins specifies the initial claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin initial_claimable_coins = 3 [json_name = "initialClaimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin.Builder> 
         getInitialClaimableCoinsBuilderList() {
      return getInitialClaimableCoinsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> 
        getInitialClaimableCoinsFieldBuilder() {
      if (initialClaimableCoinsBuilder_ == null) {
        initialClaimableCoinsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder>(
                initialClaimableCoins_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        initialClaimableCoins_ = null;
      }
      return initialClaimableCoinsBuilder_;
    }

    private java.util.List<com.cosmos.base.v1beta1.Coin> claimableCoins_ =
      java.util.Collections.emptyList();
    private void ensureClaimableCoinsIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        claimableCoins_ = new java.util.ArrayList<com.cosmos.base.v1beta1.Coin>(claimableCoins_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> claimableCoinsBuilder_;

    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin> getClaimableCoinsList() {
      if (claimableCoinsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(claimableCoins_);
      } else {
        return claimableCoinsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public int getClaimableCoinsCount() {
      if (claimableCoinsBuilder_ == null) {
        return claimableCoins_.size();
      } else {
        return claimableCoinsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin getClaimableCoins(int index) {
      if (claimableCoinsBuilder_ == null) {
        return claimableCoins_.get(index);
      } else {
        return claimableCoinsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setClaimableCoins(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (claimableCoinsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureClaimableCoinsIsMutable();
        claimableCoins_.set(index, value);
        onChanged();
      } else {
        claimableCoinsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setClaimableCoins(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (claimableCoinsBuilder_ == null) {
        ensureClaimableCoinsIsMutable();
        claimableCoins_.set(index, builderForValue.build());
        onChanged();
      } else {
        claimableCoinsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addClaimableCoins(com.cosmos.base.v1beta1.Coin value) {
      if (claimableCoinsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureClaimableCoinsIsMutable();
        claimableCoins_.add(value);
        onChanged();
      } else {
        claimableCoinsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addClaimableCoins(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (claimableCoinsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureClaimableCoinsIsMutable();
        claimableCoins_.add(index, value);
        onChanged();
      } else {
        claimableCoinsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addClaimableCoins(
        com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (claimableCoinsBuilder_ == null) {
        ensureClaimableCoinsIsMutable();
        claimableCoins_.add(builderForValue.build());
        onChanged();
      } else {
        claimableCoinsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addClaimableCoins(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (claimableCoinsBuilder_ == null) {
        ensureClaimableCoinsIsMutable();
        claimableCoins_.add(index, builderForValue.build());
        onChanged();
      } else {
        claimableCoinsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addAllClaimableCoins(
        java.lang.Iterable<? extends com.cosmos.base.v1beta1.Coin> values) {
      if (claimableCoinsBuilder_ == null) {
        ensureClaimableCoinsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, claimableCoins_);
        onChanged();
      } else {
        claimableCoinsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder clearClaimableCoins() {
      if (claimableCoinsBuilder_ == null) {
        claimableCoins_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        claimableCoinsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder removeClaimableCoins(int index) {
      if (claimableCoinsBuilder_ == null) {
        ensureClaimableCoinsIsMutable();
        claimableCoins_.remove(index);
        onChanged();
      } else {
        claimableCoinsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder getClaimableCoinsBuilder(
        int index) {
      return getClaimableCoinsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.CoinOrBuilder getClaimableCoinsOrBuilder(
        int index) {
      if (claimableCoinsBuilder_ == null) {
        return claimableCoins_.get(index);  } else {
        return claimableCoinsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
         getClaimableCoinsOrBuilderList() {
      if (claimableCoinsBuilder_ != null) {
        return claimableCoinsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(claimableCoins_);
      }
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addClaimableCoinsBuilder() {
      return getClaimableCoinsFieldBuilder().addBuilder(
          com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addClaimableCoinsBuilder(
        int index) {
      return getClaimableCoinsFieldBuilder().addBuilder(
          index, com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * claimable_coins specifies the unclaimed claimable coins
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin claimable_coins = 4 [json_name = "claimableCoins", (.gogoproto.nullable) = false, (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin.Builder> 
         getClaimableCoinsBuilderList() {
      return getClaimableCoinsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> 
        getClaimableCoinsFieldBuilder() {
      if (claimableCoinsBuilder_ == null) {
        claimableCoinsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder>(
                claimableCoins_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        claimableCoins_ = null;
      }
      return claimableCoinsBuilder_;
    }

    private java.util.List<java.lang.Integer> claimedConditions_ =
      java.util.Collections.emptyList();
    private void ensureClaimedConditionsIsMutable() {
      if (!((bitField0_ & 0x00000010) != 0)) {
        claimedConditions_ = new java.util.ArrayList<java.lang.Integer>(claimedConditions_);
        bitField0_ |= 0x00000010;
      }
    }
    /**
     * <pre>
     * claimed_conditions specifies a list of condition types
     * initial values are empty and each condition type gets appended when claim is successfully executed
     * </pre>
     *
     * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
     * @return A list containing the claimedConditions.
     */
    public java.util.List<com.crescent.claim.v1beta1.ConditionType> getClaimedConditionsList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, com.crescent.claim.v1beta1.ConditionType>(claimedConditions_, claimedConditions_converter_);
    }
    /**
     * <pre>
     * claimed_conditions specifies a list of condition types
     * initial values are empty and each condition type gets appended when claim is successfully executed
     * </pre>
     *
     * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
     * @return The count of claimedConditions.
     */
    public int getClaimedConditionsCount() {
      return claimedConditions_.size();
    }
    /**
     * <pre>
     * claimed_conditions specifies a list of condition types
     * initial values are empty and each condition type gets appended when claim is successfully executed
     * </pre>
     *
     * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
     * @param index The index of the element to return.
     * @return The claimedConditions at the given index.
     */
    public com.crescent.claim.v1beta1.ConditionType getClaimedConditions(int index) {
      return claimedConditions_converter_.convert(claimedConditions_.get(index));
    }
    /**
     * <pre>
     * claimed_conditions specifies a list of condition types
     * initial values are empty and each condition type gets appended when claim is successfully executed
     * </pre>
     *
     * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
     * @param index The index to set the value at.
     * @param value The claimedConditions to set.
     * @return This builder for chaining.
     */
    public Builder setClaimedConditions(
        int index, com.crescent.claim.v1beta1.ConditionType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureClaimedConditionsIsMutable();
      claimedConditions_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * claimed_conditions specifies a list of condition types
     * initial values are empty and each condition type gets appended when claim is successfully executed
     * </pre>
     *
     * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
     * @param value The claimedConditions to add.
     * @return This builder for chaining.
     */
    public Builder addClaimedConditions(com.crescent.claim.v1beta1.ConditionType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureClaimedConditionsIsMutable();
      claimedConditions_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * claimed_conditions specifies a list of condition types
     * initial values are empty and each condition type gets appended when claim is successfully executed
     * </pre>
     *
     * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
     * @param values The claimedConditions to add.
     * @return This builder for chaining.
     */
    public Builder addAllClaimedConditions(
        java.lang.Iterable<? extends com.crescent.claim.v1beta1.ConditionType> values) {
      ensureClaimedConditionsIsMutable();
      for (com.crescent.claim.v1beta1.ConditionType value : values) {
        claimedConditions_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * claimed_conditions specifies a list of condition types
     * initial values are empty and each condition type gets appended when claim is successfully executed
     * </pre>
     *
     * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
     * @return This builder for chaining.
     */
    public Builder clearClaimedConditions() {
      claimedConditions_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000010);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * claimed_conditions specifies a list of condition types
     * initial values are empty and each condition type gets appended when claim is successfully executed
     * </pre>
     *
     * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
     * @return A list containing the enum numeric values on the wire for claimedConditions.
     */
    public java.util.List<java.lang.Integer>
    getClaimedConditionsValueList() {
      return java.util.Collections.unmodifiableList(claimedConditions_);
    }
    /**
     * <pre>
     * claimed_conditions specifies a list of condition types
     * initial values are empty and each condition type gets appended when claim is successfully executed
     * </pre>
     *
     * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
     * @param index The index of the value to return.
     * @return The enum numeric value on the wire of claimedConditions at the given index.
     */
    public int getClaimedConditionsValue(int index) {
      return claimedConditions_.get(index);
    }
    /**
     * <pre>
     * claimed_conditions specifies a list of condition types
     * initial values are empty and each condition type gets appended when claim is successfully executed
     * </pre>
     *
     * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
     * @param index The index to set the value at.
     * @param value The enum numeric value on the wire for claimedConditions to set.
     * @return This builder for chaining.
     */
    public Builder setClaimedConditionsValue(
        int index, int value) {
      ensureClaimedConditionsIsMutable();
      claimedConditions_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * claimed_conditions specifies a list of condition types
     * initial values are empty and each condition type gets appended when claim is successfully executed
     * </pre>
     *
     * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
     * @param value The enum numeric value on the wire for claimedConditions to add.
     * @return This builder for chaining.
     */
    public Builder addClaimedConditionsValue(int value) {
      ensureClaimedConditionsIsMutable();
      claimedConditions_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * claimed_conditions specifies a list of condition types
     * initial values are empty and each condition type gets appended when claim is successfully executed
     * </pre>
     *
     * <code>repeated .crescent.claim.v1beta1.ConditionType claimed_conditions = 5 [json_name = "claimedConditions"];</code>
     * @param values The enum numeric values on the wire for claimedConditions to add.
     * @return This builder for chaining.
     */
    public Builder addAllClaimedConditionsValue(
        java.lang.Iterable<java.lang.Integer> values) {
      ensureClaimedConditionsIsMutable();
      for (int value : values) {
        claimedConditions_.add(value);
      }
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:crescent.claim.v1beta1.ClaimRecord)
  }

  // @@protoc_insertion_point(class_scope:crescent.claim.v1beta1.ClaimRecord)
  private static final com.crescent.claim.v1beta1.ClaimRecord DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.crescent.claim.v1beta1.ClaimRecord();
  }

  public static com.crescent.claim.v1beta1.ClaimRecord getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ClaimRecord>
      PARSER = new com.google.protobuf.AbstractParser<ClaimRecord>() {
    @java.lang.Override
    public ClaimRecord parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ClaimRecord> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ClaimRecord> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.crescent.claim.v1beta1.ClaimRecord getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

