// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crescent/farming/v1beta1/proposal.proto

package com.crescent.farming.v1beta1;

public interface ModifyPlanRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:crescent.farming.v1beta1.ModifyPlanRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * plan_id specifies index of the farming plan
   * </pre>
   *
   * <code>uint64 plan_id = 1 [json_name = "planId"];</code>
   * @return The planId.
   */
  long getPlanId();

  /**
   * <pre>
   * name specifies the plan name for display
   * </pre>
   *
   * <code>string name = 2 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * name specifies the plan name for display
   * </pre>
   *
   * <code>string name = 2 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * farming_pool_address defines the bech32-encoded address of the farming pool
   * </pre>
   *
   * <code>string farming_pool_address = 3 [json_name = "farmingPoolAddress", (.gogoproto.moretags) = "yaml:&#92;"farming_pool_address&#92;""];</code>
   * @return The farmingPoolAddress.
   */
  java.lang.String getFarmingPoolAddress();
  /**
   * <pre>
   * farming_pool_address defines the bech32-encoded address of the farming pool
   * </pre>
   *
   * <code>string farming_pool_address = 3 [json_name = "farmingPoolAddress", (.gogoproto.moretags) = "yaml:&#92;"farming_pool_address&#92;""];</code>
   * @return The bytes for farmingPoolAddress.
   */
  com.google.protobuf.ByteString
      getFarmingPoolAddressBytes();

  /**
   * <pre>
   * termination_address defines the bech32-encoded address that terminates plan
   * when the plan ends after the end time, the balance of farming pool address
   * is transferred to the termination address
   * </pre>
   *
   * <code>string termination_address = 4 [json_name = "terminationAddress", (.gogoproto.moretags) = "yaml:&#92;"termination_address&#92;""];</code>
   * @return The terminationAddress.
   */
  java.lang.String getTerminationAddress();
  /**
   * <pre>
   * termination_address defines the bech32-encoded address that terminates plan
   * when the plan ends after the end time, the balance of farming pool address
   * is transferred to the termination address
   * </pre>
   *
   * <code>string termination_address = 4 [json_name = "terminationAddress", (.gogoproto.moretags) = "yaml:&#92;"termination_address&#92;""];</code>
   * @return The bytes for terminationAddress.
   */
  com.google.protobuf.ByteString
      getTerminationAddressBytes();

  /**
   * <pre>
   * staking_coin_weights specifies coin weights for the plan
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin staking_coin_weights = 5 [json_name = "stakingCoinWeights", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_coin_weights&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  java.util.List<com.cosmos.base.v1beta1.DecCoin> 
      getStakingCoinWeightsList();
  /**
   * <pre>
   * staking_coin_weights specifies coin weights for the plan
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin staking_coin_weights = 5 [json_name = "stakingCoinWeights", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_coin_weights&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  com.cosmos.base.v1beta1.DecCoin getStakingCoinWeights(int index);
  /**
   * <pre>
   * staking_coin_weights specifies coin weights for the plan
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin staking_coin_weights = 5 [json_name = "stakingCoinWeights", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_coin_weights&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  int getStakingCoinWeightsCount();
  /**
   * <pre>
   * staking_coin_weights specifies coin weights for the plan
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin staking_coin_weights = 5 [json_name = "stakingCoinWeights", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_coin_weights&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  java.util.List<? extends com.cosmos.base.v1beta1.DecCoinOrBuilder> 
      getStakingCoinWeightsOrBuilderList();
  /**
   * <pre>
   * staking_coin_weights specifies coin weights for the plan
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.DecCoin staking_coin_weights = 5 [json_name = "stakingCoinWeights", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_coin_weights&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"];</code>
   */
  com.cosmos.base.v1beta1.DecCoinOrBuilder getStakingCoinWeightsOrBuilder(
      int index);

  /**
   * <pre>
   * start_time specifies the start time of the plan
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 6 [json_name = "startTime", (.gogoproto.nullable) = true, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
   * @return Whether the startTime field is set.
   */
  boolean hasStartTime();
  /**
   * <pre>
   * start_time specifies the start time of the plan
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 6 [json_name = "startTime", (.gogoproto.nullable) = true, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
   * @return The startTime.
   */
  com.google.protobuf.Timestamp getStartTime();
  /**
   * <pre>
   * start_time specifies the start time of the plan
   * </pre>
   *
   * <code>.google.protobuf.Timestamp start_time = 6 [json_name = "startTime", (.gogoproto.nullable) = true, (.gogoproto.moretags) = "yaml:&#92;"start_time&#92;"", (.gogoproto.stdtime) = true];</code>
   */
  com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder();

  /**
   * <pre>
   * end_time specifies the end time of the plan
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 7 [json_name = "endTime", (.gogoproto.nullable) = true, (.gogoproto.moretags) = "yaml:&#92;"end_time&#92;"", (.gogoproto.stdtime) = true];</code>
   * @return Whether the endTime field is set.
   */
  boolean hasEndTime();
  /**
   * <pre>
   * end_time specifies the end time of the plan
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 7 [json_name = "endTime", (.gogoproto.nullable) = true, (.gogoproto.moretags) = "yaml:&#92;"end_time&#92;"", (.gogoproto.stdtime) = true];</code>
   * @return The endTime.
   */
  com.google.protobuf.Timestamp getEndTime();
  /**
   * <pre>
   * end_time specifies the end time of the plan
   * </pre>
   *
   * <code>.google.protobuf.Timestamp end_time = 7 [json_name = "endTime", (.gogoproto.nullable) = true, (.gogoproto.moretags) = "yaml:&#92;"end_time&#92;"", (.gogoproto.stdtime) = true];</code>
   */
  com.google.protobuf.TimestampOrBuilder getEndTimeOrBuilder();

  /**
   * <pre>
   * epoch_amount specifies the distributing amount for each epoch
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin epoch_amount = 8 [json_name = "epochAmount", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"epoch_amount&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<com.cosmos.base.v1beta1.Coin> 
      getEpochAmountList();
  /**
   * <pre>
   * epoch_amount specifies the distributing amount for each epoch
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin epoch_amount = 8 [json_name = "epochAmount", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"epoch_amount&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  com.cosmos.base.v1beta1.Coin getEpochAmount(int index);
  /**
   * <pre>
   * epoch_amount specifies the distributing amount for each epoch
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin epoch_amount = 8 [json_name = "epochAmount", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"epoch_amount&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  int getEpochAmountCount();
  /**
   * <pre>
   * epoch_amount specifies the distributing amount for each epoch
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin epoch_amount = 8 [json_name = "epochAmount", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"epoch_amount&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getEpochAmountOrBuilderList();
  /**
   * <pre>
   * epoch_amount specifies the distributing amount for each epoch
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin epoch_amount = 8 [json_name = "epochAmount", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"epoch_amount&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  com.cosmos.base.v1beta1.CoinOrBuilder getEpochAmountOrBuilder(
      int index);

  /**
   * <pre>
   * epoch_ratio specifies the distributing amount by ratio
   * </pre>
   *
   * <code>string epoch_ratio = 9 [json_name = "epochRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"epoch_ratio&#92;""];</code>
   * @return The epochRatio.
   */
  java.lang.String getEpochRatio();
  /**
   * <pre>
   * epoch_ratio specifies the distributing amount by ratio
   * </pre>
   *
   * <code>string epoch_ratio = 9 [json_name = "epochRatio", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"epoch_ratio&#92;""];</code>
   * @return The bytes for epochRatio.
   */
  com.google.protobuf.ByteString
      getEpochRatioBytes();
}
