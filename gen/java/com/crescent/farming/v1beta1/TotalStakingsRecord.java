// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crescent/farming/v1beta1/genesis.proto

package com.crescent.farming.v1beta1;

/**
 * <pre>
 * TotalStakingsRecord is used for import/export via genesis json.
 * </pre>
 *
 * Protobuf type {@code crescent.farming.v1beta1.TotalStakingsRecord}
 */
public final class TotalStakingsRecord extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:crescent.farming.v1beta1.TotalStakingsRecord)
    TotalStakingsRecordOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TotalStakingsRecord.newBuilder() to construct.
  private TotalStakingsRecord(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TotalStakingsRecord() {
    stakingCoinDenom_ = "";
    amount_ = "";
    stakingReserveCoins_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TotalStakingsRecord();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.crescent.farming.v1beta1.GenesisProto.internal_static_crescent_farming_v1beta1_TotalStakingsRecord_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.crescent.farming.v1beta1.GenesisProto.internal_static_crescent_farming_v1beta1_TotalStakingsRecord_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.crescent.farming.v1beta1.TotalStakingsRecord.class, com.crescent.farming.v1beta1.TotalStakingsRecord.Builder.class);
  }

  public static final int STAKING_COIN_DENOM_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object stakingCoinDenom_ = "";
  /**
   * <code>string staking_coin_denom = 1 [json_name = "stakingCoinDenom", (.gogoproto.moretags) = "yaml:&#92;"staking_coin_denom&#92;""];</code>
   * @return The stakingCoinDenom.
   */
  @java.lang.Override
  public java.lang.String getStakingCoinDenom() {
    java.lang.Object ref = stakingCoinDenom_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      stakingCoinDenom_ = s;
      return s;
    }
  }
  /**
   * <code>string staking_coin_denom = 1 [json_name = "stakingCoinDenom", (.gogoproto.moretags) = "yaml:&#92;"staking_coin_denom&#92;""];</code>
   * @return The bytes for stakingCoinDenom.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getStakingCoinDenomBytes() {
    java.lang.Object ref = stakingCoinDenom_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      stakingCoinDenom_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int AMOUNT_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object amount_ = "";
  /**
   * <pre>
   * amount specifies total amount of the staking for the staking coin denom except queued staking
   * </pre>
   *
   * <code>string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
   * @return The amount.
   */
  @java.lang.Override
  public java.lang.String getAmount() {
    java.lang.Object ref = amount_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      amount_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * amount specifies total amount of the staking for the staking coin denom except queued staking
   * </pre>
   *
   * <code>string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
   * @return The bytes for amount.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAmountBytes() {
    java.lang.Object ref = amount_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      amount_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STAKING_RESERVE_COINS_FIELD_NUMBER = 9;
  @SuppressWarnings("serial")
  private java.util.List<com.cosmos.base.v1beta1.Coin> stakingReserveCoins_;
  /**
   * <pre>
   * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
   * staking coin denom is stored this param is needed for import/export validation
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<com.cosmos.base.v1beta1.Coin> getStakingReserveCoinsList() {
    return stakingReserveCoins_;
  }
  /**
   * <pre>
   * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
   * staking coin denom is stored this param is needed for import/export validation
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
      getStakingReserveCoinsOrBuilderList() {
    return stakingReserveCoins_;
  }
  /**
   * <pre>
   * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
   * staking coin denom is stored this param is needed for import/export validation
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public int getStakingReserveCoinsCount() {
    return stakingReserveCoins_.size();
  }
  /**
   * <pre>
   * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
   * staking coin denom is stored this param is needed for import/export validation
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public com.cosmos.base.v1beta1.Coin getStakingReserveCoins(int index) {
    return stakingReserveCoins_.get(index);
  }
  /**
   * <pre>
   * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
   * staking coin denom is stored this param is needed for import/export validation
   * </pre>
   *
   * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
   */
  @java.lang.Override
  public com.cosmos.base.v1beta1.CoinOrBuilder getStakingReserveCoinsOrBuilder(
      int index) {
    return stakingReserveCoins_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stakingCoinDenom_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, stakingCoinDenom_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(amount_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, amount_);
    }
    for (int i = 0; i < stakingReserveCoins_.size(); i++) {
      output.writeMessage(9, stakingReserveCoins_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stakingCoinDenom_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, stakingCoinDenom_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(amount_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, amount_);
    }
    for (int i = 0; i < stakingReserveCoins_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, stakingReserveCoins_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.crescent.farming.v1beta1.TotalStakingsRecord)) {
      return super.equals(obj);
    }
    com.crescent.farming.v1beta1.TotalStakingsRecord other = (com.crescent.farming.v1beta1.TotalStakingsRecord) obj;

    if (!getStakingCoinDenom()
        .equals(other.getStakingCoinDenom())) return false;
    if (!getAmount()
        .equals(other.getAmount())) return false;
    if (!getStakingReserveCoinsList()
        .equals(other.getStakingReserveCoinsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + STAKING_COIN_DENOM_FIELD_NUMBER;
    hash = (53 * hash) + getStakingCoinDenom().hashCode();
    hash = (37 * hash) + AMOUNT_FIELD_NUMBER;
    hash = (53 * hash) + getAmount().hashCode();
    if (getStakingReserveCoinsCount() > 0) {
      hash = (37 * hash) + STAKING_RESERVE_COINS_FIELD_NUMBER;
      hash = (53 * hash) + getStakingReserveCoinsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.crescent.farming.v1beta1.TotalStakingsRecord parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.crescent.farming.v1beta1.TotalStakingsRecord parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.crescent.farming.v1beta1.TotalStakingsRecord parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.crescent.farming.v1beta1.TotalStakingsRecord parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.crescent.farming.v1beta1.TotalStakingsRecord parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.crescent.farming.v1beta1.TotalStakingsRecord parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.crescent.farming.v1beta1.TotalStakingsRecord parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.crescent.farming.v1beta1.TotalStakingsRecord parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.crescent.farming.v1beta1.TotalStakingsRecord parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.crescent.farming.v1beta1.TotalStakingsRecord parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.crescent.farming.v1beta1.TotalStakingsRecord parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.crescent.farming.v1beta1.TotalStakingsRecord parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.crescent.farming.v1beta1.TotalStakingsRecord prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * TotalStakingsRecord is used for import/export via genesis json.
   * </pre>
   *
   * Protobuf type {@code crescent.farming.v1beta1.TotalStakingsRecord}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:crescent.farming.v1beta1.TotalStakingsRecord)
      com.crescent.farming.v1beta1.TotalStakingsRecordOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.crescent.farming.v1beta1.GenesisProto.internal_static_crescent_farming_v1beta1_TotalStakingsRecord_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.crescent.farming.v1beta1.GenesisProto.internal_static_crescent_farming_v1beta1_TotalStakingsRecord_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.crescent.farming.v1beta1.TotalStakingsRecord.class, com.crescent.farming.v1beta1.TotalStakingsRecord.Builder.class);
    }

    // Construct using com.crescent.farming.v1beta1.TotalStakingsRecord.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      stakingCoinDenom_ = "";
      amount_ = "";
      if (stakingReserveCoinsBuilder_ == null) {
        stakingReserveCoins_ = java.util.Collections.emptyList();
      } else {
        stakingReserveCoins_ = null;
        stakingReserveCoinsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.crescent.farming.v1beta1.GenesisProto.internal_static_crescent_farming_v1beta1_TotalStakingsRecord_descriptor;
    }

    @java.lang.Override
    public com.crescent.farming.v1beta1.TotalStakingsRecord getDefaultInstanceForType() {
      return com.crescent.farming.v1beta1.TotalStakingsRecord.getDefaultInstance();
    }

    @java.lang.Override
    public com.crescent.farming.v1beta1.TotalStakingsRecord build() {
      com.crescent.farming.v1beta1.TotalStakingsRecord result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.crescent.farming.v1beta1.TotalStakingsRecord buildPartial() {
      com.crescent.farming.v1beta1.TotalStakingsRecord result = new com.crescent.farming.v1beta1.TotalStakingsRecord(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.crescent.farming.v1beta1.TotalStakingsRecord result) {
      if (stakingReserveCoinsBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          stakingReserveCoins_ = java.util.Collections.unmodifiableList(stakingReserveCoins_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.stakingReserveCoins_ = stakingReserveCoins_;
      } else {
        result.stakingReserveCoins_ = stakingReserveCoinsBuilder_.build();
      }
    }

    private void buildPartial0(com.crescent.farming.v1beta1.TotalStakingsRecord result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.stakingCoinDenom_ = stakingCoinDenom_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.amount_ = amount_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.crescent.farming.v1beta1.TotalStakingsRecord) {
        return mergeFrom((com.crescent.farming.v1beta1.TotalStakingsRecord)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.crescent.farming.v1beta1.TotalStakingsRecord other) {
      if (other == com.crescent.farming.v1beta1.TotalStakingsRecord.getDefaultInstance()) return this;
      if (!other.getStakingCoinDenom().isEmpty()) {
        stakingCoinDenom_ = other.stakingCoinDenom_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.getAmount().isEmpty()) {
        amount_ = other.amount_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (stakingReserveCoinsBuilder_ == null) {
        if (!other.stakingReserveCoins_.isEmpty()) {
          if (stakingReserveCoins_.isEmpty()) {
            stakingReserveCoins_ = other.stakingReserveCoins_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureStakingReserveCoinsIsMutable();
            stakingReserveCoins_.addAll(other.stakingReserveCoins_);
          }
          onChanged();
        }
      } else {
        if (!other.stakingReserveCoins_.isEmpty()) {
          if (stakingReserveCoinsBuilder_.isEmpty()) {
            stakingReserveCoinsBuilder_.dispose();
            stakingReserveCoinsBuilder_ = null;
            stakingReserveCoins_ = other.stakingReserveCoins_;
            bitField0_ = (bitField0_ & ~0x00000004);
            stakingReserveCoinsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getStakingReserveCoinsFieldBuilder() : null;
          } else {
            stakingReserveCoinsBuilder_.addAllMessages(other.stakingReserveCoins_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              stakingCoinDenom_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              amount_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 74: {
              com.cosmos.base.v1beta1.Coin m =
                  input.readMessage(
                      com.cosmos.base.v1beta1.Coin.parser(),
                      extensionRegistry);
              if (stakingReserveCoinsBuilder_ == null) {
                ensureStakingReserveCoinsIsMutable();
                stakingReserveCoins_.add(m);
              } else {
                stakingReserveCoinsBuilder_.addMessage(m);
              }
              break;
            } // case 74
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object stakingCoinDenom_ = "";
    /**
     * <code>string staking_coin_denom = 1 [json_name = "stakingCoinDenom", (.gogoproto.moretags) = "yaml:&#92;"staking_coin_denom&#92;""];</code>
     * @return The stakingCoinDenom.
     */
    public java.lang.String getStakingCoinDenom() {
      java.lang.Object ref = stakingCoinDenom_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stakingCoinDenom_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string staking_coin_denom = 1 [json_name = "stakingCoinDenom", (.gogoproto.moretags) = "yaml:&#92;"staking_coin_denom&#92;""];</code>
     * @return The bytes for stakingCoinDenom.
     */
    public com.google.protobuf.ByteString
        getStakingCoinDenomBytes() {
      java.lang.Object ref = stakingCoinDenom_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stakingCoinDenom_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string staking_coin_denom = 1 [json_name = "stakingCoinDenom", (.gogoproto.moretags) = "yaml:&#92;"staking_coin_denom&#92;""];</code>
     * @param value The stakingCoinDenom to set.
     * @return This builder for chaining.
     */
    public Builder setStakingCoinDenom(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      stakingCoinDenom_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>string staking_coin_denom = 1 [json_name = "stakingCoinDenom", (.gogoproto.moretags) = "yaml:&#92;"staking_coin_denom&#92;""];</code>
     * @return This builder for chaining.
     */
    public Builder clearStakingCoinDenom() {
      stakingCoinDenom_ = getDefaultInstance().getStakingCoinDenom();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <code>string staking_coin_denom = 1 [json_name = "stakingCoinDenom", (.gogoproto.moretags) = "yaml:&#92;"staking_coin_denom&#92;""];</code>
     * @param value The bytes for stakingCoinDenom to set.
     * @return This builder for chaining.
     */
    public Builder setStakingCoinDenomBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      stakingCoinDenom_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object amount_ = "";
    /**
     * <pre>
     * amount specifies total amount of the staking for the staking coin denom except queued staking
     * </pre>
     *
     * <code>string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The amount.
     */
    public java.lang.String getAmount() {
      java.lang.Object ref = amount_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        amount_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * amount specifies total amount of the staking for the staking coin denom except queued staking
     * </pre>
     *
     * <code>string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for amount.
     */
    public com.google.protobuf.ByteString
        getAmountBytes() {
      java.lang.Object ref = amount_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        amount_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * amount specifies total amount of the staking for the staking coin denom except queued staking
     * </pre>
     *
     * <code>string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @param value The amount to set.
     * @return This builder for chaining.
     */
    public Builder setAmount(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      amount_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * amount specifies total amount of the staking for the staking coin denom except queued staking
     * </pre>
     *
     * <code>string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return This builder for chaining.
     */
    public Builder clearAmount() {
      amount_ = getDefaultInstance().getAmount();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * amount specifies total amount of the staking for the staking coin denom except queued staking
     * </pre>
     *
     * <code>string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @param value The bytes for amount to set.
     * @return This builder for chaining.
     */
    public Builder setAmountBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      amount_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private java.util.List<com.cosmos.base.v1beta1.Coin> stakingReserveCoins_ =
      java.util.Collections.emptyList();
    private void ensureStakingReserveCoinsIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        stakingReserveCoins_ = new java.util.ArrayList<com.cosmos.base.v1beta1.Coin>(stakingReserveCoins_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> stakingReserveCoinsBuilder_;

    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin> getStakingReserveCoinsList() {
      if (stakingReserveCoinsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(stakingReserveCoins_);
      } else {
        return stakingReserveCoinsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public int getStakingReserveCoinsCount() {
      if (stakingReserveCoinsBuilder_ == null) {
        return stakingReserveCoins_.size();
      } else {
        return stakingReserveCoinsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin getStakingReserveCoins(int index) {
      if (stakingReserveCoinsBuilder_ == null) {
        return stakingReserveCoins_.get(index);
      } else {
        return stakingReserveCoinsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setStakingReserveCoins(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (stakingReserveCoinsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStakingReserveCoinsIsMutable();
        stakingReserveCoins_.set(index, value);
        onChanged();
      } else {
        stakingReserveCoinsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder setStakingReserveCoins(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (stakingReserveCoinsBuilder_ == null) {
        ensureStakingReserveCoinsIsMutable();
        stakingReserveCoins_.set(index, builderForValue.build());
        onChanged();
      } else {
        stakingReserveCoinsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addStakingReserveCoins(com.cosmos.base.v1beta1.Coin value) {
      if (stakingReserveCoinsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStakingReserveCoinsIsMutable();
        stakingReserveCoins_.add(value);
        onChanged();
      } else {
        stakingReserveCoinsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addStakingReserveCoins(
        int index, com.cosmos.base.v1beta1.Coin value) {
      if (stakingReserveCoinsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStakingReserveCoinsIsMutable();
        stakingReserveCoins_.add(index, value);
        onChanged();
      } else {
        stakingReserveCoinsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addStakingReserveCoins(
        com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (stakingReserveCoinsBuilder_ == null) {
        ensureStakingReserveCoinsIsMutable();
        stakingReserveCoins_.add(builderForValue.build());
        onChanged();
      } else {
        stakingReserveCoinsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addStakingReserveCoins(
        int index, com.cosmos.base.v1beta1.Coin.Builder builderForValue) {
      if (stakingReserveCoinsBuilder_ == null) {
        ensureStakingReserveCoinsIsMutable();
        stakingReserveCoins_.add(index, builderForValue.build());
        onChanged();
      } else {
        stakingReserveCoinsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder addAllStakingReserveCoins(
        java.lang.Iterable<? extends com.cosmos.base.v1beta1.Coin> values) {
      if (stakingReserveCoinsBuilder_ == null) {
        ensureStakingReserveCoinsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, stakingReserveCoins_);
        onChanged();
      } else {
        stakingReserveCoinsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder clearStakingReserveCoins() {
      if (stakingReserveCoinsBuilder_ == null) {
        stakingReserveCoins_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        stakingReserveCoinsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public Builder removeStakingReserveCoins(int index) {
      if (stakingReserveCoinsBuilder_ == null) {
        ensureStakingReserveCoinsIsMutable();
        stakingReserveCoins_.remove(index);
        onChanged();
      } else {
        stakingReserveCoinsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder getStakingReserveCoinsBuilder(
        int index) {
      return getStakingReserveCoinsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.CoinOrBuilder getStakingReserveCoinsOrBuilder(
        int index) {
      if (stakingReserveCoinsBuilder_ == null) {
        return stakingReserveCoins_.get(index);  } else {
        return stakingReserveCoinsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<? extends com.cosmos.base.v1beta1.CoinOrBuilder> 
         getStakingReserveCoinsOrBuilderList() {
      if (stakingReserveCoinsBuilder_ != null) {
        return stakingReserveCoinsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(stakingReserveCoins_);
      }
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addStakingReserveCoinsBuilder() {
      return getStakingReserveCoinsFieldBuilder().addBuilder(
          com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public com.cosmos.base.v1beta1.Coin.Builder addStakingReserveCoinsBuilder(
        int index) {
      return getStakingReserveCoinsFieldBuilder().addBuilder(
          index, com.cosmos.base.v1beta1.Coin.getDefaultInstance());
    }
    /**
     * <pre>
     * staking_reserve_coins specifies balance of the staking reserve account where staking and queued staking for the
     * staking coin denom is stored this param is needed for import/export validation
     * </pre>
     *
     * <code>repeated .cosmos.base.v1beta1.Coin staking_reserve_coins = 9 [json_name = "stakingReserveCoins", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"staking_reserve_coins&#92;"", (.gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];</code>
     */
    public java.util.List<com.cosmos.base.v1beta1.Coin.Builder> 
         getStakingReserveCoinsBuilderList() {
      return getStakingReserveCoinsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder> 
        getStakingReserveCoinsFieldBuilder() {
      if (stakingReserveCoinsBuilder_ == null) {
        stakingReserveCoinsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.cosmos.base.v1beta1.Coin, com.cosmos.base.v1beta1.Coin.Builder, com.cosmos.base.v1beta1.CoinOrBuilder>(
                stakingReserveCoins_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        stakingReserveCoins_ = null;
      }
      return stakingReserveCoinsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:crescent.farming.v1beta1.TotalStakingsRecord)
  }

  // @@protoc_insertion_point(class_scope:crescent.farming.v1beta1.TotalStakingsRecord)
  private static final com.crescent.farming.v1beta1.TotalStakingsRecord DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.crescent.farming.v1beta1.TotalStakingsRecord();
  }

  public static com.crescent.farming.v1beta1.TotalStakingsRecord getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TotalStakingsRecord>
      PARSER = new com.google.protobuf.AbstractParser<TotalStakingsRecord>() {
    @java.lang.Override
    public TotalStakingsRecord parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<TotalStakingsRecord> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TotalStakingsRecord> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.crescent.farming.v1beta1.TotalStakingsRecord getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

