// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crescent/liquidstaking/v1beta1/liquidstaking.proto

package com.crescent.liquidstaking.v1beta1;

/**
 * <pre>
 * Params defines the set of params for the liquidstaking module.
 * </pre>
 *
 * Protobuf type {@code crescent.liquidstaking.v1beta1.Params}
 */
public final class Params extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:crescent.liquidstaking.v1beta1.Params)
    ParamsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Params.newBuilder() to construct.
  private Params(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Params() {
    liquidBondDenom_ = "";
    whitelistedValidators_ = java.util.Collections.emptyList();
    unstakeFeeRate_ = "";
    minLiquidStakingAmount_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Params();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.crescent.liquidstaking.v1beta1.LiquidstakingProto.internal_static_crescent_liquidstaking_v1beta1_Params_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.crescent.liquidstaking.v1beta1.LiquidstakingProto.internal_static_crescent_liquidstaking_v1beta1_Params_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.crescent.liquidstaking.v1beta1.Params.class, com.crescent.liquidstaking.v1beta1.Params.Builder.class);
  }

  public static final int LIQUID_BOND_DENOM_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object liquidBondDenom_ = "";
  /**
   * <pre>
   * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
   * through NetAmount.
   * </pre>
   *
   * <code>string liquid_bond_denom = 1 [json_name = "liquidBondDenom", (.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
   * @return The liquidBondDenom.
   */
  @java.lang.Override
  public java.lang.String getLiquidBondDenom() {
    java.lang.Object ref = liquidBondDenom_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      liquidBondDenom_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
   * through NetAmount.
   * </pre>
   *
   * <code>string liquid_bond_denom = 1 [json_name = "liquidBondDenom", (.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
   * @return The bytes for liquidBondDenom.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getLiquidBondDenomBytes() {
    java.lang.Object ref = liquidBondDenom_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      liquidBondDenom_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int WHITELISTED_VALIDATORS_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private java.util.List<com.crescent.liquidstaking.v1beta1.WhitelistedValidator> whitelistedValidators_;
  /**
   * <pre>
   * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
   * </pre>
   *
   * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
   */
  @java.lang.Override
  public java.util.List<com.crescent.liquidstaking.v1beta1.WhitelistedValidator> getWhitelistedValidatorsList() {
    return whitelistedValidators_;
  }
  /**
   * <pre>
   * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
   * </pre>
   *
   * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.crescent.liquidstaking.v1beta1.WhitelistedValidatorOrBuilder> 
      getWhitelistedValidatorsOrBuilderList() {
    return whitelistedValidators_;
  }
  /**
   * <pre>
   * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
   * </pre>
   *
   * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
   */
  @java.lang.Override
  public int getWhitelistedValidatorsCount() {
    return whitelistedValidators_.size();
  }
  /**
   * <pre>
   * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
   * </pre>
   *
   * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
   */
  @java.lang.Override
  public com.crescent.liquidstaking.v1beta1.WhitelistedValidator getWhitelistedValidators(int index) {
    return whitelistedValidators_.get(index);
  }
  /**
   * <pre>
   * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
   * </pre>
   *
   * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
   */
  @java.lang.Override
  public com.crescent.liquidstaking.v1beta1.WhitelistedValidatorOrBuilder getWhitelistedValidatorsOrBuilder(
      int index) {
    return whitelistedValidators_.get(index);
  }

  public static final int UNSTAKE_FEE_RATE_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private volatile java.lang.Object unstakeFeeRate_ = "";
  /**
   * <pre>
   * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
   * unbondingAmount
   * </pre>
   *
   * <code>string unstake_fee_rate = 3 [json_name = "unstakeFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
   * @return The unstakeFeeRate.
   */
  @java.lang.Override
  public java.lang.String getUnstakeFeeRate() {
    java.lang.Object ref = unstakeFeeRate_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      unstakeFeeRate_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
   * unbondingAmount
   * </pre>
   *
   * <code>string unstake_fee_rate = 3 [json_name = "unstakeFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
   * @return The bytes for unstakeFeeRate.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getUnstakeFeeRateBytes() {
    java.lang.Object ref = unstakeFeeRate_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      unstakeFeeRate_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int MIN_LIQUID_STAKING_AMOUNT_FIELD_NUMBER = 5;
  @SuppressWarnings("serial")
  private volatile java.lang.Object minLiquidStakingAmount_ = "";
  /**
   * <pre>
   * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
   * staking to minimize decimal loss and consider gas efficiency.
   * </pre>
   *
   * <code>string min_liquid_staking_amount = 5 [json_name = "minLiquidStakingAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
   * @return The minLiquidStakingAmount.
   */
  @java.lang.Override
  public java.lang.String getMinLiquidStakingAmount() {
    java.lang.Object ref = minLiquidStakingAmount_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      minLiquidStakingAmount_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
   * staking to minimize decimal loss and consider gas efficiency.
   * </pre>
   *
   * <code>string min_liquid_staking_amount = 5 [json_name = "minLiquidStakingAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
   * @return The bytes for minLiquidStakingAmount.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getMinLiquidStakingAmountBytes() {
    java.lang.Object ref = minLiquidStakingAmount_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      minLiquidStakingAmount_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(liquidBondDenom_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, liquidBondDenom_);
    }
    for (int i = 0; i < whitelistedValidators_.size(); i++) {
      output.writeMessage(2, whitelistedValidators_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(unstakeFeeRate_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, unstakeFeeRate_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(minLiquidStakingAmount_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, minLiquidStakingAmount_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(liquidBondDenom_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, liquidBondDenom_);
    }
    for (int i = 0; i < whitelistedValidators_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, whitelistedValidators_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(unstakeFeeRate_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, unstakeFeeRate_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(minLiquidStakingAmount_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, minLiquidStakingAmount_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.crescent.liquidstaking.v1beta1.Params)) {
      return super.equals(obj);
    }
    com.crescent.liquidstaking.v1beta1.Params other = (com.crescent.liquidstaking.v1beta1.Params) obj;

    if (!getLiquidBondDenom()
        .equals(other.getLiquidBondDenom())) return false;
    if (!getWhitelistedValidatorsList()
        .equals(other.getWhitelistedValidatorsList())) return false;
    if (!getUnstakeFeeRate()
        .equals(other.getUnstakeFeeRate())) return false;
    if (!getMinLiquidStakingAmount()
        .equals(other.getMinLiquidStakingAmount())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + LIQUID_BOND_DENOM_FIELD_NUMBER;
    hash = (53 * hash) + getLiquidBondDenom().hashCode();
    if (getWhitelistedValidatorsCount() > 0) {
      hash = (37 * hash) + WHITELISTED_VALIDATORS_FIELD_NUMBER;
      hash = (53 * hash) + getWhitelistedValidatorsList().hashCode();
    }
    hash = (37 * hash) + UNSTAKE_FEE_RATE_FIELD_NUMBER;
    hash = (53 * hash) + getUnstakeFeeRate().hashCode();
    hash = (37 * hash) + MIN_LIQUID_STAKING_AMOUNT_FIELD_NUMBER;
    hash = (53 * hash) + getMinLiquidStakingAmount().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.crescent.liquidstaking.v1beta1.Params parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.crescent.liquidstaking.v1beta1.Params parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.crescent.liquidstaking.v1beta1.Params parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.crescent.liquidstaking.v1beta1.Params parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.crescent.liquidstaking.v1beta1.Params parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.crescent.liquidstaking.v1beta1.Params parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.crescent.liquidstaking.v1beta1.Params parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.crescent.liquidstaking.v1beta1.Params parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.crescent.liquidstaking.v1beta1.Params parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.crescent.liquidstaking.v1beta1.Params parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.crescent.liquidstaking.v1beta1.Params parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.crescent.liquidstaking.v1beta1.Params parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.crescent.liquidstaking.v1beta1.Params prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Params defines the set of params for the liquidstaking module.
   * </pre>
   *
   * Protobuf type {@code crescent.liquidstaking.v1beta1.Params}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:crescent.liquidstaking.v1beta1.Params)
      com.crescent.liquidstaking.v1beta1.ParamsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.crescent.liquidstaking.v1beta1.LiquidstakingProto.internal_static_crescent_liquidstaking_v1beta1_Params_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.crescent.liquidstaking.v1beta1.LiquidstakingProto.internal_static_crescent_liquidstaking_v1beta1_Params_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.crescent.liquidstaking.v1beta1.Params.class, com.crescent.liquidstaking.v1beta1.Params.Builder.class);
    }

    // Construct using com.crescent.liquidstaking.v1beta1.Params.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      liquidBondDenom_ = "";
      if (whitelistedValidatorsBuilder_ == null) {
        whitelistedValidators_ = java.util.Collections.emptyList();
      } else {
        whitelistedValidators_ = null;
        whitelistedValidatorsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      unstakeFeeRate_ = "";
      minLiquidStakingAmount_ = "";
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.crescent.liquidstaking.v1beta1.LiquidstakingProto.internal_static_crescent_liquidstaking_v1beta1_Params_descriptor;
    }

    @java.lang.Override
    public com.crescent.liquidstaking.v1beta1.Params getDefaultInstanceForType() {
      return com.crescent.liquidstaking.v1beta1.Params.getDefaultInstance();
    }

    @java.lang.Override
    public com.crescent.liquidstaking.v1beta1.Params build() {
      com.crescent.liquidstaking.v1beta1.Params result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.crescent.liquidstaking.v1beta1.Params buildPartial() {
      com.crescent.liquidstaking.v1beta1.Params result = new com.crescent.liquidstaking.v1beta1.Params(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.crescent.liquidstaking.v1beta1.Params result) {
      if (whitelistedValidatorsBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          whitelistedValidators_ = java.util.Collections.unmodifiableList(whitelistedValidators_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.whitelistedValidators_ = whitelistedValidators_;
      } else {
        result.whitelistedValidators_ = whitelistedValidatorsBuilder_.build();
      }
    }

    private void buildPartial0(com.crescent.liquidstaking.v1beta1.Params result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.liquidBondDenom_ = liquidBondDenom_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.unstakeFeeRate_ = unstakeFeeRate_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.minLiquidStakingAmount_ = minLiquidStakingAmount_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.crescent.liquidstaking.v1beta1.Params) {
        return mergeFrom((com.crescent.liquidstaking.v1beta1.Params)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.crescent.liquidstaking.v1beta1.Params other) {
      if (other == com.crescent.liquidstaking.v1beta1.Params.getDefaultInstance()) return this;
      if (!other.getLiquidBondDenom().isEmpty()) {
        liquidBondDenom_ = other.liquidBondDenom_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (whitelistedValidatorsBuilder_ == null) {
        if (!other.whitelistedValidators_.isEmpty()) {
          if (whitelistedValidators_.isEmpty()) {
            whitelistedValidators_ = other.whitelistedValidators_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureWhitelistedValidatorsIsMutable();
            whitelistedValidators_.addAll(other.whitelistedValidators_);
          }
          onChanged();
        }
      } else {
        if (!other.whitelistedValidators_.isEmpty()) {
          if (whitelistedValidatorsBuilder_.isEmpty()) {
            whitelistedValidatorsBuilder_.dispose();
            whitelistedValidatorsBuilder_ = null;
            whitelistedValidators_ = other.whitelistedValidators_;
            bitField0_ = (bitField0_ & ~0x00000002);
            whitelistedValidatorsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getWhitelistedValidatorsFieldBuilder() : null;
          } else {
            whitelistedValidatorsBuilder_.addAllMessages(other.whitelistedValidators_);
          }
        }
      }
      if (!other.getUnstakeFeeRate().isEmpty()) {
        unstakeFeeRate_ = other.unstakeFeeRate_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (!other.getMinLiquidStakingAmount().isEmpty()) {
        minLiquidStakingAmount_ = other.minLiquidStakingAmount_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              liquidBondDenom_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              com.crescent.liquidstaking.v1beta1.WhitelistedValidator m =
                  input.readMessage(
                      com.crescent.liquidstaking.v1beta1.WhitelistedValidator.parser(),
                      extensionRegistry);
              if (whitelistedValidatorsBuilder_ == null) {
                ensureWhitelistedValidatorsIsMutable();
                whitelistedValidators_.add(m);
              } else {
                whitelistedValidatorsBuilder_.addMessage(m);
              }
              break;
            } // case 18
            case 26: {
              unstakeFeeRate_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 42: {
              minLiquidStakingAmount_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000008;
              break;
            } // case 42
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object liquidBondDenom_ = "";
    /**
     * <pre>
     * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
     * through NetAmount.
     * </pre>
     *
     * <code>string liquid_bond_denom = 1 [json_name = "liquidBondDenom", (.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
     * @return The liquidBondDenom.
     */
    public java.lang.String getLiquidBondDenom() {
      java.lang.Object ref = liquidBondDenom_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        liquidBondDenom_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
     * through NetAmount.
     * </pre>
     *
     * <code>string liquid_bond_denom = 1 [json_name = "liquidBondDenom", (.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
     * @return The bytes for liquidBondDenom.
     */
    public com.google.protobuf.ByteString
        getLiquidBondDenomBytes() {
      java.lang.Object ref = liquidBondDenom_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        liquidBondDenom_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
     * through NetAmount.
     * </pre>
     *
     * <code>string liquid_bond_denom = 1 [json_name = "liquidBondDenom", (.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
     * @param value The liquidBondDenom to set.
     * @return This builder for chaining.
     */
    public Builder setLiquidBondDenom(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      liquidBondDenom_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
     * through NetAmount.
     * </pre>
     *
     * <code>string liquid_bond_denom = 1 [json_name = "liquidBondDenom", (.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
     * @return This builder for chaining.
     */
    public Builder clearLiquidBondDenom() {
      liquidBondDenom_ = getDefaultInstance().getLiquidBondDenom();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * LiquidBondDenom specifies the denomination of the token receiving after LiquidStaking, The value is calculated
     * through NetAmount.
     * </pre>
     *
     * <code>string liquid_bond_denom = 1 [json_name = "liquidBondDenom", (.gogoproto.moretags) = "yaml:&#92;"liquid_bond_denom&#92;""];</code>
     * @param value The bytes for liquidBondDenom to set.
     * @return This builder for chaining.
     */
    public Builder setLiquidBondDenomBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      liquidBondDenom_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.util.List<com.crescent.liquidstaking.v1beta1.WhitelistedValidator> whitelistedValidators_ =
      java.util.Collections.emptyList();
    private void ensureWhitelistedValidatorsIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        whitelistedValidators_ = new java.util.ArrayList<com.crescent.liquidstaking.v1beta1.WhitelistedValidator>(whitelistedValidators_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.crescent.liquidstaking.v1beta1.WhitelistedValidator, com.crescent.liquidstaking.v1beta1.WhitelistedValidator.Builder, com.crescent.liquidstaking.v1beta1.WhitelistedValidatorOrBuilder> whitelistedValidatorsBuilder_;

    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public java.util.List<com.crescent.liquidstaking.v1beta1.WhitelistedValidator> getWhitelistedValidatorsList() {
      if (whitelistedValidatorsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(whitelistedValidators_);
      } else {
        return whitelistedValidatorsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public int getWhitelistedValidatorsCount() {
      if (whitelistedValidatorsBuilder_ == null) {
        return whitelistedValidators_.size();
      } else {
        return whitelistedValidatorsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public com.crescent.liquidstaking.v1beta1.WhitelistedValidator getWhitelistedValidators(int index) {
      if (whitelistedValidatorsBuilder_ == null) {
        return whitelistedValidators_.get(index);
      } else {
        return whitelistedValidatorsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public Builder setWhitelistedValidators(
        int index, com.crescent.liquidstaking.v1beta1.WhitelistedValidator value) {
      if (whitelistedValidatorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWhitelistedValidatorsIsMutable();
        whitelistedValidators_.set(index, value);
        onChanged();
      } else {
        whitelistedValidatorsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public Builder setWhitelistedValidators(
        int index, com.crescent.liquidstaking.v1beta1.WhitelistedValidator.Builder builderForValue) {
      if (whitelistedValidatorsBuilder_ == null) {
        ensureWhitelistedValidatorsIsMutable();
        whitelistedValidators_.set(index, builderForValue.build());
        onChanged();
      } else {
        whitelistedValidatorsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public Builder addWhitelistedValidators(com.crescent.liquidstaking.v1beta1.WhitelistedValidator value) {
      if (whitelistedValidatorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWhitelistedValidatorsIsMutable();
        whitelistedValidators_.add(value);
        onChanged();
      } else {
        whitelistedValidatorsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public Builder addWhitelistedValidators(
        int index, com.crescent.liquidstaking.v1beta1.WhitelistedValidator value) {
      if (whitelistedValidatorsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureWhitelistedValidatorsIsMutable();
        whitelistedValidators_.add(index, value);
        onChanged();
      } else {
        whitelistedValidatorsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public Builder addWhitelistedValidators(
        com.crescent.liquidstaking.v1beta1.WhitelistedValidator.Builder builderForValue) {
      if (whitelistedValidatorsBuilder_ == null) {
        ensureWhitelistedValidatorsIsMutable();
        whitelistedValidators_.add(builderForValue.build());
        onChanged();
      } else {
        whitelistedValidatorsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public Builder addWhitelistedValidators(
        int index, com.crescent.liquidstaking.v1beta1.WhitelistedValidator.Builder builderForValue) {
      if (whitelistedValidatorsBuilder_ == null) {
        ensureWhitelistedValidatorsIsMutable();
        whitelistedValidators_.add(index, builderForValue.build());
        onChanged();
      } else {
        whitelistedValidatorsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public Builder addAllWhitelistedValidators(
        java.lang.Iterable<? extends com.crescent.liquidstaking.v1beta1.WhitelistedValidator> values) {
      if (whitelistedValidatorsBuilder_ == null) {
        ensureWhitelistedValidatorsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, whitelistedValidators_);
        onChanged();
      } else {
        whitelistedValidatorsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public Builder clearWhitelistedValidators() {
      if (whitelistedValidatorsBuilder_ == null) {
        whitelistedValidators_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        whitelistedValidatorsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public Builder removeWhitelistedValidators(int index) {
      if (whitelistedValidatorsBuilder_ == null) {
        ensureWhitelistedValidatorsIsMutable();
        whitelistedValidators_.remove(index);
        onChanged();
      } else {
        whitelistedValidatorsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public com.crescent.liquidstaking.v1beta1.WhitelistedValidator.Builder getWhitelistedValidatorsBuilder(
        int index) {
      return getWhitelistedValidatorsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public com.crescent.liquidstaking.v1beta1.WhitelistedValidatorOrBuilder getWhitelistedValidatorsOrBuilder(
        int index) {
      if (whitelistedValidatorsBuilder_ == null) {
        return whitelistedValidators_.get(index);  } else {
        return whitelistedValidatorsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public java.util.List<? extends com.crescent.liquidstaking.v1beta1.WhitelistedValidatorOrBuilder> 
         getWhitelistedValidatorsOrBuilderList() {
      if (whitelistedValidatorsBuilder_ != null) {
        return whitelistedValidatorsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(whitelistedValidators_);
      }
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public com.crescent.liquidstaking.v1beta1.WhitelistedValidator.Builder addWhitelistedValidatorsBuilder() {
      return getWhitelistedValidatorsFieldBuilder().addBuilder(
          com.crescent.liquidstaking.v1beta1.WhitelistedValidator.getDefaultInstance());
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public com.crescent.liquidstaking.v1beta1.WhitelistedValidator.Builder addWhitelistedValidatorsBuilder(
        int index) {
      return getWhitelistedValidatorsFieldBuilder().addBuilder(
          index, com.crescent.liquidstaking.v1beta1.WhitelistedValidator.getDefaultInstance());
    }
    /**
     * <pre>
     * WhitelistedValidators specifies the validators elected to become Active Liquid Validators.
     * </pre>
     *
     * <code>repeated .crescent.liquidstaking.v1beta1.WhitelistedValidator whitelisted_validators = 2 [json_name = "whitelistedValidators", (.gogoproto.nullable) = false, (.gogoproto.moretags) = "yaml:&#92;"whitelisted_validators&#92;""];</code>
     */
    public java.util.List<com.crescent.liquidstaking.v1beta1.WhitelistedValidator.Builder> 
         getWhitelistedValidatorsBuilderList() {
      return getWhitelistedValidatorsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.crescent.liquidstaking.v1beta1.WhitelistedValidator, com.crescent.liquidstaking.v1beta1.WhitelistedValidator.Builder, com.crescent.liquidstaking.v1beta1.WhitelistedValidatorOrBuilder> 
        getWhitelistedValidatorsFieldBuilder() {
      if (whitelistedValidatorsBuilder_ == null) {
        whitelistedValidatorsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.crescent.liquidstaking.v1beta1.WhitelistedValidator, com.crescent.liquidstaking.v1beta1.WhitelistedValidator.Builder, com.crescent.liquidstaking.v1beta1.WhitelistedValidatorOrBuilder>(
                whitelistedValidators_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        whitelistedValidators_ = null;
      }
      return whitelistedValidatorsBuilder_;
    }

    private java.lang.Object unstakeFeeRate_ = "";
    /**
     * <pre>
     * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
     * unbondingAmount
     * </pre>
     *
     * <code>string unstake_fee_rate = 3 [json_name = "unstakeFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
     * @return The unstakeFeeRate.
     */
    public java.lang.String getUnstakeFeeRate() {
      java.lang.Object ref = unstakeFeeRate_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        unstakeFeeRate_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
     * unbondingAmount
     * </pre>
     *
     * <code>string unstake_fee_rate = 3 [json_name = "unstakeFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
     * @return The bytes for unstakeFeeRate.
     */
    public com.google.protobuf.ByteString
        getUnstakeFeeRateBytes() {
      java.lang.Object ref = unstakeFeeRate_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        unstakeFeeRate_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
     * unbondingAmount
     * </pre>
     *
     * <code>string unstake_fee_rate = 3 [json_name = "unstakeFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
     * @param value The unstakeFeeRate to set.
     * @return This builder for chaining.
     */
    public Builder setUnstakeFeeRate(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      unstakeFeeRate_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
     * unbondingAmount
     * </pre>
     *
     * <code>string unstake_fee_rate = 3 [json_name = "unstakeFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
     * @return This builder for chaining.
     */
    public Builder clearUnstakeFeeRate() {
      unstakeFeeRate_ = getDefaultInstance().getUnstakeFeeRate();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * UnstakeFeeRate specifies the fee rate when liquid unstake is requested, unbonded by subtracting it from
     * unbondingAmount
     * </pre>
     *
     * <code>string unstake_fee_rate = 3 [json_name = "unstakeFeeRate", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (.gogoproto.moretags) = "yaml:&#92;"unstake_fee_rate&#92;""];</code>
     * @param value The bytes for unstakeFeeRate to set.
     * @return This builder for chaining.
     */
    public Builder setUnstakeFeeRateBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      unstakeFeeRate_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private java.lang.Object minLiquidStakingAmount_ = "";
    /**
     * <pre>
     * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
     * staking to minimize decimal loss and consider gas efficiency.
     * </pre>
     *
     * <code>string min_liquid_staking_amount = 5 [json_name = "minLiquidStakingAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
     * @return The minLiquidStakingAmount.
     */
    public java.lang.String getMinLiquidStakingAmount() {
      java.lang.Object ref = minLiquidStakingAmount_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        minLiquidStakingAmount_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
     * staking to minimize decimal loss and consider gas efficiency.
     * </pre>
     *
     * <code>string min_liquid_staking_amount = 5 [json_name = "minLiquidStakingAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
     * @return The bytes for minLiquidStakingAmount.
     */
    public com.google.protobuf.ByteString
        getMinLiquidStakingAmountBytes() {
      java.lang.Object ref = minLiquidStakingAmount_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        minLiquidStakingAmount_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
     * staking to minimize decimal loss and consider gas efficiency.
     * </pre>
     *
     * <code>string min_liquid_staking_amount = 5 [json_name = "minLiquidStakingAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
     * @param value The minLiquidStakingAmount to set.
     * @return This builder for chaining.
     */
    public Builder setMinLiquidStakingAmount(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      minLiquidStakingAmount_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
     * staking to minimize decimal loss and consider gas efficiency.
     * </pre>
     *
     * <code>string min_liquid_staking_amount = 5 [json_name = "minLiquidStakingAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
     * @return This builder for chaining.
     */
    public Builder clearMinLiquidStakingAmount() {
      minLiquidStakingAmount_ = getDefaultInstance().getMinLiquidStakingAmount();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * MinLiquidStakingAmount specifies the minimum number of coins to be staked to the active liquid validators on liquid
     * staking to minimize decimal loss and consider gas efficiency.
     * </pre>
     *
     * <code>string min_liquid_staking_amount = 5 [json_name = "minLiquidStakingAmount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int", (.gogoproto.moretags) = "yaml:&#92;"min_liquid_staking_amount&#92;""];</code>
     * @param value The bytes for minLiquidStakingAmount to set.
     * @return This builder for chaining.
     */
    public Builder setMinLiquidStakingAmountBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      minLiquidStakingAmount_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:crescent.liquidstaking.v1beta1.Params)
  }

  // @@protoc_insertion_point(class_scope:crescent.liquidstaking.v1beta1.Params)
  private static final com.crescent.liquidstaking.v1beta1.Params DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.crescent.liquidstaking.v1beta1.Params();
  }

  public static com.crescent.liquidstaking.v1beta1.Params getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Params>
      PARSER = new com.google.protobuf.AbstractParser<Params>() {
    @java.lang.Override
    public Params parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Params> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Params> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.crescent.liquidstaking.v1beta1.Params getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

