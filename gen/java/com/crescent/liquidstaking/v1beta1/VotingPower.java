// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crescent/liquidstaking/v1beta1/liquidstaking.proto

package com.crescent.liquidstaking.v1beta1;

/**
 * <pre>
 * VotingPower is type for current voting power of the voter including staking module's voting power and liquid staking
 * module's voting power, It depends on the amount of delegation of staking module, the bonded state of the delegated
 * validator, the value of btoken(liquid_bond_denom), and the pool coin and farming position containing btoken..
 * </pre>
 *
 * Protobuf type {@code crescent.liquidstaking.v1beta1.VotingPower}
 */
public final class VotingPower extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:crescent.liquidstaking.v1beta1.VotingPower)
    VotingPowerOrBuilder {
private static final long serialVersionUID = 0L;
  // Use VotingPower.newBuilder() to construct.
  private VotingPower(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private VotingPower() {
    voter_ = "";
    stakingVotingPower_ = "";
    liquidStakingVotingPower_ = "";
    validatorVotingPower_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new VotingPower();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.crescent.liquidstaking.v1beta1.LiquidstakingProto.internal_static_crescent_liquidstaking_v1beta1_VotingPower_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.crescent.liquidstaking.v1beta1.LiquidstakingProto.internal_static_crescent_liquidstaking_v1beta1_VotingPower_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.crescent.liquidstaking.v1beta1.VotingPower.class, com.crescent.liquidstaking.v1beta1.VotingPower.Builder.class);
  }

  public static final int VOTER_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object voter_ = "";
  /**
   * <pre>
   * voter defines the address of the voter; bech encoded in JSON.
   * </pre>
   *
   * <code>string voter = 1 [json_name = "voter"];</code>
   * @return The voter.
   */
  @java.lang.Override
  public java.lang.String getVoter() {
    java.lang.Object ref = voter_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      voter_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * voter defines the address of the voter; bech encoded in JSON.
   * </pre>
   *
   * <code>string voter = 1 [json_name = "voter"];</code>
   * @return The bytes for voter.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getVoterBytes() {
    java.lang.Object ref = voter_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      voter_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STAKING_VOTING_POWER_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object stakingVotingPower_ = "";
  /**
   * <pre>
   * staking_voting_power return the voting power of staking that can be exercised.
   * </pre>
   *
   * <code>string staking_voting_power = 2 [json_name = "stakingVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
   * @return The stakingVotingPower.
   */
  @java.lang.Override
  public java.lang.String getStakingVotingPower() {
    java.lang.Object ref = stakingVotingPower_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      stakingVotingPower_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * staking_voting_power return the voting power of staking that can be exercised.
   * </pre>
   *
   * <code>string staking_voting_power = 2 [json_name = "stakingVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
   * @return The bytes for stakingVotingPower.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getStakingVotingPowerBytes() {
    java.lang.Object ref = stakingVotingPower_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      stakingVotingPower_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LIQUID_STAKING_VOTING_POWER_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private volatile java.lang.Object liquidStakingVotingPower_ = "";
  /**
   * <pre>
   * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
   * </pre>
   *
   * <code>string liquid_staking_voting_power = 3 [json_name = "liquidStakingVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
   * @return The liquidStakingVotingPower.
   */
  @java.lang.Override
  public java.lang.String getLiquidStakingVotingPower() {
    java.lang.Object ref = liquidStakingVotingPower_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      liquidStakingVotingPower_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
   * </pre>
   *
   * <code>string liquid_staking_voting_power = 3 [json_name = "liquidStakingVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
   * @return The bytes for liquidStakingVotingPower.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getLiquidStakingVotingPowerBytes() {
    java.lang.Object ref = liquidStakingVotingPower_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      liquidStakingVotingPower_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int VALIDATOR_VOTING_POWER_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private volatile java.lang.Object validatorVotingPower_ = "";
  /**
   * <pre>
   * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
   * exercised.
   * </pre>
   *
   * <code>string validator_voting_power = 4 [json_name = "validatorVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
   * @return The validatorVotingPower.
   */
  @java.lang.Override
  public java.lang.String getValidatorVotingPower() {
    java.lang.Object ref = validatorVotingPower_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      validatorVotingPower_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
   * exercised.
   * </pre>
   *
   * <code>string validator_voting_power = 4 [json_name = "validatorVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
   * @return The bytes for validatorVotingPower.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getValidatorVotingPowerBytes() {
    java.lang.Object ref = validatorVotingPower_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      validatorVotingPower_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(voter_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, voter_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stakingVotingPower_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, stakingVotingPower_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(liquidStakingVotingPower_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, liquidStakingVotingPower_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(validatorVotingPower_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, validatorVotingPower_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(voter_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, voter_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stakingVotingPower_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, stakingVotingPower_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(liquidStakingVotingPower_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, liquidStakingVotingPower_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(validatorVotingPower_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, validatorVotingPower_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.crescent.liquidstaking.v1beta1.VotingPower)) {
      return super.equals(obj);
    }
    com.crescent.liquidstaking.v1beta1.VotingPower other = (com.crescent.liquidstaking.v1beta1.VotingPower) obj;

    if (!getVoter()
        .equals(other.getVoter())) return false;
    if (!getStakingVotingPower()
        .equals(other.getStakingVotingPower())) return false;
    if (!getLiquidStakingVotingPower()
        .equals(other.getLiquidStakingVotingPower())) return false;
    if (!getValidatorVotingPower()
        .equals(other.getValidatorVotingPower())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + VOTER_FIELD_NUMBER;
    hash = (53 * hash) + getVoter().hashCode();
    hash = (37 * hash) + STAKING_VOTING_POWER_FIELD_NUMBER;
    hash = (53 * hash) + getStakingVotingPower().hashCode();
    hash = (37 * hash) + LIQUID_STAKING_VOTING_POWER_FIELD_NUMBER;
    hash = (53 * hash) + getLiquidStakingVotingPower().hashCode();
    hash = (37 * hash) + VALIDATOR_VOTING_POWER_FIELD_NUMBER;
    hash = (53 * hash) + getValidatorVotingPower().hashCode();
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.crescent.liquidstaking.v1beta1.VotingPower parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.crescent.liquidstaking.v1beta1.VotingPower parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.crescent.liquidstaking.v1beta1.VotingPower parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.crescent.liquidstaking.v1beta1.VotingPower parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.crescent.liquidstaking.v1beta1.VotingPower parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.crescent.liquidstaking.v1beta1.VotingPower parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.crescent.liquidstaking.v1beta1.VotingPower parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.crescent.liquidstaking.v1beta1.VotingPower parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.crescent.liquidstaking.v1beta1.VotingPower parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.crescent.liquidstaking.v1beta1.VotingPower parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.crescent.liquidstaking.v1beta1.VotingPower parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.crescent.liquidstaking.v1beta1.VotingPower parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.crescent.liquidstaking.v1beta1.VotingPower prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * VotingPower is type for current voting power of the voter including staking module's voting power and liquid staking
   * module's voting power, It depends on the amount of delegation of staking module, the bonded state of the delegated
   * validator, the value of btoken(liquid_bond_denom), and the pool coin and farming position containing btoken..
   * </pre>
   *
   * Protobuf type {@code crescent.liquidstaking.v1beta1.VotingPower}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:crescent.liquidstaking.v1beta1.VotingPower)
      com.crescent.liquidstaking.v1beta1.VotingPowerOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.crescent.liquidstaking.v1beta1.LiquidstakingProto.internal_static_crescent_liquidstaking_v1beta1_VotingPower_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.crescent.liquidstaking.v1beta1.LiquidstakingProto.internal_static_crescent_liquidstaking_v1beta1_VotingPower_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.crescent.liquidstaking.v1beta1.VotingPower.class, com.crescent.liquidstaking.v1beta1.VotingPower.Builder.class);
    }

    // Construct using com.crescent.liquidstaking.v1beta1.VotingPower.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      voter_ = "";
      stakingVotingPower_ = "";
      liquidStakingVotingPower_ = "";
      validatorVotingPower_ = "";
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.crescent.liquidstaking.v1beta1.LiquidstakingProto.internal_static_crescent_liquidstaking_v1beta1_VotingPower_descriptor;
    }

    @java.lang.Override
    public com.crescent.liquidstaking.v1beta1.VotingPower getDefaultInstanceForType() {
      return com.crescent.liquidstaking.v1beta1.VotingPower.getDefaultInstance();
    }

    @java.lang.Override
    public com.crescent.liquidstaking.v1beta1.VotingPower build() {
      com.crescent.liquidstaking.v1beta1.VotingPower result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.crescent.liquidstaking.v1beta1.VotingPower buildPartial() {
      com.crescent.liquidstaking.v1beta1.VotingPower result = new com.crescent.liquidstaking.v1beta1.VotingPower(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(com.crescent.liquidstaking.v1beta1.VotingPower result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.voter_ = voter_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.stakingVotingPower_ = stakingVotingPower_;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.liquidStakingVotingPower_ = liquidStakingVotingPower_;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.validatorVotingPower_ = validatorVotingPower_;
      }
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.crescent.liquidstaking.v1beta1.VotingPower) {
        return mergeFrom((com.crescent.liquidstaking.v1beta1.VotingPower)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.crescent.liquidstaking.v1beta1.VotingPower other) {
      if (other == com.crescent.liquidstaking.v1beta1.VotingPower.getDefaultInstance()) return this;
      if (!other.getVoter().isEmpty()) {
        voter_ = other.voter_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.getStakingVotingPower().isEmpty()) {
        stakingVotingPower_ = other.stakingVotingPower_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (!other.getLiquidStakingVotingPower().isEmpty()) {
        liquidStakingVotingPower_ = other.liquidStakingVotingPower_;
        bitField0_ |= 0x00000004;
        onChanged();
      }
      if (!other.getValidatorVotingPower().isEmpty()) {
        validatorVotingPower_ = other.validatorVotingPower_;
        bitField0_ |= 0x00000008;
        onChanged();
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              voter_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              stakingVotingPower_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              liquidStakingVotingPower_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              validatorVotingPower_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object voter_ = "";
    /**
     * <pre>
     * voter defines the address of the voter; bech encoded in JSON.
     * </pre>
     *
     * <code>string voter = 1 [json_name = "voter"];</code>
     * @return The voter.
     */
    public java.lang.String getVoter() {
      java.lang.Object ref = voter_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        voter_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * voter defines the address of the voter; bech encoded in JSON.
     * </pre>
     *
     * <code>string voter = 1 [json_name = "voter"];</code>
     * @return The bytes for voter.
     */
    public com.google.protobuf.ByteString
        getVoterBytes() {
      java.lang.Object ref = voter_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        voter_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * voter defines the address of the voter; bech encoded in JSON.
     * </pre>
     *
     * <code>string voter = 1 [json_name = "voter"];</code>
     * @param value The voter to set.
     * @return This builder for chaining.
     */
    public Builder setVoter(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      voter_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * voter defines the address of the voter; bech encoded in JSON.
     * </pre>
     *
     * <code>string voter = 1 [json_name = "voter"];</code>
     * @return This builder for chaining.
     */
    public Builder clearVoter() {
      voter_ = getDefaultInstance().getVoter();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * voter defines the address of the voter; bech encoded in JSON.
     * </pre>
     *
     * <code>string voter = 1 [json_name = "voter"];</code>
     * @param value The bytes for voter to set.
     * @return This builder for chaining.
     */
    public Builder setVoterBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      voter_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object stakingVotingPower_ = "";
    /**
     * <pre>
     * staking_voting_power return the voting power of staking that can be exercised.
     * </pre>
     *
     * <code>string staking_voting_power = 2 [json_name = "stakingVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The stakingVotingPower.
     */
    public java.lang.String getStakingVotingPower() {
      java.lang.Object ref = stakingVotingPower_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stakingVotingPower_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * staking_voting_power return the voting power of staking that can be exercised.
     * </pre>
     *
     * <code>string staking_voting_power = 2 [json_name = "stakingVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for stakingVotingPower.
     */
    public com.google.protobuf.ByteString
        getStakingVotingPowerBytes() {
      java.lang.Object ref = stakingVotingPower_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stakingVotingPower_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * staking_voting_power return the voting power of staking that can be exercised.
     * </pre>
     *
     * <code>string staking_voting_power = 2 [json_name = "stakingVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @param value The stakingVotingPower to set.
     * @return This builder for chaining.
     */
    public Builder setStakingVotingPower(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      stakingVotingPower_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * staking_voting_power return the voting power of staking that can be exercised.
     * </pre>
     *
     * <code>string staking_voting_power = 2 [json_name = "stakingVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return This builder for chaining.
     */
    public Builder clearStakingVotingPower() {
      stakingVotingPower_ = getDefaultInstance().getStakingVotingPower();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * staking_voting_power return the voting power of staking that can be exercised.
     * </pre>
     *
     * <code>string staking_voting_power = 2 [json_name = "stakingVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @param value The bytes for stakingVotingPower to set.
     * @return This builder for chaining.
     */
    public Builder setStakingVotingPowerBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      stakingVotingPower_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private java.lang.Object liquidStakingVotingPower_ = "";
    /**
     * <pre>
     * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
     * </pre>
     *
     * <code>string liquid_staking_voting_power = 3 [json_name = "liquidStakingVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The liquidStakingVotingPower.
     */
    public java.lang.String getLiquidStakingVotingPower() {
      java.lang.Object ref = liquidStakingVotingPower_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        liquidStakingVotingPower_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
     * </pre>
     *
     * <code>string liquid_staking_voting_power = 3 [json_name = "liquidStakingVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for liquidStakingVotingPower.
     */
    public com.google.protobuf.ByteString
        getLiquidStakingVotingPowerBytes() {
      java.lang.Object ref = liquidStakingVotingPower_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        liquidStakingVotingPower_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
     * </pre>
     *
     * <code>string liquid_staking_voting_power = 3 [json_name = "liquidStakingVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @param value The liquidStakingVotingPower to set.
     * @return This builder for chaining.
     */
    public Builder setLiquidStakingVotingPower(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      liquidStakingVotingPower_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
     * </pre>
     *
     * <code>string liquid_staking_voting_power = 3 [json_name = "liquidStakingVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return This builder for chaining.
     */
    public Builder clearLiquidStakingVotingPower() {
      liquidStakingVotingPower_ = getDefaultInstance().getLiquidStakingVotingPower();
      bitField0_ = (bitField0_ & ~0x00000004);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * liquid_staking_voting_power return the voting power of liquid staking that can be exercised.
     * </pre>
     *
     * <code>string liquid_staking_voting_power = 3 [json_name = "liquidStakingVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @param value The bytes for liquidStakingVotingPower to set.
     * @return This builder for chaining.
     */
    public Builder setLiquidStakingVotingPowerBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      liquidStakingVotingPower_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }

    private java.lang.Object validatorVotingPower_ = "";
    /**
     * <pre>
     * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
     * exercised.
     * </pre>
     *
     * <code>string validator_voting_power = 4 [json_name = "validatorVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The validatorVotingPower.
     */
    public java.lang.String getValidatorVotingPower() {
      java.lang.Object ref = validatorVotingPower_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        validatorVotingPower_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
     * exercised.
     * </pre>
     *
     * <code>string validator_voting_power = 4 [json_name = "validatorVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return The bytes for validatorVotingPower.
     */
    public com.google.protobuf.ByteString
        getValidatorVotingPowerBytes() {
      java.lang.Object ref = validatorVotingPower_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        validatorVotingPower_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
     * exercised.
     * </pre>
     *
     * <code>string validator_voting_power = 4 [json_name = "validatorVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @param value The validatorVotingPower to set.
     * @return This builder for chaining.
     */
    public Builder setValidatorVotingPower(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      validatorVotingPower_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
     * exercised.
     * </pre>
     *
     * <code>string validator_voting_power = 4 [json_name = "validatorVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @return This builder for chaining.
     */
    public Builder clearValidatorVotingPower() {
      validatorVotingPower_ = getDefaultInstance().getValidatorVotingPower();
      bitField0_ = (bitField0_ & ~0x00000008);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * validator_voting_power return the voting power of the validator if the voter is the validator operator that can be
     * exercised.
     * </pre>
     *
     * <code>string validator_voting_power = 4 [json_name = "validatorVotingPower", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
     * @param value The bytes for validatorVotingPower to set.
     * @return This builder for chaining.
     */
    public Builder setValidatorVotingPowerBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      validatorVotingPower_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:crescent.liquidstaking.v1beta1.VotingPower)
  }

  // @@protoc_insertion_point(class_scope:crescent.liquidstaking.v1beta1.VotingPower)
  private static final com.crescent.liquidstaking.v1beta1.VotingPower DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.crescent.liquidstaking.v1beta1.VotingPower();
  }

  public static com.crescent.liquidstaking.v1beta1.VotingPower getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<VotingPower>
      PARSER = new com.google.protobuf.AbstractParser<VotingPower>() {
    @java.lang.Override
    public VotingPower parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<VotingPower> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<VotingPower> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.crescent.liquidstaking.v1beta1.VotingPower getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

