// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: canto/erc20/v1/tx.proto

package com.canto.erc20.v1;

public interface MsgConvertERC20OrBuilder extends
    // @@protoc_insertion_point(interface_extends:canto.erc20.v1.MsgConvertERC20)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * ERC20 token contract address registered in a token pair
   * </pre>
   *
   * <code>string contract_address = 1 [json_name = "contractAddress"];</code>
   * @return The contractAddress.
   */
  java.lang.String getContractAddress();
  /**
   * <pre>
   * ERC20 token contract address registered in a token pair
   * </pre>
   *
   * <code>string contract_address = 1 [json_name = "contractAddress"];</code>
   * @return The bytes for contractAddress.
   */
  com.google.protobuf.ByteString
      getContractAddressBytes();

  /**
   * <pre>
   * amount of ERC20 tokens to convert
   * </pre>
   *
   * <code>string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
   * @return The amount.
   */
  java.lang.String getAmount();
  /**
   * <pre>
   * amount of ERC20 tokens to convert
   * </pre>
   *
   * <code>string amount = 2 [json_name = "amount", (.gogoproto.nullable) = false, (.gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int"];</code>
   * @return The bytes for amount.
   */
  com.google.protobuf.ByteString
      getAmountBytes();

  /**
   * <pre>
   * bech32 address to receive native Cosmos coins
   * </pre>
   *
   * <code>string receiver = 3 [json_name = "receiver"];</code>
   * @return The receiver.
   */
  java.lang.String getReceiver();
  /**
   * <pre>
   * bech32 address to receive native Cosmos coins
   * </pre>
   *
   * <code>string receiver = 3 [json_name = "receiver"];</code>
   * @return The bytes for receiver.
   */
  com.google.protobuf.ByteString
      getReceiverBytes();

  /**
   * <pre>
   * sender hex address from the owner of the given ERC20 tokens
   * </pre>
   *
   * <code>string sender = 4 [json_name = "sender"];</code>
   * @return The sender.
   */
  java.lang.String getSender();
  /**
   * <pre>
   * sender hex address from the owner of the given ERC20 tokens
   * </pre>
   *
   * <code>string sender = 4 [json_name = "sender"];</code>
   * @return The bytes for sender.
   */
  com.google.protobuf.ByteString
      getSenderBytes();
}
