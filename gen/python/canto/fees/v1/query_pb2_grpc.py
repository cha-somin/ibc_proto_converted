# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from canto.fees.v1 import query_pb2 as canto_dot_fees_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Fees = channel.unary_unary(
                '/canto.fees.v1.Query/Fees',
                request_serializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryFeesRequest.SerializeToString,
                response_deserializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryFeesResponse.FromString,
                )
        self.Fee = channel.unary_unary(
                '/canto.fees.v1.Query/Fee',
                request_serializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryFeeRequest.SerializeToString,
                response_deserializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryFeeResponse.FromString,
                )
        self.Params = channel.unary_unary(
                '/canto.fees.v1.Query/Params',
                request_serializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.DeployerFees = channel.unary_unary(
                '/canto.fees.v1.Query/DeployerFees',
                request_serializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryDeployerFeesRequest.SerializeToString,
                response_deserializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryDeployerFeesResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def Fees(self, request, context):
        """Fees retrieves all registered contracts for fee distribution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Fee(self, request, context):
        """Fee retrieves a registered contract for fee distribution for a given
        address
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Params(self, request, context):
        """Params retrieves the fees module params
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeployerFees(self, request, context):
        """DeployerFees retrieves all contracts that a given deployer has registered
        for fee distribution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Fees': grpc.unary_unary_rpc_method_handler(
                    servicer.Fees,
                    request_deserializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryFeesRequest.FromString,
                    response_serializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryFeesResponse.SerializeToString,
            ),
            'Fee': grpc.unary_unary_rpc_method_handler(
                    servicer.Fee,
                    request_deserializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryFeeRequest.FromString,
                    response_serializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryFeeResponse.SerializeToString,
            ),
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'DeployerFees': grpc.unary_unary_rpc_method_handler(
                    servicer.DeployerFees,
                    request_deserializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryDeployerFeesRequest.FromString,
                    response_serializer=canto_dot_fees_dot_v1_dot_query__pb2.QueryDeployerFeesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'canto.fees.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def Fees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/canto.fees.v1.Query/Fees',
            canto_dot_fees_dot_v1_dot_query__pb2.QueryFeesRequest.SerializeToString,
            canto_dot_fees_dot_v1_dot_query__pb2.QueryFeesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Fee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/canto.fees.v1.Query/Fee',
            canto_dot_fees_dot_v1_dot_query__pb2.QueryFeeRequest.SerializeToString,
            canto_dot_fees_dot_v1_dot_query__pb2.QueryFeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/canto.fees.v1.Query/Params',
            canto_dot_fees_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
            canto_dot_fees_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeployerFees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/canto.fees.v1.Query/DeployerFees',
            canto_dot_fees_dot_v1_dot_query__pb2.QueryDeployerFeesRequest.SerializeToString,
            canto_dot_fees_dot_v1_dot_query__pb2.QueryDeployerFeesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
