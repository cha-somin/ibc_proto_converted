# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: canto/erc20/v1/tx.proto
# Protobuf Python Version: 4.25.0
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from gogoproto import gogo_pb2 as gogoproto_dot_gogo__pb2
from cosmos.base.v1beta1 import coin_pb2 as cosmos_dot_base_dot_v1beta1_dot_coin__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x17\x63\x61nto/erc20/v1/tx.proto\x12\x0e\x63\x61nto.erc20.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x14gogoproto/gogo.proto\x1a\x1e\x63osmos/base/v1beta1/coin.proto\"y\n\x0eMsgConvertCoin\x12\x33\n\x04\x63oin\x18\x01 \x01(\x0b\x32\x19.cosmos.base.v1beta1.CoinB\x04\xc8\xde\x1f\x00R\x04\x63oin\x12\x1a\n\x08receiver\x18\x02 \x01(\tR\x08receiver\x12\x16\n\x06sender\x18\x03 \x01(\tR\x06sender\"\x18\n\x16MsgConvertCoinResponse\"\xb8\x01\n\x0fMsgConvertERC20\x12)\n\x10\x63ontract_address\x18\x01 \x01(\tR\x0f\x63ontractAddress\x12\x46\n\x06\x61mount\x18\x02 \x01(\tB.\xc8\xde\x1f\x00\xda\xde\x1f&github.com/cosmos/cosmos-sdk/types.IntR\x06\x61mount\x12\x1a\n\x08receiver\x18\x03 \x01(\tR\x08receiver\x12\x16\n\x06sender\x18\x04 \x01(\tR\x06sender\"\x19\n\x17MsgConvertERC20Response2\x8a\x02\n\x03Msg\x12~\n\x0b\x43onvertCoin\x12\x1e.canto.erc20.v1.MsgConvertCoin\x1a&.canto.erc20.v1.MsgConvertCoinResponse\"\'\x82\xd3\xe4\x93\x02!\x12\x1f/canto/erc20/v1/tx/convert_coin\x12\x82\x01\n\x0c\x43onvertERC20\x12\x1f.canto.erc20.v1.MsgConvertERC20\x1a\'.canto.erc20.v1.MsgConvertERC20Response\"(\x82\xd3\xe4\x93\x02\"\x12 /canto/erc20/v1/tx/convert_erc20B\xa6\x01\n\x12\x63om.canto.erc20.v1B\x07TxProtoZ/github.com/Canto-Network/Canto/v6/x/erc20/types\xa2\x02\x03\x43\x45X\xaa\x02\x0e\x43\x61nto.Erc20.V1\xca\x02\x0e\x43\x61nto\\Erc20\\V1\xe2\x02\x1a\x43\x61nto\\Erc20\\V1\\GPBMetadata\xea\x02\x10\x43\x61nto::Erc20::V1b\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'canto.erc20.v1.tx_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
  _globals['DESCRIPTOR']._options = None
  _globals['DESCRIPTOR']._serialized_options = b'\n\022com.canto.erc20.v1B\007TxProtoZ/github.com/Canto-Network/Canto/v6/x/erc20/types\242\002\003CEX\252\002\016Canto.Erc20.V1\312\002\016Canto\\Erc20\\V1\342\002\032Canto\\Erc20\\V1\\GPBMetadata\352\002\020Canto::Erc20::V1'
  _globals['_MSGCONVERTCOIN'].fields_by_name['coin']._options = None
  _globals['_MSGCONVERTCOIN'].fields_by_name['coin']._serialized_options = b'\310\336\037\000'
  _globals['_MSGCONVERTERC20'].fields_by_name['amount']._options = None
  _globals['_MSGCONVERTERC20'].fields_by_name['amount']._serialized_options = b'\310\336\037\000\332\336\037&github.com/cosmos/cosmos-sdk/types.Int'
  _globals['_MSG'].methods_by_name['ConvertCoin']._options = None
  _globals['_MSG'].methods_by_name['ConvertCoin']._serialized_options = b'\202\323\344\223\002!\022\037/canto/erc20/v1/tx/convert_coin'
  _globals['_MSG'].methods_by_name['ConvertERC20']._options = None
  _globals['_MSG'].methods_by_name['ConvertERC20']._serialized_options = b'\202\323\344\223\002\"\022 /canto/erc20/v1/tx/convert_erc20'
  _globals['_MSGCONVERTCOIN']._serialized_start=127
  _globals['_MSGCONVERTCOIN']._serialized_end=248
  _globals['_MSGCONVERTCOINRESPONSE']._serialized_start=250
  _globals['_MSGCONVERTCOINRESPONSE']._serialized_end=274
  _globals['_MSGCONVERTERC20']._serialized_start=277
  _globals['_MSGCONVERTERC20']._serialized_end=461
  _globals['_MSGCONVERTERC20RESPONSE']._serialized_start=463
  _globals['_MSGCONVERTERC20RESPONSE']._serialized_end=488
  _globals['_MSG']._serialized_start=491
  _globals['_MSG']._serialized_end=757
# @@protoc_insertion_point(module_scope)
