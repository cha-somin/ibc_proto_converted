# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from persistence.oracle.v1beta1 import query_pb2 as persistence_dot_oracle_dot_v1beta1_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AllExchangeRates = channel.unary_unary(
                '/persistence.oracle.v1beta1.Query/AllExchangeRates',
                request_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAllExchangeRatesRequest.SerializeToString,
                response_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAllExchangeRatesResponse.FromString,
                )
        self.ExchangeRate = channel.unary_unary(
                '/persistence.oracle.v1beta1.Query/ExchangeRate',
                request_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryExchangeRateRequest.SerializeToString,
                response_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryExchangeRateResponse.FromString,
                )
        self.ActiveExchangeRates = channel.unary_unary(
                '/persistence.oracle.v1beta1.Query/ActiveExchangeRates',
                request_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryActiveExchangeRatesRequest.SerializeToString,
                response_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryActiveExchangeRatesResponse.FromString,
                )
        self.FeederDelegation = channel.unary_unary(
                '/persistence.oracle.v1beta1.Query/FeederDelegation',
                request_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryFeederDelegationRequest.SerializeToString,
                response_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryFeederDelegationResponse.FromString,
                )
        self.MissCounter = channel.unary_unary(
                '/persistence.oracle.v1beta1.Query/MissCounter',
                request_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryMissCounterRequest.SerializeToString,
                response_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryMissCounterResponse.FromString,
                )
        self.AggregatePrevote = channel.unary_unary(
                '/persistence.oracle.v1beta1.Query/AggregatePrevote',
                request_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregatePrevoteRequest.SerializeToString,
                response_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregatePrevoteResponse.FromString,
                )
        self.AggregatePrevotes = channel.unary_unary(
                '/persistence.oracle.v1beta1.Query/AggregatePrevotes',
                request_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregatePrevotesRequest.SerializeToString,
                response_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregatePrevotesResponse.FromString,
                )
        self.AggregateVote = channel.unary_unary(
                '/persistence.oracle.v1beta1.Query/AggregateVote',
                request_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregateVoteRequest.SerializeToString,
                response_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregateVoteResponse.FromString,
                )
        self.AggregateVotes = channel.unary_unary(
                '/persistence.oracle.v1beta1.Query/AggregateVotes',
                request_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregateVotesRequest.SerializeToString,
                response_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregateVotesResponse.FromString,
                )
        self.Params = channel.unary_unary(
                '/persistence.oracle.v1beta1.Query/Params',
                request_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.QueryRewardPoolBalance = channel.unary_unary(
                '/persistence.oracle.v1beta1.Query/QueryRewardPoolBalance',
                request_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryRewardPoolBalanceRequest.SerializeToString,
                response_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryRewardPoolBalanceResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def AllExchangeRates(self, request, context):
        """ExchangeRates returns exchange rates of all denoms.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExchangeRate(self, request, context):
        """ExchangeRate returns exchange rates of a specified denom.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActiveExchangeRates(self, request, context):
        """ActiveExchangeRates returns all active denoms
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FeederDelegation(self, request, context):
        """FeederDelegation returns feeder delegation of a validator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MissCounter(self, request, context):
        """MissCounter returns oracle miss counter of a validator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AggregatePrevote(self, request, context):
        """AggregatePrevote returns an aggregate prevote of a validator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AggregatePrevotes(self, request, context):
        """AggregatePrevotes returns aggregate prevotes of all validators
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AggregateVote(self, request, context):
        """AggregateVote returns an aggregate vote of a validator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AggregateVotes(self, request, context):
        """AggregateVotes returns aggregate votes of all validators
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Params(self, request, context):
        """Params queries all parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryRewardPoolBalance(self, request, context):
        """QueryRewardPoolBalance queries funds left in the reward pool.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AllExchangeRates': grpc.unary_unary_rpc_method_handler(
                    servicer.AllExchangeRates,
                    request_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAllExchangeRatesRequest.FromString,
                    response_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAllExchangeRatesResponse.SerializeToString,
            ),
            'ExchangeRate': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeRate,
                    request_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryExchangeRateRequest.FromString,
                    response_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryExchangeRateResponse.SerializeToString,
            ),
            'ActiveExchangeRates': grpc.unary_unary_rpc_method_handler(
                    servicer.ActiveExchangeRates,
                    request_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryActiveExchangeRatesRequest.FromString,
                    response_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryActiveExchangeRatesResponse.SerializeToString,
            ),
            'FeederDelegation': grpc.unary_unary_rpc_method_handler(
                    servicer.FeederDelegation,
                    request_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryFeederDelegationRequest.FromString,
                    response_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryFeederDelegationResponse.SerializeToString,
            ),
            'MissCounter': grpc.unary_unary_rpc_method_handler(
                    servicer.MissCounter,
                    request_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryMissCounterRequest.FromString,
                    response_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryMissCounterResponse.SerializeToString,
            ),
            'AggregatePrevote': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregatePrevote,
                    request_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregatePrevoteRequest.FromString,
                    response_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregatePrevoteResponse.SerializeToString,
            ),
            'AggregatePrevotes': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregatePrevotes,
                    request_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregatePrevotesRequest.FromString,
                    response_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregatePrevotesResponse.SerializeToString,
            ),
            'AggregateVote': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregateVote,
                    request_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregateVoteRequest.FromString,
                    response_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregateVoteResponse.SerializeToString,
            ),
            'AggregateVotes': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregateVotes,
                    request_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregateVotesRequest.FromString,
                    response_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregateVotesResponse.SerializeToString,
            ),
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'QueryRewardPoolBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryRewardPoolBalance,
                    request_deserializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryRewardPoolBalanceRequest.FromString,
                    response_serializer=persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryRewardPoolBalanceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'persistence.oracle.v1beta1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def AllExchangeRates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/persistence.oracle.v1beta1.Query/AllExchangeRates',
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAllExchangeRatesRequest.SerializeToString,
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAllExchangeRatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExchangeRate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/persistence.oracle.v1beta1.Query/ExchangeRate',
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryExchangeRateRequest.SerializeToString,
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryExchangeRateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ActiveExchangeRates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/persistence.oracle.v1beta1.Query/ActiveExchangeRates',
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryActiveExchangeRatesRequest.SerializeToString,
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryActiveExchangeRatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FeederDelegation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/persistence.oracle.v1beta1.Query/FeederDelegation',
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryFeederDelegationRequest.SerializeToString,
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryFeederDelegationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MissCounter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/persistence.oracle.v1beta1.Query/MissCounter',
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryMissCounterRequest.SerializeToString,
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryMissCounterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AggregatePrevote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/persistence.oracle.v1beta1.Query/AggregatePrevote',
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregatePrevoteRequest.SerializeToString,
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregatePrevoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AggregatePrevotes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/persistence.oracle.v1beta1.Query/AggregatePrevotes',
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregatePrevotesRequest.SerializeToString,
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregatePrevotesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AggregateVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/persistence.oracle.v1beta1.Query/AggregateVote',
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregateVoteRequest.SerializeToString,
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregateVoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AggregateVotes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/persistence.oracle.v1beta1.Query/AggregateVotes',
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregateVotesRequest.SerializeToString,
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryAggregateVotesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/persistence.oracle.v1beta1.Query/Params',
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryParamsRequest.SerializeToString,
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryRewardPoolBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/persistence.oracle.v1beta1.Query/QueryRewardPoolBalance',
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryRewardPoolBalanceRequest.SerializeToString,
            persistence_dot_oracle_dot_v1beta1_dot_query__pb2.QueryRewardPoolBalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
