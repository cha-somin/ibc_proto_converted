# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from stride.claim import query_pb2 as stride_dot_claim_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DistributorAccountBalance = channel.unary_unary(
                '/stride.claim.Query/DistributorAccountBalance',
                request_serializer=stride_dot_claim_dot_query__pb2.QueryDistributorAccountBalanceRequest.SerializeToString,
                response_deserializer=stride_dot_claim_dot_query__pb2.QueryDistributorAccountBalanceResponse.FromString,
                )
        self.Params = channel.unary_unary(
                '/stride.claim.Query/Params',
                request_serializer=stride_dot_claim_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=stride_dot_claim_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.ClaimRecord = channel.unary_unary(
                '/stride.claim.Query/ClaimRecord',
                request_serializer=stride_dot_claim_dot_query__pb2.QueryClaimRecordRequest.SerializeToString,
                response_deserializer=stride_dot_claim_dot_query__pb2.QueryClaimRecordResponse.FromString,
                )
        self.ClaimableForAction = channel.unary_unary(
                '/stride.claim.Query/ClaimableForAction',
                request_serializer=stride_dot_claim_dot_query__pb2.QueryClaimableForActionRequest.SerializeToString,
                response_deserializer=stride_dot_claim_dot_query__pb2.QueryClaimableForActionResponse.FromString,
                )
        self.TotalClaimable = channel.unary_unary(
                '/stride.claim.Query/TotalClaimable',
                request_serializer=stride_dot_claim_dot_query__pb2.QueryTotalClaimableRequest.SerializeToString,
                response_deserializer=stride_dot_claim_dot_query__pb2.QueryTotalClaimableResponse.FromString,
                )
        self.UserVestings = channel.unary_unary(
                '/stride.claim.Query/UserVestings',
                request_serializer=stride_dot_claim_dot_query__pb2.QueryUserVestingsRequest.SerializeToString,
                response_deserializer=stride_dot_claim_dot_query__pb2.QueryUserVestingsResponse.FromString,
                )
        self.ClaimStatus = channel.unary_unary(
                '/stride.claim.Query/ClaimStatus',
                request_serializer=stride_dot_claim_dot_query__pb2.QueryClaimStatusRequest.SerializeToString,
                response_deserializer=stride_dot_claim_dot_query__pb2.QueryClaimStatusResponse.FromString,
                )
        self.ClaimMetadata = channel.unary_unary(
                '/stride.claim.Query/ClaimMetadata',
                request_serializer=stride_dot_claim_dot_query__pb2.QueryClaimMetadataRequest.SerializeToString,
                response_deserializer=stride_dot_claim_dot_query__pb2.QueryClaimMetadataResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def DistributorAccountBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Params(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClaimRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClaimableForAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TotalClaimable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserVestings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClaimStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClaimMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DistributorAccountBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.DistributorAccountBalance,
                    request_deserializer=stride_dot_claim_dot_query__pb2.QueryDistributorAccountBalanceRequest.FromString,
                    response_serializer=stride_dot_claim_dot_query__pb2.QueryDistributorAccountBalanceResponse.SerializeToString,
            ),
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=stride_dot_claim_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=stride_dot_claim_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'ClaimRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.ClaimRecord,
                    request_deserializer=stride_dot_claim_dot_query__pb2.QueryClaimRecordRequest.FromString,
                    response_serializer=stride_dot_claim_dot_query__pb2.QueryClaimRecordResponse.SerializeToString,
            ),
            'ClaimableForAction': grpc.unary_unary_rpc_method_handler(
                    servicer.ClaimableForAction,
                    request_deserializer=stride_dot_claim_dot_query__pb2.QueryClaimableForActionRequest.FromString,
                    response_serializer=stride_dot_claim_dot_query__pb2.QueryClaimableForActionResponse.SerializeToString,
            ),
            'TotalClaimable': grpc.unary_unary_rpc_method_handler(
                    servicer.TotalClaimable,
                    request_deserializer=stride_dot_claim_dot_query__pb2.QueryTotalClaimableRequest.FromString,
                    response_serializer=stride_dot_claim_dot_query__pb2.QueryTotalClaimableResponse.SerializeToString,
            ),
            'UserVestings': grpc.unary_unary_rpc_method_handler(
                    servicer.UserVestings,
                    request_deserializer=stride_dot_claim_dot_query__pb2.QueryUserVestingsRequest.FromString,
                    response_serializer=stride_dot_claim_dot_query__pb2.QueryUserVestingsResponse.SerializeToString,
            ),
            'ClaimStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ClaimStatus,
                    request_deserializer=stride_dot_claim_dot_query__pb2.QueryClaimStatusRequest.FromString,
                    response_serializer=stride_dot_claim_dot_query__pb2.QueryClaimStatusResponse.SerializeToString,
            ),
            'ClaimMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ClaimMetadata,
                    request_deserializer=stride_dot_claim_dot_query__pb2.QueryClaimMetadataRequest.FromString,
                    response_serializer=stride_dot_claim_dot_query__pb2.QueryClaimMetadataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stride.claim.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def DistributorAccountBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.claim.Query/DistributorAccountBalance',
            stride_dot_claim_dot_query__pb2.QueryDistributorAccountBalanceRequest.SerializeToString,
            stride_dot_claim_dot_query__pb2.QueryDistributorAccountBalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.claim.Query/Params',
            stride_dot_claim_dot_query__pb2.QueryParamsRequest.SerializeToString,
            stride_dot_claim_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClaimRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.claim.Query/ClaimRecord',
            stride_dot_claim_dot_query__pb2.QueryClaimRecordRequest.SerializeToString,
            stride_dot_claim_dot_query__pb2.QueryClaimRecordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClaimableForAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.claim.Query/ClaimableForAction',
            stride_dot_claim_dot_query__pb2.QueryClaimableForActionRequest.SerializeToString,
            stride_dot_claim_dot_query__pb2.QueryClaimableForActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TotalClaimable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.claim.Query/TotalClaimable',
            stride_dot_claim_dot_query__pb2.QueryTotalClaimableRequest.SerializeToString,
            stride_dot_claim_dot_query__pb2.QueryTotalClaimableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserVestings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.claim.Query/UserVestings',
            stride_dot_claim_dot_query__pb2.QueryUserVestingsRequest.SerializeToString,
            stride_dot_claim_dot_query__pb2.QueryUserVestingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClaimStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.claim.Query/ClaimStatus',
            stride_dot_claim_dot_query__pb2.QueryClaimStatusRequest.SerializeToString,
            stride_dot_claim_dot_query__pb2.QueryClaimStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClaimMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.claim.Query/ClaimMetadata',
            stride_dot_claim_dot_query__pb2.QueryClaimMetadataRequest.SerializeToString,
            stride_dot_claim_dot_query__pb2.QueryClaimMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
