# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from stride.stakeibc import query_pb2 as stride_dot_stakeibc_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/stride.stakeibc.Query/Params',
                request_serializer=stride_dot_stakeibc_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.Validators = channel.unary_unary(
                '/stride.stakeibc.Query/Validators',
                request_serializer=stride_dot_stakeibc_dot_query__pb2.QueryGetValidatorsRequest.SerializeToString,
                response_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryGetValidatorsResponse.FromString,
                )
        self.HostZone = channel.unary_unary(
                '/stride.stakeibc.Query/HostZone',
                request_serializer=stride_dot_stakeibc_dot_query__pb2.QueryGetHostZoneRequest.SerializeToString,
                response_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryGetHostZoneResponse.FromString,
                )
        self.HostZoneAll = channel.unary_unary(
                '/stride.stakeibc.Query/HostZoneAll',
                request_serializer=stride_dot_stakeibc_dot_query__pb2.QueryAllHostZoneRequest.SerializeToString,
                response_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryAllHostZoneResponse.FromString,
                )
        self.ModuleAddress = channel.unary_unary(
                '/stride.stakeibc.Query/ModuleAddress',
                request_serializer=stride_dot_stakeibc_dot_query__pb2.QueryModuleAddressRequest.SerializeToString,
                response_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryModuleAddressResponse.FromString,
                )
        self.InterchainAccountFromAddress = channel.unary_unary(
                '/stride.stakeibc.Query/InterchainAccountFromAddress',
                request_serializer=stride_dot_stakeibc_dot_query__pb2.QueryInterchainAccountFromAddressRequest.SerializeToString,
                response_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryInterchainAccountFromAddressResponse.FromString,
                )
        self.EpochTracker = channel.unary_unary(
                '/stride.stakeibc.Query/EpochTracker',
                request_serializer=stride_dot_stakeibc_dot_query__pb2.QueryGetEpochTrackerRequest.SerializeToString,
                response_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryGetEpochTrackerResponse.FromString,
                )
        self.EpochTrackerAll = channel.unary_unary(
                '/stride.stakeibc.Query/EpochTrackerAll',
                request_serializer=stride_dot_stakeibc_dot_query__pb2.QueryAllEpochTrackerRequest.SerializeToString,
                response_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryAllEpochTrackerResponse.FromString,
                )
        self.NextPacketSequence = channel.unary_unary(
                '/stride.stakeibc.Query/NextPacketSequence',
                request_serializer=stride_dot_stakeibc_dot_query__pb2.QueryGetNextPacketSequenceRequest.SerializeToString,
                response_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryGetNextPacketSequenceResponse.FromString,
                )
        self.AddressUnbondings = channel.unary_unary(
                '/stride.stakeibc.Query/AddressUnbondings',
                request_serializer=stride_dot_stakeibc_dot_query__pb2.QueryAddressUnbondings.SerializeToString,
                response_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryAddressUnbondingsResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def Params(self, request, context):
        """Parameters queries the parameters of the module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Validators(self, request, context):
        """Queries a Validator by host zone.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HostZone(self, request, context):
        """Queries a HostZone by id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HostZoneAll(self, request, context):
        """Queries a list of HostZone items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModuleAddress(self, request, context):
        """Queries a list of ModuleAddress items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InterchainAccountFromAddress(self, request, context):
        """QueryInterchainAccountFromAddress returns the interchain account for given
        owner address on a given connection pair
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EpochTracker(self, request, context):
        """Queries a EpochTracker by index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EpochTrackerAll(self, request, context):
        """Queries a list of EpochTracker items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NextPacketSequence(self, request, context):
        """Queries the next packet sequence for one for a given channel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddressUnbondings(self, request, context):
        """Queries an address's unbondings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=stride_dot_stakeibc_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'Validators': grpc.unary_unary_rpc_method_handler(
                    servicer.Validators,
                    request_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryGetValidatorsRequest.FromString,
                    response_serializer=stride_dot_stakeibc_dot_query__pb2.QueryGetValidatorsResponse.SerializeToString,
            ),
            'HostZone': grpc.unary_unary_rpc_method_handler(
                    servicer.HostZone,
                    request_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryGetHostZoneRequest.FromString,
                    response_serializer=stride_dot_stakeibc_dot_query__pb2.QueryGetHostZoneResponse.SerializeToString,
            ),
            'HostZoneAll': grpc.unary_unary_rpc_method_handler(
                    servicer.HostZoneAll,
                    request_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryAllHostZoneRequest.FromString,
                    response_serializer=stride_dot_stakeibc_dot_query__pb2.QueryAllHostZoneResponse.SerializeToString,
            ),
            'ModuleAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.ModuleAddress,
                    request_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryModuleAddressRequest.FromString,
                    response_serializer=stride_dot_stakeibc_dot_query__pb2.QueryModuleAddressResponse.SerializeToString,
            ),
            'InterchainAccountFromAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.InterchainAccountFromAddress,
                    request_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryInterchainAccountFromAddressRequest.FromString,
                    response_serializer=stride_dot_stakeibc_dot_query__pb2.QueryInterchainAccountFromAddressResponse.SerializeToString,
            ),
            'EpochTracker': grpc.unary_unary_rpc_method_handler(
                    servicer.EpochTracker,
                    request_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryGetEpochTrackerRequest.FromString,
                    response_serializer=stride_dot_stakeibc_dot_query__pb2.QueryGetEpochTrackerResponse.SerializeToString,
            ),
            'EpochTrackerAll': grpc.unary_unary_rpc_method_handler(
                    servicer.EpochTrackerAll,
                    request_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryAllEpochTrackerRequest.FromString,
                    response_serializer=stride_dot_stakeibc_dot_query__pb2.QueryAllEpochTrackerResponse.SerializeToString,
            ),
            'NextPacketSequence': grpc.unary_unary_rpc_method_handler(
                    servicer.NextPacketSequence,
                    request_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryGetNextPacketSequenceRequest.FromString,
                    response_serializer=stride_dot_stakeibc_dot_query__pb2.QueryGetNextPacketSequenceResponse.SerializeToString,
            ),
            'AddressUnbondings': grpc.unary_unary_rpc_method_handler(
                    servicer.AddressUnbondings,
                    request_deserializer=stride_dot_stakeibc_dot_query__pb2.QueryAddressUnbondings.FromString,
                    response_serializer=stride_dot_stakeibc_dot_query__pb2.QueryAddressUnbondingsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'stride.stakeibc.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.stakeibc.Query/Params',
            stride_dot_stakeibc_dot_query__pb2.QueryParamsRequest.SerializeToString,
            stride_dot_stakeibc_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Validators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.stakeibc.Query/Validators',
            stride_dot_stakeibc_dot_query__pb2.QueryGetValidatorsRequest.SerializeToString,
            stride_dot_stakeibc_dot_query__pb2.QueryGetValidatorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HostZone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.stakeibc.Query/HostZone',
            stride_dot_stakeibc_dot_query__pb2.QueryGetHostZoneRequest.SerializeToString,
            stride_dot_stakeibc_dot_query__pb2.QueryGetHostZoneResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HostZoneAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.stakeibc.Query/HostZoneAll',
            stride_dot_stakeibc_dot_query__pb2.QueryAllHostZoneRequest.SerializeToString,
            stride_dot_stakeibc_dot_query__pb2.QueryAllHostZoneResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModuleAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.stakeibc.Query/ModuleAddress',
            stride_dot_stakeibc_dot_query__pb2.QueryModuleAddressRequest.SerializeToString,
            stride_dot_stakeibc_dot_query__pb2.QueryModuleAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InterchainAccountFromAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.stakeibc.Query/InterchainAccountFromAddress',
            stride_dot_stakeibc_dot_query__pb2.QueryInterchainAccountFromAddressRequest.SerializeToString,
            stride_dot_stakeibc_dot_query__pb2.QueryInterchainAccountFromAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EpochTracker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.stakeibc.Query/EpochTracker',
            stride_dot_stakeibc_dot_query__pb2.QueryGetEpochTrackerRequest.SerializeToString,
            stride_dot_stakeibc_dot_query__pb2.QueryGetEpochTrackerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EpochTrackerAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.stakeibc.Query/EpochTrackerAll',
            stride_dot_stakeibc_dot_query__pb2.QueryAllEpochTrackerRequest.SerializeToString,
            stride_dot_stakeibc_dot_query__pb2.QueryAllEpochTrackerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NextPacketSequence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.stakeibc.Query/NextPacketSequence',
            stride_dot_stakeibc_dot_query__pb2.QueryGetNextPacketSequenceRequest.SerializeToString,
            stride_dot_stakeibc_dot_query__pb2.QueryGetNextPacketSequenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddressUnbondings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/stride.stakeibc.Query/AddressUnbondings',
            stride_dot_stakeibc_dot_query__pb2.QueryAddressUnbondings.SerializeToString,
            stride_dot_stakeibc_dot_query__pb2.QueryAddressUnbondingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
