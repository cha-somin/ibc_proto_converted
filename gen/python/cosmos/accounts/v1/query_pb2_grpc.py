# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cosmos.accounts.v1 import query_pb2 as cosmos_dot_accounts_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query defines the Query service for the x/accounts module.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AccountQuery = channel.unary_unary(
                '/cosmos.accounts.v1.Query/AccountQuery',
                request_serializer=cosmos_dot_accounts_dot_v1_dot_query__pb2.AccountQueryRequest.SerializeToString,
                response_deserializer=cosmos_dot_accounts_dot_v1_dot_query__pb2.AccountQueryResponse.FromString,
                )
        self.Schema = channel.unary_unary(
                '/cosmos.accounts.v1.Query/Schema',
                request_serializer=cosmos_dot_accounts_dot_v1_dot_query__pb2.SchemaRequest.SerializeToString,
                response_deserializer=cosmos_dot_accounts_dot_v1_dot_query__pb2.SchemaResponse.FromString,
                )
        self.AccountType = channel.unary_unary(
                '/cosmos.accounts.v1.Query/AccountType',
                request_serializer=cosmos_dot_accounts_dot_v1_dot_query__pb2.AccountTypeRequest.SerializeToString,
                response_deserializer=cosmos_dot_accounts_dot_v1_dot_query__pb2.AccountTypeResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the Query service for the x/accounts module.
    """

    def AccountQuery(self, request, context):
        """AccountQuery runs an account query.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Schema(self, request, context):
        """Schema returns an x/account schema. Unstable.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AccountType(self, request, context):
        """AccountType returns the account type for an address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AccountQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountQuery,
                    request_deserializer=cosmos_dot_accounts_dot_v1_dot_query__pb2.AccountQueryRequest.FromString,
                    response_serializer=cosmos_dot_accounts_dot_v1_dot_query__pb2.AccountQueryResponse.SerializeToString,
            ),
            'Schema': grpc.unary_unary_rpc_method_handler(
                    servicer.Schema,
                    request_deserializer=cosmos_dot_accounts_dot_v1_dot_query__pb2.SchemaRequest.FromString,
                    response_serializer=cosmos_dot_accounts_dot_v1_dot_query__pb2.SchemaResponse.SerializeToString,
            ),
            'AccountType': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountType,
                    request_deserializer=cosmos_dot_accounts_dot_v1_dot_query__pb2.AccountTypeRequest.FromString,
                    response_serializer=cosmos_dot_accounts_dot_v1_dot_query__pb2.AccountTypeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cosmos.accounts.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the Query service for the x/accounts module.
    """

    @staticmethod
    def AccountQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosmos.accounts.v1.Query/AccountQuery',
            cosmos_dot_accounts_dot_v1_dot_query__pb2.AccountQueryRequest.SerializeToString,
            cosmos_dot_accounts_dot_v1_dot_query__pb2.AccountQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Schema(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosmos.accounts.v1.Query/Schema',
            cosmos_dot_accounts_dot_v1_dot_query__pb2.SchemaRequest.SerializeToString,
            cosmos_dot_accounts_dot_v1_dot_query__pb2.SchemaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AccountType(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cosmos.accounts.v1.Query/AccountType',
            cosmos_dot_accounts_dot_v1_dot_query__pb2.AccountTypeRequest.SerializeToString,
            cosmos_dot_accounts_dot_v1_dot_query__pb2.AccountTypeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
