# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from coreum.asset.ft.v1 import tx_pb2 as coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2


class MsgStub(object):
    """Msg defines the Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Issue = channel.unary_unary(
                '/coreum.asset.ft.v1.Msg/Issue',
                request_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgIssue.SerializeToString,
                response_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
                )
        self.Mint = channel.unary_unary(
                '/coreum.asset.ft.v1.Msg/Mint',
                request_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgMint.SerializeToString,
                response_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
                )
        self.Burn = channel.unary_unary(
                '/coreum.asset.ft.v1.Msg/Burn',
                request_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgBurn.SerializeToString,
                response_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
                )
        self.Freeze = channel.unary_unary(
                '/coreum.asset.ft.v1.Msg/Freeze',
                request_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgFreeze.SerializeToString,
                response_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
                )
        self.Unfreeze = channel.unary_unary(
                '/coreum.asset.ft.v1.Msg/Unfreeze',
                request_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgUnfreeze.SerializeToString,
                response_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
                )
        self.GloballyFreeze = channel.unary_unary(
                '/coreum.asset.ft.v1.Msg/GloballyFreeze',
                request_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgGloballyFreeze.SerializeToString,
                response_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
                )
        self.GloballyUnfreeze = channel.unary_unary(
                '/coreum.asset.ft.v1.Msg/GloballyUnfreeze',
                request_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgGloballyUnfreeze.SerializeToString,
                response_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
                )
        self.SetWhitelistedLimit = channel.unary_unary(
                '/coreum.asset.ft.v1.Msg/SetWhitelistedLimit',
                request_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgSetWhitelistedLimit.SerializeToString,
                response_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the Msg service.
    """

    def Issue(self, request, context):
        """Issue defines a method to issue a new fungible token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Mint(self, request, context):
        """Mint mints new fungible tokens.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Burn(self, request, context):
        """Burn burns the specified fungible tokens from senders balance if the sender has enough balance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Freeze(self, request, context):
        """Freeze freezes a part of the fungible tokens in an
        account, only if the freezable feature is enabled on that token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unfreeze(self, request, context):
        """Unfreeze unfreezes a part of the frozen fungible tokens in an
        account, only if there are such frozen tokens on that account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GloballyFreeze(self, request, context):
        """GloballyFreeze freezes fungible token so no operations are allowed with it before unfrozen.
        This operation is idempotent so global freeze of already frozen token does nothing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GloballyUnfreeze(self, request, context):
        """GloballyUnfreeze unfreezes fungible token and unblocks basic operations on it.
        This operation is idempotent so global unfreezing of non-frozen token does nothing.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetWhitelistedLimit(self, request, context):
        """SetWhitelistedLimit sets the limit of how many tokens a specific account may hold.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Issue': grpc.unary_unary_rpc_method_handler(
                    servicer.Issue,
                    request_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgIssue.FromString,
                    response_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.SerializeToString,
            ),
            'Mint': grpc.unary_unary_rpc_method_handler(
                    servicer.Mint,
                    request_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgMint.FromString,
                    response_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.SerializeToString,
            ),
            'Burn': grpc.unary_unary_rpc_method_handler(
                    servicer.Burn,
                    request_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgBurn.FromString,
                    response_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.SerializeToString,
            ),
            'Freeze': grpc.unary_unary_rpc_method_handler(
                    servicer.Freeze,
                    request_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgFreeze.FromString,
                    response_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.SerializeToString,
            ),
            'Unfreeze': grpc.unary_unary_rpc_method_handler(
                    servicer.Unfreeze,
                    request_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgUnfreeze.FromString,
                    response_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.SerializeToString,
            ),
            'GloballyFreeze': grpc.unary_unary_rpc_method_handler(
                    servicer.GloballyFreeze,
                    request_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgGloballyFreeze.FromString,
                    response_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.SerializeToString,
            ),
            'GloballyUnfreeze': grpc.unary_unary_rpc_method_handler(
                    servicer.GloballyUnfreeze,
                    request_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgGloballyUnfreeze.FromString,
                    response_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.SerializeToString,
            ),
            'SetWhitelistedLimit': grpc.unary_unary_rpc_method_handler(
                    servicer.SetWhitelistedLimit,
                    request_deserializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgSetWhitelistedLimit.FromString,
                    response_serializer=coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coreum.asset.ft.v1.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the Msg service.
    """

    @staticmethod
    def Issue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coreum.asset.ft.v1.Msg/Issue',
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgIssue.SerializeToString,
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Mint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coreum.asset.ft.v1.Msg/Mint',
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgMint.SerializeToString,
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Burn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coreum.asset.ft.v1.Msg/Burn',
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgBurn.SerializeToString,
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Freeze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coreum.asset.ft.v1.Msg/Freeze',
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgFreeze.SerializeToString,
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unfreeze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coreum.asset.ft.v1.Msg/Unfreeze',
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgUnfreeze.SerializeToString,
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GloballyFreeze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coreum.asset.ft.v1.Msg/GloballyFreeze',
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgGloballyFreeze.SerializeToString,
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GloballyUnfreeze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coreum.asset.ft.v1.Msg/GloballyUnfreeze',
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgGloballyUnfreeze.SerializeToString,
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetWhitelistedLimit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coreum.asset.ft.v1.Msg/SetWhitelistedLimit',
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.MsgSetWhitelistedLimit.SerializeToString,
            coreum_dot_asset_dot_ft_dot_v1_dot_tx__pb2.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
