# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cudos.marketplace import query_pb2 as cudos_dot_marketplace_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/cudoventures.cudosnode.marketplace.Query/Params',
                request_serializer=cudos_dot_marketplace_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=cudos_dot_marketplace_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.Collection = channel.unary_unary(
                '/cudoventures.cudosnode.marketplace.Query/Collection',
                request_serializer=cudos_dot_marketplace_dot_query__pb2.QueryGetCollectionRequest.SerializeToString,
                response_deserializer=cudos_dot_marketplace_dot_query__pb2.QueryGetCollectionResponse.FromString,
                )
        self.CollectionAll = channel.unary_unary(
                '/cudoventures.cudosnode.marketplace.Query/CollectionAll',
                request_serializer=cudos_dot_marketplace_dot_query__pb2.QueryAllCollectionRequest.SerializeToString,
                response_deserializer=cudos_dot_marketplace_dot_query__pb2.QueryAllCollectionResponse.FromString,
                )
        self.Nft = channel.unary_unary(
                '/cudoventures.cudosnode.marketplace.Query/Nft',
                request_serializer=cudos_dot_marketplace_dot_query__pb2.QueryGetNftRequest.SerializeToString,
                response_deserializer=cudos_dot_marketplace_dot_query__pb2.QueryGetNftResponse.FromString,
                )
        self.NftAll = channel.unary_unary(
                '/cudoventures.cudosnode.marketplace.Query/NftAll',
                request_serializer=cudos_dot_marketplace_dot_query__pb2.QueryAllNftRequest.SerializeToString,
                response_deserializer=cudos_dot_marketplace_dot_query__pb2.QueryAllNftResponse.FromString,
                )
        self.CollectionByDenomId = channel.unary_unary(
                '/cudoventures.cudosnode.marketplace.Query/CollectionByDenomId',
                request_serializer=cudos_dot_marketplace_dot_query__pb2.QueryCollectionByDenomIdRequest.SerializeToString,
                response_deserializer=cudos_dot_marketplace_dot_query__pb2.QueryCollectionByDenomIdResponse.FromString,
                )
        self.ListAdmins = channel.unary_unary(
                '/cudoventures.cudosnode.marketplace.Query/ListAdmins',
                request_serializer=cudos_dot_marketplace_dot_query__pb2.QueryListAdminsRequest.SerializeToString,
                response_deserializer=cudos_dot_marketplace_dot_query__pb2.QueryListAdminsResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def Params(self, request, context):
        """Parameters queries the parameters of the module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Collection(self, request, context):
        """Queries a Collection for sale by id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CollectionAll(self, request, context):
        """Queries all Collection items for sale.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Nft(self, request, context):
        """Queries a Nft for sale by id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NftAll(self, request, context):
        """Queries all Nft items for sale.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CollectionByDenomId(self, request, context):
        """Queries a list of CollectionByDenomId items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAdmins(self, request, context):
        """Queries a list of ListAdmins items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=cudos_dot_marketplace_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=cudos_dot_marketplace_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'Collection': grpc.unary_unary_rpc_method_handler(
                    servicer.Collection,
                    request_deserializer=cudos_dot_marketplace_dot_query__pb2.QueryGetCollectionRequest.FromString,
                    response_serializer=cudos_dot_marketplace_dot_query__pb2.QueryGetCollectionResponse.SerializeToString,
            ),
            'CollectionAll': grpc.unary_unary_rpc_method_handler(
                    servicer.CollectionAll,
                    request_deserializer=cudos_dot_marketplace_dot_query__pb2.QueryAllCollectionRequest.FromString,
                    response_serializer=cudos_dot_marketplace_dot_query__pb2.QueryAllCollectionResponse.SerializeToString,
            ),
            'Nft': grpc.unary_unary_rpc_method_handler(
                    servicer.Nft,
                    request_deserializer=cudos_dot_marketplace_dot_query__pb2.QueryGetNftRequest.FromString,
                    response_serializer=cudos_dot_marketplace_dot_query__pb2.QueryGetNftResponse.SerializeToString,
            ),
            'NftAll': grpc.unary_unary_rpc_method_handler(
                    servicer.NftAll,
                    request_deserializer=cudos_dot_marketplace_dot_query__pb2.QueryAllNftRequest.FromString,
                    response_serializer=cudos_dot_marketplace_dot_query__pb2.QueryAllNftResponse.SerializeToString,
            ),
            'CollectionByDenomId': grpc.unary_unary_rpc_method_handler(
                    servicer.CollectionByDenomId,
                    request_deserializer=cudos_dot_marketplace_dot_query__pb2.QueryCollectionByDenomIdRequest.FromString,
                    response_serializer=cudos_dot_marketplace_dot_query__pb2.QueryCollectionByDenomIdResponse.SerializeToString,
            ),
            'ListAdmins': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAdmins,
                    request_deserializer=cudos_dot_marketplace_dot_query__pb2.QueryListAdminsRequest.FromString,
                    response_serializer=cudos_dot_marketplace_dot_query__pb2.QueryListAdminsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cudoventures.cudosnode.marketplace.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cudoventures.cudosnode.marketplace.Query/Params',
            cudos_dot_marketplace_dot_query__pb2.QueryParamsRequest.SerializeToString,
            cudos_dot_marketplace_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cudoventures.cudosnode.marketplace.Query/Collection',
            cudos_dot_marketplace_dot_query__pb2.QueryGetCollectionRequest.SerializeToString,
            cudos_dot_marketplace_dot_query__pb2.QueryGetCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CollectionAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cudoventures.cudosnode.marketplace.Query/CollectionAll',
            cudos_dot_marketplace_dot_query__pb2.QueryAllCollectionRequest.SerializeToString,
            cudos_dot_marketplace_dot_query__pb2.QueryAllCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Nft(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cudoventures.cudosnode.marketplace.Query/Nft',
            cudos_dot_marketplace_dot_query__pb2.QueryGetNftRequest.SerializeToString,
            cudos_dot_marketplace_dot_query__pb2.QueryGetNftResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NftAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cudoventures.cudosnode.marketplace.Query/NftAll',
            cudos_dot_marketplace_dot_query__pb2.QueryAllNftRequest.SerializeToString,
            cudos_dot_marketplace_dot_query__pb2.QueryAllNftResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CollectionByDenomId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cudoventures.cudosnode.marketplace.Query/CollectionByDenomId',
            cudos_dot_marketplace_dot_query__pb2.QueryCollectionByDenomIdRequest.SerializeToString,
            cudos_dot_marketplace_dot_query__pb2.QueryCollectionByDenomIdResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAdmins(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cudoventures.cudosnode.marketplace.Query/ListAdmins',
            cudos_dot_marketplace_dot_query__pb2.QueryListAdminsRequest.SerializeToString,
            cudos_dot_marketplace_dot_query__pb2.QueryListAdminsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
