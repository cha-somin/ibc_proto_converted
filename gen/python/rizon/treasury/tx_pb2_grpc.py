# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rizon.treasury import tx_pb2 as rizon_dot_treasury_dot_tx__pb2


class MsgStub(object):
    """Msg defines the treasury Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Mint = channel.unary_unary(
                '/rizonworld.rizon.treasury.Msg/Mint',
                request_serializer=rizon_dot_treasury_dot_tx__pb2.MsgMintRequest.SerializeToString,
                response_deserializer=rizon_dot_treasury_dot_tx__pb2.MsgMintResponse.FromString,
                )
        self.Burn = channel.unary_unary(
                '/rizonworld.rizon.treasury.Msg/Burn',
                request_serializer=rizon_dot_treasury_dot_tx__pb2.MsgBurnRequest.SerializeToString,
                response_deserializer=rizon_dot_treasury_dot_tx__pb2.MsgBurnResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the treasury Msg service.
    """

    def Mint(self, request, context):
        """Mint defines a method for minting coins
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Burn(self, request, context):
        """Burn defines a method for burning coins
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Mint': grpc.unary_unary_rpc_method_handler(
                    servicer.Mint,
                    request_deserializer=rizon_dot_treasury_dot_tx__pb2.MsgMintRequest.FromString,
                    response_serializer=rizon_dot_treasury_dot_tx__pb2.MsgMintResponse.SerializeToString,
            ),
            'Burn': grpc.unary_unary_rpc_method_handler(
                    servicer.Burn,
                    request_deserializer=rizon_dot_treasury_dot_tx__pb2.MsgBurnRequest.FromString,
                    response_serializer=rizon_dot_treasury_dot_tx__pb2.MsgBurnResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rizonworld.rizon.treasury.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the treasury Msg service.
    """

    @staticmethod
    def Mint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rizonworld.rizon.treasury.Msg/Mint',
            rizon_dot_treasury_dot_tx__pb2.MsgMintRequest.SerializeToString,
            rizon_dot_treasury_dot_tx__pb2.MsgMintResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Burn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rizonworld.rizon.treasury.Msg/Burn',
            rizon_dot_treasury_dot_tx__pb2.MsgBurnRequest.SerializeToString,
            rizon_dot_treasury_dot_tx__pb2.MsgBurnResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
