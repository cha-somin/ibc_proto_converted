# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from bcna.bcna import query_pb2 as bcna_dot_bcna_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/bitcannaglobal.bcna.bcna.Query/Params',
                request_serializer=bcna_dot_bcna_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=bcna_dot_bcna_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.Bitcannaid = channel.unary_unary(
                '/bitcannaglobal.bcna.bcna.Query/Bitcannaid',
                request_serializer=bcna_dot_bcna_dot_query__pb2.QueryGetBitcannaidRequest.SerializeToString,
                response_deserializer=bcna_dot_bcna_dot_query__pb2.QueryGetBitcannaidResponse.FromString,
                )
        self.BitcannaidAll = channel.unary_unary(
                '/bitcannaglobal.bcna.bcna.Query/BitcannaidAll',
                request_serializer=bcna_dot_bcna_dot_query__pb2.QueryAllBitcannaidRequest.SerializeToString,
                response_deserializer=bcna_dot_bcna_dot_query__pb2.QueryAllBitcannaidResponse.FromString,
                )
        self.BitcannaidByBcnaid = channel.unary_unary(
                '/bitcannaglobal.bcna.bcna.Query/BitcannaidByBcnaid',
                request_serializer=bcna_dot_bcna_dot_query__pb2.QueryGetBitcannaidByBcnaidRequest.SerializeToString,
                response_deserializer=bcna_dot_bcna_dot_query__pb2.QueryGetBitcannaidByBcnaidResponse.FromString,
                )
        self.Supplychain = channel.unary_unary(
                '/bitcannaglobal.bcna.bcna.Query/Supplychain',
                request_serializer=bcna_dot_bcna_dot_query__pb2.QueryGetSupplychainRequest.SerializeToString,
                response_deserializer=bcna_dot_bcna_dot_query__pb2.QueryGetSupplychainResponse.FromString,
                )
        self.SupplychainAll = channel.unary_unary(
                '/bitcannaglobal.bcna.bcna.Query/SupplychainAll',
                request_serializer=bcna_dot_bcna_dot_query__pb2.QueryAllSupplychainRequest.SerializeToString,
                response_deserializer=bcna_dot_bcna_dot_query__pb2.QueryAllSupplychainResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def Params(self, request, context):
        """Parameters queries the parameters of the module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Bitcannaid(self, request, context):
        """Queries a Bitcannaid by id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BitcannaidAll(self, request, context):
        """Queries a list of Bitcannaid items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BitcannaidByBcnaid(self, request, context):
        """Queries a Bitcannaid by bcnaid.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Supplychain(self, request, context):
        """Queries a Supplychain by id.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SupplychainAll(self, request, context):
        """Queries a list of Supplychain items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=bcna_dot_bcna_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=bcna_dot_bcna_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'Bitcannaid': grpc.unary_unary_rpc_method_handler(
                    servicer.Bitcannaid,
                    request_deserializer=bcna_dot_bcna_dot_query__pb2.QueryGetBitcannaidRequest.FromString,
                    response_serializer=bcna_dot_bcna_dot_query__pb2.QueryGetBitcannaidResponse.SerializeToString,
            ),
            'BitcannaidAll': grpc.unary_unary_rpc_method_handler(
                    servicer.BitcannaidAll,
                    request_deserializer=bcna_dot_bcna_dot_query__pb2.QueryAllBitcannaidRequest.FromString,
                    response_serializer=bcna_dot_bcna_dot_query__pb2.QueryAllBitcannaidResponse.SerializeToString,
            ),
            'BitcannaidByBcnaid': grpc.unary_unary_rpc_method_handler(
                    servicer.BitcannaidByBcnaid,
                    request_deserializer=bcna_dot_bcna_dot_query__pb2.QueryGetBitcannaidByBcnaidRequest.FromString,
                    response_serializer=bcna_dot_bcna_dot_query__pb2.QueryGetBitcannaidByBcnaidResponse.SerializeToString,
            ),
            'Supplychain': grpc.unary_unary_rpc_method_handler(
                    servicer.Supplychain,
                    request_deserializer=bcna_dot_bcna_dot_query__pb2.QueryGetSupplychainRequest.FromString,
                    response_serializer=bcna_dot_bcna_dot_query__pb2.QueryGetSupplychainResponse.SerializeToString,
            ),
            'SupplychainAll': grpc.unary_unary_rpc_method_handler(
                    servicer.SupplychainAll,
                    request_deserializer=bcna_dot_bcna_dot_query__pb2.QueryAllSupplychainRequest.FromString,
                    response_serializer=bcna_dot_bcna_dot_query__pb2.QueryAllSupplychainResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'bitcannaglobal.bcna.bcna.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bitcannaglobal.bcna.bcna.Query/Params',
            bcna_dot_bcna_dot_query__pb2.QueryParamsRequest.SerializeToString,
            bcna_dot_bcna_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Bitcannaid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bitcannaglobal.bcna.bcna.Query/Bitcannaid',
            bcna_dot_bcna_dot_query__pb2.QueryGetBitcannaidRequest.SerializeToString,
            bcna_dot_bcna_dot_query__pb2.QueryGetBitcannaidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BitcannaidAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bitcannaglobal.bcna.bcna.Query/BitcannaidAll',
            bcna_dot_bcna_dot_query__pb2.QueryAllBitcannaidRequest.SerializeToString,
            bcna_dot_bcna_dot_query__pb2.QueryAllBitcannaidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BitcannaidByBcnaid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bitcannaglobal.bcna.bcna.Query/BitcannaidByBcnaid',
            bcna_dot_bcna_dot_query__pb2.QueryGetBitcannaidByBcnaidRequest.SerializeToString,
            bcna_dot_bcna_dot_query__pb2.QueryGetBitcannaidByBcnaidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Supplychain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bitcannaglobal.bcna.bcna.Query/Supplychain',
            bcna_dot_bcna_dot_query__pb2.QueryGetSupplychainRequest.SerializeToString,
            bcna_dot_bcna_dot_query__pb2.QueryGetSupplychainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SupplychainAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/bitcannaglobal.bcna.bcna.Query/SupplychainAll',
            bcna_dot_bcna_dot_query__pb2.QueryAllSupplychainRequest.SerializeToString,
            bcna_dot_bcna_dot_query__pb2.QueryAllSupplychainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
