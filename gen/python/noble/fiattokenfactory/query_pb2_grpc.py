# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from noble.fiattokenfactory import query_pb2 as noble_dot_fiattokenfactory_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/noble.fiattokenfactory.Query/Params',
                request_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.Blacklisted = channel.unary_unary(
                '/noble.fiattokenfactory.Query/Blacklisted',
                request_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetBlacklistedRequest.SerializeToString,
                response_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetBlacklistedResponse.FromString,
                )
        self.BlacklistedAll = channel.unary_unary(
                '/noble.fiattokenfactory.Query/BlacklistedAll',
                request_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryAllBlacklistedRequest.SerializeToString,
                response_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryAllBlacklistedResponse.FromString,
                )
        self.Paused = channel.unary_unary(
                '/noble.fiattokenfactory.Query/Paused',
                request_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetPausedRequest.SerializeToString,
                response_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetPausedResponse.FromString,
                )
        self.MasterMinter = channel.unary_unary(
                '/noble.fiattokenfactory.Query/MasterMinter',
                request_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMasterMinterRequest.SerializeToString,
                response_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMasterMinterResponse.FromString,
                )
        self.Minters = channel.unary_unary(
                '/noble.fiattokenfactory.Query/Minters',
                request_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMintersRequest.SerializeToString,
                response_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMintersResponse.FromString,
                )
        self.MintersAll = channel.unary_unary(
                '/noble.fiattokenfactory.Query/MintersAll',
                request_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryAllMintersRequest.SerializeToString,
                response_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryAllMintersResponse.FromString,
                )
        self.Pauser = channel.unary_unary(
                '/noble.fiattokenfactory.Query/Pauser',
                request_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetPauserRequest.SerializeToString,
                response_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetPauserResponse.FromString,
                )
        self.Blacklister = channel.unary_unary(
                '/noble.fiattokenfactory.Query/Blacklister',
                request_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetBlacklisterRequest.SerializeToString,
                response_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetBlacklisterResponse.FromString,
                )
        self.Owner = channel.unary_unary(
                '/noble.fiattokenfactory.Query/Owner',
                request_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetOwnerRequest.SerializeToString,
                response_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetOwnerResponse.FromString,
                )
        self.MinterController = channel.unary_unary(
                '/noble.fiattokenfactory.Query/MinterController',
                request_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMinterControllerRequest.SerializeToString,
                response_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMinterControllerResponse.FromString,
                )
        self.MinterControllerAll = channel.unary_unary(
                '/noble.fiattokenfactory.Query/MinterControllerAll',
                request_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryAllMinterControllerRequest.SerializeToString,
                response_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryAllMinterControllerResponse.FromString,
                )
        self.MintingDenom = channel.unary_unary(
                '/noble.fiattokenfactory.Query/MintingDenom',
                request_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMintingDenomRequest.SerializeToString,
                response_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMintingDenomResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def Params(self, request, context):
        """Parameters queries the parameters of the module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Blacklisted(self, request, context):
        """Queries a Blacklisted by index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlacklistedAll(self, request, context):
        """Queries a list of Blacklisted items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Paused(self, request, context):
        """Queries a Paused by index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MasterMinter(self, request, context):
        """Queries a MasterMinter by index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Minters(self, request, context):
        """Queries a Minters by index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MintersAll(self, request, context):
        """Queries a list of Minters items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Pauser(self, request, context):
        """Queries a Pauser by index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Blacklister(self, request, context):
        """Queries a Blacklister by index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Owner(self, request, context):
        """Queries a Owner by index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MinterController(self, request, context):
        """Queries a MinterController by index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MinterControllerAll(self, request, context):
        """Queries a list of MinterController items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MintingDenom(self, request, context):
        """Queries a MintingDenom by index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'Blacklisted': grpc.unary_unary_rpc_method_handler(
                    servicer.Blacklisted,
                    request_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetBlacklistedRequest.FromString,
                    response_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetBlacklistedResponse.SerializeToString,
            ),
            'BlacklistedAll': grpc.unary_unary_rpc_method_handler(
                    servicer.BlacklistedAll,
                    request_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryAllBlacklistedRequest.FromString,
                    response_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryAllBlacklistedResponse.SerializeToString,
            ),
            'Paused': grpc.unary_unary_rpc_method_handler(
                    servicer.Paused,
                    request_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetPausedRequest.FromString,
                    response_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetPausedResponse.SerializeToString,
            ),
            'MasterMinter': grpc.unary_unary_rpc_method_handler(
                    servicer.MasterMinter,
                    request_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMasterMinterRequest.FromString,
                    response_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMasterMinterResponse.SerializeToString,
            ),
            'Minters': grpc.unary_unary_rpc_method_handler(
                    servicer.Minters,
                    request_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMintersRequest.FromString,
                    response_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMintersResponse.SerializeToString,
            ),
            'MintersAll': grpc.unary_unary_rpc_method_handler(
                    servicer.MintersAll,
                    request_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryAllMintersRequest.FromString,
                    response_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryAllMintersResponse.SerializeToString,
            ),
            'Pauser': grpc.unary_unary_rpc_method_handler(
                    servicer.Pauser,
                    request_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetPauserRequest.FromString,
                    response_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetPauserResponse.SerializeToString,
            ),
            'Blacklister': grpc.unary_unary_rpc_method_handler(
                    servicer.Blacklister,
                    request_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetBlacklisterRequest.FromString,
                    response_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetBlacklisterResponse.SerializeToString,
            ),
            'Owner': grpc.unary_unary_rpc_method_handler(
                    servicer.Owner,
                    request_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetOwnerRequest.FromString,
                    response_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetOwnerResponse.SerializeToString,
            ),
            'MinterController': grpc.unary_unary_rpc_method_handler(
                    servicer.MinterController,
                    request_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMinterControllerRequest.FromString,
                    response_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMinterControllerResponse.SerializeToString,
            ),
            'MinterControllerAll': grpc.unary_unary_rpc_method_handler(
                    servicer.MinterControllerAll,
                    request_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryAllMinterControllerRequest.FromString,
                    response_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryAllMinterControllerResponse.SerializeToString,
            ),
            'MintingDenom': grpc.unary_unary_rpc_method_handler(
                    servicer.MintingDenom,
                    request_deserializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMintingDenomRequest.FromString,
                    response_serializer=noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMintingDenomResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'noble.fiattokenfactory.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/noble.fiattokenfactory.Query/Params',
            noble_dot_fiattokenfactory_dot_query__pb2.QueryParamsRequest.SerializeToString,
            noble_dot_fiattokenfactory_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Blacklisted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/noble.fiattokenfactory.Query/Blacklisted',
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetBlacklistedRequest.SerializeToString,
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetBlacklistedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlacklistedAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/noble.fiattokenfactory.Query/BlacklistedAll',
            noble_dot_fiattokenfactory_dot_query__pb2.QueryAllBlacklistedRequest.SerializeToString,
            noble_dot_fiattokenfactory_dot_query__pb2.QueryAllBlacklistedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Paused(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/noble.fiattokenfactory.Query/Paused',
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetPausedRequest.SerializeToString,
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetPausedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MasterMinter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/noble.fiattokenfactory.Query/MasterMinter',
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMasterMinterRequest.SerializeToString,
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMasterMinterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Minters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/noble.fiattokenfactory.Query/Minters',
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMintersRequest.SerializeToString,
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMintersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MintersAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/noble.fiattokenfactory.Query/MintersAll',
            noble_dot_fiattokenfactory_dot_query__pb2.QueryAllMintersRequest.SerializeToString,
            noble_dot_fiattokenfactory_dot_query__pb2.QueryAllMintersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Pauser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/noble.fiattokenfactory.Query/Pauser',
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetPauserRequest.SerializeToString,
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetPauserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Blacklister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/noble.fiattokenfactory.Query/Blacklister',
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetBlacklisterRequest.SerializeToString,
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetBlacklisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Owner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/noble.fiattokenfactory.Query/Owner',
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetOwnerRequest.SerializeToString,
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetOwnerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MinterController(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/noble.fiattokenfactory.Query/MinterController',
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMinterControllerRequest.SerializeToString,
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMinterControllerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MinterControllerAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/noble.fiattokenfactory.Query/MinterControllerAll',
            noble_dot_fiattokenfactory_dot_query__pb2.QueryAllMinterControllerRequest.SerializeToString,
            noble_dot_fiattokenfactory_dot_query__pb2.QueryAllMinterControllerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MintingDenom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/noble.fiattokenfactory.Query/MintingDenom',
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMintingDenomRequest.SerializeToString,
            noble_dot_fiattokenfactory_dot_query__pb2.QueryGetMintingDenomResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
