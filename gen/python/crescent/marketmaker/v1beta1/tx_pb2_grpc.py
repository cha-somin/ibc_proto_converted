# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from crescent.marketmaker.v1beta1 import tx_pb2 as crescent_dot_marketmaker_dot_v1beta1_dot_tx__pb2


class MsgStub(object):
    """Msg defines the marketmaker Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ApplyMarketMaker = channel.unary_unary(
                '/crescent.marketmaker.v1beta1.Msg/ApplyMarketMaker',
                request_serializer=crescent_dot_marketmaker_dot_v1beta1_dot_tx__pb2.MsgApplyMarketMaker.SerializeToString,
                response_deserializer=crescent_dot_marketmaker_dot_v1beta1_dot_tx__pb2.MsgApplyMarketMakerResponse.FromString,
                )
        self.ClaimIncentives = channel.unary_unary(
                '/crescent.marketmaker.v1beta1.Msg/ClaimIncentives',
                request_serializer=crescent_dot_marketmaker_dot_v1beta1_dot_tx__pb2.MsgClaimIncentives.SerializeToString,
                response_deserializer=crescent_dot_marketmaker_dot_v1beta1_dot_tx__pb2.MsgClaimIncentivesResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the marketmaker Msg service.
    """

    def ApplyMarketMaker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClaimIncentives(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ApplyMarketMaker': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyMarketMaker,
                    request_deserializer=crescent_dot_marketmaker_dot_v1beta1_dot_tx__pb2.MsgApplyMarketMaker.FromString,
                    response_serializer=crescent_dot_marketmaker_dot_v1beta1_dot_tx__pb2.MsgApplyMarketMakerResponse.SerializeToString,
            ),
            'ClaimIncentives': grpc.unary_unary_rpc_method_handler(
                    servicer.ClaimIncentives,
                    request_deserializer=crescent_dot_marketmaker_dot_v1beta1_dot_tx__pb2.MsgClaimIncentives.FromString,
                    response_serializer=crescent_dot_marketmaker_dot_v1beta1_dot_tx__pb2.MsgClaimIncentivesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'crescent.marketmaker.v1beta1.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the marketmaker Msg service.
    """

    @staticmethod
    def ApplyMarketMaker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crescent.marketmaker.v1beta1.Msg/ApplyMarketMaker',
            crescent_dot_marketmaker_dot_v1beta1_dot_tx__pb2.MsgApplyMarketMaker.SerializeToString,
            crescent_dot_marketmaker_dot_v1beta1_dot_tx__pb2.MsgApplyMarketMakerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClaimIncentives(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crescent.marketmaker.v1beta1.Msg/ClaimIncentives',
            crescent_dot_marketmaker_dot_v1beta1_dot_tx__pb2.MsgClaimIncentives.SerializeToString,
            crescent_dot_marketmaker_dot_v1beta1_dot_tx__pb2.MsgClaimIncentivesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
