# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from crescent.liquidfarming.v1beta1 import tx_pb2 as crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2


class MsgStub(object):
    """Msg defines the Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LiquidFarm = channel.unary_unary(
                '/crescent.liquidfarming.v1beta1.Msg/LiquidFarm',
                request_serializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidFarm.SerializeToString,
                response_deserializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidFarmResponse.FromString,
                )
        self.LiquidUnfarm = channel.unary_unary(
                '/crescent.liquidfarming.v1beta1.Msg/LiquidUnfarm',
                request_serializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidUnfarm.SerializeToString,
                response_deserializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidUnfarmResponse.FromString,
                )
        self.LiquidUnfarmAndWithdraw = channel.unary_unary(
                '/crescent.liquidfarming.v1beta1.Msg/LiquidUnfarmAndWithdraw',
                request_serializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidUnfarmAndWithdraw.SerializeToString,
                response_deserializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidUnfarmAndWithdrawResponse.FromString,
                )
        self.PlaceBid = channel.unary_unary(
                '/crescent.liquidfarming.v1beta1.Msg/PlaceBid',
                request_serializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgPlaceBid.SerializeToString,
                response_deserializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgPlaceBidResponse.FromString,
                )
        self.RefundBid = channel.unary_unary(
                '/crescent.liquidfarming.v1beta1.Msg/RefundBid',
                request_serializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgRefundBid.SerializeToString,
                response_deserializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgRefundBidResponse.FromString,
                )
        self.AdvanceAuction = channel.unary_unary(
                '/crescent.liquidfarming.v1beta1.Msg/AdvanceAuction',
                request_serializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgAdvanceAuction.SerializeToString,
                response_deserializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgAdvanceAuctionResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the Msg service.
    """

    def LiquidFarm(self, request, context):
        """LiquidFarm defines a method for farming pool coin for a liquid farm
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LiquidUnfarm(self, request, context):
        """LiquidUnfarm defines a method for unfarming amount of LFCoin
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LiquidUnfarmAndWithdraw(self, request, context):
        """LiquidUnfarmAndWithdraw defines a method for unfarming amount of LFCoin and withdraw pool coin from the pool
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlaceBid(self, request, context):
        """PlaceBid defines a method for placing a bid for a rewards auction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefundBid(self, request, context):
        """RefundBid defines a method for refunding the bid that is not winning for the auction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdvanceAuction(self, request, context):
        """AdvanceAuction defines a method for advancing rewards auction by one.
        This Msg is defined just for testing purpose and it shouldn't be used in production.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LiquidFarm': grpc.unary_unary_rpc_method_handler(
                    servicer.LiquidFarm,
                    request_deserializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidFarm.FromString,
                    response_serializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidFarmResponse.SerializeToString,
            ),
            'LiquidUnfarm': grpc.unary_unary_rpc_method_handler(
                    servicer.LiquidUnfarm,
                    request_deserializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidUnfarm.FromString,
                    response_serializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidUnfarmResponse.SerializeToString,
            ),
            'LiquidUnfarmAndWithdraw': grpc.unary_unary_rpc_method_handler(
                    servicer.LiquidUnfarmAndWithdraw,
                    request_deserializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidUnfarmAndWithdraw.FromString,
                    response_serializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidUnfarmAndWithdrawResponse.SerializeToString,
            ),
            'PlaceBid': grpc.unary_unary_rpc_method_handler(
                    servicer.PlaceBid,
                    request_deserializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgPlaceBid.FromString,
                    response_serializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgPlaceBidResponse.SerializeToString,
            ),
            'RefundBid': grpc.unary_unary_rpc_method_handler(
                    servicer.RefundBid,
                    request_deserializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgRefundBid.FromString,
                    response_serializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgRefundBidResponse.SerializeToString,
            ),
            'AdvanceAuction': grpc.unary_unary_rpc_method_handler(
                    servicer.AdvanceAuction,
                    request_deserializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgAdvanceAuction.FromString,
                    response_serializer=crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgAdvanceAuctionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'crescent.liquidfarming.v1beta1.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the Msg service.
    """

    @staticmethod
    def LiquidFarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crescent.liquidfarming.v1beta1.Msg/LiquidFarm',
            crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidFarm.SerializeToString,
            crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidFarmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LiquidUnfarm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crescent.liquidfarming.v1beta1.Msg/LiquidUnfarm',
            crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidUnfarm.SerializeToString,
            crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidUnfarmResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LiquidUnfarmAndWithdraw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crescent.liquidfarming.v1beta1.Msg/LiquidUnfarmAndWithdraw',
            crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidUnfarmAndWithdraw.SerializeToString,
            crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgLiquidUnfarmAndWithdrawResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlaceBid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crescent.liquidfarming.v1beta1.Msg/PlaceBid',
            crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgPlaceBid.SerializeToString,
            crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgPlaceBidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefundBid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crescent.liquidfarming.v1beta1.Msg/RefundBid',
            crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgRefundBid.SerializeToString,
            crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgRefundBidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdvanceAuction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/crescent.liquidfarming.v1beta1.Msg/AdvanceAuction',
            crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgAdvanceAuction.SerializeToString,
            crescent_dot_liquidfarming_dot_v1beta1_dot_tx__pb2.MsgAdvanceAuctionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
