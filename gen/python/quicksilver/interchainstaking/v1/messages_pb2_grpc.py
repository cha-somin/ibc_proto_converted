# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from quicksilver.interchainstaking.v1 import messages_pb2 as quicksilver_dot_interchainstaking_dot_v1_dot_messages__pb2
from quicksilver.interchainstaking.v1 import proposals_pb2 as quicksilver_dot_interchainstaking_dot_v1_dot_proposals__pb2


class MsgStub(object):
    """Msg defines the interchainstaking Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestRedemption = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Msg/RequestRedemption',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_messages__pb2.MsgRequestRedemption.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_messages__pb2.MsgRequestRedemptionResponse.FromString,
                )
        self.SignalIntent = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Msg/SignalIntent',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_messages__pb2.MsgSignalIntent.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_messages__pb2.MsgSignalIntentResponse.FromString,
                )
        self.GovCloseChannel = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Msg/GovCloseChannel',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_proposals__pb2.MsgGovCloseChannel.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_proposals__pb2.MsgGovCloseChannelResponse.FromString,
                )
        self.GovReopenChannel = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Msg/GovReopenChannel',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_proposals__pb2.MsgGovReopenChannel.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_proposals__pb2.MsgGovReopenChannelResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the interchainstaking Msg service.
    """

    def RequestRedemption(self, request, context):
        """RequestRedemption defines a method for requesting burning of qAssets for
        native assets.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignalIntent(self, request, context):
        """SignalIntent defines a method for signalling voting intent for one or more
        validators.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GovCloseChannel(self, request, context):
        """SignalIntent defines a method for signalling voting intent for one or more
        validators.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GovReopenChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestRedemption': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestRedemption,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_messages__pb2.MsgRequestRedemption.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_messages__pb2.MsgRequestRedemptionResponse.SerializeToString,
            ),
            'SignalIntent': grpc.unary_unary_rpc_method_handler(
                    servicer.SignalIntent,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_messages__pb2.MsgSignalIntent.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_messages__pb2.MsgSignalIntentResponse.SerializeToString,
            ),
            'GovCloseChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.GovCloseChannel,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_proposals__pb2.MsgGovCloseChannel.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_proposals__pb2.MsgGovCloseChannelResponse.SerializeToString,
            ),
            'GovReopenChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.GovReopenChannel,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_proposals__pb2.MsgGovReopenChannel.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_proposals__pb2.MsgGovReopenChannelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'quicksilver.interchainstaking.v1.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the interchainstaking Msg service.
    """

    @staticmethod
    def RequestRedemption(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Msg/RequestRedemption',
            quicksilver_dot_interchainstaking_dot_v1_dot_messages__pb2.MsgRequestRedemption.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_messages__pb2.MsgRequestRedemptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignalIntent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Msg/SignalIntent',
            quicksilver_dot_interchainstaking_dot_v1_dot_messages__pb2.MsgSignalIntent.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_messages__pb2.MsgSignalIntentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GovCloseChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Msg/GovCloseChannel',
            quicksilver_dot_interchainstaking_dot_v1_dot_proposals__pb2.MsgGovCloseChannel.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_proposals__pb2.MsgGovCloseChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GovReopenChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Msg/GovReopenChannel',
            quicksilver_dot_interchainstaking_dot_v1_dot_proposals__pb2.MsgGovReopenChannel.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_proposals__pb2.MsgGovReopenChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
