# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from quicksilver.interchainstaking.v1 import query_pb2 as quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Zones = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Query/Zones',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZonesRequest.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZonesResponse.FromString,
                )
        self.Zone = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Query/Zone',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZoneRequest.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZoneResponse.FromString,
                )
        self.ZoneValidators = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Query/ZoneValidators',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZoneValidatorsRequest.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZoneValidatorsResponse.FromString,
                )
        self.DepositAccount = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Query/DepositAccount',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDepositAccountForChainRequest.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDepositAccountForChainResponse.FromString,
                )
        self.DelegatorIntent = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Query/DelegatorIntent',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDelegatorIntentRequest.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDelegatorIntentResponse.FromString,
                )
        self.Delegations = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Query/Delegations',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDelegationsRequest.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDelegationsResponse.FromString,
                )
        self.Receipts = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Query/Receipts',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryReceiptsRequest.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryReceiptsResponse.FromString,
                )
        self.ZoneWithdrawalRecords = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Query/ZoneWithdrawalRecords',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryWithdrawalRecordsRequest.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryWithdrawalRecordsResponse.FromString,
                )
        self.WithdrawalRecords = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Query/WithdrawalRecords',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryWithdrawalRecordsRequest.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryWithdrawalRecordsResponse.FromString,
                )
        self.UnbondingRecords = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Query/UnbondingRecords',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryUnbondingRecordsRequest.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryUnbondingRecordsResponse.FromString,
                )
        self.RedelegationRecords = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Query/RedelegationRecords',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryRedelegationRecordsRequest.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryRedelegationRecordsResponse.FromString,
                )
        self.MappedAccounts = channel.unary_unary(
                '/quicksilver.interchainstaking.v1.Query/MappedAccounts',
                request_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryMappedAccountsRequest.SerializeToString,
                response_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryMappedAccountsResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def Zones(self, request, context):
        """Zones provides meta data on connected zones.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Zone(self, request, context):
        """Zone provides meta data on a specific zone.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZoneValidators(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DepositAccount(self, request, context):
        """DepositAccount provides data on the deposit address for a connected zone.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelegatorIntent(self, request, context):
        """DelegatorIntent provides data on the intent of the delegator for the given
        zone.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delegations(self, request, context):
        """Delegations provides data on the delegations for the given zone.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Receipts(self, request, context):
        """Delegations provides data on the delegations for the given zone.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZoneWithdrawalRecords(self, request, context):
        """WithdrawalRecords provides data on the active withdrawals.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WithdrawalRecords(self, request, context):
        """WithdrawalRecords provides data on the active withdrawals.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnbondingRecords(self, request, context):
        """UnbondingRecords provides data on the active unbondings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RedelegationRecords(self, request, context):
        """RedelegationRecords provides data on the active unbondings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MappedAccounts(self, request, context):
        """MappedAccounts provides data on the mapped accounts for a given user over different host chains.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Zones': grpc.unary_unary_rpc_method_handler(
                    servicer.Zones,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZonesRequest.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZonesResponse.SerializeToString,
            ),
            'Zone': grpc.unary_unary_rpc_method_handler(
                    servicer.Zone,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZoneRequest.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZoneResponse.SerializeToString,
            ),
            'ZoneValidators': grpc.unary_unary_rpc_method_handler(
                    servicer.ZoneValidators,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZoneValidatorsRequest.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZoneValidatorsResponse.SerializeToString,
            ),
            'DepositAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DepositAccount,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDepositAccountForChainRequest.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDepositAccountForChainResponse.SerializeToString,
            ),
            'DelegatorIntent': grpc.unary_unary_rpc_method_handler(
                    servicer.DelegatorIntent,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDelegatorIntentRequest.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDelegatorIntentResponse.SerializeToString,
            ),
            'Delegations': grpc.unary_unary_rpc_method_handler(
                    servicer.Delegations,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDelegationsRequest.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDelegationsResponse.SerializeToString,
            ),
            'Receipts': grpc.unary_unary_rpc_method_handler(
                    servicer.Receipts,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryReceiptsRequest.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryReceiptsResponse.SerializeToString,
            ),
            'ZoneWithdrawalRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.ZoneWithdrawalRecords,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryWithdrawalRecordsRequest.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryWithdrawalRecordsResponse.SerializeToString,
            ),
            'WithdrawalRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.WithdrawalRecords,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryWithdrawalRecordsRequest.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryWithdrawalRecordsResponse.SerializeToString,
            ),
            'UnbondingRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.UnbondingRecords,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryUnbondingRecordsRequest.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryUnbondingRecordsResponse.SerializeToString,
            ),
            'RedelegationRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.RedelegationRecords,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryRedelegationRecordsRequest.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryRedelegationRecordsResponse.SerializeToString,
            ),
            'MappedAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.MappedAccounts,
                    request_deserializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryMappedAccountsRequest.FromString,
                    response_serializer=quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryMappedAccountsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'quicksilver.interchainstaking.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def Zones(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Query/Zones',
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZonesRequest.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZonesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Zone(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Query/Zone',
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZoneRequest.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZoneResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZoneValidators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Query/ZoneValidators',
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZoneValidatorsRequest.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryZoneValidatorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DepositAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Query/DepositAccount',
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDepositAccountForChainRequest.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDepositAccountForChainResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelegatorIntent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Query/DelegatorIntent',
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDelegatorIntentRequest.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDelegatorIntentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delegations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Query/Delegations',
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDelegationsRequest.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryDelegationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Receipts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Query/Receipts',
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryReceiptsRequest.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryReceiptsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ZoneWithdrawalRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Query/ZoneWithdrawalRecords',
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryWithdrawalRecordsRequest.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryWithdrawalRecordsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WithdrawalRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Query/WithdrawalRecords',
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryWithdrawalRecordsRequest.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryWithdrawalRecordsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnbondingRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Query/UnbondingRecords',
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryUnbondingRecordsRequest.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryUnbondingRecordsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RedelegationRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Query/RedelegationRecords',
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryRedelegationRecordsRequest.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryRedelegationRecordsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MappedAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.interchainstaking.v1.Query/MappedAccounts',
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryMappedAccountsRequest.SerializeToString,
            quicksilver_dot_interchainstaking_dot_v1_dot_query__pb2.QueryMappedAccountsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
