# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from quicksilver.claimsmanager.v1 import query_pb2 as quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query provides defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Claims = channel.unary_unary(
                '/quicksilver.claimsmanager.v1.Query/Claims',
                request_serializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsRequest.SerializeToString,
                response_deserializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsResponse.FromString,
                )
        self.LastEpochClaims = channel.unary_unary(
                '/quicksilver.claimsmanager.v1.Query/LastEpochClaims',
                request_serializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsRequest.SerializeToString,
                response_deserializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsResponse.FromString,
                )
        self.UserClaims = channel.unary_unary(
                '/quicksilver.claimsmanager.v1.Query/UserClaims',
                request_serializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsRequest.SerializeToString,
                response_deserializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsResponse.FromString,
                )
        self.UserLastEpochClaims = channel.unary_unary(
                '/quicksilver.claimsmanager.v1.Query/UserLastEpochClaims',
                request_serializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsRequest.SerializeToString,
                response_deserializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsResponse.FromString,
                )


class QueryServicer(object):
    """Query provides defines the gRPC querier service.
    """

    def Claims(self, request, context):
        """Claims returns all zone claims from the current epoch.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LastEpochClaims(self, request, context):
        """LastEpochClaims returns all zone claims from the last epoch.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserClaims(self, request, context):
        """UserClaims returns all zone claims for a given address from the current epoch.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserLastEpochClaims(self, request, context):
        """UserLastEpochClaims returns all zone claims for a given address from the last epoch.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Claims': grpc.unary_unary_rpc_method_handler(
                    servicer.Claims,
                    request_deserializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsRequest.FromString,
                    response_serializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsResponse.SerializeToString,
            ),
            'LastEpochClaims': grpc.unary_unary_rpc_method_handler(
                    servicer.LastEpochClaims,
                    request_deserializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsRequest.FromString,
                    response_serializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsResponse.SerializeToString,
            ),
            'UserClaims': grpc.unary_unary_rpc_method_handler(
                    servicer.UserClaims,
                    request_deserializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsRequest.FromString,
                    response_serializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsResponse.SerializeToString,
            ),
            'UserLastEpochClaims': grpc.unary_unary_rpc_method_handler(
                    servicer.UserLastEpochClaims,
                    request_deserializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsRequest.FromString,
                    response_serializer=quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'quicksilver.claimsmanager.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query provides defines the gRPC querier service.
    """

    @staticmethod
    def Claims(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.claimsmanager.v1.Query/Claims',
            quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsRequest.SerializeToString,
            quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LastEpochClaims(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.claimsmanager.v1.Query/LastEpochClaims',
            quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsRequest.SerializeToString,
            quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserClaims(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.claimsmanager.v1.Query/UserClaims',
            quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsRequest.SerializeToString,
            quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserLastEpochClaims(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/quicksilver.claimsmanager.v1.Query/UserLastEpochClaims',
            quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsRequest.SerializeToString,
            quicksilver_dot_claimsmanager_dot_v1_dot_query__pb2.QueryClaimsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
