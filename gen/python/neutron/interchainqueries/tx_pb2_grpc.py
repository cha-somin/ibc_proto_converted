# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from neutron.interchainqueries import tx_pb2 as neutron_dot_interchainqueries_dot_tx__pb2


class MsgStub(object):
    """Msg defines the Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterInterchainQuery = channel.unary_unary(
                '/neutron.interchainqueries.Msg/RegisterInterchainQuery',
                request_serializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgRegisterInterchainQuery.SerializeToString,
                response_deserializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgRegisterInterchainQueryResponse.FromString,
                )
        self.SubmitQueryResult = channel.unary_unary(
                '/neutron.interchainqueries.Msg/SubmitQueryResult',
                request_serializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgSubmitQueryResult.SerializeToString,
                response_deserializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgSubmitQueryResultResponse.FromString,
                )
        self.RemoveInterchainQuery = channel.unary_unary(
                '/neutron.interchainqueries.Msg/RemoveInterchainQuery',
                request_serializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgRemoveInterchainQueryRequest.SerializeToString,
                response_deserializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgRemoveInterchainQueryResponse.FromString,
                )
        self.UpdateInterchainQuery = channel.unary_unary(
                '/neutron.interchainqueries.Msg/UpdateInterchainQuery',
                request_serializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgUpdateInterchainQueryRequest.SerializeToString,
                response_deserializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgUpdateInterchainQueryResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the Msg service.
    """

    def RegisterInterchainQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitQueryResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveInterchainQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateInterchainQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterInterchainQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterInterchainQuery,
                    request_deserializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgRegisterInterchainQuery.FromString,
                    response_serializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgRegisterInterchainQueryResponse.SerializeToString,
            ),
            'SubmitQueryResult': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitQueryResult,
                    request_deserializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgSubmitQueryResult.FromString,
                    response_serializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgSubmitQueryResultResponse.SerializeToString,
            ),
            'RemoveInterchainQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveInterchainQuery,
                    request_deserializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgRemoveInterchainQueryRequest.FromString,
                    response_serializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgRemoveInterchainQueryResponse.SerializeToString,
            ),
            'UpdateInterchainQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateInterchainQuery,
                    request_deserializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgUpdateInterchainQueryRequest.FromString,
                    response_serializer=neutron_dot_interchainqueries_dot_tx__pb2.MsgUpdateInterchainQueryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'neutron.interchainqueries.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the Msg service.
    """

    @staticmethod
    def RegisterInterchainQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neutron.interchainqueries.Msg/RegisterInterchainQuery',
            neutron_dot_interchainqueries_dot_tx__pb2.MsgRegisterInterchainQuery.SerializeToString,
            neutron_dot_interchainqueries_dot_tx__pb2.MsgRegisterInterchainQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitQueryResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neutron.interchainqueries.Msg/SubmitQueryResult',
            neutron_dot_interchainqueries_dot_tx__pb2.MsgSubmitQueryResult.SerializeToString,
            neutron_dot_interchainqueries_dot_tx__pb2.MsgSubmitQueryResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveInterchainQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neutron.interchainqueries.Msg/RemoveInterchainQuery',
            neutron_dot_interchainqueries_dot_tx__pb2.MsgRemoveInterchainQueryRequest.SerializeToString,
            neutron_dot_interchainqueries_dot_tx__pb2.MsgRemoveInterchainQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateInterchainQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/neutron.interchainqueries.Msg/UpdateInterchainQuery',
            neutron_dot_interchainqueries_dot_tx__pb2.MsgUpdateInterchainQueryRequest.SerializeToString,
            neutron_dot_interchainqueries_dot_tx__pb2.MsgUpdateInterchainQueryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
