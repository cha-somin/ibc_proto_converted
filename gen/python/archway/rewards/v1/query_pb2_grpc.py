# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from archway.rewards.v1 import query_pb2 as archway_dot_rewards_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query service for the tracking module.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/archway.rewards.v1.Query/Params',
                request_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.ContractMetadata = channel.unary_unary(
                '/archway.rewards.v1.Query/ContractMetadata',
                request_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryContractMetadataRequest.SerializeToString,
                response_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryContractMetadataResponse.FromString,
                )
        self.BlockRewardsTracking = channel.unary_unary(
                '/archway.rewards.v1.Query/BlockRewardsTracking',
                request_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryBlockRewardsTrackingRequest.SerializeToString,
                response_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryBlockRewardsTrackingResponse.FromString,
                )
        self.RewardsPool = channel.unary_unary(
                '/archway.rewards.v1.Query/RewardsPool',
                request_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryRewardsPoolRequest.SerializeToString,
                response_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryRewardsPoolResponse.FromString,
                )
        self.EstimateTxFees = channel.unary_unary(
                '/archway.rewards.v1.Query/EstimateTxFees',
                request_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryEstimateTxFeesRequest.SerializeToString,
                response_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryEstimateTxFeesResponse.FromString,
                )
        self.RewardsRecords = channel.unary_unary(
                '/archway.rewards.v1.Query/RewardsRecords',
                request_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryRewardsRecordsRequest.SerializeToString,
                response_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryRewardsRecordsResponse.FromString,
                )
        self.OutstandingRewards = channel.unary_unary(
                '/archway.rewards.v1.Query/OutstandingRewards',
                request_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryOutstandingRewardsRequest.SerializeToString,
                response_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryOutstandingRewardsResponse.FromString,
                )
        self.FlatFee = channel.unary_unary(
                '/archway.rewards.v1.Query/FlatFee',
                request_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryFlatFeeRequest.SerializeToString,
                response_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryFlatFeeResponse.FromString,
                )


class QueryServicer(object):
    """Query service for the tracking module.
    """

    def Params(self, request, context):
        """Params returns module parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContractMetadata(self, request, context):
        """ContractMetadata returns the contract rewards parameters (metadata).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BlockRewardsTracking(self, request, context):
        """BlockRewardsTracking returns block rewards tracking for the current block.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RewardsPool(self, request, context):
        """RewardsPool returns the current undistributed rewards pool funds.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EstimateTxFees(self, request, context):
        """EstimateTxFees returns the estimated transaction fees for the given
        transaction gas limit using the minimum consensus fee value for the current
        block.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RewardsRecords(self, request, context):
        """RewardsRecords returns the paginated list of RewardsRecord objects stored
        for the provided rewards_address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OutstandingRewards(self, request, context):
        """OutstandingRewards returns total rewards credited from different contracts
        for the provided rewards_address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FlatFee(self, request, context):
        """FlatFee returns the flat fee set by the contract owner for the provided
        contract_address
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'ContractMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.ContractMetadata,
                    request_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryContractMetadataRequest.FromString,
                    response_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryContractMetadataResponse.SerializeToString,
            ),
            'BlockRewardsTracking': grpc.unary_unary_rpc_method_handler(
                    servicer.BlockRewardsTracking,
                    request_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryBlockRewardsTrackingRequest.FromString,
                    response_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryBlockRewardsTrackingResponse.SerializeToString,
            ),
            'RewardsPool': grpc.unary_unary_rpc_method_handler(
                    servicer.RewardsPool,
                    request_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryRewardsPoolRequest.FromString,
                    response_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryRewardsPoolResponse.SerializeToString,
            ),
            'EstimateTxFees': grpc.unary_unary_rpc_method_handler(
                    servicer.EstimateTxFees,
                    request_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryEstimateTxFeesRequest.FromString,
                    response_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryEstimateTxFeesResponse.SerializeToString,
            ),
            'RewardsRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.RewardsRecords,
                    request_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryRewardsRecordsRequest.FromString,
                    response_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryRewardsRecordsResponse.SerializeToString,
            ),
            'OutstandingRewards': grpc.unary_unary_rpc_method_handler(
                    servicer.OutstandingRewards,
                    request_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryOutstandingRewardsRequest.FromString,
                    response_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryOutstandingRewardsResponse.SerializeToString,
            ),
            'FlatFee': grpc.unary_unary_rpc_method_handler(
                    servicer.FlatFee,
                    request_deserializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryFlatFeeRequest.FromString,
                    response_serializer=archway_dot_rewards_dot_v1_dot_query__pb2.QueryFlatFeeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'archway.rewards.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query service for the tracking module.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archway.rewards.v1.Query/Params',
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContractMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archway.rewards.v1.Query/ContractMetadata',
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryContractMetadataRequest.SerializeToString,
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryContractMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BlockRewardsTracking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archway.rewards.v1.Query/BlockRewardsTracking',
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryBlockRewardsTrackingRequest.SerializeToString,
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryBlockRewardsTrackingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RewardsPool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archway.rewards.v1.Query/RewardsPool',
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryRewardsPoolRequest.SerializeToString,
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryRewardsPoolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EstimateTxFees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archway.rewards.v1.Query/EstimateTxFees',
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryEstimateTxFeesRequest.SerializeToString,
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryEstimateTxFeesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RewardsRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archway.rewards.v1.Query/RewardsRecords',
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryRewardsRecordsRequest.SerializeToString,
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryRewardsRecordsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OutstandingRewards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archway.rewards.v1.Query/OutstandingRewards',
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryOutstandingRewardsRequest.SerializeToString,
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryOutstandingRewardsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FlatFee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/archway.rewards.v1.Query/FlatFee',
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryFlatFeeRequest.SerializeToString,
            archway_dot_rewards_dot_v1_dot_query__pb2.QueryFlatFeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
