# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from likechain.iscn import tx_pb2 as likechain_dot_iscn_dot_tx__pb2


class MsgStub(object):
    """Msg defines the bank Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateIscnRecord = channel.unary_unary(
                '/likechain.iscn.Msg/CreateIscnRecord',
                request_serializer=likechain_dot_iscn_dot_tx__pb2.MsgCreateIscnRecord.SerializeToString,
                response_deserializer=likechain_dot_iscn_dot_tx__pb2.MsgCreateIscnRecordResponse.FromString,
                )
        self.UpdateIscnRecord = channel.unary_unary(
                '/likechain.iscn.Msg/UpdateIscnRecord',
                request_serializer=likechain_dot_iscn_dot_tx__pb2.MsgUpdateIscnRecord.SerializeToString,
                response_deserializer=likechain_dot_iscn_dot_tx__pb2.MsgUpdateIscnRecordResponse.FromString,
                )
        self.ChangeIscnRecordOwnership = channel.unary_unary(
                '/likechain.iscn.Msg/ChangeIscnRecordOwnership',
                request_serializer=likechain_dot_iscn_dot_tx__pb2.MsgChangeIscnRecordOwnership.SerializeToString,
                response_deserializer=likechain_dot_iscn_dot_tx__pb2.MsgChangeIscnRecordOwnershipResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the bank Msg service.
    """

    def CreateIscnRecord(self, request, context):
        """CreateIscnRecord defines a method to create ISCN metadata
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateIscnRecord(self, request, context):
        """UpdateIscnRecord defines a method to update existing ISCN metadata
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeIscnRecordOwnership(self, request, context):
        """ChangeIscnRecordOwnership defines a method to update the ownership of existing ISCN metadata
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateIscnRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIscnRecord,
                    request_deserializer=likechain_dot_iscn_dot_tx__pb2.MsgCreateIscnRecord.FromString,
                    response_serializer=likechain_dot_iscn_dot_tx__pb2.MsgCreateIscnRecordResponse.SerializeToString,
            ),
            'UpdateIscnRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateIscnRecord,
                    request_deserializer=likechain_dot_iscn_dot_tx__pb2.MsgUpdateIscnRecord.FromString,
                    response_serializer=likechain_dot_iscn_dot_tx__pb2.MsgUpdateIscnRecordResponse.SerializeToString,
            ),
            'ChangeIscnRecordOwnership': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeIscnRecordOwnership,
                    request_deserializer=likechain_dot_iscn_dot_tx__pb2.MsgChangeIscnRecordOwnership.FromString,
                    response_serializer=likechain_dot_iscn_dot_tx__pb2.MsgChangeIscnRecordOwnershipResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'likechain.iscn.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the bank Msg service.
    """

    @staticmethod
    def CreateIscnRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/likechain.iscn.Msg/CreateIscnRecord',
            likechain_dot_iscn_dot_tx__pb2.MsgCreateIscnRecord.SerializeToString,
            likechain_dot_iscn_dot_tx__pb2.MsgCreateIscnRecordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateIscnRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/likechain.iscn.Msg/UpdateIscnRecord',
            likechain_dot_iscn_dot_tx__pb2.MsgUpdateIscnRecord.SerializeToString,
            likechain_dot_iscn_dot_tx__pb2.MsgUpdateIscnRecordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeIscnRecordOwnership(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/likechain.iscn.Msg/ChangeIscnRecordOwnership',
            likechain_dot_iscn_dot_tx__pb2.MsgChangeIscnRecordOwnership.SerializeToString,
            likechain_dot_iscn_dot_tx__pb2.MsgChangeIscnRecordOwnershipResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
