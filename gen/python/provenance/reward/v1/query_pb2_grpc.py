# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from provenance.reward.v1 import query_pb2 as provenance_dot_reward_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service for reward module.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RewardProgramByID = channel.unary_unary(
                '/provenance.reward.v1.Query/RewardProgramByID',
                request_serializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardProgramByIDRequest.SerializeToString,
                response_deserializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardProgramByIDResponse.FromString,
                )
        self.RewardPrograms = channel.unary_unary(
                '/provenance.reward.v1.Query/RewardPrograms',
                request_serializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardProgramsRequest.SerializeToString,
                response_deserializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardProgramsResponse.FromString,
                )
        self.ClaimPeriodRewardDistributions = channel.unary_unary(
                '/provenance.reward.v1.Query/ClaimPeriodRewardDistributions',
                request_serializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryClaimPeriodRewardDistributionsRequest.SerializeToString,
                response_deserializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryClaimPeriodRewardDistributionsResponse.FromString,
                )
        self.ClaimPeriodRewardDistributionsByID = channel.unary_unary(
                '/provenance.reward.v1.Query/ClaimPeriodRewardDistributionsByID',
                request_serializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryClaimPeriodRewardDistributionsByIDRequest.SerializeToString,
                response_deserializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryClaimPeriodRewardDistributionsByIDResponse.FromString,
                )
        self.RewardDistributionsByAddress = channel.unary_unary(
                '/provenance.reward.v1.Query/RewardDistributionsByAddress',
                request_serializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardDistributionsByAddressRequest.SerializeToString,
                response_deserializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardDistributionsByAddressResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service for reward module.
    """

    def RewardProgramByID(self, request, context):
        """RewardProgramByID returns a reward program matching the ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RewardPrograms(self, request, context):
        """RewardPrograms returns a list of reward programs matching the query type.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClaimPeriodRewardDistributions(self, request, context):
        """ClaimPeriodRewardDistributions returns a list of claim period reward distributions matching the claim_status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClaimPeriodRewardDistributionsByID(self, request, context):
        """ClaimPeriodRewardDistributionsByID returns a claim period reward distribution matching the ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RewardDistributionsByAddress(self, request, context):
        """RewardDistributionsByAddress returns a list of reward claims belonging to the account and matching the claim
        status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RewardProgramByID': grpc.unary_unary_rpc_method_handler(
                    servicer.RewardProgramByID,
                    request_deserializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardProgramByIDRequest.FromString,
                    response_serializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardProgramByIDResponse.SerializeToString,
            ),
            'RewardPrograms': grpc.unary_unary_rpc_method_handler(
                    servicer.RewardPrograms,
                    request_deserializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardProgramsRequest.FromString,
                    response_serializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardProgramsResponse.SerializeToString,
            ),
            'ClaimPeriodRewardDistributions': grpc.unary_unary_rpc_method_handler(
                    servicer.ClaimPeriodRewardDistributions,
                    request_deserializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryClaimPeriodRewardDistributionsRequest.FromString,
                    response_serializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryClaimPeriodRewardDistributionsResponse.SerializeToString,
            ),
            'ClaimPeriodRewardDistributionsByID': grpc.unary_unary_rpc_method_handler(
                    servicer.ClaimPeriodRewardDistributionsByID,
                    request_deserializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryClaimPeriodRewardDistributionsByIDRequest.FromString,
                    response_serializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryClaimPeriodRewardDistributionsByIDResponse.SerializeToString,
            ),
            'RewardDistributionsByAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.RewardDistributionsByAddress,
                    request_deserializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardDistributionsByAddressRequest.FromString,
                    response_serializer=provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardDistributionsByAddressResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'provenance.reward.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service for reward module.
    """

    @staticmethod
    def RewardProgramByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.reward.v1.Query/RewardProgramByID',
            provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardProgramByIDRequest.SerializeToString,
            provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardProgramByIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RewardPrograms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.reward.v1.Query/RewardPrograms',
            provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardProgramsRequest.SerializeToString,
            provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardProgramsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClaimPeriodRewardDistributions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.reward.v1.Query/ClaimPeriodRewardDistributions',
            provenance_dot_reward_dot_v1_dot_query__pb2.QueryClaimPeriodRewardDistributionsRequest.SerializeToString,
            provenance_dot_reward_dot_v1_dot_query__pb2.QueryClaimPeriodRewardDistributionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClaimPeriodRewardDistributionsByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.reward.v1.Query/ClaimPeriodRewardDistributionsByID',
            provenance_dot_reward_dot_v1_dot_query__pb2.QueryClaimPeriodRewardDistributionsByIDRequest.SerializeToString,
            provenance_dot_reward_dot_v1_dot_query__pb2.QueryClaimPeriodRewardDistributionsByIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RewardDistributionsByAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.reward.v1.Query/RewardDistributionsByAddress',
            provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardDistributionsByAddressRequest.SerializeToString,
            provenance_dot_reward_dot_v1_dot_query__pb2.QueryRewardDistributionsByAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
