# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from provenance.reward.v1 import tx_pb2 as provenance_dot_reward_dot_v1_dot_tx__pb2


class MsgStub(object):
    """Msg
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRewardProgram = channel.unary_unary(
                '/provenance.reward.v1.Msg/CreateRewardProgram',
                request_serializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgCreateRewardProgramRequest.SerializeToString,
                response_deserializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgCreateRewardProgramResponse.FromString,
                )
        self.EndRewardProgram = channel.unary_unary(
                '/provenance.reward.v1.Msg/EndRewardProgram',
                request_serializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgEndRewardProgramRequest.SerializeToString,
                response_deserializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgEndRewardProgramResponse.FromString,
                )
        self.ClaimRewards = channel.unary_unary(
                '/provenance.reward.v1.Msg/ClaimRewards',
                request_serializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgClaimRewardsRequest.SerializeToString,
                response_deserializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgClaimRewardsResponse.FromString,
                )
        self.ClaimAllRewards = channel.unary_unary(
                '/provenance.reward.v1.Msg/ClaimAllRewards',
                request_serializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgClaimAllRewardsRequest.SerializeToString,
                response_deserializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgClaimAllRewardsResponse.FromString,
                )


class MsgServicer(object):
    """Msg
    """

    def CreateRewardProgram(self, request, context):
        """CreateRewardProgram is the RPC endpoint for creating a rewards program
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndRewardProgram(self, request, context):
        """EndRewardProgram is the RPC endpoint for ending a rewards program
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClaimRewards(self, request, context):
        """ClaimRewards is the RPC endpoint for claiming rewards belonging to completed claim periods of a reward program
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClaimAllRewards(self, request, context):
        """ClaimAllRewards is the RPC endpoint for claiming rewards for completed claim periods of every reward program for
        the signer of the tx.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRewardProgram': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRewardProgram,
                    request_deserializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgCreateRewardProgramRequest.FromString,
                    response_serializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgCreateRewardProgramResponse.SerializeToString,
            ),
            'EndRewardProgram': grpc.unary_unary_rpc_method_handler(
                    servicer.EndRewardProgram,
                    request_deserializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgEndRewardProgramRequest.FromString,
                    response_serializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgEndRewardProgramResponse.SerializeToString,
            ),
            'ClaimRewards': grpc.unary_unary_rpc_method_handler(
                    servicer.ClaimRewards,
                    request_deserializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgClaimRewardsRequest.FromString,
                    response_serializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgClaimRewardsResponse.SerializeToString,
            ),
            'ClaimAllRewards': grpc.unary_unary_rpc_method_handler(
                    servicer.ClaimAllRewards,
                    request_deserializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgClaimAllRewardsRequest.FromString,
                    response_serializer=provenance_dot_reward_dot_v1_dot_tx__pb2.MsgClaimAllRewardsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'provenance.reward.v1.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg
    """

    @staticmethod
    def CreateRewardProgram(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.reward.v1.Msg/CreateRewardProgram',
            provenance_dot_reward_dot_v1_dot_tx__pb2.MsgCreateRewardProgramRequest.SerializeToString,
            provenance_dot_reward_dot_v1_dot_tx__pb2.MsgCreateRewardProgramResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndRewardProgram(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.reward.v1.Msg/EndRewardProgram',
            provenance_dot_reward_dot_v1_dot_tx__pb2.MsgEndRewardProgramRequest.SerializeToString,
            provenance_dot_reward_dot_v1_dot_tx__pb2.MsgEndRewardProgramResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClaimRewards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.reward.v1.Msg/ClaimRewards',
            provenance_dot_reward_dot_v1_dot_tx__pb2.MsgClaimRewardsRequest.SerializeToString,
            provenance_dot_reward_dot_v1_dot_tx__pb2.MsgClaimRewardsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClaimAllRewards(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.reward.v1.Msg/ClaimAllRewards',
            provenance_dot_reward_dot_v1_dot_tx__pb2.MsgClaimAllRewardsRequest.SerializeToString,
            provenance_dot_reward_dot_v1_dot_tx__pb2.MsgClaimAllRewardsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
