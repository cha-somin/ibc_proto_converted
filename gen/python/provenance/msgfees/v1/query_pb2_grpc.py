# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from provenance.msgfees.v1 import query_pb2 as provenance_dot_msgfees_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service for marker module.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/provenance.msgfees.v1.Query/Params',
                request_serializer=provenance_dot_msgfees_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=provenance_dot_msgfees_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.QueryAllMsgFees = channel.unary_unary(
                '/provenance.msgfees.v1.Query/QueryAllMsgFees',
                request_serializer=provenance_dot_msgfees_dot_v1_dot_query__pb2.QueryAllMsgFeesRequest.SerializeToString,
                response_deserializer=provenance_dot_msgfees_dot_v1_dot_query__pb2.QueryAllMsgFeesResponse.FromString,
                )
        self.CalculateTxFees = channel.unary_unary(
                '/provenance.msgfees.v1.Query/CalculateTxFees',
                request_serializer=provenance_dot_msgfees_dot_v1_dot_query__pb2.CalculateTxFeesRequest.SerializeToString,
                response_deserializer=provenance_dot_msgfees_dot_v1_dot_query__pb2.CalculateTxFeesResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service for marker module.
    """

    def Params(self, request, context):
        """Params queries the parameters for x/msgfees
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryAllMsgFees(self, request, context):
        """Query all Msgs which have fees associated with them.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateTxFees(self, request, context):
        """CalculateTxFees simulates executing a transaction for estimating gas usage and additional fees.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=provenance_dot_msgfees_dot_v1_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=provenance_dot_msgfees_dot_v1_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'QueryAllMsgFees': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryAllMsgFees,
                    request_deserializer=provenance_dot_msgfees_dot_v1_dot_query__pb2.QueryAllMsgFeesRequest.FromString,
                    response_serializer=provenance_dot_msgfees_dot_v1_dot_query__pb2.QueryAllMsgFeesResponse.SerializeToString,
            ),
            'CalculateTxFees': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateTxFees,
                    request_deserializer=provenance_dot_msgfees_dot_v1_dot_query__pb2.CalculateTxFeesRequest.FromString,
                    response_serializer=provenance_dot_msgfees_dot_v1_dot_query__pb2.CalculateTxFeesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'provenance.msgfees.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service for marker module.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.msgfees.v1.Query/Params',
            provenance_dot_msgfees_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
            provenance_dot_msgfees_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryAllMsgFees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.msgfees.v1.Query/QueryAllMsgFees',
            provenance_dot_msgfees_dot_v1_dot_query__pb2.QueryAllMsgFeesRequest.SerializeToString,
            provenance_dot_msgfees_dot_v1_dot_query__pb2.QueryAllMsgFeesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateTxFees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.msgfees.v1.Query/CalculateTxFees',
            provenance_dot_msgfees_dot_v1_dot_query__pb2.CalculateTxFeesRequest.SerializeToString,
            provenance_dot_msgfees_dot_v1_dot_query__pb2.CalculateTxFeesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
