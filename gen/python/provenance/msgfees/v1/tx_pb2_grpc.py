# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from provenance.msgfees.v1 import tx_pb2 as provenance_dot_msgfees_dot_v1_dot_tx__pb2


class MsgStub(object):
    """Msg defines the msgfees Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AssessCustomMsgFee = channel.unary_unary(
                '/provenance.msgfees.v1.Msg/AssessCustomMsgFee',
                request_serializer=provenance_dot_msgfees_dot_v1_dot_tx__pb2.MsgAssessCustomMsgFeeRequest.SerializeToString,
                response_deserializer=provenance_dot_msgfees_dot_v1_dot_tx__pb2.MsgAssessCustomMsgFeeResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the msgfees Msg service.
    """

    def AssessCustomMsgFee(self, request, context):
        """AssessCustomMsgFee endpoint executes the additional fee charges.
        This will only emit the event and not persist it to the keeper.  Fees are handled with the custom msg fee handlers
        Use Case: smart contracts will be able to charge additional fees and direct partial funds to specified recipient
        for executing contracts
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AssessCustomMsgFee': grpc.unary_unary_rpc_method_handler(
                    servicer.AssessCustomMsgFee,
                    request_deserializer=provenance_dot_msgfees_dot_v1_dot_tx__pb2.MsgAssessCustomMsgFeeRequest.FromString,
                    response_serializer=provenance_dot_msgfees_dot_v1_dot_tx__pb2.MsgAssessCustomMsgFeeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'provenance.msgfees.v1.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the msgfees Msg service.
    """

    @staticmethod
    def AssessCustomMsgFee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.msgfees.v1.Msg/AssessCustomMsgFee',
            provenance_dot_msgfees_dot_v1_dot_tx__pb2.MsgAssessCustomMsgFeeRequest.SerializeToString,
            provenance_dot_msgfees_dot_v1_dot_tx__pb2.MsgAssessCustomMsgFeeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
