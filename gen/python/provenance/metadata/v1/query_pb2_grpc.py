# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from provenance.metadata.v1 import query_pb2 as provenance_dot_metadata_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query defines the Metadata Query service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/provenance.metadata.v1.Query/Params',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.Scope = channel.unary_unary(
                '/provenance.metadata.v1.Query/Scope',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeResponse.FromString,
                )
        self.ScopesAll = channel.unary_unary(
                '/provenance.metadata.v1.Query/ScopesAll',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopesAllRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopesAllResponse.FromString,
                )
        self.Sessions = channel.unary_unary(
                '/provenance.metadata.v1.Query/Sessions',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.SessionsRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.SessionsResponse.FromString,
                )
        self.SessionsAll = channel.unary_unary(
                '/provenance.metadata.v1.Query/SessionsAll',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.SessionsAllRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.SessionsAllResponse.FromString,
                )
        self.Records = channel.unary_unary(
                '/provenance.metadata.v1.Query/Records',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordsRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordsResponse.FromString,
                )
        self.RecordsAll = channel.unary_unary(
                '/provenance.metadata.v1.Query/RecordsAll',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordsAllRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordsAllResponse.FromString,
                )
        self.Ownership = channel.unary_unary(
                '/provenance.metadata.v1.Query/Ownership',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OwnershipRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OwnershipResponse.FromString,
                )
        self.ValueOwnership = channel.unary_unary(
                '/provenance.metadata.v1.Query/ValueOwnership',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ValueOwnershipRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ValueOwnershipResponse.FromString,
                )
        self.ScopeSpecification = channel.unary_unary(
                '/provenance.metadata.v1.Query/ScopeSpecification',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeSpecificationRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeSpecificationResponse.FromString,
                )
        self.ScopeSpecificationsAll = channel.unary_unary(
                '/provenance.metadata.v1.Query/ScopeSpecificationsAll',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeSpecificationsAllRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeSpecificationsAllResponse.FromString,
                )
        self.ContractSpecification = channel.unary_unary(
                '/provenance.metadata.v1.Query/ContractSpecification',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ContractSpecificationRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ContractSpecificationResponse.FromString,
                )
        self.ContractSpecificationsAll = channel.unary_unary(
                '/provenance.metadata.v1.Query/ContractSpecificationsAll',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ContractSpecificationsAllRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ContractSpecificationsAllResponse.FromString,
                )
        self.RecordSpecificationsForContractSpecification = channel.unary_unary(
                '/provenance.metadata.v1.Query/RecordSpecificationsForContractSpecification',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationsForContractSpecificationRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationsForContractSpecificationResponse.FromString,
                )
        self.RecordSpecification = channel.unary_unary(
                '/provenance.metadata.v1.Query/RecordSpecification',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationResponse.FromString,
                )
        self.RecordSpecificationsAll = channel.unary_unary(
                '/provenance.metadata.v1.Query/RecordSpecificationsAll',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationsAllRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationsAllResponse.FromString,
                )
        self.OSLocatorParams = channel.unary_unary(
                '/provenance.metadata.v1.Query/OSLocatorParams',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorParamsRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorParamsResponse.FromString,
                )
        self.OSLocator = channel.unary_unary(
                '/provenance.metadata.v1.Query/OSLocator',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorResponse.FromString,
                )
        self.OSLocatorsByURI = channel.unary_unary(
                '/provenance.metadata.v1.Query/OSLocatorsByURI',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorsByURIRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorsByURIResponse.FromString,
                )
        self.OSLocatorsByScope = channel.unary_unary(
                '/provenance.metadata.v1.Query/OSLocatorsByScope',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorsByScopeRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorsByScopeResponse.FromString,
                )
        self.OSAllLocators = channel.unary_unary(
                '/provenance.metadata.v1.Query/OSAllLocators',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSAllLocatorsRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSAllLocatorsResponse.FromString,
                )
        self.AccountData = channel.unary_unary(
                '/provenance.metadata.v1.Query/AccountData',
                request_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.AccountDataRequest.SerializeToString,
                response_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.AccountDataResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the Metadata Query service.
    """

    def Params(self, request, context):
        """Params queries the parameters of x/metadata module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Scope(self, request, context):
        """---- Primary Data Queries -----

        Scope searches for a scope.

        The scope id, if provided, must either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address,
        e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. The session addr, if provided, must be a bech32 session address,
        e.g. session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The record_addr, if provided, must be a
        bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.

        * If only a scope_id is provided, that scope is returned.
        * If only a session_addr is provided, the scope containing that session is returned.
        * If only a record_addr is provided, the scope containing that record is returned.
        * If more than one of scope_id, session_addr, and record_addr are provided, and they don't refer to the same scope,
        a bad request is returned.

        Providing a session addr or record addr does not limit the sessions and records returned (if requested).
        Those parameters are only used to find the scope.

        By default, sessions and records are not included.
        Set include_sessions and/or include_records to true to include sessions and/or records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScopesAll(self, request, context):
        """ScopesAll retrieves all scopes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Sessions(self, request, context):
        """Sessions searches for sessions.

        The scope_id can either be scope uuid, e.g. 91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g.
        scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly, the session_id can either be a uuid or session address, e.g.
        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The record_addr, if provided, must be a
        bech32 record address, e.g. record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3.

        * If only a scope_id is provided, all sessions in that scope are returned.
        * If only a session_id is provided, it must be an address, and that single session is returned.
        * If the session_id is a uuid, then either a scope_id or record_addr must also be provided, and that single session
        is returned.
        * If only a record_addr is provided, the session containing that record will be returned.
        * If a record_name is provided then either a scope_id, session_id as an address, or record_addr must also be
        provided, and the session containing that record will be returned.

        A bad request is returned if:
        * The session_id is a uuid and is provided without a scope_id or record_addr.
        * A record_name is provided without any way to identify the scope (e.g. a scope_id, a session_id as an address, or
        a record_addr).
        * Two or more of scope_id, session_id as an address, and record_addr are provided and don't all refer to the same
        scope.
        * A record_addr (or scope_id and record_name) is provided with a session_id and that session does not contain such
        a record.
        * A record_addr and record_name are both provided, but reference different records.

        By default, the scope and records are not included.
        Set include_scope and/or include_records to true to include the scope and/or records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SessionsAll(self, request, context):
        """SessionsAll retrieves all sessions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Records(self, request, context):
        """Records searches for records.

        The record_addr, if provided, must be a bech32 record address, e.g.
        record1q2ge0zaztu65tx5x5llv5xc9ztsw42dq2jdvmdazuwzcaddhh8gmu3mcze3. The scope-id can either be scope uuid, e.g.
        91978ba2-5f35-459a-86a7-feca1b0512e0 or a scope address, e.g. scope1qzge0zaztu65tx5x5llv5xc9ztsqxlkwel. Similarly,
        the session_id can either be a uuid or session address, e.g.
        session1qxge0zaztu65tx5x5llv5xc9zts9sqlch3sxwn44j50jzgt8rshvqyfrjcr. The name is the name of the record you're
        interested in.

        * If only a record_addr is provided, that single record will be returned.
        * If only a scope_id is provided, all records in that scope will be returned.
        * If only a session_id (or scope_id/session_id), all records in that session will be returned.
        * If a name is provided with a scope_id and/or session_id, that single record will be returned.

        A bad request is returned if:
        * The session_id is a uuid and no scope_id is provided.
        * There are two or more of record_addr, session_id, and scope_id, and they don't all refer to the same scope.
        * A name is provided, but not a scope_id and/or a session_id.
        * A name and record_addr are provided and the name doesn't match the record_addr.

        By default, the scope and sessions are not included.
        Set include_scope and/or include_sessions to true to include the scope and/or sessions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordsAll(self, request, context):
        """RecordsAll retrieves all records.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ownership(self, request, context):
        """Ownership returns the scope identifiers that list the given address as either a data or value owner.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValueOwnership(self, request, context):
        """ValueOwnership returns the scope identifiers that list the given address as the value owner.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScopeSpecification(self, request, context):
        """---- Specification Queries -----

        ScopeSpecification returns a scope specification for the given specification id.

        The specification_id can either be a uuid, e.g. dc83ea70-eacd-40fe-9adf-1cf6148bf8a2 or a bech32 scope
        specification address, e.g. scopespec1qnwg86nsatx5pl56muw0v9ytlz3qu3jx6m.

        By default, the contract and record specifications are not included.
        Set include_contract_specs and/or include_record_specs to true to include contract and/or record specifications.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScopeSpecificationsAll(self, request, context):
        """ScopeSpecificationsAll retrieves all scope specifications.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContractSpecification(self, request, context):
        """ContractSpecification returns a contract specification for the given specification id.

        The specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract
        specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record specification
        address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If it is a record specification
        address, then the contract specification that contains that record specification is looked up.

        By default, the record specifications for this contract specification are not included.
        Set include_record_specs to true to include them in the result.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContractSpecificationsAll(self, request, context):
        """ContractSpecificationsAll retrieves all contract specifications.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordSpecificationsForContractSpecification(self, request, context):
        """RecordSpecificationsForContractSpecification returns the record specifications for the given input.

        The specification_id can either be a uuid, e.g. def6bc0a-c9dd-4874-948f-5206e6060a84, a bech32 contract
        specification address, e.g. contractspec1q000d0q2e8w5say53afqdesxp2zqzkr4fn, or a bech32 record specification
        address, e.g. recspec1qh00d0q2e8w5say53afqdesxp2zw42dq2jdvmdazuwzcaddhh8gmuqhez44. If it is a record specification
        address, then the contract specification that contains that record specification is used.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordSpecification(self, request, context):
        """RecordSpecification returns a record specification for the given input.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RecordSpecificationsAll(self, request, context):
        """RecordSpecificationsAll retrieves all record specifications.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OSLocatorParams(self, request, context):
        """---- Object Store Locator Queries -----

        OSLocatorParams returns all parameters for the object store locator sub module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OSLocator(self, request, context):
        """OSLocator returns an ObjectStoreLocator by its owner's address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OSLocatorsByURI(self, request, context):
        """OSLocatorsByURI returns all ObjectStoreLocator entries for a locator uri.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OSLocatorsByScope(self, request, context):
        """OSLocatorsByScope returns all ObjectStoreLocator entries for a for all signer's present in the specified scope.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OSAllLocators(self, request, context):
        """OSAllLocators returns all ObjectStoreLocator entries.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AccountData(self, request, context):
        """AccountData gets the account data associated with a metadata address.
        Currently, only scope ids are supported.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'Scope': grpc.unary_unary_rpc_method_handler(
                    servicer.Scope,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeResponse.SerializeToString,
            ),
            'ScopesAll': grpc.unary_unary_rpc_method_handler(
                    servicer.ScopesAll,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopesAllRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopesAllResponse.SerializeToString,
            ),
            'Sessions': grpc.unary_unary_rpc_method_handler(
                    servicer.Sessions,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.SessionsRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.SessionsResponse.SerializeToString,
            ),
            'SessionsAll': grpc.unary_unary_rpc_method_handler(
                    servicer.SessionsAll,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.SessionsAllRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.SessionsAllResponse.SerializeToString,
            ),
            'Records': grpc.unary_unary_rpc_method_handler(
                    servicer.Records,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordsRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordsResponse.SerializeToString,
            ),
            'RecordsAll': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordsAll,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordsAllRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordsAllResponse.SerializeToString,
            ),
            'Ownership': grpc.unary_unary_rpc_method_handler(
                    servicer.Ownership,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OwnershipRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OwnershipResponse.SerializeToString,
            ),
            'ValueOwnership': grpc.unary_unary_rpc_method_handler(
                    servicer.ValueOwnership,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ValueOwnershipRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ValueOwnershipResponse.SerializeToString,
            ),
            'ScopeSpecification': grpc.unary_unary_rpc_method_handler(
                    servicer.ScopeSpecification,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeSpecificationRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeSpecificationResponse.SerializeToString,
            ),
            'ScopeSpecificationsAll': grpc.unary_unary_rpc_method_handler(
                    servicer.ScopeSpecificationsAll,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeSpecificationsAllRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeSpecificationsAllResponse.SerializeToString,
            ),
            'ContractSpecification': grpc.unary_unary_rpc_method_handler(
                    servicer.ContractSpecification,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ContractSpecificationRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ContractSpecificationResponse.SerializeToString,
            ),
            'ContractSpecificationsAll': grpc.unary_unary_rpc_method_handler(
                    servicer.ContractSpecificationsAll,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ContractSpecificationsAllRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.ContractSpecificationsAllResponse.SerializeToString,
            ),
            'RecordSpecificationsForContractSpecification': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordSpecificationsForContractSpecification,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationsForContractSpecificationRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationsForContractSpecificationResponse.SerializeToString,
            ),
            'RecordSpecification': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordSpecification,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationResponse.SerializeToString,
            ),
            'RecordSpecificationsAll': grpc.unary_unary_rpc_method_handler(
                    servicer.RecordSpecificationsAll,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationsAllRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationsAllResponse.SerializeToString,
            ),
            'OSLocatorParams': grpc.unary_unary_rpc_method_handler(
                    servicer.OSLocatorParams,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorParamsRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorParamsResponse.SerializeToString,
            ),
            'OSLocator': grpc.unary_unary_rpc_method_handler(
                    servicer.OSLocator,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorResponse.SerializeToString,
            ),
            'OSLocatorsByURI': grpc.unary_unary_rpc_method_handler(
                    servicer.OSLocatorsByURI,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorsByURIRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorsByURIResponse.SerializeToString,
            ),
            'OSLocatorsByScope': grpc.unary_unary_rpc_method_handler(
                    servicer.OSLocatorsByScope,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorsByScopeRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorsByScopeResponse.SerializeToString,
            ),
            'OSAllLocators': grpc.unary_unary_rpc_method_handler(
                    servicer.OSAllLocators,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSAllLocatorsRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.OSAllLocatorsResponse.SerializeToString,
            ),
            'AccountData': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountData,
                    request_deserializer=provenance_dot_metadata_dot_v1_dot_query__pb2.AccountDataRequest.FromString,
                    response_serializer=provenance_dot_metadata_dot_v1_dot_query__pb2.AccountDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'provenance.metadata.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the Metadata Query service.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/Params',
            provenance_dot_metadata_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Scope(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/Scope',
            provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ScopesAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/ScopesAll',
            provenance_dot_metadata_dot_v1_dot_query__pb2.ScopesAllRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.ScopesAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Sessions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/Sessions',
            provenance_dot_metadata_dot_v1_dot_query__pb2.SessionsRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.SessionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SessionsAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/SessionsAll',
            provenance_dot_metadata_dot_v1_dot_query__pb2.SessionsAllRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.SessionsAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Records(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/Records',
            provenance_dot_metadata_dot_v1_dot_query__pb2.RecordsRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.RecordsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordsAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/RecordsAll',
            provenance_dot_metadata_dot_v1_dot_query__pb2.RecordsAllRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.RecordsAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ownership(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/Ownership',
            provenance_dot_metadata_dot_v1_dot_query__pb2.OwnershipRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.OwnershipResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ValueOwnership(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/ValueOwnership',
            provenance_dot_metadata_dot_v1_dot_query__pb2.ValueOwnershipRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.ValueOwnershipResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ScopeSpecification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/ScopeSpecification',
            provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeSpecificationRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeSpecificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ScopeSpecificationsAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/ScopeSpecificationsAll',
            provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeSpecificationsAllRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.ScopeSpecificationsAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContractSpecification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/ContractSpecification',
            provenance_dot_metadata_dot_v1_dot_query__pb2.ContractSpecificationRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.ContractSpecificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ContractSpecificationsAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/ContractSpecificationsAll',
            provenance_dot_metadata_dot_v1_dot_query__pb2.ContractSpecificationsAllRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.ContractSpecificationsAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordSpecificationsForContractSpecification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/RecordSpecificationsForContractSpecification',
            provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationsForContractSpecificationRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationsForContractSpecificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordSpecification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/RecordSpecification',
            provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RecordSpecificationsAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/RecordSpecificationsAll',
            provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationsAllRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.RecordSpecificationsAllResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OSLocatorParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/OSLocatorParams',
            provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorParamsRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OSLocator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/OSLocator',
            provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OSLocatorsByURI(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/OSLocatorsByURI',
            provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorsByURIRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorsByURIResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OSLocatorsByScope(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/OSLocatorsByScope',
            provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorsByScopeRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.OSLocatorsByScopeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OSAllLocators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/OSAllLocators',
            provenance_dot_metadata_dot_v1_dot_query__pb2.OSAllLocatorsRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.OSAllLocatorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AccountData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.metadata.v1.Query/AccountData',
            provenance_dot_metadata_dot_v1_dot_query__pb2.AccountDataRequest.SerializeToString,
            provenance_dot_metadata_dot_v1_dot_query__pb2.AccountDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
