# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from provenance.marker.v1 import query_pb2 as provenance_dot_marker_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service for marker module.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/provenance.marker.v1.Query/Params',
                request_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.AllMarkers = channel.unary_unary(
                '/provenance.marker.v1.Query/AllMarkers',
                request_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryAllMarkersRequest.SerializeToString,
                response_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryAllMarkersResponse.FromString,
                )
        self.Marker = channel.unary_unary(
                '/provenance.marker.v1.Query/Marker',
                request_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryMarkerRequest.SerializeToString,
                response_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryMarkerResponse.FromString,
                )
        self.Holding = channel.unary_unary(
                '/provenance.marker.v1.Query/Holding',
                request_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryHoldingRequest.SerializeToString,
                response_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryHoldingResponse.FromString,
                )
        self.Supply = channel.unary_unary(
                '/provenance.marker.v1.Query/Supply',
                request_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QuerySupplyRequest.SerializeToString,
                response_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QuerySupplyResponse.FromString,
                )
        self.Escrow = channel.unary_unary(
                '/provenance.marker.v1.Query/Escrow',
                request_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryEscrowRequest.SerializeToString,
                response_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryEscrowResponse.FromString,
                )
        self.Access = channel.unary_unary(
                '/provenance.marker.v1.Query/Access',
                request_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryAccessRequest.SerializeToString,
                response_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryAccessResponse.FromString,
                )
        self.DenomMetadata = channel.unary_unary(
                '/provenance.marker.v1.Query/DenomMetadata',
                request_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryDenomMetadataRequest.SerializeToString,
                response_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryDenomMetadataResponse.FromString,
                )
        self.AccountData = channel.unary_unary(
                '/provenance.marker.v1.Query/AccountData',
                request_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryAccountDataRequest.SerializeToString,
                response_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryAccountDataResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service for marker module.
    """

    def Params(self, request, context):
        """Params queries the parameters of x/bank module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllMarkers(self, request, context):
        """Returns a list of all markers on the blockchain
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Marker(self, request, context):
        """query for a single marker by denom or address
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Holding(self, request, context):
        """query for all accounts holding the given marker coins
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Supply(self, request, context):
        """query for supply of coin on a marker account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Escrow(self, request, context):
        """query for coins on a marker account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Access(self, request, context):
        """query for access records on an account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DenomMetadata(self, request, context):
        """query for access records on an account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AccountData(self, request, context):
        """query for account data associated with a denom
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'AllMarkers': grpc.unary_unary_rpc_method_handler(
                    servicer.AllMarkers,
                    request_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryAllMarkersRequest.FromString,
                    response_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryAllMarkersResponse.SerializeToString,
            ),
            'Marker': grpc.unary_unary_rpc_method_handler(
                    servicer.Marker,
                    request_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryMarkerRequest.FromString,
                    response_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryMarkerResponse.SerializeToString,
            ),
            'Holding': grpc.unary_unary_rpc_method_handler(
                    servicer.Holding,
                    request_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryHoldingRequest.FromString,
                    response_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryHoldingResponse.SerializeToString,
            ),
            'Supply': grpc.unary_unary_rpc_method_handler(
                    servicer.Supply,
                    request_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QuerySupplyRequest.FromString,
                    response_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QuerySupplyResponse.SerializeToString,
            ),
            'Escrow': grpc.unary_unary_rpc_method_handler(
                    servicer.Escrow,
                    request_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryEscrowRequest.FromString,
                    response_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryEscrowResponse.SerializeToString,
            ),
            'Access': grpc.unary_unary_rpc_method_handler(
                    servicer.Access,
                    request_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryAccessRequest.FromString,
                    response_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryAccessResponse.SerializeToString,
            ),
            'DenomMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.DenomMetadata,
                    request_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryDenomMetadataRequest.FromString,
                    response_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryDenomMetadataResponse.SerializeToString,
            ),
            'AccountData': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountData,
                    request_deserializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryAccountDataRequest.FromString,
                    response_serializer=provenance_dot_marker_dot_v1_dot_query__pb2.QueryAccountDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'provenance.marker.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service for marker module.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.marker.v1.Query/Params',
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AllMarkers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.marker.v1.Query/AllMarkers',
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryAllMarkersRequest.SerializeToString,
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryAllMarkersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Marker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.marker.v1.Query/Marker',
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryMarkerRequest.SerializeToString,
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryMarkerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Holding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.marker.v1.Query/Holding',
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryHoldingRequest.SerializeToString,
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryHoldingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Supply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.marker.v1.Query/Supply',
            provenance_dot_marker_dot_v1_dot_query__pb2.QuerySupplyRequest.SerializeToString,
            provenance_dot_marker_dot_v1_dot_query__pb2.QuerySupplyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Escrow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.marker.v1.Query/Escrow',
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryEscrowRequest.SerializeToString,
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryEscrowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Access(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.marker.v1.Query/Access',
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryAccessRequest.SerializeToString,
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryAccessResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DenomMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.marker.v1.Query/DenomMetadata',
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryDenomMetadataRequest.SerializeToString,
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryDenomMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AccountData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/provenance.marker.v1.Query/AccountData',
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryAccountDataRequest.SerializeToString,
            provenance_dot_marker_dot_v1_dot_query__pb2.QueryAccountDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
