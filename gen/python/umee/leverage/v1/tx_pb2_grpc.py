# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from umee.leverage.v1 import tx_pb2 as umee_dot_leverage_dot_v1_dot_tx__pb2


class MsgStub(object):
    """Msg defines the x/leverage module's Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Supply = channel.unary_unary(
                '/umee.leverage.v1.Msg/Supply',
                request_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgSupply.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgSupplyResponse.FromString,
                )
        self.Withdraw = channel.unary_unary(
                '/umee.leverage.v1.Msg/Withdraw',
                request_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgWithdraw.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgWithdrawResponse.FromString,
                )
        self.MaxWithdraw = channel.unary_unary(
                '/umee.leverage.v1.Msg/MaxWithdraw',
                request_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgMaxWithdraw.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgMaxWithdrawResponse.FromString,
                )
        self.Collateralize = channel.unary_unary(
                '/umee.leverage.v1.Msg/Collateralize',
                request_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgCollateralize.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgCollateralizeResponse.FromString,
                )
        self.Decollateralize = channel.unary_unary(
                '/umee.leverage.v1.Msg/Decollateralize',
                request_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgDecollateralize.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgDecollateralizeResponse.FromString,
                )
        self.Borrow = channel.unary_unary(
                '/umee.leverage.v1.Msg/Borrow',
                request_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgBorrow.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgBorrowResponse.FromString,
                )
        self.MaxBorrow = channel.unary_unary(
                '/umee.leverage.v1.Msg/MaxBorrow',
                request_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgMaxBorrow.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgMaxBorrowResponse.FromString,
                )
        self.Repay = channel.unary_unary(
                '/umee.leverage.v1.Msg/Repay',
                request_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgRepay.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgRepayResponse.FromString,
                )
        self.Liquidate = channel.unary_unary(
                '/umee.leverage.v1.Msg/Liquidate',
                request_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgLiquidate.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgLiquidateResponse.FromString,
                )
        self.SupplyCollateral = channel.unary_unary(
                '/umee.leverage.v1.Msg/SupplyCollateral',
                request_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgSupplyCollateral.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgSupplyCollateralResponse.FromString,
                )
        self.GovUpdateRegistry = channel.unary_unary(
                '/umee.leverage.v1.Msg/GovUpdateRegistry',
                request_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgGovUpdateRegistry.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgGovUpdateRegistryResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the x/leverage module's Msg service.
    """

    def Supply(self, request, context):
        """Supply moves tokens from user balance to the module for lending or collateral.
        The user receives uTokens in return.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Withdraw(self, request, context):
        """Withdraw moves previously supplied tokens from the module back to the user balance in
        exchange for burning uTokens.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MaxWithdraw(self, request, context):
        """MaxWithdraw moves previously supplied tokens from the module back to the user balance in
        exchange for burning uTokens. It automatically calculates the maximum valid amount to withdraw.
        Zero is returned if no more tokens can be withdrawn.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Collateralize(self, request, context):
        """Collateralize enables selected uTokens as collateral, which moves them to the module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Decollateralize(self, request, context):
        """Decollateralize disables selected uTokens as collateral. They are returned to the user's
        balance from the module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Borrow(self, request, context):
        """Borrow allows a user to borrow tokens from the module if they have sufficient collateral.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MaxBorrow(self, request, context):
        """MaxBorrow allows a user to borrow the maximum amount of tokens their collateral will allow.
        Zero is returned if no more can be borrowed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Repay(self, request, context):
        """Repay allows a user to repay previously borrowed tokens and interest.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Liquidate(self, request, context):
        """Liquidate allows a user to repay a different user's borrowed coins in exchange for some
        of the target's collateral.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SupplyCollateral(self, request, context):
        """SupplyCollateral combines the Supply and Collateralize actions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GovUpdateRegistry(self, request, context):
        """GovUpdateRegistry adds new tokens to the token registry or
        updates existing tokens with new settings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Supply': grpc.unary_unary_rpc_method_handler(
                    servicer.Supply,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgSupply.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgSupplyResponse.SerializeToString,
            ),
            'Withdraw': grpc.unary_unary_rpc_method_handler(
                    servicer.Withdraw,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgWithdraw.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgWithdrawResponse.SerializeToString,
            ),
            'MaxWithdraw': grpc.unary_unary_rpc_method_handler(
                    servicer.MaxWithdraw,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgMaxWithdraw.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgMaxWithdrawResponse.SerializeToString,
            ),
            'Collateralize': grpc.unary_unary_rpc_method_handler(
                    servicer.Collateralize,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgCollateralize.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgCollateralizeResponse.SerializeToString,
            ),
            'Decollateralize': grpc.unary_unary_rpc_method_handler(
                    servicer.Decollateralize,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgDecollateralize.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgDecollateralizeResponse.SerializeToString,
            ),
            'Borrow': grpc.unary_unary_rpc_method_handler(
                    servicer.Borrow,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgBorrow.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgBorrowResponse.SerializeToString,
            ),
            'MaxBorrow': grpc.unary_unary_rpc_method_handler(
                    servicer.MaxBorrow,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgMaxBorrow.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgMaxBorrowResponse.SerializeToString,
            ),
            'Repay': grpc.unary_unary_rpc_method_handler(
                    servicer.Repay,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgRepay.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgRepayResponse.SerializeToString,
            ),
            'Liquidate': grpc.unary_unary_rpc_method_handler(
                    servicer.Liquidate,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgLiquidate.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgLiquidateResponse.SerializeToString,
            ),
            'SupplyCollateral': grpc.unary_unary_rpc_method_handler(
                    servicer.SupplyCollateral,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgSupplyCollateral.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgSupplyCollateralResponse.SerializeToString,
            ),
            'GovUpdateRegistry': grpc.unary_unary_rpc_method_handler(
                    servicer.GovUpdateRegistry,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgGovUpdateRegistry.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_tx__pb2.MsgGovUpdateRegistryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'umee.leverage.v1.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the x/leverage module's Msg service.
    """

    @staticmethod
    def Supply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Msg/Supply',
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgSupply.SerializeToString,
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgSupplyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Withdraw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Msg/Withdraw',
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgWithdraw.SerializeToString,
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgWithdrawResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MaxWithdraw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Msg/MaxWithdraw',
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgMaxWithdraw.SerializeToString,
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgMaxWithdrawResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Collateralize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Msg/Collateralize',
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgCollateralize.SerializeToString,
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgCollateralizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Decollateralize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Msg/Decollateralize',
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgDecollateralize.SerializeToString,
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgDecollateralizeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Borrow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Msg/Borrow',
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgBorrow.SerializeToString,
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgBorrowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MaxBorrow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Msg/MaxBorrow',
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgMaxBorrow.SerializeToString,
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgMaxBorrowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Repay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Msg/Repay',
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgRepay.SerializeToString,
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgRepayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Liquidate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Msg/Liquidate',
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgLiquidate.SerializeToString,
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgLiquidateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SupplyCollateral(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Msg/SupplyCollateral',
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgSupplyCollateral.SerializeToString,
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgSupplyCollateralResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GovUpdateRegistry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Msg/GovUpdateRegistry',
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgGovUpdateRegistry.SerializeToString,
            umee_dot_leverage_dot_v1_dot_tx__pb2.MsgGovUpdateRegistryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
