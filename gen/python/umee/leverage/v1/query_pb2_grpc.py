# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from umee.leverage.v1 import query_pb2 as umee_dot_leverage_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/umee.leverage.v1.Query/Params',
                request_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryParams.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.RegisteredTokens = channel.unary_unary(
                '/umee.leverage.v1.Query/RegisteredTokens',
                request_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryRegisteredTokens.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryRegisteredTokensResponse.FromString,
                )
        self.MarketSummary = channel.unary_unary(
                '/umee.leverage.v1.Query/MarketSummary',
                request_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryMarketSummary.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryMarketSummaryResponse.FromString,
                )
        self.AccountBalances = channel.unary_unary(
                '/umee.leverage.v1.Query/AccountBalances',
                request_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryAccountBalances.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryAccountBalancesResponse.FromString,
                )
        self.AccountSummary = channel.unary_unary(
                '/umee.leverage.v1.Query/AccountSummary',
                request_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryAccountSummary.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryAccountSummaryResponse.FromString,
                )
        self.LiquidationTargets = channel.unary_unary(
                '/umee.leverage.v1.Query/LiquidationTargets',
                request_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryLiquidationTargets.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryLiquidationTargetsResponse.FromString,
                )
        self.BadDebts = channel.unary_unary(
                '/umee.leverage.v1.Query/BadDebts',
                request_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryBadDebts.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryBadDebtsResponse.FromString,
                )
        self.MaxWithdraw = channel.unary_unary(
                '/umee.leverage.v1.Query/MaxWithdraw',
                request_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryMaxWithdraw.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryMaxWithdrawResponse.FromString,
                )
        self.MaxBorrow = channel.unary_unary(
                '/umee.leverage.v1.Query/MaxBorrow',
                request_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryMaxBorrow.SerializeToString,
                response_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryMaxBorrowResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def Params(self, request, context):
        """Params queries the parameters of the x/leverage module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisteredTokens(self, request, context):
        """RegisteredTokens queries for all the registered tokens.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarketSummary(self, request, context):
        """MarketSummary queries a base asset's current borrowing and supplying conditions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AccountBalances(self, request, context):
        """AccountBalances queries an account's current supply, collateral, and borrow positions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AccountSummary(self, request, context):
        """AccountSummary queries USD values representing an account's total positions and borrowing limits. It requires oracle prices to return successfully.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LiquidationTargets(self, request, context):
        """LiquidationTargets queries a list of all borrower account addresses eligible for liquidation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BadDebts(self, request, context):
        """BadDebts queries a list of borrow positions that have been marked for bad debt repayment.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MaxWithdraw(self, request, context):
        """MaxWithdraw queries the maximum amount of a given token an address can withdraw.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MaxBorrow(self, request, context):
        """MaxBorrow queries the maximum amount of a given token an address can borrow.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryParams.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'RegisteredTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisteredTokens,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryRegisteredTokens.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryRegisteredTokensResponse.SerializeToString,
            ),
            'MarketSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.MarketSummary,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryMarketSummary.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryMarketSummaryResponse.SerializeToString,
            ),
            'AccountBalances': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountBalances,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryAccountBalances.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryAccountBalancesResponse.SerializeToString,
            ),
            'AccountSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.AccountSummary,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryAccountSummary.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryAccountSummaryResponse.SerializeToString,
            ),
            'LiquidationTargets': grpc.unary_unary_rpc_method_handler(
                    servicer.LiquidationTargets,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryLiquidationTargets.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryLiquidationTargetsResponse.SerializeToString,
            ),
            'BadDebts': grpc.unary_unary_rpc_method_handler(
                    servicer.BadDebts,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryBadDebts.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryBadDebtsResponse.SerializeToString,
            ),
            'MaxWithdraw': grpc.unary_unary_rpc_method_handler(
                    servicer.MaxWithdraw,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryMaxWithdraw.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryMaxWithdrawResponse.SerializeToString,
            ),
            'MaxBorrow': grpc.unary_unary_rpc_method_handler(
                    servicer.MaxBorrow,
                    request_deserializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryMaxBorrow.FromString,
                    response_serializer=umee_dot_leverage_dot_v1_dot_query__pb2.QueryMaxBorrowResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'umee.leverage.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Query/Params',
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryParams.SerializeToString,
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisteredTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Query/RegisteredTokens',
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryRegisteredTokens.SerializeToString,
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryRegisteredTokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarketSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Query/MarketSummary',
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryMarketSummary.SerializeToString,
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryMarketSummaryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AccountBalances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Query/AccountBalances',
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryAccountBalances.SerializeToString,
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryAccountBalancesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AccountSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Query/AccountSummary',
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryAccountSummary.SerializeToString,
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryAccountSummaryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LiquidationTargets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Query/LiquidationTargets',
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryLiquidationTargets.SerializeToString,
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryLiquidationTargetsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BadDebts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Query/BadDebts',
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryBadDebts.SerializeToString,
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryBadDebtsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MaxWithdraw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Query/MaxWithdraw',
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryMaxWithdraw.SerializeToString,
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryMaxWithdrawResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MaxBorrow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.leverage.v1.Query/MaxBorrow',
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryMaxBorrow.SerializeToString,
            umee_dot_leverage_dot_v1_dot_query__pb2.QueryMaxBorrowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
