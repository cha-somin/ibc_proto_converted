# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from umee.oracle.v1 import query_pb2 as umee_dot_oracle_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExchangeRates = channel.unary_unary(
                '/umee.oracle.v1.Query/ExchangeRates',
                request_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryExchangeRates.SerializeToString,
                response_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryExchangeRatesResponse.FromString,
                )
        self.ActiveExchangeRates = channel.unary_unary(
                '/umee.oracle.v1.Query/ActiveExchangeRates',
                request_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryActiveExchangeRates.SerializeToString,
                response_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryActiveExchangeRatesResponse.FromString,
                )
        self.FeederDelegation = channel.unary_unary(
                '/umee.oracle.v1.Query/FeederDelegation',
                request_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryFeederDelegation.SerializeToString,
                response_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryFeederDelegationResponse.FromString,
                )
        self.MissCounter = channel.unary_unary(
                '/umee.oracle.v1.Query/MissCounter',
                request_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryMissCounter.SerializeToString,
                response_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryMissCounterResponse.FromString,
                )
        self.SlashWindow = channel.unary_unary(
                '/umee.oracle.v1.Query/SlashWindow',
                request_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QuerySlashWindow.SerializeToString,
                response_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QuerySlashWindowResponse.FromString,
                )
        self.AggregatePrevote = channel.unary_unary(
                '/umee.oracle.v1.Query/AggregatePrevote',
                request_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregatePrevote.SerializeToString,
                response_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregatePrevoteResponse.FromString,
                )
        self.AggregatePrevotes = channel.unary_unary(
                '/umee.oracle.v1.Query/AggregatePrevotes',
                request_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregatePrevotes.SerializeToString,
                response_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregatePrevotesResponse.FromString,
                )
        self.AggregateVote = channel.unary_unary(
                '/umee.oracle.v1.Query/AggregateVote',
                request_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregateVote.SerializeToString,
                response_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregateVoteResponse.FromString,
                )
        self.AggregateVotes = channel.unary_unary(
                '/umee.oracle.v1.Query/AggregateVotes',
                request_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregateVotes.SerializeToString,
                response_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregateVotesResponse.FromString,
                )
        self.Params = channel.unary_unary(
                '/umee.oracle.v1.Query/Params',
                request_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryParams.SerializeToString,
                response_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.Medians = channel.unary_unary(
                '/umee.oracle.v1.Query/Medians',
                request_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryMedians.SerializeToString,
                response_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryMediansResponse.FromString,
                )
        self.MedianDeviations = channel.unary_unary(
                '/umee.oracle.v1.Query/MedianDeviations',
                request_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryMedianDeviations.SerializeToString,
                response_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryMedianDeviationsResponse.FromString,
                )
        self.AvgPrice = channel.unary_unary(
                '/umee.oracle.v1.Query/AvgPrice',
                request_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAvgPrice.SerializeToString,
                response_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAvgPriceResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def ExchangeRates(self, request, context):
        """ExchangeRates returns exchange rates of all denoms,
        or, if specified, returns a single denom
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActiveExchangeRates(self, request, context):
        """ActiveExchangeRates returns all active denoms
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FeederDelegation(self, request, context):
        """FeederDelegation returns feeder delegation of a validator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MissCounter(self, request, context):
        """MissCounter returns oracle miss counter of a validator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SlashWindow(self, request, context):
        """SlashWindow returns slash window information
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AggregatePrevote(self, request, context):
        """AggregatePrevote returns an aggregate prevote of a validator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AggregatePrevotes(self, request, context):
        """AggregatePrevotes returns aggregate prevotes of all validators
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AggregateVote(self, request, context):
        """AggregateVote returns an aggregate vote of a validator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AggregateVotes(self, request, context):
        """AggregateVotes returns aggregate votes of all validators
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Params(self, request, context):
        """Params queries all parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Medians(self, request, context):
        """Medians returns medians of all denoms,
        or, if specified, returns a single median
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MedianDeviations(self, request, context):
        """MedianDeviations returns median deviations of all denoms,
        or, if specified, returns a single median deviation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AvgPrice(self, request, context):
        """QueryAvgPrice returns avg price of a given denom (required).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExchangeRates': grpc.unary_unary_rpc_method_handler(
                    servicer.ExchangeRates,
                    request_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryExchangeRates.FromString,
                    response_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryExchangeRatesResponse.SerializeToString,
            ),
            'ActiveExchangeRates': grpc.unary_unary_rpc_method_handler(
                    servicer.ActiveExchangeRates,
                    request_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryActiveExchangeRates.FromString,
                    response_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryActiveExchangeRatesResponse.SerializeToString,
            ),
            'FeederDelegation': grpc.unary_unary_rpc_method_handler(
                    servicer.FeederDelegation,
                    request_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryFeederDelegation.FromString,
                    response_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryFeederDelegationResponse.SerializeToString,
            ),
            'MissCounter': grpc.unary_unary_rpc_method_handler(
                    servicer.MissCounter,
                    request_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryMissCounter.FromString,
                    response_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryMissCounterResponse.SerializeToString,
            ),
            'SlashWindow': grpc.unary_unary_rpc_method_handler(
                    servicer.SlashWindow,
                    request_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QuerySlashWindow.FromString,
                    response_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QuerySlashWindowResponse.SerializeToString,
            ),
            'AggregatePrevote': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregatePrevote,
                    request_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregatePrevote.FromString,
                    response_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregatePrevoteResponse.SerializeToString,
            ),
            'AggregatePrevotes': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregatePrevotes,
                    request_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregatePrevotes.FromString,
                    response_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregatePrevotesResponse.SerializeToString,
            ),
            'AggregateVote': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregateVote,
                    request_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregateVote.FromString,
                    response_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregateVoteResponse.SerializeToString,
            ),
            'AggregateVotes': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregateVotes,
                    request_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregateVotes.FromString,
                    response_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregateVotesResponse.SerializeToString,
            ),
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryParams.FromString,
                    response_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'Medians': grpc.unary_unary_rpc_method_handler(
                    servicer.Medians,
                    request_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryMedians.FromString,
                    response_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryMediansResponse.SerializeToString,
            ),
            'MedianDeviations': grpc.unary_unary_rpc_method_handler(
                    servicer.MedianDeviations,
                    request_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryMedianDeviations.FromString,
                    response_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryMedianDeviationsResponse.SerializeToString,
            ),
            'AvgPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.AvgPrice,
                    request_deserializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAvgPrice.FromString,
                    response_serializer=umee_dot_oracle_dot_v1_dot_query__pb2.QueryAvgPriceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'umee.oracle.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def ExchangeRates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.oracle.v1.Query/ExchangeRates',
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryExchangeRates.SerializeToString,
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryExchangeRatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ActiveExchangeRates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.oracle.v1.Query/ActiveExchangeRates',
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryActiveExchangeRates.SerializeToString,
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryActiveExchangeRatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FeederDelegation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.oracle.v1.Query/FeederDelegation',
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryFeederDelegation.SerializeToString,
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryFeederDelegationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MissCounter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.oracle.v1.Query/MissCounter',
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryMissCounter.SerializeToString,
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryMissCounterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SlashWindow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.oracle.v1.Query/SlashWindow',
            umee_dot_oracle_dot_v1_dot_query__pb2.QuerySlashWindow.SerializeToString,
            umee_dot_oracle_dot_v1_dot_query__pb2.QuerySlashWindowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AggregatePrevote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.oracle.v1.Query/AggregatePrevote',
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregatePrevote.SerializeToString,
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregatePrevoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AggregatePrevotes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.oracle.v1.Query/AggregatePrevotes',
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregatePrevotes.SerializeToString,
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregatePrevotesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AggregateVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.oracle.v1.Query/AggregateVote',
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregateVote.SerializeToString,
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregateVoteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AggregateVotes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.oracle.v1.Query/AggregateVotes',
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregateVotes.SerializeToString,
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryAggregateVotesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.oracle.v1.Query/Params',
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryParams.SerializeToString,
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Medians(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.oracle.v1.Query/Medians',
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryMedians.SerializeToString,
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryMediansResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MedianDeviations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.oracle.v1.Query/MedianDeviations',
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryMedianDeviations.SerializeToString,
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryMedianDeviationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AvgPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/umee.oracle.v1.Query/AvgPrice',
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryAvgPrice.SerializeToString,
            umee_dot_oracle_dot_v1_dot_query__pb2.QueryAvgPriceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
