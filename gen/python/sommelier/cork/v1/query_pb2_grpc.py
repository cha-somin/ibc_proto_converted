# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from sommelier.cork.v1 import query_pb2 as sommelier_dot_cork_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC query service for the cork module.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryParams = channel.unary_unary(
                '/cork.v1.Query/QueryParams',
                request_serializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.QuerySubmittedCorks = channel.unary_unary(
                '/cork.v1.Query/QuerySubmittedCorks',
                request_serializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QuerySubmittedCorksRequest.SerializeToString,
                response_deserializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QuerySubmittedCorksResponse.FromString,
                )
        self.QueryCommitPeriod = channel.unary_unary(
                '/cork.v1.Query/QueryCommitPeriod',
                request_serializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryCommitPeriodRequest.SerializeToString,
                response_deserializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryCommitPeriodResponse.FromString,
                )
        self.QueryCellarIDs = channel.unary_unary(
                '/cork.v1.Query/QueryCellarIDs',
                request_serializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryCellarIDsRequest.SerializeToString,
                response_deserializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryCellarIDsResponse.FromString,
                )
        self.QueryScheduledCorks = channel.unary_unary(
                '/cork.v1.Query/QueryScheduledCorks',
                request_serializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledCorksRequest.SerializeToString,
                response_deserializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledCorksResponse.FromString,
                )
        self.QueryScheduledBlockHeights = channel.unary_unary(
                '/cork.v1.Query/QueryScheduledBlockHeights',
                request_serializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledBlockHeightsRequest.SerializeToString,
                response_deserializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledBlockHeightsResponse.FromString,
                )
        self.QueryScheduledCorksByBlockHeight = channel.unary_unary(
                '/cork.v1.Query/QueryScheduledCorksByBlockHeight',
                request_serializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledCorksByBlockHeightRequest.SerializeToString,
                response_deserializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledCorksByBlockHeightResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC query service for the cork module.
    """

    def QueryParams(self, request, context):
        """QueryParams queries the allocation module parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QuerySubmittedCorks(self, request, context):
        """QuerySubmittedCorks queries the submitted corks awaiting vote
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryCommitPeriod(self, request, context):
        """QueryCommitPeriod queries the heights for the current voting period (current, start and end)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryCellarIDs(self, request, context):
        """QueryCellarIDs returns all cellars and current tick ranges
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryScheduledCorks(self, request, context):
        """QueryScheduledCorks returns all scheduled corks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryScheduledBlockHeights(self, request, context):
        """QueryScheduledBlockHeights returns all scheduled block heights
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryScheduledCorksByBlockHeight(self, request, context):
        """QueryScheduledCorks returns all scheduled corks at a block height
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryParams': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryParams,
                    request_deserializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'QuerySubmittedCorks': grpc.unary_unary_rpc_method_handler(
                    servicer.QuerySubmittedCorks,
                    request_deserializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QuerySubmittedCorksRequest.FromString,
                    response_serializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QuerySubmittedCorksResponse.SerializeToString,
            ),
            'QueryCommitPeriod': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryCommitPeriod,
                    request_deserializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryCommitPeriodRequest.FromString,
                    response_serializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryCommitPeriodResponse.SerializeToString,
            ),
            'QueryCellarIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryCellarIDs,
                    request_deserializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryCellarIDsRequest.FromString,
                    response_serializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryCellarIDsResponse.SerializeToString,
            ),
            'QueryScheduledCorks': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryScheduledCorks,
                    request_deserializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledCorksRequest.FromString,
                    response_serializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledCorksResponse.SerializeToString,
            ),
            'QueryScheduledBlockHeights': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryScheduledBlockHeights,
                    request_deserializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledBlockHeightsRequest.FromString,
                    response_serializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledBlockHeightsResponse.SerializeToString,
            ),
            'QueryScheduledCorksByBlockHeight': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryScheduledCorksByBlockHeight,
                    request_deserializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledCorksByBlockHeightRequest.FromString,
                    response_serializer=sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledCorksByBlockHeightResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cork.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC query service for the cork module.
    """

    @staticmethod
    def QueryParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cork.v1.Query/QueryParams',
            sommelier_dot_cork_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
            sommelier_dot_cork_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QuerySubmittedCorks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cork.v1.Query/QuerySubmittedCorks',
            sommelier_dot_cork_dot_v1_dot_query__pb2.QuerySubmittedCorksRequest.SerializeToString,
            sommelier_dot_cork_dot_v1_dot_query__pb2.QuerySubmittedCorksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryCommitPeriod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cork.v1.Query/QueryCommitPeriod',
            sommelier_dot_cork_dot_v1_dot_query__pb2.QueryCommitPeriodRequest.SerializeToString,
            sommelier_dot_cork_dot_v1_dot_query__pb2.QueryCommitPeriodResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryCellarIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cork.v1.Query/QueryCellarIDs',
            sommelier_dot_cork_dot_v1_dot_query__pb2.QueryCellarIDsRequest.SerializeToString,
            sommelier_dot_cork_dot_v1_dot_query__pb2.QueryCellarIDsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryScheduledCorks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cork.v1.Query/QueryScheduledCorks',
            sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledCorksRequest.SerializeToString,
            sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledCorksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryScheduledBlockHeights(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cork.v1.Query/QueryScheduledBlockHeights',
            sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledBlockHeightsRequest.SerializeToString,
            sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledBlockHeightsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryScheduledCorksByBlockHeight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cork.v1.Query/QueryScheduledCorksByBlockHeight',
            sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledCorksByBlockHeightRequest.SerializeToString,
            sommelier_dot_cork_dot_v1_dot_query__pb2.QueryScheduledCorksByBlockHeightResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
