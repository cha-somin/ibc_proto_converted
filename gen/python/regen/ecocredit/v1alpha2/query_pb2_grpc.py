# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from regen.ecocredit.v1alpha2 import query_pb2 as regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2


class QueryStub(object):
    """Msg is the regen.ecocredit.v1alpha2 Query service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Classes = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/Classes',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryClassesRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryClassesResponse.FromString,
                )
        self.ClassInfo = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/ClassInfo',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryClassInfoRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryClassInfoResponse.FromString,
                )
        self.Projects = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/Projects',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryProjectsRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryProjectsResponse.FromString,
                )
        self.ProjectInfo = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/ProjectInfo',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryProjectInfoRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryProjectInfoResponse.FromString,
                )
        self.Batches = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/Batches',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBatchesRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBatchesResponse.FromString,
                )
        self.BatchInfo = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/BatchInfo',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBatchInfoRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBatchInfoResponse.FromString,
                )
        self.Balance = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/Balance',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBalanceRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBalanceResponse.FromString,
                )
        self.Supply = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/Supply',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySupplyRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySupplyResponse.FromString,
                )
        self.CreditTypes = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/CreditTypes',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryCreditTypesRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryCreditTypesResponse.FromString,
                )
        self.Params = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/Params',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.SellOrder = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/SellOrder',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrderRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrderResponse.FromString,
                )
        self.SellOrders = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/SellOrders',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersResponse.FromString,
                )
        self.SellOrdersByBatchDenom = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/SellOrdersByBatchDenom',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersByBatchDenomRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersByBatchDenomResponse.FromString,
                )
        self.SellOrdersByAddress = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/SellOrdersByAddress',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersByAddressRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersByAddressResponse.FromString,
                )
        self.BuyOrder = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/BuyOrder',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrderRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrderResponse.FromString,
                )
        self.BuyOrders = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/BuyOrders',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrdersRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrdersResponse.FromString,
                )
        self.BuyOrdersByAddress = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/BuyOrdersByAddress',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrdersByAddressRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrdersByAddressResponse.FromString,
                )
        self.AllowedAskDenoms = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/AllowedAskDenoms',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryAllowedAskDenomsRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryAllowedAskDenomsResponse.FromString,
                )
        self.Basket = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/Basket',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketResponse.FromString,
                )
        self.Baskets = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/Baskets',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketsRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketsResponse.FromString,
                )
        self.BasketCredits = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Query/BasketCredits',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketCreditsRequest.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketCreditsResponse.FromString,
                )


class QueryServicer(object):
    """Msg is the regen.ecocredit.v1alpha2 Query service.
    """

    def Classes(self, request, context):
        """Classes queries for all credit classes with pagination.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClassInfo(self, request, context):
        """ClassInfo queries for information on a credit class.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Projects(self, request, context):
        """Projects queries for all projects within a class with pagination.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProjectInfo(self, request, context):
        """ClassInfo queries for information on a project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Batches(self, request, context):
        """Batches queries for all batches in the given project with pagination.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchInfo(self, request, context):
        """BatchInfo queries for information on a credit batch.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Balance(self, request, context):
        """Balance queries the balance (both tradable and retired) of a given credit
        batch for a given account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Supply(self, request, context):
        """Supply queries the tradable and retired supply of a credit batch.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreditTypes(self, request, context):
        """CreditTypes returns the list of allowed types that credit classes can have.
        See Types/CreditType for more details.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Params(self, request, context):
        """Params queries the ecocredit module parameters.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SellOrder(self, request, context):
        """SellOrder queries a sell order by its ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SellOrders(self, request, context):
        """SellOrders queries a paginated list of all sell orders
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SellOrdersByBatchDenom(self, request, context):
        """SellOrdersByDenom queries a paginated list of all sell orders of a specific ecocredit denom
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SellOrdersByAddress(self, request, context):
        """SellOrdersByAddress queries a paginated list of all sell orders from a specific address
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BuyOrder(self, request, context):
        """BuyOrder queries a buy order by its id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BuyOrders(self, request, context):
        """BuyOrders queries a paginated list of all buy orders
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BuyOrdersByAddress(self, request, context):
        """BuyOrdersByAddress queries a paginated list of buy orders by creator address
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllowedAskDenoms(self, request, context):
        """AllowedAskDenoms queries all denoms allowed to be set in the AskPrice of a sell order
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Basket(self, request, context):
        """Basket queries one basket by denom.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Baskets(self, request, context):
        """Baskets lists all baskets in the ecocredit module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BasketCredits(self, request, context):
        """BasketCredits lists all ecocredits inside a given basket.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Classes': grpc.unary_unary_rpc_method_handler(
                    servicer.Classes,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryClassesRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryClassesResponse.SerializeToString,
            ),
            'ClassInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.ClassInfo,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryClassInfoRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryClassInfoResponse.SerializeToString,
            ),
            'Projects': grpc.unary_unary_rpc_method_handler(
                    servicer.Projects,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryProjectsRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryProjectsResponse.SerializeToString,
            ),
            'ProjectInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.ProjectInfo,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryProjectInfoRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryProjectInfoResponse.SerializeToString,
            ),
            'Batches': grpc.unary_unary_rpc_method_handler(
                    servicer.Batches,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBatchesRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBatchesResponse.SerializeToString,
            ),
            'BatchInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchInfo,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBatchInfoRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBatchInfoResponse.SerializeToString,
            ),
            'Balance': grpc.unary_unary_rpc_method_handler(
                    servicer.Balance,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBalanceRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBalanceResponse.SerializeToString,
            ),
            'Supply': grpc.unary_unary_rpc_method_handler(
                    servicer.Supply,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySupplyRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySupplyResponse.SerializeToString,
            ),
            'CreditTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.CreditTypes,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryCreditTypesRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryCreditTypesResponse.SerializeToString,
            ),
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'SellOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.SellOrder,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrderRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrderResponse.SerializeToString,
            ),
            'SellOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.SellOrders,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersResponse.SerializeToString,
            ),
            'SellOrdersByBatchDenom': grpc.unary_unary_rpc_method_handler(
                    servicer.SellOrdersByBatchDenom,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersByBatchDenomRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersByBatchDenomResponse.SerializeToString,
            ),
            'SellOrdersByAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.SellOrdersByAddress,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersByAddressRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersByAddressResponse.SerializeToString,
            ),
            'BuyOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.BuyOrder,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrderRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrderResponse.SerializeToString,
            ),
            'BuyOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.BuyOrders,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrdersRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrdersResponse.SerializeToString,
            ),
            'BuyOrdersByAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.BuyOrdersByAddress,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrdersByAddressRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrdersByAddressResponse.SerializeToString,
            ),
            'AllowedAskDenoms': grpc.unary_unary_rpc_method_handler(
                    servicer.AllowedAskDenoms,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryAllowedAskDenomsRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryAllowedAskDenomsResponse.SerializeToString,
            ),
            'Basket': grpc.unary_unary_rpc_method_handler(
                    servicer.Basket,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketResponse.SerializeToString,
            ),
            'Baskets': grpc.unary_unary_rpc_method_handler(
                    servicer.Baskets,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketsRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketsResponse.SerializeToString,
            ),
            'BasketCredits': grpc.unary_unary_rpc_method_handler(
                    servicer.BasketCredits,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketCreditsRequest.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketCreditsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'regen.ecocredit.v1alpha2.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Msg is the regen.ecocredit.v1alpha2 Query service.
    """

    @staticmethod
    def Classes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/Classes',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryClassesRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryClassesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClassInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/ClassInfo',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryClassInfoRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryClassInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Projects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/Projects',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryProjectsRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryProjectsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProjectInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/ProjectInfo',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryProjectInfoRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryProjectInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Batches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/Batches',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBatchesRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBatchesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/BatchInfo',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBatchInfoRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBatchInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Balance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/Balance',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBalanceRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Supply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/Supply',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySupplyRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySupplyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreditTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/CreditTypes',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryCreditTypesRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryCreditTypesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/Params',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryParamsRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SellOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/SellOrder',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrderRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SellOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/SellOrders',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SellOrdersByBatchDenom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/SellOrdersByBatchDenom',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersByBatchDenomRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersByBatchDenomResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SellOrdersByAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/SellOrdersByAddress',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersByAddressRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QuerySellOrdersByAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BuyOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/BuyOrder',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrderRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BuyOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/BuyOrders',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrdersRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BuyOrdersByAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/BuyOrdersByAddress',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrdersByAddressRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBuyOrdersByAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AllowedAskDenoms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/AllowedAskDenoms',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryAllowedAskDenomsRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryAllowedAskDenomsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Basket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/Basket',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Baskets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/Baskets',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketsRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BasketCredits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Query/BasketCredits',
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketCreditsRequest.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_query__pb2.QueryBasketCreditsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
