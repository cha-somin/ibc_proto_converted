# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from regen.ecocredit.v1alpha2 import tx_pb2 as regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2


class MsgStub(object):
    """Msg is the regen.ecocredit.v1alpha1 Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateClass = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/CreateClass',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateClass.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateClassResponse.FromString,
                )
        self.CreateProject = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/CreateProject',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateProject.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateProjectResponse.FromString,
                )
        self.CreateBatch = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/CreateBatch',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateBatch.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateBatchResponse.FromString,
                )
        self.Send = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/Send',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgSend.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgSendResponse.FromString,
                )
        self.Retire = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/Retire',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgRetire.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgRetireResponse.FromString,
                )
        self.Cancel = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/Cancel',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCancel.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCancelResponse.FromString,
                )
        self.UpdateClassAdmin = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/UpdateClassAdmin',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassAdmin.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassAdminResponse.FromString,
                )
        self.UpdateClassIssuers = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/UpdateClassIssuers',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassIssuers.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassIssuersResponse.FromString,
                )
        self.UpdateClassMetadata = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/UpdateClassMetadata',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassMetadata.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassMetadataResponse.FromString,
                )
        self.Sell = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/Sell',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgSell.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgSellResponse.FromString,
                )
        self.UpdateSellOrders = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/UpdateSellOrders',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateSellOrders.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateSellOrdersResponse.FromString,
                )
        self.Buy = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/Buy',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgBuy.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgBuyResponse.FromString,
                )
        self.AllowAskDenom = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/AllowAskDenom',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgAllowAskDenom.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgAllowAskDenomResponse.FromString,
                )
        self.CreateBasket = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/CreateBasket',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateBasket.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateBasketResponse.FromString,
                )
        self.AddToBasket = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/AddToBasket',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgAddToBasket.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgAddToBasketResponse.FromString,
                )
        self.TakeFromBasket = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/TakeFromBasket',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgTakeFromBasket.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgTakeFromBasketResponse.FromString,
                )
        self.PickFromBasket = channel.unary_unary(
                '/regen.ecocredit.v1alpha2.Msg/PickFromBasket',
                request_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgPickFromBasket.SerializeToString,
                response_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgPickFromBasketResponse.FromString,
                )


class MsgServicer(object):
    """Msg is the regen.ecocredit.v1alpha1 Msg service.
    """

    def CreateClass(self, request, context):
        """CreateClass creates a new credit class with an approved list of issuers and
        optional metadata.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateProject(self, request, context):
        """CreateProject creates a new project within a credit class.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBatch(self, request, context):
        """CreateBatch creates a new batch of credits for an existing project.
        This will create a new batch denom with a fixed supply. Issued credits can
        be distributed to recipients in either tradable or retired form.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Send(self, request, context):
        """Send sends tradable credits from one account to another account. Sent
        credits can either be tradable or retired on receipt.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Retire(self, request, context):
        """Retire retires a specified number of credits in the holder's account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cancel(self, request, context):
        """Cancel removes a number of credits from the holder's account and also
        deducts them from the tradable supply, effectively cancelling their
        issuance on Regen Ledger
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateClassAdmin(self, request, context):
        """UpdateClassAdmin updates the credit class admin
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateClassIssuers(self, request, context):
        """UpdateClassIssuers updates the credit class issuer list
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateClassMetadata(self, request, context):
        """UpdateClassMetadata updates the credit class metadata
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Sell(self, request, context):
        """Sell creates new sell orders.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSellOrders(self, request, context):
        """UpdateSellOrders updates existing sell orders.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Buy(self, request, context):
        """Buy creates credit buy orders.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllowAskDenom(self, request, context):
        """AllowAskDenom is a governance operation which authorizes a new ask denom to be used in sell orders
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBasket(self, request, context):
        """CreateBasket creates a bank denom which wraps credits.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddToBasket(self, request, context):
        """AddToBasket adds credits to a basket in return for basket tokens.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TakeFromBasket(self, request, context):
        """TakeFromBasket takes credits from a basket without regard for which
        credits they are. The credits will be auto-retired if disable_auto_retire
        is false. Credits will be chosen randomly using the previous block hash
        as a consensus source of randomness.
        More concretely, the implementation is as follows:
        - take the previous block hash and convert it into an uint64,
        - given the total number of different credits within the basket `n`, the
        first credits that will get picked correspond to: hash modulo n (in
        terms of order),
        - then if we need to take more credits, we get some from the next one and
        so on.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PickFromBasket(self, request, context):
        """PickFromBasket picks specific credits from a basket. If allow_picking is
        set to false, then only an address which deposited credits in the basket
        can pick those credits. All other addresses will be blocked from picking
        those credits. The credits will be auto-retired if disable_auto_retire is
        false unless the credits were previously put into the basket by the
        address picking them from the basket, in which case they will remain
        tradable. This functionality allows the owner of a credit to have more
        control over the credits they are putting in baskets then ordinary users
        to deal with the scenario where basket tokens end up being worth
        significantly less than the credits on their own.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateClass': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateClass,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateClass.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateClassResponse.SerializeToString,
            ),
            'CreateProject': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProject,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateProject.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateProjectResponse.SerializeToString,
            ),
            'CreateBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBatch,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateBatch.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateBatchResponse.SerializeToString,
            ),
            'Send': grpc.unary_unary_rpc_method_handler(
                    servicer.Send,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgSend.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgSendResponse.SerializeToString,
            ),
            'Retire': grpc.unary_unary_rpc_method_handler(
                    servicer.Retire,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgRetire.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgRetireResponse.SerializeToString,
            ),
            'Cancel': grpc.unary_unary_rpc_method_handler(
                    servicer.Cancel,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCancel.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCancelResponse.SerializeToString,
            ),
            'UpdateClassAdmin': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateClassAdmin,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassAdmin.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassAdminResponse.SerializeToString,
            ),
            'UpdateClassIssuers': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateClassIssuers,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassIssuers.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassIssuersResponse.SerializeToString,
            ),
            'UpdateClassMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateClassMetadata,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassMetadata.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassMetadataResponse.SerializeToString,
            ),
            'Sell': grpc.unary_unary_rpc_method_handler(
                    servicer.Sell,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgSell.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgSellResponse.SerializeToString,
            ),
            'UpdateSellOrders': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSellOrders,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateSellOrders.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateSellOrdersResponse.SerializeToString,
            ),
            'Buy': grpc.unary_unary_rpc_method_handler(
                    servicer.Buy,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgBuy.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgBuyResponse.SerializeToString,
            ),
            'AllowAskDenom': grpc.unary_unary_rpc_method_handler(
                    servicer.AllowAskDenom,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgAllowAskDenom.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgAllowAskDenomResponse.SerializeToString,
            ),
            'CreateBasket': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBasket,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateBasket.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateBasketResponse.SerializeToString,
            ),
            'AddToBasket': grpc.unary_unary_rpc_method_handler(
                    servicer.AddToBasket,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgAddToBasket.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgAddToBasketResponse.SerializeToString,
            ),
            'TakeFromBasket': grpc.unary_unary_rpc_method_handler(
                    servicer.TakeFromBasket,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgTakeFromBasket.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgTakeFromBasketResponse.SerializeToString,
            ),
            'PickFromBasket': grpc.unary_unary_rpc_method_handler(
                    servicer.PickFromBasket,
                    request_deserializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgPickFromBasket.FromString,
                    response_serializer=regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgPickFromBasketResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'regen.ecocredit.v1alpha2.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg is the regen.ecocredit.v1alpha1 Msg service.
    """

    @staticmethod
    def CreateClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/CreateClass',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateClass.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/CreateProject',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateProject.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateProjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/CreateBatch',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateBatch.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/Send',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgSend.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgSendResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Retire(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/Retire',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgRetire.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgRetireResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/Cancel',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCancel.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCancelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateClassAdmin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/UpdateClassAdmin',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassAdmin.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassAdminResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateClassIssuers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/UpdateClassIssuers',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassIssuers.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassIssuersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateClassMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/UpdateClassMetadata',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassMetadata.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateClassMetadataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Sell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/Sell',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgSell.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgSellResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSellOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/UpdateSellOrders',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateSellOrders.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgUpdateSellOrdersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Buy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/Buy',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgBuy.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgBuyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AllowAskDenom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/AllowAskDenom',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgAllowAskDenom.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgAllowAskDenomResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBasket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/CreateBasket',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateBasket.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgCreateBasketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddToBasket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/AddToBasket',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgAddToBasket.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgAddToBasketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TakeFromBasket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/TakeFromBasket',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgTakeFromBasket.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgTakeFromBasketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PickFromBasket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/regen.ecocredit.v1alpha2.Msg/PickFromBasket',
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgPickFromBasket.SerializeToString,
            regen_dot_ecocredit_dot_v1alpha2_dot_tx__pb2.MsgPickFromBasketResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
