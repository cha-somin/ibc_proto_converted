# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from OmniFlix.itc.v1 import query_pb2 as OmniFlix_dot_itc_dot_v1_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/OmniFlix.itc.v1.Query/Params',
                request_serializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.Campaigns = channel.unary_unary(
                '/OmniFlix.itc.v1.Query/Campaigns',
                request_serializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryCampaignsRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryCampaignsResponse.FromString,
                )
        self.Campaign = channel.unary_unary(
                '/OmniFlix.itc.v1.Query/Campaign',
                request_serializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryCampaignRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryCampaignResponse.FromString,
                )
        self.Claims = channel.unary_unary(
                '/OmniFlix.itc.v1.Query/Claims',
                request_serializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryClaimsRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryClaimsResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def Params(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Campaigns(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Campaign(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Claims(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'Campaigns': grpc.unary_unary_rpc_method_handler(
                    servicer.Campaigns,
                    request_deserializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryCampaignsRequest.FromString,
                    response_serializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryCampaignsResponse.SerializeToString,
            ),
            'Campaign': grpc.unary_unary_rpc_method_handler(
                    servicer.Campaign,
                    request_deserializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryCampaignRequest.FromString,
                    response_serializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryCampaignResponse.SerializeToString,
            ),
            'Claims': grpc.unary_unary_rpc_method_handler(
                    servicer.Claims,
                    request_deserializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryClaimsRequest.FromString,
                    response_serializer=OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryClaimsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'OmniFlix.itc.v1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.itc.v1.Query/Params',
            OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryParamsRequest.SerializeToString,
            OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Campaigns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.itc.v1.Query/Campaigns',
            OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryCampaignsRequest.SerializeToString,
            OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryCampaignsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Campaign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.itc.v1.Query/Campaign',
            OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryCampaignRequest.SerializeToString,
            OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryCampaignResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Claims(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.itc.v1.Query/Claims',
            OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryClaimsRequest.SerializeToString,
            OmniFlix_dot_itc_dot_v1_dot_query__pb2.QueryClaimsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
