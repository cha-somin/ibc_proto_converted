# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from OmniFlix.onft.v1beta1 import query_pb2 as OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2


class QueryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Collection = channel.unary_unary(
                '/OmniFlix.onft.v1beta1.Query/Collection',
                request_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryCollectionRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryCollectionResponse.FromString,
                )
        self.IBCCollection = channel.unary_unary(
                '/OmniFlix.onft.v1beta1.Query/IBCCollection',
                request_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryIBCCollectionRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryCollectionResponse.FromString,
                )
        self.Denom = channel.unary_unary(
                '/OmniFlix.onft.v1beta1.Query/Denom',
                request_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomResponse.FromString,
                )
        self.IBCDenom = channel.unary_unary(
                '/OmniFlix.onft.v1beta1.Query/IBCDenom',
                request_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryIBCDenomRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomResponse.FromString,
                )
        self.Denoms = channel.unary_unary(
                '/OmniFlix.onft.v1beta1.Query/Denoms',
                request_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomsRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomsResponse.FromString,
                )
        self.ONFT = channel.unary_unary(
                '/OmniFlix.onft.v1beta1.Query/ONFT',
                request_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryONFTRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryONFTResponse.FromString,
                )
        self.IBCDenomONFT = channel.unary_unary(
                '/OmniFlix.onft.v1beta1.Query/IBCDenomONFT',
                request_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryIBCDenomONFTRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryONFTResponse.FromString,
                )
        self.OwnerONFTs = channel.unary_unary(
                '/OmniFlix.onft.v1beta1.Query/OwnerONFTs',
                request_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryOwnerONFTsRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryOwnerONFTsResponse.FromString,
                )
        self.OwnerIBCDenomONFTs = channel.unary_unary(
                '/OmniFlix.onft.v1beta1.Query/OwnerIBCDenomONFTs',
                request_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryOwnerIBCDenomONFTsRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryOwnerONFTsResponse.FromString,
                )
        self.Supply = channel.unary_unary(
                '/OmniFlix.onft.v1beta1.Query/Supply',
                request_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QuerySupplyRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QuerySupplyResponse.FromString,
                )
        self.IBCDenomSupply = channel.unary_unary(
                '/OmniFlix.onft.v1beta1.Query/IBCDenomSupply',
                request_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryIBCDenomSupplyRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QuerySupplyResponse.FromString,
                )
        self.Params = channel.unary_unary(
                '/OmniFlix.onft.v1beta1.Query/Params',
                request_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryParamsResponse.FromString,
                )


class QueryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Collection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IBCCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Denom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IBCDenom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Denoms(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ONFT(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IBCDenomONFT(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OwnerONFTs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OwnerIBCDenomONFTs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Supply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IBCDenomSupply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Params(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Collection': grpc.unary_unary_rpc_method_handler(
                    servicer.Collection,
                    request_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryCollectionRequest.FromString,
                    response_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryCollectionResponse.SerializeToString,
            ),
            'IBCCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.IBCCollection,
                    request_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryIBCCollectionRequest.FromString,
                    response_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryCollectionResponse.SerializeToString,
            ),
            'Denom': grpc.unary_unary_rpc_method_handler(
                    servicer.Denom,
                    request_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomRequest.FromString,
                    response_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomResponse.SerializeToString,
            ),
            'IBCDenom': grpc.unary_unary_rpc_method_handler(
                    servicer.IBCDenom,
                    request_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryIBCDenomRequest.FromString,
                    response_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomResponse.SerializeToString,
            ),
            'Denoms': grpc.unary_unary_rpc_method_handler(
                    servicer.Denoms,
                    request_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomsRequest.FromString,
                    response_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomsResponse.SerializeToString,
            ),
            'ONFT': grpc.unary_unary_rpc_method_handler(
                    servicer.ONFT,
                    request_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryONFTRequest.FromString,
                    response_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryONFTResponse.SerializeToString,
            ),
            'IBCDenomONFT': grpc.unary_unary_rpc_method_handler(
                    servicer.IBCDenomONFT,
                    request_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryIBCDenomONFTRequest.FromString,
                    response_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryONFTResponse.SerializeToString,
            ),
            'OwnerONFTs': grpc.unary_unary_rpc_method_handler(
                    servicer.OwnerONFTs,
                    request_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryOwnerONFTsRequest.FromString,
                    response_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryOwnerONFTsResponse.SerializeToString,
            ),
            'OwnerIBCDenomONFTs': grpc.unary_unary_rpc_method_handler(
                    servicer.OwnerIBCDenomONFTs,
                    request_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryOwnerIBCDenomONFTsRequest.FromString,
                    response_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryOwnerONFTsResponse.SerializeToString,
            ),
            'Supply': grpc.unary_unary_rpc_method_handler(
                    servicer.Supply,
                    request_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QuerySupplyRequest.FromString,
                    response_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QuerySupplyResponse.SerializeToString,
            ),
            'IBCDenomSupply': grpc.unary_unary_rpc_method_handler(
                    servicer.IBCDenomSupply,
                    request_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryIBCDenomSupplyRequest.FromString,
                    response_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QuerySupplyResponse.SerializeToString,
            ),
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'OmniFlix.onft.v1beta1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.onft.v1beta1.Query/Collection',
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryCollectionRequest.SerializeToString,
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IBCCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.onft.v1beta1.Query/IBCCollection',
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryIBCCollectionRequest.SerializeToString,
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Denom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.onft.v1beta1.Query/Denom',
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomRequest.SerializeToString,
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IBCDenom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.onft.v1beta1.Query/IBCDenom',
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryIBCDenomRequest.SerializeToString,
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Denoms(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.onft.v1beta1.Query/Denoms',
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomsRequest.SerializeToString,
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryDenomsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ONFT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.onft.v1beta1.Query/ONFT',
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryONFTRequest.SerializeToString,
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryONFTResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IBCDenomONFT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.onft.v1beta1.Query/IBCDenomONFT',
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryIBCDenomONFTRequest.SerializeToString,
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryONFTResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OwnerONFTs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.onft.v1beta1.Query/OwnerONFTs',
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryOwnerONFTsRequest.SerializeToString,
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryOwnerONFTsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OwnerIBCDenomONFTs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.onft.v1beta1.Query/OwnerIBCDenomONFTs',
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryOwnerIBCDenomONFTsRequest.SerializeToString,
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryOwnerONFTsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Supply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.onft.v1beta1.Query/Supply',
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QuerySupplyRequest.SerializeToString,
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QuerySupplyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IBCDenomSupply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.onft.v1beta1.Query/IBCDenomSupply',
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryIBCDenomSupplyRequest.SerializeToString,
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QuerySupplyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OmniFlix.onft.v1beta1.Query/Params',
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryParamsRequest.SerializeToString,
            OmniFlix_dot_onft_dot_v1beta1_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
