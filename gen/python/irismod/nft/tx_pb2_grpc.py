# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from irismod.nft import tx_pb2 as irismod_dot_nft_dot_tx__pb2


class MsgStub(object):
    """Msg defines the nft Msg service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IssueDenom = channel.unary_unary(
                '/irismod.nft.Msg/IssueDenom',
                request_serializer=irismod_dot_nft_dot_tx__pb2.MsgIssueDenom.SerializeToString,
                response_deserializer=irismod_dot_nft_dot_tx__pb2.MsgIssueDenomResponse.FromString,
                )
        self.MintNFT = channel.unary_unary(
                '/irismod.nft.Msg/MintNFT',
                request_serializer=irismod_dot_nft_dot_tx__pb2.MsgMintNFT.SerializeToString,
                response_deserializer=irismod_dot_nft_dot_tx__pb2.MsgMintNFTResponse.FromString,
                )
        self.EditNFT = channel.unary_unary(
                '/irismod.nft.Msg/EditNFT',
                request_serializer=irismod_dot_nft_dot_tx__pb2.MsgEditNFT.SerializeToString,
                response_deserializer=irismod_dot_nft_dot_tx__pb2.MsgEditNFTResponse.FromString,
                )
        self.TransferNFT = channel.unary_unary(
                '/irismod.nft.Msg/TransferNFT',
                request_serializer=irismod_dot_nft_dot_tx__pb2.MsgTransferNFT.SerializeToString,
                response_deserializer=irismod_dot_nft_dot_tx__pb2.MsgTransferNFTResponse.FromString,
                )
        self.BurnNFT = channel.unary_unary(
                '/irismod.nft.Msg/BurnNFT',
                request_serializer=irismod_dot_nft_dot_tx__pb2.MsgBurnNFT.SerializeToString,
                response_deserializer=irismod_dot_nft_dot_tx__pb2.MsgBurnNFTResponse.FromString,
                )
        self.TransferDenom = channel.unary_unary(
                '/irismod.nft.Msg/TransferDenom',
                request_serializer=irismod_dot_nft_dot_tx__pb2.MsgTransferDenom.SerializeToString,
                response_deserializer=irismod_dot_nft_dot_tx__pb2.MsgTransferDenomResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the nft Msg service.
    """

    def IssueDenom(self, request, context):
        """IssueDenom defines a method for issue a denom.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MintNFT(self, request, context):
        """MintNFT defines a method for mint a new nft
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditNFT(self, request, context):
        """RefundHTLC defines a method for editing a nft.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferNFT(self, request, context):
        """TransferNFT defines a method for transferring a nft.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BurnNFT(self, request, context):
        """BurnNFT defines a method for burning a nft.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferDenom(self, request, context):
        """TransferDenom defines a method for transferring a denom.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IssueDenom': grpc.unary_unary_rpc_method_handler(
                    servicer.IssueDenom,
                    request_deserializer=irismod_dot_nft_dot_tx__pb2.MsgIssueDenom.FromString,
                    response_serializer=irismod_dot_nft_dot_tx__pb2.MsgIssueDenomResponse.SerializeToString,
            ),
            'MintNFT': grpc.unary_unary_rpc_method_handler(
                    servicer.MintNFT,
                    request_deserializer=irismod_dot_nft_dot_tx__pb2.MsgMintNFT.FromString,
                    response_serializer=irismod_dot_nft_dot_tx__pb2.MsgMintNFTResponse.SerializeToString,
            ),
            'EditNFT': grpc.unary_unary_rpc_method_handler(
                    servicer.EditNFT,
                    request_deserializer=irismod_dot_nft_dot_tx__pb2.MsgEditNFT.FromString,
                    response_serializer=irismod_dot_nft_dot_tx__pb2.MsgEditNFTResponse.SerializeToString,
            ),
            'TransferNFT': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferNFT,
                    request_deserializer=irismod_dot_nft_dot_tx__pb2.MsgTransferNFT.FromString,
                    response_serializer=irismod_dot_nft_dot_tx__pb2.MsgTransferNFTResponse.SerializeToString,
            ),
            'BurnNFT': grpc.unary_unary_rpc_method_handler(
                    servicer.BurnNFT,
                    request_deserializer=irismod_dot_nft_dot_tx__pb2.MsgBurnNFT.FromString,
                    response_serializer=irismod_dot_nft_dot_tx__pb2.MsgBurnNFTResponse.SerializeToString,
            ),
            'TransferDenom': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferDenom,
                    request_deserializer=irismod_dot_nft_dot_tx__pb2.MsgTransferDenom.FromString,
                    response_serializer=irismod_dot_nft_dot_tx__pb2.MsgTransferDenomResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'irismod.nft.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the nft Msg service.
    """

    @staticmethod
    def IssueDenom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.nft.Msg/IssueDenom',
            irismod_dot_nft_dot_tx__pb2.MsgIssueDenom.SerializeToString,
            irismod_dot_nft_dot_tx__pb2.MsgIssueDenomResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MintNFT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.nft.Msg/MintNFT',
            irismod_dot_nft_dot_tx__pb2.MsgMintNFT.SerializeToString,
            irismod_dot_nft_dot_tx__pb2.MsgMintNFTResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EditNFT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.nft.Msg/EditNFT',
            irismod_dot_nft_dot_tx__pb2.MsgEditNFT.SerializeToString,
            irismod_dot_nft_dot_tx__pb2.MsgEditNFTResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransferNFT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.nft.Msg/TransferNFT',
            irismod_dot_nft_dot_tx__pb2.MsgTransferNFT.SerializeToString,
            irismod_dot_nft_dot_tx__pb2.MsgTransferNFTResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BurnNFT(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.nft.Msg/BurnNFT',
            irismod_dot_nft_dot_tx__pb2.MsgBurnNFT.SerializeToString,
            irismod_dot_nft_dot_tx__pb2.MsgBurnNFTResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransferDenom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.nft.Msg/TransferDenom',
            irismod_dot_nft_dot_tx__pb2.MsgTransferDenom.SerializeToString,
            irismod_dot_nft_dot_tx__pb2.MsgTransferDenomResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
