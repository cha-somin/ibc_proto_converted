# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from irismod.token import tx_pb2 as irismod_dot_token_dot_tx__pb2


class MsgStub(object):
    """Msg defines the oracle Msg service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IssueToken = channel.unary_unary(
                '/irismod.token.Msg/IssueToken',
                request_serializer=irismod_dot_token_dot_tx__pb2.MsgIssueToken.SerializeToString,
                response_deserializer=irismod_dot_token_dot_tx__pb2.MsgIssueTokenResponse.FromString,
                )
        self.EditToken = channel.unary_unary(
                '/irismod.token.Msg/EditToken',
                request_serializer=irismod_dot_token_dot_tx__pb2.MsgEditToken.SerializeToString,
                response_deserializer=irismod_dot_token_dot_tx__pb2.MsgEditTokenResponse.FromString,
                )
        self.MintToken = channel.unary_unary(
                '/irismod.token.Msg/MintToken',
                request_serializer=irismod_dot_token_dot_tx__pb2.MsgMintToken.SerializeToString,
                response_deserializer=irismod_dot_token_dot_tx__pb2.MsgMintTokenResponse.FromString,
                )
        self.BurnToken = channel.unary_unary(
                '/irismod.token.Msg/BurnToken',
                request_serializer=irismod_dot_token_dot_tx__pb2.MsgBurnToken.SerializeToString,
                response_deserializer=irismod_dot_token_dot_tx__pb2.MsgBurnTokenResponse.FromString,
                )
        self.TransferTokenOwner = channel.unary_unary(
                '/irismod.token.Msg/TransferTokenOwner',
                request_serializer=irismod_dot_token_dot_tx__pb2.MsgTransferTokenOwner.SerializeToString,
                response_deserializer=irismod_dot_token_dot_tx__pb2.MsgTransferTokenOwnerResponse.FromString,
                )


class MsgServicer(object):
    """Msg defines the oracle Msg service
    """

    def IssueToken(self, request, context):
        """IssueToken defines a method for issuing a new token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditToken(self, request, context):
        """EditToken defines a method for editing a token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MintToken(self, request, context):
        """MintToken defines a method for minting some tokens
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BurnToken(self, request, context):
        """BurnToken defines a method for burning some tokens
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransferTokenOwner(self, request, context):
        """TransferTokenOwner defines a method for minting some tokens
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MsgServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IssueToken': grpc.unary_unary_rpc_method_handler(
                    servicer.IssueToken,
                    request_deserializer=irismod_dot_token_dot_tx__pb2.MsgIssueToken.FromString,
                    response_serializer=irismod_dot_token_dot_tx__pb2.MsgIssueTokenResponse.SerializeToString,
            ),
            'EditToken': grpc.unary_unary_rpc_method_handler(
                    servicer.EditToken,
                    request_deserializer=irismod_dot_token_dot_tx__pb2.MsgEditToken.FromString,
                    response_serializer=irismod_dot_token_dot_tx__pb2.MsgEditTokenResponse.SerializeToString,
            ),
            'MintToken': grpc.unary_unary_rpc_method_handler(
                    servicer.MintToken,
                    request_deserializer=irismod_dot_token_dot_tx__pb2.MsgMintToken.FromString,
                    response_serializer=irismod_dot_token_dot_tx__pb2.MsgMintTokenResponse.SerializeToString,
            ),
            'BurnToken': grpc.unary_unary_rpc_method_handler(
                    servicer.BurnToken,
                    request_deserializer=irismod_dot_token_dot_tx__pb2.MsgBurnToken.FromString,
                    response_serializer=irismod_dot_token_dot_tx__pb2.MsgBurnTokenResponse.SerializeToString,
            ),
            'TransferTokenOwner': grpc.unary_unary_rpc_method_handler(
                    servicer.TransferTokenOwner,
                    request_deserializer=irismod_dot_token_dot_tx__pb2.MsgTransferTokenOwner.FromString,
                    response_serializer=irismod_dot_token_dot_tx__pb2.MsgTransferTokenOwnerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'irismod.token.Msg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Msg(object):
    """Msg defines the oracle Msg service
    """

    @staticmethod
    def IssueToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.token.Msg/IssueToken',
            irismod_dot_token_dot_tx__pb2.MsgIssueToken.SerializeToString,
            irismod_dot_token_dot_tx__pb2.MsgIssueTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EditToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.token.Msg/EditToken',
            irismod_dot_token_dot_tx__pb2.MsgEditToken.SerializeToString,
            irismod_dot_token_dot_tx__pb2.MsgEditTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MintToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.token.Msg/MintToken',
            irismod_dot_token_dot_tx__pb2.MsgMintToken.SerializeToString,
            irismod_dot_token_dot_tx__pb2.MsgMintTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BurnToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.token.Msg/BurnToken',
            irismod_dot_token_dot_tx__pb2.MsgBurnToken.SerializeToString,
            irismod_dot_token_dot_tx__pb2.MsgBurnTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransferTokenOwner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.token.Msg/TransferTokenOwner',
            irismod_dot_token_dot_tx__pb2.MsgTransferTokenOwner.SerializeToString,
            irismod_dot_token_dot_tx__pb2.MsgTransferTokenOwnerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
