# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from irismod.token import query_pb2 as irismod_dot_token_dot_query__pb2


class QueryStub(object):
    """Query creates service with token as RPC
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Token = channel.unary_unary(
                '/irismod.token.Query/Token',
                request_serializer=irismod_dot_token_dot_query__pb2.QueryTokenRequest.SerializeToString,
                response_deserializer=irismod_dot_token_dot_query__pb2.QueryTokenResponse.FromString,
                )
        self.Tokens = channel.unary_unary(
                '/irismod.token.Query/Tokens',
                request_serializer=irismod_dot_token_dot_query__pb2.QueryTokensRequest.SerializeToString,
                response_deserializer=irismod_dot_token_dot_query__pb2.QueryTokensResponse.FromString,
                )
        self.Fees = channel.unary_unary(
                '/irismod.token.Query/Fees',
                request_serializer=irismod_dot_token_dot_query__pb2.QueryFeesRequest.SerializeToString,
                response_deserializer=irismod_dot_token_dot_query__pb2.QueryFeesResponse.FromString,
                )
        self.Params = channel.unary_unary(
                '/irismod.token.Query/Params',
                request_serializer=irismod_dot_token_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=irismod_dot_token_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.TotalBurn = channel.unary_unary(
                '/irismod.token.Query/TotalBurn',
                request_serializer=irismod_dot_token_dot_query__pb2.QueryTotalBurnRequest.SerializeToString,
                response_deserializer=irismod_dot_token_dot_query__pb2.QueryTotalBurnResponse.FromString,
                )


class QueryServicer(object):
    """Query creates service with token as RPC
    """

    def Token(self, request, context):
        """Token returns token with token name
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Tokens(self, request, context):
        """Tokens returns the token list
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Fees(self, request, context):
        """Fees returns the fees to issue or mint a token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Params(self, request, context):
        """Params queries the token parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TotalBurn(self, request, context):
        """TotalBurn queries all the burnt coins
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Token': grpc.unary_unary_rpc_method_handler(
                    servicer.Token,
                    request_deserializer=irismod_dot_token_dot_query__pb2.QueryTokenRequest.FromString,
                    response_serializer=irismod_dot_token_dot_query__pb2.QueryTokenResponse.SerializeToString,
            ),
            'Tokens': grpc.unary_unary_rpc_method_handler(
                    servicer.Tokens,
                    request_deserializer=irismod_dot_token_dot_query__pb2.QueryTokensRequest.FromString,
                    response_serializer=irismod_dot_token_dot_query__pb2.QueryTokensResponse.SerializeToString,
            ),
            'Fees': grpc.unary_unary_rpc_method_handler(
                    servicer.Fees,
                    request_deserializer=irismod_dot_token_dot_query__pb2.QueryFeesRequest.FromString,
                    response_serializer=irismod_dot_token_dot_query__pb2.QueryFeesResponse.SerializeToString,
            ),
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=irismod_dot_token_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=irismod_dot_token_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'TotalBurn': grpc.unary_unary_rpc_method_handler(
                    servicer.TotalBurn,
                    request_deserializer=irismod_dot_token_dot_query__pb2.QueryTotalBurnRequest.FromString,
                    response_serializer=irismod_dot_token_dot_query__pb2.QueryTotalBurnResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'irismod.token.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query creates service with token as RPC
    """

    @staticmethod
    def Token(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.token.Query/Token',
            irismod_dot_token_dot_query__pb2.QueryTokenRequest.SerializeToString,
            irismod_dot_token_dot_query__pb2.QueryTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Tokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.token.Query/Tokens',
            irismod_dot_token_dot_query__pb2.QueryTokensRequest.SerializeToString,
            irismod_dot_token_dot_query__pb2.QueryTokensResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Fees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.token.Query/Fees',
            irismod_dot_token_dot_query__pb2.QueryFeesRequest.SerializeToString,
            irismod_dot_token_dot_query__pb2.QueryFeesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.token.Query/Params',
            irismod_dot_token_dot_query__pb2.QueryParamsRequest.SerializeToString,
            irismod_dot_token_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TotalBurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.token.Query/TotalBurn',
            irismod_dot_token_dot_query__pb2.QueryTotalBurnRequest.SerializeToString,
            irismod_dot_token_dot_query__pb2.QueryTotalBurnResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
