# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from irismod.service import query_pb2 as irismod_dot_service_dot_query__pb2


class QueryStub(object):
    """Query creates service with iservice as rpc
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Definition = channel.unary_unary(
                '/irismod.service.Query/Definition',
                request_serializer=irismod_dot_service_dot_query__pb2.QueryDefinitionRequest.SerializeToString,
                response_deserializer=irismod_dot_service_dot_query__pb2.QueryDefinitionResponse.FromString,
                )
        self.Binding = channel.unary_unary(
                '/irismod.service.Query/Binding',
                request_serializer=irismod_dot_service_dot_query__pb2.QueryBindingRequest.SerializeToString,
                response_deserializer=irismod_dot_service_dot_query__pb2.QueryBindingResponse.FromString,
                )
        self.Bindings = channel.unary_unary(
                '/irismod.service.Query/Bindings',
                request_serializer=irismod_dot_service_dot_query__pb2.QueryBindingsRequest.SerializeToString,
                response_deserializer=irismod_dot_service_dot_query__pb2.QueryBindingsResponse.FromString,
                )
        self.WithdrawAddress = channel.unary_unary(
                '/irismod.service.Query/WithdrawAddress',
                request_serializer=irismod_dot_service_dot_query__pb2.QueryWithdrawAddressRequest.SerializeToString,
                response_deserializer=irismod_dot_service_dot_query__pb2.QueryWithdrawAddressResponse.FromString,
                )
        self.RequestContext = channel.unary_unary(
                '/irismod.service.Query/RequestContext',
                request_serializer=irismod_dot_service_dot_query__pb2.QueryRequestContextRequest.SerializeToString,
                response_deserializer=irismod_dot_service_dot_query__pb2.QueryRequestContextResponse.FromString,
                )
        self.Request = channel.unary_unary(
                '/irismod.service.Query/Request',
                request_serializer=irismod_dot_service_dot_query__pb2.QueryRequestRequest.SerializeToString,
                response_deserializer=irismod_dot_service_dot_query__pb2.QueryRequestResponse.FromString,
                )
        self.Requests = channel.unary_unary(
                '/irismod.service.Query/Requests',
                request_serializer=irismod_dot_service_dot_query__pb2.QueryRequestsRequest.SerializeToString,
                response_deserializer=irismod_dot_service_dot_query__pb2.QueryRequestsResponse.FromString,
                )
        self.RequestsByReqCtx = channel.unary_unary(
                '/irismod.service.Query/RequestsByReqCtx',
                request_serializer=irismod_dot_service_dot_query__pb2.QueryRequestsByReqCtxRequest.SerializeToString,
                response_deserializer=irismod_dot_service_dot_query__pb2.QueryRequestsByReqCtxResponse.FromString,
                )
        self.Response = channel.unary_unary(
                '/irismod.service.Query/Response',
                request_serializer=irismod_dot_service_dot_query__pb2.QueryResponseRequest.SerializeToString,
                response_deserializer=irismod_dot_service_dot_query__pb2.QueryResponseResponse.FromString,
                )
        self.Responses = channel.unary_unary(
                '/irismod.service.Query/Responses',
                request_serializer=irismod_dot_service_dot_query__pb2.QueryResponsesRequest.SerializeToString,
                response_deserializer=irismod_dot_service_dot_query__pb2.QueryResponsesResponse.FromString,
                )
        self.EarnedFees = channel.unary_unary(
                '/irismod.service.Query/EarnedFees',
                request_serializer=irismod_dot_service_dot_query__pb2.QueryEarnedFeesRequest.SerializeToString,
                response_deserializer=irismod_dot_service_dot_query__pb2.QueryEarnedFeesResponse.FromString,
                )
        self.Schema = channel.unary_unary(
                '/irismod.service.Query/Schema',
                request_serializer=irismod_dot_service_dot_query__pb2.QuerySchemaRequest.SerializeToString,
                response_deserializer=irismod_dot_service_dot_query__pb2.QuerySchemaResponse.FromString,
                )
        self.Params = channel.unary_unary(
                '/irismod.service.Query/Params',
                request_serializer=irismod_dot_service_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=irismod_dot_service_dot_query__pb2.QueryParamsResponse.FromString,
                )


class QueryServicer(object):
    """Query creates service with iservice as rpc
    """

    def Definition(self, request, context):
        """Definition returns service definition
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Binding(self, request, context):
        """Binding returns service Binding with service name and provider
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Bindings(self, request, context):
        """Bindings returns all service Bindings with service name and owner
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WithdrawAddress(self, request, context):
        """WithdrawAddress returns the withdraw address of the binding owner
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestContext(self, request, context):
        """RequestContext returns the request context
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Request(self, request, context):
        """Request returns the request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Requests(self, request, context):
        """Request returns all requests of one service with provider
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestsByReqCtx(self, request, context):
        """RequestsByReqCtx returns all requests of one service call batch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Response(self, request, context):
        """Response returns the response of request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Responses(self, request, context):
        """Responses returns all responses of one service call batch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EarnedFees(self, request, context):
        """EarnedFees returns the earned service fee of one provider
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Schema(self, request, context):
        """Schema returns the schema
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Params(self, request, context):
        """Params queries the service parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Definition': grpc.unary_unary_rpc_method_handler(
                    servicer.Definition,
                    request_deserializer=irismod_dot_service_dot_query__pb2.QueryDefinitionRequest.FromString,
                    response_serializer=irismod_dot_service_dot_query__pb2.QueryDefinitionResponse.SerializeToString,
            ),
            'Binding': grpc.unary_unary_rpc_method_handler(
                    servicer.Binding,
                    request_deserializer=irismod_dot_service_dot_query__pb2.QueryBindingRequest.FromString,
                    response_serializer=irismod_dot_service_dot_query__pb2.QueryBindingResponse.SerializeToString,
            ),
            'Bindings': grpc.unary_unary_rpc_method_handler(
                    servicer.Bindings,
                    request_deserializer=irismod_dot_service_dot_query__pb2.QueryBindingsRequest.FromString,
                    response_serializer=irismod_dot_service_dot_query__pb2.QueryBindingsResponse.SerializeToString,
            ),
            'WithdrawAddress': grpc.unary_unary_rpc_method_handler(
                    servicer.WithdrawAddress,
                    request_deserializer=irismod_dot_service_dot_query__pb2.QueryWithdrawAddressRequest.FromString,
                    response_serializer=irismod_dot_service_dot_query__pb2.QueryWithdrawAddressResponse.SerializeToString,
            ),
            'RequestContext': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestContext,
                    request_deserializer=irismod_dot_service_dot_query__pb2.QueryRequestContextRequest.FromString,
                    response_serializer=irismod_dot_service_dot_query__pb2.QueryRequestContextResponse.SerializeToString,
            ),
            'Request': grpc.unary_unary_rpc_method_handler(
                    servicer.Request,
                    request_deserializer=irismod_dot_service_dot_query__pb2.QueryRequestRequest.FromString,
                    response_serializer=irismod_dot_service_dot_query__pb2.QueryRequestResponse.SerializeToString,
            ),
            'Requests': grpc.unary_unary_rpc_method_handler(
                    servicer.Requests,
                    request_deserializer=irismod_dot_service_dot_query__pb2.QueryRequestsRequest.FromString,
                    response_serializer=irismod_dot_service_dot_query__pb2.QueryRequestsResponse.SerializeToString,
            ),
            'RequestsByReqCtx': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestsByReqCtx,
                    request_deserializer=irismod_dot_service_dot_query__pb2.QueryRequestsByReqCtxRequest.FromString,
                    response_serializer=irismod_dot_service_dot_query__pb2.QueryRequestsByReqCtxResponse.SerializeToString,
            ),
            'Response': grpc.unary_unary_rpc_method_handler(
                    servicer.Response,
                    request_deserializer=irismod_dot_service_dot_query__pb2.QueryResponseRequest.FromString,
                    response_serializer=irismod_dot_service_dot_query__pb2.QueryResponseResponse.SerializeToString,
            ),
            'Responses': grpc.unary_unary_rpc_method_handler(
                    servicer.Responses,
                    request_deserializer=irismod_dot_service_dot_query__pb2.QueryResponsesRequest.FromString,
                    response_serializer=irismod_dot_service_dot_query__pb2.QueryResponsesResponse.SerializeToString,
            ),
            'EarnedFees': grpc.unary_unary_rpc_method_handler(
                    servicer.EarnedFees,
                    request_deserializer=irismod_dot_service_dot_query__pb2.QueryEarnedFeesRequest.FromString,
                    response_serializer=irismod_dot_service_dot_query__pb2.QueryEarnedFeesResponse.SerializeToString,
            ),
            'Schema': grpc.unary_unary_rpc_method_handler(
                    servicer.Schema,
                    request_deserializer=irismod_dot_service_dot_query__pb2.QuerySchemaRequest.FromString,
                    response_serializer=irismod_dot_service_dot_query__pb2.QuerySchemaResponse.SerializeToString,
            ),
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=irismod_dot_service_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=irismod_dot_service_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'irismod.service.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query creates service with iservice as rpc
    """

    @staticmethod
    def Definition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.service.Query/Definition',
            irismod_dot_service_dot_query__pb2.QueryDefinitionRequest.SerializeToString,
            irismod_dot_service_dot_query__pb2.QueryDefinitionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Binding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.service.Query/Binding',
            irismod_dot_service_dot_query__pb2.QueryBindingRequest.SerializeToString,
            irismod_dot_service_dot_query__pb2.QueryBindingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Bindings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.service.Query/Bindings',
            irismod_dot_service_dot_query__pb2.QueryBindingsRequest.SerializeToString,
            irismod_dot_service_dot_query__pb2.QueryBindingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WithdrawAddress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.service.Query/WithdrawAddress',
            irismod_dot_service_dot_query__pb2.QueryWithdrawAddressRequest.SerializeToString,
            irismod_dot_service_dot_query__pb2.QueryWithdrawAddressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestContext(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.service.Query/RequestContext',
            irismod_dot_service_dot_query__pb2.QueryRequestContextRequest.SerializeToString,
            irismod_dot_service_dot_query__pb2.QueryRequestContextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Request(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.service.Query/Request',
            irismod_dot_service_dot_query__pb2.QueryRequestRequest.SerializeToString,
            irismod_dot_service_dot_query__pb2.QueryRequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Requests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.service.Query/Requests',
            irismod_dot_service_dot_query__pb2.QueryRequestsRequest.SerializeToString,
            irismod_dot_service_dot_query__pb2.QueryRequestsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestsByReqCtx(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.service.Query/RequestsByReqCtx',
            irismod_dot_service_dot_query__pb2.QueryRequestsByReqCtxRequest.SerializeToString,
            irismod_dot_service_dot_query__pb2.QueryRequestsByReqCtxResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Response(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.service.Query/Response',
            irismod_dot_service_dot_query__pb2.QueryResponseRequest.SerializeToString,
            irismod_dot_service_dot_query__pb2.QueryResponseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Responses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.service.Query/Responses',
            irismod_dot_service_dot_query__pb2.QueryResponsesRequest.SerializeToString,
            irismod_dot_service_dot_query__pb2.QueryResponsesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EarnedFees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.service.Query/EarnedFees',
            irismod_dot_service_dot_query__pb2.QueryEarnedFeesRequest.SerializeToString,
            irismod_dot_service_dot_query__pb2.QueryEarnedFeesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Schema(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.service.Query/Schema',
            irismod_dot_service_dot_query__pb2.QuerySchemaRequest.SerializeToString,
            irismod_dot_service_dot_query__pb2.QuerySchemaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.service.Query/Params',
            irismod_dot_service_dot_query__pb2.QueryParamsRequest.SerializeToString,
            irismod_dot_service_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
