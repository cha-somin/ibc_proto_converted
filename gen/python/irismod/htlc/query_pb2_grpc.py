# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from irismod.htlc import query_pb2 as irismod_dot_htlc_dot_query__pb2


class QueryStub(object):
    """Query provides defines the gRPC querier service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HTLC = channel.unary_unary(
                '/irismod.htlc.Query/HTLC',
                request_serializer=irismod_dot_htlc_dot_query__pb2.QueryHTLCRequest.SerializeToString,
                response_deserializer=irismod_dot_htlc_dot_query__pb2.QueryHTLCResponse.FromString,
                )
        self.AssetSupply = channel.unary_unary(
                '/irismod.htlc.Query/AssetSupply',
                request_serializer=irismod_dot_htlc_dot_query__pb2.QueryAssetSupplyRequest.SerializeToString,
                response_deserializer=irismod_dot_htlc_dot_query__pb2.QueryAssetSupplyResponse.FromString,
                )
        self.AssetSupplies = channel.unary_unary(
                '/irismod.htlc.Query/AssetSupplies',
                request_serializer=irismod_dot_htlc_dot_query__pb2.QueryAssetSuppliesRequest.SerializeToString,
                response_deserializer=irismod_dot_htlc_dot_query__pb2.QueryAssetSuppliesResponse.FromString,
                )
        self.Params = channel.unary_unary(
                '/irismod.htlc.Query/Params',
                request_serializer=irismod_dot_htlc_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=irismod_dot_htlc_dot_query__pb2.QueryParamsResponse.FromString,
                )


class QueryServicer(object):
    """Query provides defines the gRPC querier service
    """

    def HTLC(self, request, context):
        """HTLC queries the HTLC by the specified hash lock
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssetSupply(self, request, context):
        """AssetSupply queries the supply of an asset
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssetSupplies(self, request, context):
        """AssetSupplies queries the supplies of all assets
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Params(self, request, context):
        """Params queries the htlc parameters
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HTLC': grpc.unary_unary_rpc_method_handler(
                    servicer.HTLC,
                    request_deserializer=irismod_dot_htlc_dot_query__pb2.QueryHTLCRequest.FromString,
                    response_serializer=irismod_dot_htlc_dot_query__pb2.QueryHTLCResponse.SerializeToString,
            ),
            'AssetSupply': grpc.unary_unary_rpc_method_handler(
                    servicer.AssetSupply,
                    request_deserializer=irismod_dot_htlc_dot_query__pb2.QueryAssetSupplyRequest.FromString,
                    response_serializer=irismod_dot_htlc_dot_query__pb2.QueryAssetSupplyResponse.SerializeToString,
            ),
            'AssetSupplies': grpc.unary_unary_rpc_method_handler(
                    servicer.AssetSupplies,
                    request_deserializer=irismod_dot_htlc_dot_query__pb2.QueryAssetSuppliesRequest.FromString,
                    response_serializer=irismod_dot_htlc_dot_query__pb2.QueryAssetSuppliesResponse.SerializeToString,
            ),
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=irismod_dot_htlc_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=irismod_dot_htlc_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'irismod.htlc.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query provides defines the gRPC querier service
    """

    @staticmethod
    def HTLC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.htlc.Query/HTLC',
            irismod_dot_htlc_dot_query__pb2.QueryHTLCRequest.SerializeToString,
            irismod_dot_htlc_dot_query__pb2.QueryHTLCResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AssetSupply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.htlc.Query/AssetSupply',
            irismod_dot_htlc_dot_query__pb2.QueryAssetSupplyRequest.SerializeToString,
            irismod_dot_htlc_dot_query__pb2.QueryAssetSupplyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AssetSupplies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.htlc.Query/AssetSupplies',
            irismod_dot_htlc_dot_query__pb2.QueryAssetSuppliesRequest.SerializeToString,
            irismod_dot_htlc_dot_query__pb2.QueryAssetSuppliesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/irismod.htlc.Query/Params',
            irismod_dot_htlc_dot_query__pb2.QueryParamsRequest.SerializeToString,
            irismod_dot_htlc_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
