# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from shentu.cert.v1alpha1 import query_pb2 as shentu_dot_cert_dot_v1alpha1_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service for cert module.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Certifier = channel.unary_unary(
                '/shentu.cert.v1alpha1.Query/Certifier',
                request_serializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertifierRequest.SerializeToString,
                response_deserializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertifierResponse.FromString,
                )
        self.Certifiers = channel.unary_unary(
                '/shentu.cert.v1alpha1.Query/Certifiers',
                request_serializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertifiersRequest.SerializeToString,
                response_deserializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertifiersResponse.FromString,
                )
        self.Platform = channel.unary_unary(
                '/shentu.cert.v1alpha1.Query/Platform',
                request_serializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryPlatformRequest.SerializeToString,
                response_deserializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryPlatformResponse.FromString,
                )
        self.Certificate = channel.unary_unary(
                '/shentu.cert.v1alpha1.Query/Certificate',
                request_serializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertificateRequest.SerializeToString,
                response_deserializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertificateResponse.FromString,
                )
        self.Certificates = channel.unary_unary(
                '/shentu.cert.v1alpha1.Query/Certificates',
                request_serializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertificatesRequest.SerializeToString,
                response_deserializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertificatesResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service for cert module.
    """

    def Certifier(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Certifiers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Platform(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Certificate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Certificates(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Certifier': grpc.unary_unary_rpc_method_handler(
                    servicer.Certifier,
                    request_deserializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertifierRequest.FromString,
                    response_serializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertifierResponse.SerializeToString,
            ),
            'Certifiers': grpc.unary_unary_rpc_method_handler(
                    servicer.Certifiers,
                    request_deserializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertifiersRequest.FromString,
                    response_serializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertifiersResponse.SerializeToString,
            ),
            'Platform': grpc.unary_unary_rpc_method_handler(
                    servicer.Platform,
                    request_deserializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryPlatformRequest.FromString,
                    response_serializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryPlatformResponse.SerializeToString,
            ),
            'Certificate': grpc.unary_unary_rpc_method_handler(
                    servicer.Certificate,
                    request_deserializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertificateRequest.FromString,
                    response_serializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertificateResponse.SerializeToString,
            ),
            'Certificates': grpc.unary_unary_rpc_method_handler(
                    servicer.Certificates,
                    request_deserializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertificatesRequest.FromString,
                    response_serializer=shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertificatesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'shentu.cert.v1alpha1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service for cert module.
    """

    @staticmethod
    def Certifier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shentu.cert.v1alpha1.Query/Certifier',
            shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertifierRequest.SerializeToString,
            shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertifierResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Certifiers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shentu.cert.v1alpha1.Query/Certifiers',
            shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertifiersRequest.SerializeToString,
            shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertifiersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Platform(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shentu.cert.v1alpha1.Query/Platform',
            shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryPlatformRequest.SerializeToString,
            shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryPlatformResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Certificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shentu.cert.v1alpha1.Query/Certificate',
            shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertificateRequest.SerializeToString,
            shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertificateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Certificates(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/shentu.cert.v1alpha1.Query/Certificates',
            shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertificatesRequest.SerializeToString,
            shentu_dot_cert_dot_v1alpha1_dot_query__pb2.QueryCertificatesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
