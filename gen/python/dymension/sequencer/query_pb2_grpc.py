# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from dymension.sequencer import query_pb2 as dymension_dot_sequencer_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/dymensionxyz.dymension.sequencer.Query/Params',
                request_serializer=dymension_dot_sequencer_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=dymension_dot_sequencer_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.Sequencer = channel.unary_unary(
                '/dymensionxyz.dymension.sequencer.Query/Sequencer',
                request_serializer=dymension_dot_sequencer_dot_query__pb2.QueryGetSequencerRequest.SerializeToString,
                response_deserializer=dymension_dot_sequencer_dot_query__pb2.QueryGetSequencerResponse.FromString,
                )
        self.SequencerAll = channel.unary_unary(
                '/dymensionxyz.dymension.sequencer.Query/SequencerAll',
                request_serializer=dymension_dot_sequencer_dot_query__pb2.QueryAllSequencerRequest.SerializeToString,
                response_deserializer=dymension_dot_sequencer_dot_query__pb2.QueryAllSequencerResponse.FromString,
                )
        self.SequencersByRollapp = channel.unary_unary(
                '/dymensionxyz.dymension.sequencer.Query/SequencersByRollapp',
                request_serializer=dymension_dot_sequencer_dot_query__pb2.QueryGetSequencersByRollappRequest.SerializeToString,
                response_deserializer=dymension_dot_sequencer_dot_query__pb2.QueryGetSequencersByRollappResponse.FromString,
                )
        self.SequencersByRollappAll = channel.unary_unary(
                '/dymensionxyz.dymension.sequencer.Query/SequencersByRollappAll',
                request_serializer=dymension_dot_sequencer_dot_query__pb2.QueryAllSequencersByRollappRequest.SerializeToString,
                response_deserializer=dymension_dot_sequencer_dot_query__pb2.QueryAllSequencersByRollappResponse.FromString,
                )
        self.Scheduler = channel.unary_unary(
                '/dymensionxyz.dymension.sequencer.Query/Scheduler',
                request_serializer=dymension_dot_sequencer_dot_query__pb2.QueryGetSchedulerRequest.SerializeToString,
                response_deserializer=dymension_dot_sequencer_dot_query__pb2.QueryGetSchedulerResponse.FromString,
                )
        self.SchedulerAll = channel.unary_unary(
                '/dymensionxyz.dymension.sequencer.Query/SchedulerAll',
                request_serializer=dymension_dot_sequencer_dot_query__pb2.QueryAllSchedulerRequest.SerializeToString,
                response_deserializer=dymension_dot_sequencer_dot_query__pb2.QueryAllSchedulerResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def Params(self, request, context):
        """Parameters queries the parameters of the module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Sequencer(self, request, context):
        """Queries a Sequencer by index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SequencerAll(self, request, context):
        """Queries a list of Sequencer items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SequencersByRollapp(self, request, context):
        """Queries a SequencersByRollapp by index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SequencersByRollappAll(self, request, context):
        """Queries a list of SequencersByRollapp items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Scheduler(self, request, context):
        """Queries a Scheduler by index.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SchedulerAll(self, request, context):
        """Queries a list of Scheduler items.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=dymension_dot_sequencer_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=dymension_dot_sequencer_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'Sequencer': grpc.unary_unary_rpc_method_handler(
                    servicer.Sequencer,
                    request_deserializer=dymension_dot_sequencer_dot_query__pb2.QueryGetSequencerRequest.FromString,
                    response_serializer=dymension_dot_sequencer_dot_query__pb2.QueryGetSequencerResponse.SerializeToString,
            ),
            'SequencerAll': grpc.unary_unary_rpc_method_handler(
                    servicer.SequencerAll,
                    request_deserializer=dymension_dot_sequencer_dot_query__pb2.QueryAllSequencerRequest.FromString,
                    response_serializer=dymension_dot_sequencer_dot_query__pb2.QueryAllSequencerResponse.SerializeToString,
            ),
            'SequencersByRollapp': grpc.unary_unary_rpc_method_handler(
                    servicer.SequencersByRollapp,
                    request_deserializer=dymension_dot_sequencer_dot_query__pb2.QueryGetSequencersByRollappRequest.FromString,
                    response_serializer=dymension_dot_sequencer_dot_query__pb2.QueryGetSequencersByRollappResponse.SerializeToString,
            ),
            'SequencersByRollappAll': grpc.unary_unary_rpc_method_handler(
                    servicer.SequencersByRollappAll,
                    request_deserializer=dymension_dot_sequencer_dot_query__pb2.QueryAllSequencersByRollappRequest.FromString,
                    response_serializer=dymension_dot_sequencer_dot_query__pb2.QueryAllSequencersByRollappResponse.SerializeToString,
            ),
            'Scheduler': grpc.unary_unary_rpc_method_handler(
                    servicer.Scheduler,
                    request_deserializer=dymension_dot_sequencer_dot_query__pb2.QueryGetSchedulerRequest.FromString,
                    response_serializer=dymension_dot_sequencer_dot_query__pb2.QueryGetSchedulerResponse.SerializeToString,
            ),
            'SchedulerAll': grpc.unary_unary_rpc_method_handler(
                    servicer.SchedulerAll,
                    request_deserializer=dymension_dot_sequencer_dot_query__pb2.QueryAllSchedulerRequest.FromString,
                    response_serializer=dymension_dot_sequencer_dot_query__pb2.QueryAllSchedulerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dymensionxyz.dymension.sequencer.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dymensionxyz.dymension.sequencer.Query/Params',
            dymension_dot_sequencer_dot_query__pb2.QueryParamsRequest.SerializeToString,
            dymension_dot_sequencer_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Sequencer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dymensionxyz.dymension.sequencer.Query/Sequencer',
            dymension_dot_sequencer_dot_query__pb2.QueryGetSequencerRequest.SerializeToString,
            dymension_dot_sequencer_dot_query__pb2.QueryGetSequencerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SequencerAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dymensionxyz.dymension.sequencer.Query/SequencerAll',
            dymension_dot_sequencer_dot_query__pb2.QueryAllSequencerRequest.SerializeToString,
            dymension_dot_sequencer_dot_query__pb2.QueryAllSequencerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SequencersByRollapp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dymensionxyz.dymension.sequencer.Query/SequencersByRollapp',
            dymension_dot_sequencer_dot_query__pb2.QueryGetSequencersByRollappRequest.SerializeToString,
            dymension_dot_sequencer_dot_query__pb2.QueryGetSequencersByRollappResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SequencersByRollappAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dymensionxyz.dymension.sequencer.Query/SequencersByRollappAll',
            dymension_dot_sequencer_dot_query__pb2.QueryAllSequencersByRollappRequest.SerializeToString,
            dymension_dot_sequencer_dot_query__pb2.QueryAllSequencersByRollappResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Scheduler(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dymensionxyz.dymension.sequencer.Query/Scheduler',
            dymension_dot_sequencer_dot_query__pb2.QueryGetSchedulerRequest.SerializeToString,
            dymension_dot_sequencer_dot_query__pb2.QueryGetSchedulerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SchedulerAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dymensionxyz.dymension.sequencer.Query/SchedulerAll',
            dymension_dot_sequencer_dot_query__pb2.QueryAllSchedulerRequest.SerializeToString,
            dymension_dot_sequencer_dot_query__pb2.QueryAllSchedulerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
