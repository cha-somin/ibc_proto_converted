# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from dymension.streamer import query_pb2 as dymension_dot_streamer_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ModuleToDistributeCoins = channel.unary_unary(
                '/dymensionxyz.dymension.streamer.Query/ModuleToDistributeCoins',
                request_serializer=dymension_dot_streamer_dot_query__pb2.ModuleToDistributeCoinsRequest.SerializeToString,
                response_deserializer=dymension_dot_streamer_dot_query__pb2.ModuleToDistributeCoinsResponse.FromString,
                )
        self.StreamByID = channel.unary_unary(
                '/dymensionxyz.dymension.streamer.Query/StreamByID',
                request_serializer=dymension_dot_streamer_dot_query__pb2.StreamByIDRequest.SerializeToString,
                response_deserializer=dymension_dot_streamer_dot_query__pb2.StreamByIDResponse.FromString,
                )
        self.Streams = channel.unary_unary(
                '/dymensionxyz.dymension.streamer.Query/Streams',
                request_serializer=dymension_dot_streamer_dot_query__pb2.StreamsRequest.SerializeToString,
                response_deserializer=dymension_dot_streamer_dot_query__pb2.StreamsResponse.FromString,
                )
        self.ActiveStreams = channel.unary_unary(
                '/dymensionxyz.dymension.streamer.Query/ActiveStreams',
                request_serializer=dymension_dot_streamer_dot_query__pb2.ActiveStreamsRequest.SerializeToString,
                response_deserializer=dymension_dot_streamer_dot_query__pb2.ActiveStreamsResponse.FromString,
                )
        self.UpcomingStreams = channel.unary_unary(
                '/dymensionxyz.dymension.streamer.Query/UpcomingStreams',
                request_serializer=dymension_dot_streamer_dot_query__pb2.UpcomingStreamsRequest.SerializeToString,
                response_deserializer=dymension_dot_streamer_dot_query__pb2.UpcomingStreamsResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service
    """

    def ModuleToDistributeCoins(self, request, context):
        """ModuleToDistributeCoins returns coins that are going to be distributed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamByID(self, request, context):
        """StreamByID returns streams by their respective ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Streams(self, request, context):
        """Streams returns both upcoming and active streams
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActiveStreams(self, request, context):
        """ActiveStreams returns active streams
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpcomingStreams(self, request, context):
        """Returns scheduled streams that have not yet occurred
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ModuleToDistributeCoins': grpc.unary_unary_rpc_method_handler(
                    servicer.ModuleToDistributeCoins,
                    request_deserializer=dymension_dot_streamer_dot_query__pb2.ModuleToDistributeCoinsRequest.FromString,
                    response_serializer=dymension_dot_streamer_dot_query__pb2.ModuleToDistributeCoinsResponse.SerializeToString,
            ),
            'StreamByID': grpc.unary_unary_rpc_method_handler(
                    servicer.StreamByID,
                    request_deserializer=dymension_dot_streamer_dot_query__pb2.StreamByIDRequest.FromString,
                    response_serializer=dymension_dot_streamer_dot_query__pb2.StreamByIDResponse.SerializeToString,
            ),
            'Streams': grpc.unary_unary_rpc_method_handler(
                    servicer.Streams,
                    request_deserializer=dymension_dot_streamer_dot_query__pb2.StreamsRequest.FromString,
                    response_serializer=dymension_dot_streamer_dot_query__pb2.StreamsResponse.SerializeToString,
            ),
            'ActiveStreams': grpc.unary_unary_rpc_method_handler(
                    servicer.ActiveStreams,
                    request_deserializer=dymension_dot_streamer_dot_query__pb2.ActiveStreamsRequest.FromString,
                    response_serializer=dymension_dot_streamer_dot_query__pb2.ActiveStreamsResponse.SerializeToString,
            ),
            'UpcomingStreams': grpc.unary_unary_rpc_method_handler(
                    servicer.UpcomingStreams,
                    request_deserializer=dymension_dot_streamer_dot_query__pb2.UpcomingStreamsRequest.FromString,
                    response_serializer=dymension_dot_streamer_dot_query__pb2.UpcomingStreamsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dymensionxyz.dymension.streamer.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service
    """

    @staticmethod
    def ModuleToDistributeCoins(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dymensionxyz.dymension.streamer.Query/ModuleToDistributeCoins',
            dymension_dot_streamer_dot_query__pb2.ModuleToDistributeCoinsRequest.SerializeToString,
            dymension_dot_streamer_dot_query__pb2.ModuleToDistributeCoinsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dymensionxyz.dymension.streamer.Query/StreamByID',
            dymension_dot_streamer_dot_query__pb2.StreamByIDRequest.SerializeToString,
            dymension_dot_streamer_dot_query__pb2.StreamByIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Streams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dymensionxyz.dymension.streamer.Query/Streams',
            dymension_dot_streamer_dot_query__pb2.StreamsRequest.SerializeToString,
            dymension_dot_streamer_dot_query__pb2.StreamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ActiveStreams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dymensionxyz.dymension.streamer.Query/ActiveStreams',
            dymension_dot_streamer_dot_query__pb2.ActiveStreamsRequest.SerializeToString,
            dymension_dot_streamer_dot_query__pb2.ActiveStreamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpcomingStreams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dymensionxyz.dymension.streamer.Query/UpcomingStreams',
            dymension_dot_streamer_dot_query__pb2.UpcomingStreamsRequest.SerializeToString,
            dymension_dot_streamer_dot_query__pb2.UpcomingStreamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
