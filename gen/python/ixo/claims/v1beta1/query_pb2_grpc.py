# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ixo.claims.v1beta1 import query_pb2 as ixo_dot_claims_dot_v1beta1_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Params = channel.unary_unary(
                '/ixo.claims.v1beta1.Query/Params',
                request_serializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryParamsRequest.SerializeToString,
                response_deserializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryParamsResponse.FromString,
                )
        self.Collection = channel.unary_unary(
                '/ixo.claims.v1beta1.Query/Collection',
                request_serializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryCollectionRequest.SerializeToString,
                response_deserializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryCollectionResponse.FromString,
                )
        self.CollectionList = channel.unary_unary(
                '/ixo.claims.v1beta1.Query/CollectionList',
                request_serializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryCollectionListRequest.SerializeToString,
                response_deserializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryCollectionListResponse.FromString,
                )
        self.Claim = channel.unary_unary(
                '/ixo.claims.v1beta1.Query/Claim',
                request_serializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryClaimRequest.SerializeToString,
                response_deserializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryClaimResponse.FromString,
                )
        self.ClaimList = channel.unary_unary(
                '/ixo.claims.v1beta1.Query/ClaimList',
                request_serializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryClaimListRequest.SerializeToString,
                response_deserializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryClaimListResponse.FromString,
                )
        self.Dispute = channel.unary_unary(
                '/ixo.claims.v1beta1.Query/Dispute',
                request_serializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryDisputeRequest.SerializeToString,
                response_deserializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryDisputeResponse.FromString,
                )
        self.DisputeList = channel.unary_unary(
                '/ixo.claims.v1beta1.Query/DisputeList',
                request_serializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryDisputeListRequest.SerializeToString,
                response_deserializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryDisputeListResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def Params(self, request, context):
        """Parameters queries the parameters of the module.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Collection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CollectionList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Claim(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClaimList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Dispute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisputeList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Params': grpc.unary_unary_rpc_method_handler(
                    servicer.Params,
                    request_deserializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryParamsRequest.FromString,
                    response_serializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryParamsResponse.SerializeToString,
            ),
            'Collection': grpc.unary_unary_rpc_method_handler(
                    servicer.Collection,
                    request_deserializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryCollectionRequest.FromString,
                    response_serializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryCollectionResponse.SerializeToString,
            ),
            'CollectionList': grpc.unary_unary_rpc_method_handler(
                    servicer.CollectionList,
                    request_deserializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryCollectionListRequest.FromString,
                    response_serializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryCollectionListResponse.SerializeToString,
            ),
            'Claim': grpc.unary_unary_rpc_method_handler(
                    servicer.Claim,
                    request_deserializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryClaimRequest.FromString,
                    response_serializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryClaimResponse.SerializeToString,
            ),
            'ClaimList': grpc.unary_unary_rpc_method_handler(
                    servicer.ClaimList,
                    request_deserializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryClaimListRequest.FromString,
                    response_serializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryClaimListResponse.SerializeToString,
            ),
            'Dispute': grpc.unary_unary_rpc_method_handler(
                    servicer.Dispute,
                    request_deserializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryDisputeRequest.FromString,
                    response_serializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryDisputeResponse.SerializeToString,
            ),
            'DisputeList': grpc.unary_unary_rpc_method_handler(
                    servicer.DisputeList,
                    request_deserializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryDisputeListRequest.FromString,
                    response_serializer=ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryDisputeListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ixo.claims.v1beta1.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def Params(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ixo.claims.v1beta1.Query/Params',
            ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryParamsRequest.SerializeToString,
            ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryParamsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Collection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ixo.claims.v1beta1.Query/Collection',
            ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryCollectionRequest.SerializeToString,
            ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryCollectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CollectionList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ixo.claims.v1beta1.Query/CollectionList',
            ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryCollectionListRequest.SerializeToString,
            ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryCollectionListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Claim(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ixo.claims.v1beta1.Query/Claim',
            ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryClaimRequest.SerializeToString,
            ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryClaimResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClaimList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ixo.claims.v1beta1.Query/ClaimList',
            ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryClaimListRequest.SerializeToString,
            ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryClaimListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Dispute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ixo.claims.v1beta1.Query/Dispute',
            ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryDisputeRequest.SerializeToString,
            ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryDisputeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisputeList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ixo.claims.v1beta1.Query/DisputeList',
            ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryDisputeListRequest.SerializeToString,
            ixo_dot_claims_dot_v1beta1_dot_query__pb2.QueryDisputeListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
